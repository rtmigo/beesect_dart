# SPDX-FileCopyrightText: (c) 2019 Art—ëm IG <github.com/rtmigo>
# SPDX-License-Identifier: MIT

from bisect import bisect_right, bisect_left
import datetime
from pathlib import Path

class NamedTest:
    def __init__(self, name):
        self.name = name
    def __enter__(self):
        print(f"\ntest('{self.name}', () "+"{")
    def __exit__(self, _, __, ___):
        print("});")

if __name__ == "__main__":



    A = [0, 1, 2, 2, 2, 2, 3, 3, 5, 6]
    B = []
    C = [3]
    D = [2,3,4]

    NAMED_ARRAYS = {
        'A': A,
        'B': B,
        'C': C,
        'D': D
    }



    ARRAYS = [A,B,C,D]


    print(f"// Generated by {Path(__file__).name} at {datetime.datetime.now()}")

    print("""
import 'package:bisection/bisection.dart';
import 'package:test/test.dart';

val(lst, idx) {
  if (idx<0)
    return null;
  else
    return lst[idx];
}

void main() {
    """)

    for name, arr in NAMED_ARRAYS.items():
        print(f'var {name} = {arr};')

    def gen_bisects():
        def gen_bisect_test(dart_method_name: str, python_func):
            for arr_name, arr in NAMED_ARRAYS.items():
                with NamedTest(f"{dart_method_name} for {arr_name}"):
                    for x in range(-2, 9):
                        print(f"expect({arr_name}.{dart_method_name}({x}), {python_func(arr, x)});")

        gen_bisect_test('bisectRight', python_func=lambda arr, x: bisect_right(arr, x))
        gen_bisect_test('bisectLeft', python_func=lambda arr, x: bisect_left(arr, x))

    gen_bisects()


    def gen_lo():
        def gen_bisect_test_lo(dart_method_name: str, python_func):
            for arr_name, arr in NAMED_ARRAYS.items():
                for lo in range(0, 9):
                    with NamedTest(f"{dart_method_name} for {arr_name}, lo={lo}"):
                        for x in range(-2, 9):
                            print(f"expect({arr_name}.{dart_method_name}({x}, low: {lo}), {python_func(arr, x, lo)});")

        gen_bisect_test_lo('bisectRight', python_func=lambda arr, x, lo: bisect_right(arr, x, lo=lo))
        gen_bisect_test_lo('bisectLeft', python_func=lambda arr, x, lo: bisect_left(arr, x, lo=lo))

    gen_lo()

    def gen_hi():

        def gen_bisect_test_hi(dart_method_name: str, python_func):
            for arr_name, arr in NAMED_ARRAYS.items():
                # when hi > len(arr)+1, it causes IndexError (in Python)
                # when hi < 0, it returns strange results that I failed to make
                # consistent with the Dart code
                for hi in range(0, len(arr)+1):
                    with NamedTest(f"{dart_method_name} for {arr_name}, hi={hi}"):
                        for x in range(-2, 9):
                            print(f"expect({arr_name}.{dart_method_name}({x}, high: {hi}), {python_func(arr, x, hi)});")

        gen_bisect_test_hi('bisectRight', python_func=lambda arr, x, hi: bisect_right(arr, x, hi=hi))
        gen_bisect_test_hi('bisectLeft', python_func=lambda arr, x, hi: bisect_left(arr, x, hi=hi))

    gen_hi()

    def gen_hi_lo():

        def gen_bisect_test_hilo(dart_method_name: str, python_func):
            for arr_name, arr in NAMED_ARRAYS.items():
                for lo in range(0, len(arr)+4):
                    # when hi > len(arr)+1, it causes IndexError
                    # when hi < 0, it returns strange results that I failed to make
                    # consistent with the Dart code
                    for hi in range(0, len(arr)+1): # +2 will raise IndexError
                        with NamedTest(f"{dart_method_name} for {arr_name}, hi={hi}, lo={lo}"):
                            for x in range(-2, 9):
                                print(f"expect({arr_name}.{dart_method_name}({x}, high: {hi}, low: {lo}), {python_func(arr, x, hi, lo)});")

        gen_bisect_test_hilo('bisectRight', python_func=lambda arr, x, hi, lo: bisect_right(arr, x, hi=hi, lo=lo))
        gen_bisect_test_hilo('bisectLeft', python_func=lambda arr, x, hi, lo: bisect_left(arr, x, hi=hi, lo=lo))

    gen_hi_lo()


#     for f in ['bisectRight', 'bisectLeft']:
#         gen_bisect_test_hi(f, python_func=lambda arr, x, hi: bisect_right(arr, x, hi=hi))





#     for idx, arr in enumerate(ARRAYS):
#         with NamedTest(f"bisectRight list{idx}"):
#             print()
#             print(f"final lst={arr};")
#             for x in range(-2, 9):
#                 print(f"expect(lst.bisectRight({x}), {bisect_right(arr, x)});")
#
#     print()
#     for idx, arr in enumerate(ARRAYS):
#         with NamedTest(f"bisectLeft list{idx}"):
#             print(f"final lst={arr};")
#             for x in range(-2, 9):
#                 print(f"expect(lst.bisectLeft({x}), {bisect_left(arr, x)});")

        #print("bisect_right(A,x)")

    ################################################################################

    def index(a, x):
        'Locate the leftmost value exactly equal to x'
        i = bisect_left(a, x)
        if i != len(a) and a[i] == x:
            return i
        return None

    def find_lt(a, x):
        'Find rightmost value less than x'
        i = bisect_left(a, x)
        if i:
            return a[i-1]
        return None

    def find_le(a, x):
        'Find rightmost value less than or equal to x'
        i = bisect_right(a, x)
        if i:
            return a[i-1]
        return None

    def find_gt(a, x):
        'Find leftmost value greater than x'
        i = bisect_right(a, x)
        if i != len(a):
            return a[i]
        return None

    def find_ge(a, x):
        'Find leftmost item greater than or equal to x'
        i = bisect_left(a, x)
        if i != len(a):
            return a[i]
        return None

    ########################################################################################################################

    print()
    for idx, arr in enumerate(ARRAYS):
        with NamedTest(f"bsearch list{idx}"):
            print(f"final lst={arr};")

            for x in range(-2, 9):
                res = index(arr, x)
                print(f"expect(lst.bsearch({x}), {res if res is not None else '-1'});")

    print()
    for idx, arr in enumerate(ARRAYS):
        with NamedTest(f"bsearchLessThan list{idx}"):
            print(f"final lst={arr};")

            for x in range(-2, 9):
                res = find_lt(arr, x)
                print(f"expect(val(lst, lst.bsearchLessThan({x})), {res if res is not None else 'null'});")

    print()
    for idx, arr in enumerate(ARRAYS):
        with NamedTest(f"bsearchLessThanOrEqualTo list{idx}"):
            print(f"final lst={arr};")

            for x in range(-2, 9):
                res = find_le(arr, x)
                print(f"expect(val(lst, lst.bsearchLessThanOrEqualTo({x})), {res if res is not None else 'null'});")

    print()
    for idx, arr in enumerate(ARRAYS):
        with NamedTest(f"bsearchGreaterThan list{idx}"):
            print(f"final lst={arr};")

            for x in range(-2, 9):
                res = find_gt(arr, x)
                print(f"expect(val(lst, lst.bsearchGreaterThan({x})), {res if res is not None else 'null'});")



    for idx, arr in enumerate(ARRAYS):
        with NamedTest(f"bsearchGreaterThanOrEqualTo list{idx}"):
            print(f"final lst={arr};")
            for x in range(-2, 9):
                res = find_ge(arr, x)
                print(f"expect(val(lst, lst.bsearchGreaterThanOrEqualTo({x})), {res if res is not None else 'null'});")

    print("}")