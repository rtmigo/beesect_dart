// Generated by bisect_test_generator_v3.py at 2021-11-16 02:05:42.554452
import 'package:bisection/bisection.dart';
import 'package:test/test.dart';

void main() {
  var A = [];
  var B = [4];
  var C = [4, 5];
  var D = [3, 4, 5];
  var E = [0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
  test('list.bisectRight for A lo=None hi=None', () {
    expect(A.bisectRight(-2), 0);
    expect(A.bisectRight(-1), 0);
    expect(A.bisectRight(0), 0);
    expect(A.bisectRight(1), 0);
    expect(A.bisectRight(2), 0);
    expect(A.bisectRight(3), 0);
    expect(A.bisectRight(4), 0);
    expect(A.bisectRight(5), 0);
    expect(A.bisectRight(6), 0);
    expect(A.bisectRight(7), 0);
    expect(A.bisectRight(8), 0);
  });
  test('list.bisectRight for B lo=None hi=None', () {
    expect(B.bisectRight(-2), 0);
    expect(B.bisectRight(-1), 0);
    expect(B.bisectRight(0), 0);
    expect(B.bisectRight(1), 0);
    expect(B.bisectRight(2), 0);
    expect(B.bisectRight(3), 0);
    expect(B.bisectRight(4), 1);
    expect(B.bisectRight(5), 1);
    expect(B.bisectRight(6), 1);
    expect(B.bisectRight(7), 1);
    expect(B.bisectRight(8), 1);
  });
  test('list.bisectRight for C lo=None hi=None', () {
    expect(C.bisectRight(-2), 0);
    expect(C.bisectRight(-1), 0);
    expect(C.bisectRight(0), 0);
    expect(C.bisectRight(1), 0);
    expect(C.bisectRight(2), 0);
    expect(C.bisectRight(3), 0);
    expect(C.bisectRight(4), 1);
    expect(C.bisectRight(5), 2);
    expect(C.bisectRight(6), 2);
    expect(C.bisectRight(7), 2);
    expect(C.bisectRight(8), 2);
  });
  test('list.bisectRight for D lo=None hi=None', () {
    expect(D.bisectRight(-2), 0);
    expect(D.bisectRight(-1), 0);
    expect(D.bisectRight(0), 0);
    expect(D.bisectRight(1), 0);
    expect(D.bisectRight(2), 0);
    expect(D.bisectRight(3), 1);
    expect(D.bisectRight(4), 2);
    expect(D.bisectRight(5), 3);
    expect(D.bisectRight(6), 3);
    expect(D.bisectRight(7), 3);
    expect(D.bisectRight(8), 3);
  });
  test('list.bisectRight for E lo=None hi=None', () {
    expect(E.bisectRight(-2), 0);
    expect(E.bisectRight(-1), 0);
    expect(E.bisectRight(0), 1);
    expect(E.bisectRight(1), 2);
    expect(E.bisectRight(2), 6);
    expect(E.bisectRight(3), 8);
    expect(E.bisectRight(4), 8);
    expect(E.bisectRight(5), 9);
    expect(E.bisectRight(6), 10);
    expect(E.bisectRight(7), 10);
    expect(E.bisectRight(8), 10);
  });
  test('list.bisectRight for A lo=0 hi=None', () {
    expect(A.bisectRight(-2, low: 0), 0);
    expect(A.bisectRight(-1, low: 0), 0);
    expect(A.bisectRight(0, low: 0), 0);
    expect(A.bisectRight(1, low: 0), 0);
    expect(A.bisectRight(2, low: 0), 0);
    expect(A.bisectRight(3, low: 0), 0);
    expect(A.bisectRight(4, low: 0), 0);
    expect(A.bisectRight(5, low: 0), 0);
    expect(A.bisectRight(6, low: 0), 0);
    expect(A.bisectRight(7, low: 0), 0);
    expect(A.bisectRight(8, low: 0), 0);
  });
  test('list.bisectRight for B lo=0 hi=None', () {
    expect(B.bisectRight(-2, low: 0), 0);
    expect(B.bisectRight(-1, low: 0), 0);
    expect(B.bisectRight(0, low: 0), 0);
    expect(B.bisectRight(1, low: 0), 0);
    expect(B.bisectRight(2, low: 0), 0);
    expect(B.bisectRight(3, low: 0), 0);
    expect(B.bisectRight(4, low: 0), 1);
    expect(B.bisectRight(5, low: 0), 1);
    expect(B.bisectRight(6, low: 0), 1);
    expect(B.bisectRight(7, low: 0), 1);
    expect(B.bisectRight(8, low: 0), 1);
  });
  test('list.bisectRight for C lo=0 hi=None', () {
    expect(C.bisectRight(-2, low: 0), 0);
    expect(C.bisectRight(-1, low: 0), 0);
    expect(C.bisectRight(0, low: 0), 0);
    expect(C.bisectRight(1, low: 0), 0);
    expect(C.bisectRight(2, low: 0), 0);
    expect(C.bisectRight(3, low: 0), 0);
    expect(C.bisectRight(4, low: 0), 1);
    expect(C.bisectRight(5, low: 0), 2);
    expect(C.bisectRight(6, low: 0), 2);
    expect(C.bisectRight(7, low: 0), 2);
    expect(C.bisectRight(8, low: 0), 2);
  });
  test('list.bisectRight for D lo=0 hi=None', () {
    expect(D.bisectRight(-2, low: 0), 0);
    expect(D.bisectRight(-1, low: 0), 0);
    expect(D.bisectRight(0, low: 0), 0);
    expect(D.bisectRight(1, low: 0), 0);
    expect(D.bisectRight(2, low: 0), 0);
    expect(D.bisectRight(3, low: 0), 1);
    expect(D.bisectRight(4, low: 0), 2);
    expect(D.bisectRight(5, low: 0), 3);
    expect(D.bisectRight(6, low: 0), 3);
    expect(D.bisectRight(7, low: 0), 3);
    expect(D.bisectRight(8, low: 0), 3);
  });
  test('list.bisectRight for E lo=0 hi=None', () {
    expect(E.bisectRight(-2, low: 0), 0);
    expect(E.bisectRight(-1, low: 0), 0);
    expect(E.bisectRight(0, low: 0), 1);
    expect(E.bisectRight(1, low: 0), 2);
    expect(E.bisectRight(2, low: 0), 6);
    expect(E.bisectRight(3, low: 0), 8);
    expect(E.bisectRight(4, low: 0), 8);
    expect(E.bisectRight(5, low: 0), 9);
    expect(E.bisectRight(6, low: 0), 10);
    expect(E.bisectRight(7, low: 0), 10);
    expect(E.bisectRight(8, low: 0), 10);
  });
  test('list.bisectRight for A lo=1 hi=None', () {
    expect(A.bisectRight(-2, low: 1), 1);
    expect(A.bisectRight(-1, low: 1), 1);
    expect(A.bisectRight(0, low: 1), 1);
    expect(A.bisectRight(1, low: 1), 1);
    expect(A.bisectRight(2, low: 1), 1);
    expect(A.bisectRight(3, low: 1), 1);
    expect(A.bisectRight(4, low: 1), 1);
    expect(A.bisectRight(5, low: 1), 1);
    expect(A.bisectRight(6, low: 1), 1);
    expect(A.bisectRight(7, low: 1), 1);
    expect(A.bisectRight(8, low: 1), 1);
  });
  test('list.bisectRight for B lo=1 hi=None', () {
    expect(B.bisectRight(-2, low: 1), 1);
    expect(B.bisectRight(-1, low: 1), 1);
    expect(B.bisectRight(0, low: 1), 1);
    expect(B.bisectRight(1, low: 1), 1);
    expect(B.bisectRight(2, low: 1), 1);
    expect(B.bisectRight(3, low: 1), 1);
    expect(B.bisectRight(4, low: 1), 1);
    expect(B.bisectRight(5, low: 1), 1);
    expect(B.bisectRight(6, low: 1), 1);
    expect(B.bisectRight(7, low: 1), 1);
    expect(B.bisectRight(8, low: 1), 1);
  });
  test('list.bisectRight for C lo=1 hi=None', () {
    expect(C.bisectRight(-2, low: 1), 1);
    expect(C.bisectRight(-1, low: 1), 1);
    expect(C.bisectRight(0, low: 1), 1);
    expect(C.bisectRight(1, low: 1), 1);
    expect(C.bisectRight(2, low: 1), 1);
    expect(C.bisectRight(3, low: 1), 1);
    expect(C.bisectRight(4, low: 1), 1);
    expect(C.bisectRight(5, low: 1), 2);
    expect(C.bisectRight(6, low: 1), 2);
    expect(C.bisectRight(7, low: 1), 2);
    expect(C.bisectRight(8, low: 1), 2);
  });
  test('list.bisectRight for D lo=1 hi=None', () {
    expect(D.bisectRight(-2, low: 1), 1);
    expect(D.bisectRight(-1, low: 1), 1);
    expect(D.bisectRight(0, low: 1), 1);
    expect(D.bisectRight(1, low: 1), 1);
    expect(D.bisectRight(2, low: 1), 1);
    expect(D.bisectRight(3, low: 1), 1);
    expect(D.bisectRight(4, low: 1), 2);
    expect(D.bisectRight(5, low: 1), 3);
    expect(D.bisectRight(6, low: 1), 3);
    expect(D.bisectRight(7, low: 1), 3);
    expect(D.bisectRight(8, low: 1), 3);
  });
  test('list.bisectRight for E lo=1 hi=None', () {
    expect(E.bisectRight(-2, low: 1), 1);
    expect(E.bisectRight(-1, low: 1), 1);
    expect(E.bisectRight(0, low: 1), 1);
    expect(E.bisectRight(1, low: 1), 2);
    expect(E.bisectRight(2, low: 1), 6);
    expect(E.bisectRight(3, low: 1), 8);
    expect(E.bisectRight(4, low: 1), 8);
    expect(E.bisectRight(5, low: 1), 9);
    expect(E.bisectRight(6, low: 1), 10);
    expect(E.bisectRight(7, low: 1), 10);
    expect(E.bisectRight(8, low: 1), 10);
  });
  test('list.bisectRight for A lo=2 hi=None', () {
    expect(A.bisectRight(-2, low: 2), 2);
    expect(A.bisectRight(-1, low: 2), 2);
    expect(A.bisectRight(0, low: 2), 2);
    expect(A.bisectRight(1, low: 2), 2);
    expect(A.bisectRight(2, low: 2), 2);
    expect(A.bisectRight(3, low: 2), 2);
    expect(A.bisectRight(4, low: 2), 2);
    expect(A.bisectRight(5, low: 2), 2);
    expect(A.bisectRight(6, low: 2), 2);
    expect(A.bisectRight(7, low: 2), 2);
    expect(A.bisectRight(8, low: 2), 2);
  });
  test('list.bisectRight for B lo=2 hi=None', () {
    expect(B.bisectRight(-2, low: 2), 2);
    expect(B.bisectRight(-1, low: 2), 2);
    expect(B.bisectRight(0, low: 2), 2);
    expect(B.bisectRight(1, low: 2), 2);
    expect(B.bisectRight(2, low: 2), 2);
    expect(B.bisectRight(3, low: 2), 2);
    expect(B.bisectRight(4, low: 2), 2);
    expect(B.bisectRight(5, low: 2), 2);
    expect(B.bisectRight(6, low: 2), 2);
    expect(B.bisectRight(7, low: 2), 2);
    expect(B.bisectRight(8, low: 2), 2);
  });
  test('list.bisectRight for C lo=2 hi=None', () {
    expect(C.bisectRight(-2, low: 2), 2);
    expect(C.bisectRight(-1, low: 2), 2);
    expect(C.bisectRight(0, low: 2), 2);
    expect(C.bisectRight(1, low: 2), 2);
    expect(C.bisectRight(2, low: 2), 2);
    expect(C.bisectRight(3, low: 2), 2);
    expect(C.bisectRight(4, low: 2), 2);
    expect(C.bisectRight(5, low: 2), 2);
    expect(C.bisectRight(6, low: 2), 2);
    expect(C.bisectRight(7, low: 2), 2);
    expect(C.bisectRight(8, low: 2), 2);
  });
  test('list.bisectRight for D lo=2 hi=None', () {
    expect(D.bisectRight(-2, low: 2), 2);
    expect(D.bisectRight(-1, low: 2), 2);
    expect(D.bisectRight(0, low: 2), 2);
    expect(D.bisectRight(1, low: 2), 2);
    expect(D.bisectRight(2, low: 2), 2);
    expect(D.bisectRight(3, low: 2), 2);
    expect(D.bisectRight(4, low: 2), 2);
    expect(D.bisectRight(5, low: 2), 3);
    expect(D.bisectRight(6, low: 2), 3);
    expect(D.bisectRight(7, low: 2), 3);
    expect(D.bisectRight(8, low: 2), 3);
  });
  test('list.bisectRight for E lo=2 hi=None', () {
    expect(E.bisectRight(-2, low: 2), 2);
    expect(E.bisectRight(-1, low: 2), 2);
    expect(E.bisectRight(0, low: 2), 2);
    expect(E.bisectRight(1, low: 2), 2);
    expect(E.bisectRight(2, low: 2), 6);
    expect(E.bisectRight(3, low: 2), 8);
    expect(E.bisectRight(4, low: 2), 8);
    expect(E.bisectRight(5, low: 2), 9);
    expect(E.bisectRight(6, low: 2), 10);
    expect(E.bisectRight(7, low: 2), 10);
    expect(E.bisectRight(8, low: 2), 10);
  });
  test('list.bisectRight for A lo=3 hi=None', () {
    expect(A.bisectRight(-2, low: 3), 3);
    expect(A.bisectRight(-1, low: 3), 3);
    expect(A.bisectRight(0, low: 3), 3);
    expect(A.bisectRight(1, low: 3), 3);
    expect(A.bisectRight(2, low: 3), 3);
    expect(A.bisectRight(3, low: 3), 3);
    expect(A.bisectRight(4, low: 3), 3);
    expect(A.bisectRight(5, low: 3), 3);
    expect(A.bisectRight(6, low: 3), 3);
    expect(A.bisectRight(7, low: 3), 3);
    expect(A.bisectRight(8, low: 3), 3);
  });
  test('list.bisectRight for B lo=3 hi=None', () {
    expect(B.bisectRight(-2, low: 3), 3);
    expect(B.bisectRight(-1, low: 3), 3);
    expect(B.bisectRight(0, low: 3), 3);
    expect(B.bisectRight(1, low: 3), 3);
    expect(B.bisectRight(2, low: 3), 3);
    expect(B.bisectRight(3, low: 3), 3);
    expect(B.bisectRight(4, low: 3), 3);
    expect(B.bisectRight(5, low: 3), 3);
    expect(B.bisectRight(6, low: 3), 3);
    expect(B.bisectRight(7, low: 3), 3);
    expect(B.bisectRight(8, low: 3), 3);
  });
  test('list.bisectRight for C lo=3 hi=None', () {
    expect(C.bisectRight(-2, low: 3), 3);
    expect(C.bisectRight(-1, low: 3), 3);
    expect(C.bisectRight(0, low: 3), 3);
    expect(C.bisectRight(1, low: 3), 3);
    expect(C.bisectRight(2, low: 3), 3);
    expect(C.bisectRight(3, low: 3), 3);
    expect(C.bisectRight(4, low: 3), 3);
    expect(C.bisectRight(5, low: 3), 3);
    expect(C.bisectRight(6, low: 3), 3);
    expect(C.bisectRight(7, low: 3), 3);
    expect(C.bisectRight(8, low: 3), 3);
  });
  test('list.bisectRight for D lo=3 hi=None', () {
    expect(D.bisectRight(-2, low: 3), 3);
    expect(D.bisectRight(-1, low: 3), 3);
    expect(D.bisectRight(0, low: 3), 3);
    expect(D.bisectRight(1, low: 3), 3);
    expect(D.bisectRight(2, low: 3), 3);
    expect(D.bisectRight(3, low: 3), 3);
    expect(D.bisectRight(4, low: 3), 3);
    expect(D.bisectRight(5, low: 3), 3);
    expect(D.bisectRight(6, low: 3), 3);
    expect(D.bisectRight(7, low: 3), 3);
    expect(D.bisectRight(8, low: 3), 3);
  });
  test('list.bisectRight for E lo=3 hi=None', () {
    expect(E.bisectRight(-2, low: 3), 3);
    expect(E.bisectRight(-1, low: 3), 3);
    expect(E.bisectRight(0, low: 3), 3);
    expect(E.bisectRight(1, low: 3), 3);
    expect(E.bisectRight(2, low: 3), 6);
    expect(E.bisectRight(3, low: 3), 8);
    expect(E.bisectRight(4, low: 3), 8);
    expect(E.bisectRight(5, low: 3), 9);
    expect(E.bisectRight(6, low: 3), 10);
    expect(E.bisectRight(7, low: 3), 10);
    expect(E.bisectRight(8, low: 3), 10);
  });
  test('list.bisectRight for A lo=4 hi=None', () {
    expect(A.bisectRight(-2, low: 4), 4);
    expect(A.bisectRight(-1, low: 4), 4);
    expect(A.bisectRight(0, low: 4), 4);
    expect(A.bisectRight(1, low: 4), 4);
    expect(A.bisectRight(2, low: 4), 4);
    expect(A.bisectRight(3, low: 4), 4);
    expect(A.bisectRight(4, low: 4), 4);
    expect(A.bisectRight(5, low: 4), 4);
    expect(A.bisectRight(6, low: 4), 4);
    expect(A.bisectRight(7, low: 4), 4);
    expect(A.bisectRight(8, low: 4), 4);
  });
  test('list.bisectRight for B lo=4 hi=None', () {
    expect(B.bisectRight(-2, low: 4), 4);
    expect(B.bisectRight(-1, low: 4), 4);
    expect(B.bisectRight(0, low: 4), 4);
    expect(B.bisectRight(1, low: 4), 4);
    expect(B.bisectRight(2, low: 4), 4);
    expect(B.bisectRight(3, low: 4), 4);
    expect(B.bisectRight(4, low: 4), 4);
    expect(B.bisectRight(5, low: 4), 4);
    expect(B.bisectRight(6, low: 4), 4);
    expect(B.bisectRight(7, low: 4), 4);
    expect(B.bisectRight(8, low: 4), 4);
  });
  test('list.bisectRight for C lo=4 hi=None', () {
    expect(C.bisectRight(-2, low: 4), 4);
    expect(C.bisectRight(-1, low: 4), 4);
    expect(C.bisectRight(0, low: 4), 4);
    expect(C.bisectRight(1, low: 4), 4);
    expect(C.bisectRight(2, low: 4), 4);
    expect(C.bisectRight(3, low: 4), 4);
    expect(C.bisectRight(4, low: 4), 4);
    expect(C.bisectRight(5, low: 4), 4);
    expect(C.bisectRight(6, low: 4), 4);
    expect(C.bisectRight(7, low: 4), 4);
    expect(C.bisectRight(8, low: 4), 4);
  });
  test('list.bisectRight for D lo=4 hi=None', () {
    expect(D.bisectRight(-2, low: 4), 4);
    expect(D.bisectRight(-1, low: 4), 4);
    expect(D.bisectRight(0, low: 4), 4);
    expect(D.bisectRight(1, low: 4), 4);
    expect(D.bisectRight(2, low: 4), 4);
    expect(D.bisectRight(3, low: 4), 4);
    expect(D.bisectRight(4, low: 4), 4);
    expect(D.bisectRight(5, low: 4), 4);
    expect(D.bisectRight(6, low: 4), 4);
    expect(D.bisectRight(7, low: 4), 4);
    expect(D.bisectRight(8, low: 4), 4);
  });
  test('list.bisectRight for E lo=4 hi=None', () {
    expect(E.bisectRight(-2, low: 4), 4);
    expect(E.bisectRight(-1, low: 4), 4);
    expect(E.bisectRight(0, low: 4), 4);
    expect(E.bisectRight(1, low: 4), 4);
    expect(E.bisectRight(2, low: 4), 6);
    expect(E.bisectRight(3, low: 4), 8);
    expect(E.bisectRight(4, low: 4), 8);
    expect(E.bisectRight(5, low: 4), 9);
    expect(E.bisectRight(6, low: 4), 10);
    expect(E.bisectRight(7, low: 4), 10);
    expect(E.bisectRight(8, low: 4), 10);
  });
  test('list.bisectRight for A lo=5 hi=None', () {
    expect(A.bisectRight(-2, low: 5), 5);
    expect(A.bisectRight(-1, low: 5), 5);
    expect(A.bisectRight(0, low: 5), 5);
    expect(A.bisectRight(1, low: 5), 5);
    expect(A.bisectRight(2, low: 5), 5);
    expect(A.bisectRight(3, low: 5), 5);
    expect(A.bisectRight(4, low: 5), 5);
    expect(A.bisectRight(5, low: 5), 5);
    expect(A.bisectRight(6, low: 5), 5);
    expect(A.bisectRight(7, low: 5), 5);
    expect(A.bisectRight(8, low: 5), 5);
  });
  test('list.bisectRight for B lo=5 hi=None', () {
    expect(B.bisectRight(-2, low: 5), 5);
    expect(B.bisectRight(-1, low: 5), 5);
    expect(B.bisectRight(0, low: 5), 5);
    expect(B.bisectRight(1, low: 5), 5);
    expect(B.bisectRight(2, low: 5), 5);
    expect(B.bisectRight(3, low: 5), 5);
    expect(B.bisectRight(4, low: 5), 5);
    expect(B.bisectRight(5, low: 5), 5);
    expect(B.bisectRight(6, low: 5), 5);
    expect(B.bisectRight(7, low: 5), 5);
    expect(B.bisectRight(8, low: 5), 5);
  });
  test('list.bisectRight for C lo=5 hi=None', () {
    expect(C.bisectRight(-2, low: 5), 5);
    expect(C.bisectRight(-1, low: 5), 5);
    expect(C.bisectRight(0, low: 5), 5);
    expect(C.bisectRight(1, low: 5), 5);
    expect(C.bisectRight(2, low: 5), 5);
    expect(C.bisectRight(3, low: 5), 5);
    expect(C.bisectRight(4, low: 5), 5);
    expect(C.bisectRight(5, low: 5), 5);
    expect(C.bisectRight(6, low: 5), 5);
    expect(C.bisectRight(7, low: 5), 5);
    expect(C.bisectRight(8, low: 5), 5);
  });
  test('list.bisectRight for D lo=5 hi=None', () {
    expect(D.bisectRight(-2, low: 5), 5);
    expect(D.bisectRight(-1, low: 5), 5);
    expect(D.bisectRight(0, low: 5), 5);
    expect(D.bisectRight(1, low: 5), 5);
    expect(D.bisectRight(2, low: 5), 5);
    expect(D.bisectRight(3, low: 5), 5);
    expect(D.bisectRight(4, low: 5), 5);
    expect(D.bisectRight(5, low: 5), 5);
    expect(D.bisectRight(6, low: 5), 5);
    expect(D.bisectRight(7, low: 5), 5);
    expect(D.bisectRight(8, low: 5), 5);
  });
  test('list.bisectRight for E lo=5 hi=None', () {
    expect(E.bisectRight(-2, low: 5), 5);
    expect(E.bisectRight(-1, low: 5), 5);
    expect(E.bisectRight(0, low: 5), 5);
    expect(E.bisectRight(1, low: 5), 5);
    expect(E.bisectRight(2, low: 5), 6);
    expect(E.bisectRight(3, low: 5), 8);
    expect(E.bisectRight(4, low: 5), 8);
    expect(E.bisectRight(5, low: 5), 9);
    expect(E.bisectRight(6, low: 5), 10);
    expect(E.bisectRight(7, low: 5), 10);
    expect(E.bisectRight(8, low: 5), 10);
  });
  test('list.bisectRight for A lo=6 hi=None', () {
    expect(A.bisectRight(-2, low: 6), 6);
    expect(A.bisectRight(-1, low: 6), 6);
    expect(A.bisectRight(0, low: 6), 6);
    expect(A.bisectRight(1, low: 6), 6);
    expect(A.bisectRight(2, low: 6), 6);
    expect(A.bisectRight(3, low: 6), 6);
    expect(A.bisectRight(4, low: 6), 6);
    expect(A.bisectRight(5, low: 6), 6);
    expect(A.bisectRight(6, low: 6), 6);
    expect(A.bisectRight(7, low: 6), 6);
    expect(A.bisectRight(8, low: 6), 6);
  });
  test('list.bisectRight for B lo=6 hi=None', () {
    expect(B.bisectRight(-2, low: 6), 6);
    expect(B.bisectRight(-1, low: 6), 6);
    expect(B.bisectRight(0, low: 6), 6);
    expect(B.bisectRight(1, low: 6), 6);
    expect(B.bisectRight(2, low: 6), 6);
    expect(B.bisectRight(3, low: 6), 6);
    expect(B.bisectRight(4, low: 6), 6);
    expect(B.bisectRight(5, low: 6), 6);
    expect(B.bisectRight(6, low: 6), 6);
    expect(B.bisectRight(7, low: 6), 6);
    expect(B.bisectRight(8, low: 6), 6);
  });
  test('list.bisectRight for C lo=6 hi=None', () {
    expect(C.bisectRight(-2, low: 6), 6);
    expect(C.bisectRight(-1, low: 6), 6);
    expect(C.bisectRight(0, low: 6), 6);
    expect(C.bisectRight(1, low: 6), 6);
    expect(C.bisectRight(2, low: 6), 6);
    expect(C.bisectRight(3, low: 6), 6);
    expect(C.bisectRight(4, low: 6), 6);
    expect(C.bisectRight(5, low: 6), 6);
    expect(C.bisectRight(6, low: 6), 6);
    expect(C.bisectRight(7, low: 6), 6);
    expect(C.bisectRight(8, low: 6), 6);
  });
  test('list.bisectRight for D lo=6 hi=None', () {
    expect(D.bisectRight(-2, low: 6), 6);
    expect(D.bisectRight(-1, low: 6), 6);
    expect(D.bisectRight(0, low: 6), 6);
    expect(D.bisectRight(1, low: 6), 6);
    expect(D.bisectRight(2, low: 6), 6);
    expect(D.bisectRight(3, low: 6), 6);
    expect(D.bisectRight(4, low: 6), 6);
    expect(D.bisectRight(5, low: 6), 6);
    expect(D.bisectRight(6, low: 6), 6);
    expect(D.bisectRight(7, low: 6), 6);
    expect(D.bisectRight(8, low: 6), 6);
  });
  test('list.bisectRight for E lo=6 hi=None', () {
    expect(E.bisectRight(-2, low: 6), 6);
    expect(E.bisectRight(-1, low: 6), 6);
    expect(E.bisectRight(0, low: 6), 6);
    expect(E.bisectRight(1, low: 6), 6);
    expect(E.bisectRight(2, low: 6), 6);
    expect(E.bisectRight(3, low: 6), 8);
    expect(E.bisectRight(4, low: 6), 8);
    expect(E.bisectRight(5, low: 6), 9);
    expect(E.bisectRight(6, low: 6), 10);
    expect(E.bisectRight(7, low: 6), 10);
    expect(E.bisectRight(8, low: 6), 10);
  });
  test('list.bisectRight for A lo=7 hi=None', () {
    expect(A.bisectRight(-2, low: 7), 7);
    expect(A.bisectRight(-1, low: 7), 7);
    expect(A.bisectRight(0, low: 7), 7);
    expect(A.bisectRight(1, low: 7), 7);
    expect(A.bisectRight(2, low: 7), 7);
    expect(A.bisectRight(3, low: 7), 7);
    expect(A.bisectRight(4, low: 7), 7);
    expect(A.bisectRight(5, low: 7), 7);
    expect(A.bisectRight(6, low: 7), 7);
    expect(A.bisectRight(7, low: 7), 7);
    expect(A.bisectRight(8, low: 7), 7);
  });
  test('list.bisectRight for B lo=7 hi=None', () {
    expect(B.bisectRight(-2, low: 7), 7);
    expect(B.bisectRight(-1, low: 7), 7);
    expect(B.bisectRight(0, low: 7), 7);
    expect(B.bisectRight(1, low: 7), 7);
    expect(B.bisectRight(2, low: 7), 7);
    expect(B.bisectRight(3, low: 7), 7);
    expect(B.bisectRight(4, low: 7), 7);
    expect(B.bisectRight(5, low: 7), 7);
    expect(B.bisectRight(6, low: 7), 7);
    expect(B.bisectRight(7, low: 7), 7);
    expect(B.bisectRight(8, low: 7), 7);
  });
  test('list.bisectRight for C lo=7 hi=None', () {
    expect(C.bisectRight(-2, low: 7), 7);
    expect(C.bisectRight(-1, low: 7), 7);
    expect(C.bisectRight(0, low: 7), 7);
    expect(C.bisectRight(1, low: 7), 7);
    expect(C.bisectRight(2, low: 7), 7);
    expect(C.bisectRight(3, low: 7), 7);
    expect(C.bisectRight(4, low: 7), 7);
    expect(C.bisectRight(5, low: 7), 7);
    expect(C.bisectRight(6, low: 7), 7);
    expect(C.bisectRight(7, low: 7), 7);
    expect(C.bisectRight(8, low: 7), 7);
  });
  test('list.bisectRight for D lo=7 hi=None', () {
    expect(D.bisectRight(-2, low: 7), 7);
    expect(D.bisectRight(-1, low: 7), 7);
    expect(D.bisectRight(0, low: 7), 7);
    expect(D.bisectRight(1, low: 7), 7);
    expect(D.bisectRight(2, low: 7), 7);
    expect(D.bisectRight(3, low: 7), 7);
    expect(D.bisectRight(4, low: 7), 7);
    expect(D.bisectRight(5, low: 7), 7);
    expect(D.bisectRight(6, low: 7), 7);
    expect(D.bisectRight(7, low: 7), 7);
    expect(D.bisectRight(8, low: 7), 7);
  });
  test('list.bisectRight for E lo=7 hi=None', () {
    expect(E.bisectRight(-2, low: 7), 7);
    expect(E.bisectRight(-1, low: 7), 7);
    expect(E.bisectRight(0, low: 7), 7);
    expect(E.bisectRight(1, low: 7), 7);
    expect(E.bisectRight(2, low: 7), 7);
    expect(E.bisectRight(3, low: 7), 8);
    expect(E.bisectRight(4, low: 7), 8);
    expect(E.bisectRight(5, low: 7), 9);
    expect(E.bisectRight(6, low: 7), 10);
    expect(E.bisectRight(7, low: 7), 10);
    expect(E.bisectRight(8, low: 7), 10);
  });
  test('list.bisectRight for A lo=8 hi=None', () {
    expect(A.bisectRight(-2, low: 8), 8);
    expect(A.bisectRight(-1, low: 8), 8);
    expect(A.bisectRight(0, low: 8), 8);
    expect(A.bisectRight(1, low: 8), 8);
    expect(A.bisectRight(2, low: 8), 8);
    expect(A.bisectRight(3, low: 8), 8);
    expect(A.bisectRight(4, low: 8), 8);
    expect(A.bisectRight(5, low: 8), 8);
    expect(A.bisectRight(6, low: 8), 8);
    expect(A.bisectRight(7, low: 8), 8);
    expect(A.bisectRight(8, low: 8), 8);
  });
  test('list.bisectRight for B lo=8 hi=None', () {
    expect(B.bisectRight(-2, low: 8), 8);
    expect(B.bisectRight(-1, low: 8), 8);
    expect(B.bisectRight(0, low: 8), 8);
    expect(B.bisectRight(1, low: 8), 8);
    expect(B.bisectRight(2, low: 8), 8);
    expect(B.bisectRight(3, low: 8), 8);
    expect(B.bisectRight(4, low: 8), 8);
    expect(B.bisectRight(5, low: 8), 8);
    expect(B.bisectRight(6, low: 8), 8);
    expect(B.bisectRight(7, low: 8), 8);
    expect(B.bisectRight(8, low: 8), 8);
  });
  test('list.bisectRight for C lo=8 hi=None', () {
    expect(C.bisectRight(-2, low: 8), 8);
    expect(C.bisectRight(-1, low: 8), 8);
    expect(C.bisectRight(0, low: 8), 8);
    expect(C.bisectRight(1, low: 8), 8);
    expect(C.bisectRight(2, low: 8), 8);
    expect(C.bisectRight(3, low: 8), 8);
    expect(C.bisectRight(4, low: 8), 8);
    expect(C.bisectRight(5, low: 8), 8);
    expect(C.bisectRight(6, low: 8), 8);
    expect(C.bisectRight(7, low: 8), 8);
    expect(C.bisectRight(8, low: 8), 8);
  });
  test('list.bisectRight for D lo=8 hi=None', () {
    expect(D.bisectRight(-2, low: 8), 8);
    expect(D.bisectRight(-1, low: 8), 8);
    expect(D.bisectRight(0, low: 8), 8);
    expect(D.bisectRight(1, low: 8), 8);
    expect(D.bisectRight(2, low: 8), 8);
    expect(D.bisectRight(3, low: 8), 8);
    expect(D.bisectRight(4, low: 8), 8);
    expect(D.bisectRight(5, low: 8), 8);
    expect(D.bisectRight(6, low: 8), 8);
    expect(D.bisectRight(7, low: 8), 8);
    expect(D.bisectRight(8, low: 8), 8);
  });
  test('list.bisectRight for E lo=8 hi=None', () {
    expect(E.bisectRight(-2, low: 8), 8);
    expect(E.bisectRight(-1, low: 8), 8);
    expect(E.bisectRight(0, low: 8), 8);
    expect(E.bisectRight(1, low: 8), 8);
    expect(E.bisectRight(2, low: 8), 8);
    expect(E.bisectRight(3, low: 8), 8);
    expect(E.bisectRight(4, low: 8), 8);
    expect(E.bisectRight(5, low: 8), 9);
    expect(E.bisectRight(6, low: 8), 10);
    expect(E.bisectRight(7, low: 8), 10);
    expect(E.bisectRight(8, low: 8), 10);
  });
  test('list.bisectRight for A lo=9 hi=None', () {
    expect(A.bisectRight(-2, low: 9), 9);
    expect(A.bisectRight(-1, low: 9), 9);
    expect(A.bisectRight(0, low: 9), 9);
    expect(A.bisectRight(1, low: 9), 9);
    expect(A.bisectRight(2, low: 9), 9);
    expect(A.bisectRight(3, low: 9), 9);
    expect(A.bisectRight(4, low: 9), 9);
    expect(A.bisectRight(5, low: 9), 9);
    expect(A.bisectRight(6, low: 9), 9);
    expect(A.bisectRight(7, low: 9), 9);
    expect(A.bisectRight(8, low: 9), 9);
  });
  test('list.bisectRight for B lo=9 hi=None', () {
    expect(B.bisectRight(-2, low: 9), 9);
    expect(B.bisectRight(-1, low: 9), 9);
    expect(B.bisectRight(0, low: 9), 9);
    expect(B.bisectRight(1, low: 9), 9);
    expect(B.bisectRight(2, low: 9), 9);
    expect(B.bisectRight(3, low: 9), 9);
    expect(B.bisectRight(4, low: 9), 9);
    expect(B.bisectRight(5, low: 9), 9);
    expect(B.bisectRight(6, low: 9), 9);
    expect(B.bisectRight(7, low: 9), 9);
    expect(B.bisectRight(8, low: 9), 9);
  });
  test('list.bisectRight for C lo=9 hi=None', () {
    expect(C.bisectRight(-2, low: 9), 9);
    expect(C.bisectRight(-1, low: 9), 9);
    expect(C.bisectRight(0, low: 9), 9);
    expect(C.bisectRight(1, low: 9), 9);
    expect(C.bisectRight(2, low: 9), 9);
    expect(C.bisectRight(3, low: 9), 9);
    expect(C.bisectRight(4, low: 9), 9);
    expect(C.bisectRight(5, low: 9), 9);
    expect(C.bisectRight(6, low: 9), 9);
    expect(C.bisectRight(7, low: 9), 9);
    expect(C.bisectRight(8, low: 9), 9);
  });
  test('list.bisectRight for D lo=9 hi=None', () {
    expect(D.bisectRight(-2, low: 9), 9);
    expect(D.bisectRight(-1, low: 9), 9);
    expect(D.bisectRight(0, low: 9), 9);
    expect(D.bisectRight(1, low: 9), 9);
    expect(D.bisectRight(2, low: 9), 9);
    expect(D.bisectRight(3, low: 9), 9);
    expect(D.bisectRight(4, low: 9), 9);
    expect(D.bisectRight(5, low: 9), 9);
    expect(D.bisectRight(6, low: 9), 9);
    expect(D.bisectRight(7, low: 9), 9);
    expect(D.bisectRight(8, low: 9), 9);
  });
  test('list.bisectRight for E lo=9 hi=None', () {
    expect(E.bisectRight(-2, low: 9), 9);
    expect(E.bisectRight(-1, low: 9), 9);
    expect(E.bisectRight(0, low: 9), 9);
    expect(E.bisectRight(1, low: 9), 9);
    expect(E.bisectRight(2, low: 9), 9);
    expect(E.bisectRight(3, low: 9), 9);
    expect(E.bisectRight(4, low: 9), 9);
    expect(E.bisectRight(5, low: 9), 9);
    expect(E.bisectRight(6, low: 9), 10);
    expect(E.bisectRight(7, low: 9), 10);
    expect(E.bisectRight(8, low: 9), 10);
  });
  test('list.bisectRight for A lo=None hi=0', () {
    expect(A.bisectRight(-2, high: 0), 0);
    expect(A.bisectRight(-1, high: 0), 0);
    expect(A.bisectRight(0, high: 0), 0);
    expect(A.bisectRight(1, high: 0), 0);
    expect(A.bisectRight(2, high: 0), 0);
    expect(A.bisectRight(3, high: 0), 0);
    expect(A.bisectRight(4, high: 0), 0);
    expect(A.bisectRight(5, high: 0), 0);
    expect(A.bisectRight(6, high: 0), 0);
    expect(A.bisectRight(7, high: 0), 0);
    expect(A.bisectRight(8, high: 0), 0);
  });
  test('list.bisectRight for B lo=None hi=0', () {
    expect(B.bisectRight(-2, high: 0), 0);
    expect(B.bisectRight(-1, high: 0), 0);
    expect(B.bisectRight(0, high: 0), 0);
    expect(B.bisectRight(1, high: 0), 0);
    expect(B.bisectRight(2, high: 0), 0);
    expect(B.bisectRight(3, high: 0), 0);
    expect(B.bisectRight(4, high: 0), 0);
    expect(B.bisectRight(5, high: 0), 0);
    expect(B.bisectRight(6, high: 0), 0);
    expect(B.bisectRight(7, high: 0), 0);
    expect(B.bisectRight(8, high: 0), 0);
  });
  test('list.bisectRight for C lo=None hi=0', () {
    expect(C.bisectRight(-2, high: 0), 0);
    expect(C.bisectRight(-1, high: 0), 0);
    expect(C.bisectRight(0, high: 0), 0);
    expect(C.bisectRight(1, high: 0), 0);
    expect(C.bisectRight(2, high: 0), 0);
    expect(C.bisectRight(3, high: 0), 0);
    expect(C.bisectRight(4, high: 0), 0);
    expect(C.bisectRight(5, high: 0), 0);
    expect(C.bisectRight(6, high: 0), 0);
    expect(C.bisectRight(7, high: 0), 0);
    expect(C.bisectRight(8, high: 0), 0);
  });
  test('list.bisectRight for D lo=None hi=0', () {
    expect(D.bisectRight(-2, high: 0), 0);
    expect(D.bisectRight(-1, high: 0), 0);
    expect(D.bisectRight(0, high: 0), 0);
    expect(D.bisectRight(1, high: 0), 0);
    expect(D.bisectRight(2, high: 0), 0);
    expect(D.bisectRight(3, high: 0), 0);
    expect(D.bisectRight(4, high: 0), 0);
    expect(D.bisectRight(5, high: 0), 0);
    expect(D.bisectRight(6, high: 0), 0);
    expect(D.bisectRight(7, high: 0), 0);
    expect(D.bisectRight(8, high: 0), 0);
  });
  test('list.bisectRight for E lo=None hi=0', () {
    expect(E.bisectRight(-2, high: 0), 0);
    expect(E.bisectRight(-1, high: 0), 0);
    expect(E.bisectRight(0, high: 0), 0);
    expect(E.bisectRight(1, high: 0), 0);
    expect(E.bisectRight(2, high: 0), 0);
    expect(E.bisectRight(3, high: 0), 0);
    expect(E.bisectRight(4, high: 0), 0);
    expect(E.bisectRight(5, high: 0), 0);
    expect(E.bisectRight(6, high: 0), 0);
    expect(E.bisectRight(7, high: 0), 0);
    expect(E.bisectRight(8, high: 0), 0);
  });
  test('list.bisectRight for A lo=0 hi=0', () {
    expect(A.bisectRight(-2, low: 0, high: 0), 0);
    expect(A.bisectRight(-1, low: 0, high: 0), 0);
    expect(A.bisectRight(0, low: 0, high: 0), 0);
    expect(A.bisectRight(1, low: 0, high: 0), 0);
    expect(A.bisectRight(2, low: 0, high: 0), 0);
    expect(A.bisectRight(3, low: 0, high: 0), 0);
    expect(A.bisectRight(4, low: 0, high: 0), 0);
    expect(A.bisectRight(5, low: 0, high: 0), 0);
    expect(A.bisectRight(6, low: 0, high: 0), 0);
    expect(A.bisectRight(7, low: 0, high: 0), 0);
    expect(A.bisectRight(8, low: 0, high: 0), 0);
  });
  test('list.bisectRight for B lo=0 hi=0', () {
    expect(B.bisectRight(-2, low: 0, high: 0), 0);
    expect(B.bisectRight(-1, low: 0, high: 0), 0);
    expect(B.bisectRight(0, low: 0, high: 0), 0);
    expect(B.bisectRight(1, low: 0, high: 0), 0);
    expect(B.bisectRight(2, low: 0, high: 0), 0);
    expect(B.bisectRight(3, low: 0, high: 0), 0);
    expect(B.bisectRight(4, low: 0, high: 0), 0);
    expect(B.bisectRight(5, low: 0, high: 0), 0);
    expect(B.bisectRight(6, low: 0, high: 0), 0);
    expect(B.bisectRight(7, low: 0, high: 0), 0);
    expect(B.bisectRight(8, low: 0, high: 0), 0);
  });
  test('list.bisectRight for C lo=0 hi=0', () {
    expect(C.bisectRight(-2, low: 0, high: 0), 0);
    expect(C.bisectRight(-1, low: 0, high: 0), 0);
    expect(C.bisectRight(0, low: 0, high: 0), 0);
    expect(C.bisectRight(1, low: 0, high: 0), 0);
    expect(C.bisectRight(2, low: 0, high: 0), 0);
    expect(C.bisectRight(3, low: 0, high: 0), 0);
    expect(C.bisectRight(4, low: 0, high: 0), 0);
    expect(C.bisectRight(5, low: 0, high: 0), 0);
    expect(C.bisectRight(6, low: 0, high: 0), 0);
    expect(C.bisectRight(7, low: 0, high: 0), 0);
    expect(C.bisectRight(8, low: 0, high: 0), 0);
  });
  test('list.bisectRight for D lo=0 hi=0', () {
    expect(D.bisectRight(-2, low: 0, high: 0), 0);
    expect(D.bisectRight(-1, low: 0, high: 0), 0);
    expect(D.bisectRight(0, low: 0, high: 0), 0);
    expect(D.bisectRight(1, low: 0, high: 0), 0);
    expect(D.bisectRight(2, low: 0, high: 0), 0);
    expect(D.bisectRight(3, low: 0, high: 0), 0);
    expect(D.bisectRight(4, low: 0, high: 0), 0);
    expect(D.bisectRight(5, low: 0, high: 0), 0);
    expect(D.bisectRight(6, low: 0, high: 0), 0);
    expect(D.bisectRight(7, low: 0, high: 0), 0);
    expect(D.bisectRight(8, low: 0, high: 0), 0);
  });
  test('list.bisectRight for E lo=0 hi=0', () {
    expect(E.bisectRight(-2, low: 0, high: 0), 0);
    expect(E.bisectRight(-1, low: 0, high: 0), 0);
    expect(E.bisectRight(0, low: 0, high: 0), 0);
    expect(E.bisectRight(1, low: 0, high: 0), 0);
    expect(E.bisectRight(2, low: 0, high: 0), 0);
    expect(E.bisectRight(3, low: 0, high: 0), 0);
    expect(E.bisectRight(4, low: 0, high: 0), 0);
    expect(E.bisectRight(5, low: 0, high: 0), 0);
    expect(E.bisectRight(6, low: 0, high: 0), 0);
    expect(E.bisectRight(7, low: 0, high: 0), 0);
    expect(E.bisectRight(8, low: 0, high: 0), 0);
  });
  test('list.bisectRight for A lo=1 hi=0', () {
    expect(A.bisectRight(-2, low: 1, high: 0), 1);
    expect(A.bisectRight(-1, low: 1, high: 0), 1);
    expect(A.bisectRight(0, low: 1, high: 0), 1);
    expect(A.bisectRight(1, low: 1, high: 0), 1);
    expect(A.bisectRight(2, low: 1, high: 0), 1);
    expect(A.bisectRight(3, low: 1, high: 0), 1);
    expect(A.bisectRight(4, low: 1, high: 0), 1);
    expect(A.bisectRight(5, low: 1, high: 0), 1);
    expect(A.bisectRight(6, low: 1, high: 0), 1);
    expect(A.bisectRight(7, low: 1, high: 0), 1);
    expect(A.bisectRight(8, low: 1, high: 0), 1);
  });
  test('list.bisectRight for B lo=1 hi=0', () {
    expect(B.bisectRight(-2, low: 1, high: 0), 1);
    expect(B.bisectRight(-1, low: 1, high: 0), 1);
    expect(B.bisectRight(0, low: 1, high: 0), 1);
    expect(B.bisectRight(1, low: 1, high: 0), 1);
    expect(B.bisectRight(2, low: 1, high: 0), 1);
    expect(B.bisectRight(3, low: 1, high: 0), 1);
    expect(B.bisectRight(4, low: 1, high: 0), 1);
    expect(B.bisectRight(5, low: 1, high: 0), 1);
    expect(B.bisectRight(6, low: 1, high: 0), 1);
    expect(B.bisectRight(7, low: 1, high: 0), 1);
    expect(B.bisectRight(8, low: 1, high: 0), 1);
  });
  test('list.bisectRight for C lo=1 hi=0', () {
    expect(C.bisectRight(-2, low: 1, high: 0), 1);
    expect(C.bisectRight(-1, low: 1, high: 0), 1);
    expect(C.bisectRight(0, low: 1, high: 0), 1);
    expect(C.bisectRight(1, low: 1, high: 0), 1);
    expect(C.bisectRight(2, low: 1, high: 0), 1);
    expect(C.bisectRight(3, low: 1, high: 0), 1);
    expect(C.bisectRight(4, low: 1, high: 0), 1);
    expect(C.bisectRight(5, low: 1, high: 0), 1);
    expect(C.bisectRight(6, low: 1, high: 0), 1);
    expect(C.bisectRight(7, low: 1, high: 0), 1);
    expect(C.bisectRight(8, low: 1, high: 0), 1);
  });
  test('list.bisectRight for D lo=1 hi=0', () {
    expect(D.bisectRight(-2, low: 1, high: 0), 1);
    expect(D.bisectRight(-1, low: 1, high: 0), 1);
    expect(D.bisectRight(0, low: 1, high: 0), 1);
    expect(D.bisectRight(1, low: 1, high: 0), 1);
    expect(D.bisectRight(2, low: 1, high: 0), 1);
    expect(D.bisectRight(3, low: 1, high: 0), 1);
    expect(D.bisectRight(4, low: 1, high: 0), 1);
    expect(D.bisectRight(5, low: 1, high: 0), 1);
    expect(D.bisectRight(6, low: 1, high: 0), 1);
    expect(D.bisectRight(7, low: 1, high: 0), 1);
    expect(D.bisectRight(8, low: 1, high: 0), 1);
  });
  test('list.bisectRight for E lo=1 hi=0', () {
    expect(E.bisectRight(-2, low: 1, high: 0), 1);
    expect(E.bisectRight(-1, low: 1, high: 0), 1);
    expect(E.bisectRight(0, low: 1, high: 0), 1);
    expect(E.bisectRight(1, low: 1, high: 0), 1);
    expect(E.bisectRight(2, low: 1, high: 0), 1);
    expect(E.bisectRight(3, low: 1, high: 0), 1);
    expect(E.bisectRight(4, low: 1, high: 0), 1);
    expect(E.bisectRight(5, low: 1, high: 0), 1);
    expect(E.bisectRight(6, low: 1, high: 0), 1);
    expect(E.bisectRight(7, low: 1, high: 0), 1);
    expect(E.bisectRight(8, low: 1, high: 0), 1);
  });
  test('list.bisectRight for A lo=2 hi=0', () {
    expect(A.bisectRight(-2, low: 2, high: 0), 2);
    expect(A.bisectRight(-1, low: 2, high: 0), 2);
    expect(A.bisectRight(0, low: 2, high: 0), 2);
    expect(A.bisectRight(1, low: 2, high: 0), 2);
    expect(A.bisectRight(2, low: 2, high: 0), 2);
    expect(A.bisectRight(3, low: 2, high: 0), 2);
    expect(A.bisectRight(4, low: 2, high: 0), 2);
    expect(A.bisectRight(5, low: 2, high: 0), 2);
    expect(A.bisectRight(6, low: 2, high: 0), 2);
    expect(A.bisectRight(7, low: 2, high: 0), 2);
    expect(A.bisectRight(8, low: 2, high: 0), 2);
  });
  test('list.bisectRight for B lo=2 hi=0', () {
    expect(B.bisectRight(-2, low: 2, high: 0), 2);
    expect(B.bisectRight(-1, low: 2, high: 0), 2);
    expect(B.bisectRight(0, low: 2, high: 0), 2);
    expect(B.bisectRight(1, low: 2, high: 0), 2);
    expect(B.bisectRight(2, low: 2, high: 0), 2);
    expect(B.bisectRight(3, low: 2, high: 0), 2);
    expect(B.bisectRight(4, low: 2, high: 0), 2);
    expect(B.bisectRight(5, low: 2, high: 0), 2);
    expect(B.bisectRight(6, low: 2, high: 0), 2);
    expect(B.bisectRight(7, low: 2, high: 0), 2);
    expect(B.bisectRight(8, low: 2, high: 0), 2);
  });
  test('list.bisectRight for C lo=2 hi=0', () {
    expect(C.bisectRight(-2, low: 2, high: 0), 2);
    expect(C.bisectRight(-1, low: 2, high: 0), 2);
    expect(C.bisectRight(0, low: 2, high: 0), 2);
    expect(C.bisectRight(1, low: 2, high: 0), 2);
    expect(C.bisectRight(2, low: 2, high: 0), 2);
    expect(C.bisectRight(3, low: 2, high: 0), 2);
    expect(C.bisectRight(4, low: 2, high: 0), 2);
    expect(C.bisectRight(5, low: 2, high: 0), 2);
    expect(C.bisectRight(6, low: 2, high: 0), 2);
    expect(C.bisectRight(7, low: 2, high: 0), 2);
    expect(C.bisectRight(8, low: 2, high: 0), 2);
  });
  test('list.bisectRight for D lo=2 hi=0', () {
    expect(D.bisectRight(-2, low: 2, high: 0), 2);
    expect(D.bisectRight(-1, low: 2, high: 0), 2);
    expect(D.bisectRight(0, low: 2, high: 0), 2);
    expect(D.bisectRight(1, low: 2, high: 0), 2);
    expect(D.bisectRight(2, low: 2, high: 0), 2);
    expect(D.bisectRight(3, low: 2, high: 0), 2);
    expect(D.bisectRight(4, low: 2, high: 0), 2);
    expect(D.bisectRight(5, low: 2, high: 0), 2);
    expect(D.bisectRight(6, low: 2, high: 0), 2);
    expect(D.bisectRight(7, low: 2, high: 0), 2);
    expect(D.bisectRight(8, low: 2, high: 0), 2);
  });
  test('list.bisectRight for E lo=2 hi=0', () {
    expect(E.bisectRight(-2, low: 2, high: 0), 2);
    expect(E.bisectRight(-1, low: 2, high: 0), 2);
    expect(E.bisectRight(0, low: 2, high: 0), 2);
    expect(E.bisectRight(1, low: 2, high: 0), 2);
    expect(E.bisectRight(2, low: 2, high: 0), 2);
    expect(E.bisectRight(3, low: 2, high: 0), 2);
    expect(E.bisectRight(4, low: 2, high: 0), 2);
    expect(E.bisectRight(5, low: 2, high: 0), 2);
    expect(E.bisectRight(6, low: 2, high: 0), 2);
    expect(E.bisectRight(7, low: 2, high: 0), 2);
    expect(E.bisectRight(8, low: 2, high: 0), 2);
  });
  test('list.bisectRight for A lo=3 hi=0', () {
    expect(A.bisectRight(-2, low: 3, high: 0), 3);
    expect(A.bisectRight(-1, low: 3, high: 0), 3);
    expect(A.bisectRight(0, low: 3, high: 0), 3);
    expect(A.bisectRight(1, low: 3, high: 0), 3);
    expect(A.bisectRight(2, low: 3, high: 0), 3);
    expect(A.bisectRight(3, low: 3, high: 0), 3);
    expect(A.bisectRight(4, low: 3, high: 0), 3);
    expect(A.bisectRight(5, low: 3, high: 0), 3);
    expect(A.bisectRight(6, low: 3, high: 0), 3);
    expect(A.bisectRight(7, low: 3, high: 0), 3);
    expect(A.bisectRight(8, low: 3, high: 0), 3);
  });
  test('list.bisectRight for B lo=3 hi=0', () {
    expect(B.bisectRight(-2, low: 3, high: 0), 3);
    expect(B.bisectRight(-1, low: 3, high: 0), 3);
    expect(B.bisectRight(0, low: 3, high: 0), 3);
    expect(B.bisectRight(1, low: 3, high: 0), 3);
    expect(B.bisectRight(2, low: 3, high: 0), 3);
    expect(B.bisectRight(3, low: 3, high: 0), 3);
    expect(B.bisectRight(4, low: 3, high: 0), 3);
    expect(B.bisectRight(5, low: 3, high: 0), 3);
    expect(B.bisectRight(6, low: 3, high: 0), 3);
    expect(B.bisectRight(7, low: 3, high: 0), 3);
    expect(B.bisectRight(8, low: 3, high: 0), 3);
  });
  test('list.bisectRight for C lo=3 hi=0', () {
    expect(C.bisectRight(-2, low: 3, high: 0), 3);
    expect(C.bisectRight(-1, low: 3, high: 0), 3);
    expect(C.bisectRight(0, low: 3, high: 0), 3);
    expect(C.bisectRight(1, low: 3, high: 0), 3);
    expect(C.bisectRight(2, low: 3, high: 0), 3);
    expect(C.bisectRight(3, low: 3, high: 0), 3);
    expect(C.bisectRight(4, low: 3, high: 0), 3);
    expect(C.bisectRight(5, low: 3, high: 0), 3);
    expect(C.bisectRight(6, low: 3, high: 0), 3);
    expect(C.bisectRight(7, low: 3, high: 0), 3);
    expect(C.bisectRight(8, low: 3, high: 0), 3);
  });
  test('list.bisectRight for D lo=3 hi=0', () {
    expect(D.bisectRight(-2, low: 3, high: 0), 3);
    expect(D.bisectRight(-1, low: 3, high: 0), 3);
    expect(D.bisectRight(0, low: 3, high: 0), 3);
    expect(D.bisectRight(1, low: 3, high: 0), 3);
    expect(D.bisectRight(2, low: 3, high: 0), 3);
    expect(D.bisectRight(3, low: 3, high: 0), 3);
    expect(D.bisectRight(4, low: 3, high: 0), 3);
    expect(D.bisectRight(5, low: 3, high: 0), 3);
    expect(D.bisectRight(6, low: 3, high: 0), 3);
    expect(D.bisectRight(7, low: 3, high: 0), 3);
    expect(D.bisectRight(8, low: 3, high: 0), 3);
  });
  test('list.bisectRight for E lo=3 hi=0', () {
    expect(E.bisectRight(-2, low: 3, high: 0), 3);
    expect(E.bisectRight(-1, low: 3, high: 0), 3);
    expect(E.bisectRight(0, low: 3, high: 0), 3);
    expect(E.bisectRight(1, low: 3, high: 0), 3);
    expect(E.bisectRight(2, low: 3, high: 0), 3);
    expect(E.bisectRight(3, low: 3, high: 0), 3);
    expect(E.bisectRight(4, low: 3, high: 0), 3);
    expect(E.bisectRight(5, low: 3, high: 0), 3);
    expect(E.bisectRight(6, low: 3, high: 0), 3);
    expect(E.bisectRight(7, low: 3, high: 0), 3);
    expect(E.bisectRight(8, low: 3, high: 0), 3);
  });
  test('list.bisectRight for A lo=4 hi=0', () {
    expect(A.bisectRight(-2, low: 4, high: 0), 4);
    expect(A.bisectRight(-1, low: 4, high: 0), 4);
    expect(A.bisectRight(0, low: 4, high: 0), 4);
    expect(A.bisectRight(1, low: 4, high: 0), 4);
    expect(A.bisectRight(2, low: 4, high: 0), 4);
    expect(A.bisectRight(3, low: 4, high: 0), 4);
    expect(A.bisectRight(4, low: 4, high: 0), 4);
    expect(A.bisectRight(5, low: 4, high: 0), 4);
    expect(A.bisectRight(6, low: 4, high: 0), 4);
    expect(A.bisectRight(7, low: 4, high: 0), 4);
    expect(A.bisectRight(8, low: 4, high: 0), 4);
  });
  test('list.bisectRight for B lo=4 hi=0', () {
    expect(B.bisectRight(-2, low: 4, high: 0), 4);
    expect(B.bisectRight(-1, low: 4, high: 0), 4);
    expect(B.bisectRight(0, low: 4, high: 0), 4);
    expect(B.bisectRight(1, low: 4, high: 0), 4);
    expect(B.bisectRight(2, low: 4, high: 0), 4);
    expect(B.bisectRight(3, low: 4, high: 0), 4);
    expect(B.bisectRight(4, low: 4, high: 0), 4);
    expect(B.bisectRight(5, low: 4, high: 0), 4);
    expect(B.bisectRight(6, low: 4, high: 0), 4);
    expect(B.bisectRight(7, low: 4, high: 0), 4);
    expect(B.bisectRight(8, low: 4, high: 0), 4);
  });
  test('list.bisectRight for C lo=4 hi=0', () {
    expect(C.bisectRight(-2, low: 4, high: 0), 4);
    expect(C.bisectRight(-1, low: 4, high: 0), 4);
    expect(C.bisectRight(0, low: 4, high: 0), 4);
    expect(C.bisectRight(1, low: 4, high: 0), 4);
    expect(C.bisectRight(2, low: 4, high: 0), 4);
    expect(C.bisectRight(3, low: 4, high: 0), 4);
    expect(C.bisectRight(4, low: 4, high: 0), 4);
    expect(C.bisectRight(5, low: 4, high: 0), 4);
    expect(C.bisectRight(6, low: 4, high: 0), 4);
    expect(C.bisectRight(7, low: 4, high: 0), 4);
    expect(C.bisectRight(8, low: 4, high: 0), 4);
  });
  test('list.bisectRight for D lo=4 hi=0', () {
    expect(D.bisectRight(-2, low: 4, high: 0), 4);
    expect(D.bisectRight(-1, low: 4, high: 0), 4);
    expect(D.bisectRight(0, low: 4, high: 0), 4);
    expect(D.bisectRight(1, low: 4, high: 0), 4);
    expect(D.bisectRight(2, low: 4, high: 0), 4);
    expect(D.bisectRight(3, low: 4, high: 0), 4);
    expect(D.bisectRight(4, low: 4, high: 0), 4);
    expect(D.bisectRight(5, low: 4, high: 0), 4);
    expect(D.bisectRight(6, low: 4, high: 0), 4);
    expect(D.bisectRight(7, low: 4, high: 0), 4);
    expect(D.bisectRight(8, low: 4, high: 0), 4);
  });
  test('list.bisectRight for E lo=4 hi=0', () {
    expect(E.bisectRight(-2, low: 4, high: 0), 4);
    expect(E.bisectRight(-1, low: 4, high: 0), 4);
    expect(E.bisectRight(0, low: 4, high: 0), 4);
    expect(E.bisectRight(1, low: 4, high: 0), 4);
    expect(E.bisectRight(2, low: 4, high: 0), 4);
    expect(E.bisectRight(3, low: 4, high: 0), 4);
    expect(E.bisectRight(4, low: 4, high: 0), 4);
    expect(E.bisectRight(5, low: 4, high: 0), 4);
    expect(E.bisectRight(6, low: 4, high: 0), 4);
    expect(E.bisectRight(7, low: 4, high: 0), 4);
    expect(E.bisectRight(8, low: 4, high: 0), 4);
  });
  test('list.bisectRight for A lo=5 hi=0', () {
    expect(A.bisectRight(-2, low: 5, high: 0), 5);
    expect(A.bisectRight(-1, low: 5, high: 0), 5);
    expect(A.bisectRight(0, low: 5, high: 0), 5);
    expect(A.bisectRight(1, low: 5, high: 0), 5);
    expect(A.bisectRight(2, low: 5, high: 0), 5);
    expect(A.bisectRight(3, low: 5, high: 0), 5);
    expect(A.bisectRight(4, low: 5, high: 0), 5);
    expect(A.bisectRight(5, low: 5, high: 0), 5);
    expect(A.bisectRight(6, low: 5, high: 0), 5);
    expect(A.bisectRight(7, low: 5, high: 0), 5);
    expect(A.bisectRight(8, low: 5, high: 0), 5);
  });
  test('list.bisectRight for B lo=5 hi=0', () {
    expect(B.bisectRight(-2, low: 5, high: 0), 5);
    expect(B.bisectRight(-1, low: 5, high: 0), 5);
    expect(B.bisectRight(0, low: 5, high: 0), 5);
    expect(B.bisectRight(1, low: 5, high: 0), 5);
    expect(B.bisectRight(2, low: 5, high: 0), 5);
    expect(B.bisectRight(3, low: 5, high: 0), 5);
    expect(B.bisectRight(4, low: 5, high: 0), 5);
    expect(B.bisectRight(5, low: 5, high: 0), 5);
    expect(B.bisectRight(6, low: 5, high: 0), 5);
    expect(B.bisectRight(7, low: 5, high: 0), 5);
    expect(B.bisectRight(8, low: 5, high: 0), 5);
  });
  test('list.bisectRight for C lo=5 hi=0', () {
    expect(C.bisectRight(-2, low: 5, high: 0), 5);
    expect(C.bisectRight(-1, low: 5, high: 0), 5);
    expect(C.bisectRight(0, low: 5, high: 0), 5);
    expect(C.bisectRight(1, low: 5, high: 0), 5);
    expect(C.bisectRight(2, low: 5, high: 0), 5);
    expect(C.bisectRight(3, low: 5, high: 0), 5);
    expect(C.bisectRight(4, low: 5, high: 0), 5);
    expect(C.bisectRight(5, low: 5, high: 0), 5);
    expect(C.bisectRight(6, low: 5, high: 0), 5);
    expect(C.bisectRight(7, low: 5, high: 0), 5);
    expect(C.bisectRight(8, low: 5, high: 0), 5);
  });
  test('list.bisectRight for D lo=5 hi=0', () {
    expect(D.bisectRight(-2, low: 5, high: 0), 5);
    expect(D.bisectRight(-1, low: 5, high: 0), 5);
    expect(D.bisectRight(0, low: 5, high: 0), 5);
    expect(D.bisectRight(1, low: 5, high: 0), 5);
    expect(D.bisectRight(2, low: 5, high: 0), 5);
    expect(D.bisectRight(3, low: 5, high: 0), 5);
    expect(D.bisectRight(4, low: 5, high: 0), 5);
    expect(D.bisectRight(5, low: 5, high: 0), 5);
    expect(D.bisectRight(6, low: 5, high: 0), 5);
    expect(D.bisectRight(7, low: 5, high: 0), 5);
    expect(D.bisectRight(8, low: 5, high: 0), 5);
  });
  test('list.bisectRight for E lo=5 hi=0', () {
    expect(E.bisectRight(-2, low: 5, high: 0), 5);
    expect(E.bisectRight(-1, low: 5, high: 0), 5);
    expect(E.bisectRight(0, low: 5, high: 0), 5);
    expect(E.bisectRight(1, low: 5, high: 0), 5);
    expect(E.bisectRight(2, low: 5, high: 0), 5);
    expect(E.bisectRight(3, low: 5, high: 0), 5);
    expect(E.bisectRight(4, low: 5, high: 0), 5);
    expect(E.bisectRight(5, low: 5, high: 0), 5);
    expect(E.bisectRight(6, low: 5, high: 0), 5);
    expect(E.bisectRight(7, low: 5, high: 0), 5);
    expect(E.bisectRight(8, low: 5, high: 0), 5);
  });
  test('list.bisectRight for A lo=6 hi=0', () {
    expect(A.bisectRight(-2, low: 6, high: 0), 6);
    expect(A.bisectRight(-1, low: 6, high: 0), 6);
    expect(A.bisectRight(0, low: 6, high: 0), 6);
    expect(A.bisectRight(1, low: 6, high: 0), 6);
    expect(A.bisectRight(2, low: 6, high: 0), 6);
    expect(A.bisectRight(3, low: 6, high: 0), 6);
    expect(A.bisectRight(4, low: 6, high: 0), 6);
    expect(A.bisectRight(5, low: 6, high: 0), 6);
    expect(A.bisectRight(6, low: 6, high: 0), 6);
    expect(A.bisectRight(7, low: 6, high: 0), 6);
    expect(A.bisectRight(8, low: 6, high: 0), 6);
  });
  test('list.bisectRight for B lo=6 hi=0', () {
    expect(B.bisectRight(-2, low: 6, high: 0), 6);
    expect(B.bisectRight(-1, low: 6, high: 0), 6);
    expect(B.bisectRight(0, low: 6, high: 0), 6);
    expect(B.bisectRight(1, low: 6, high: 0), 6);
    expect(B.bisectRight(2, low: 6, high: 0), 6);
    expect(B.bisectRight(3, low: 6, high: 0), 6);
    expect(B.bisectRight(4, low: 6, high: 0), 6);
    expect(B.bisectRight(5, low: 6, high: 0), 6);
    expect(B.bisectRight(6, low: 6, high: 0), 6);
    expect(B.bisectRight(7, low: 6, high: 0), 6);
    expect(B.bisectRight(8, low: 6, high: 0), 6);
  });
  test('list.bisectRight for C lo=6 hi=0', () {
    expect(C.bisectRight(-2, low: 6, high: 0), 6);
    expect(C.bisectRight(-1, low: 6, high: 0), 6);
    expect(C.bisectRight(0, low: 6, high: 0), 6);
    expect(C.bisectRight(1, low: 6, high: 0), 6);
    expect(C.bisectRight(2, low: 6, high: 0), 6);
    expect(C.bisectRight(3, low: 6, high: 0), 6);
    expect(C.bisectRight(4, low: 6, high: 0), 6);
    expect(C.bisectRight(5, low: 6, high: 0), 6);
    expect(C.bisectRight(6, low: 6, high: 0), 6);
    expect(C.bisectRight(7, low: 6, high: 0), 6);
    expect(C.bisectRight(8, low: 6, high: 0), 6);
  });
  test('list.bisectRight for D lo=6 hi=0', () {
    expect(D.bisectRight(-2, low: 6, high: 0), 6);
    expect(D.bisectRight(-1, low: 6, high: 0), 6);
    expect(D.bisectRight(0, low: 6, high: 0), 6);
    expect(D.bisectRight(1, low: 6, high: 0), 6);
    expect(D.bisectRight(2, low: 6, high: 0), 6);
    expect(D.bisectRight(3, low: 6, high: 0), 6);
    expect(D.bisectRight(4, low: 6, high: 0), 6);
    expect(D.bisectRight(5, low: 6, high: 0), 6);
    expect(D.bisectRight(6, low: 6, high: 0), 6);
    expect(D.bisectRight(7, low: 6, high: 0), 6);
    expect(D.bisectRight(8, low: 6, high: 0), 6);
  });
  test('list.bisectRight for E lo=6 hi=0', () {
    expect(E.bisectRight(-2, low: 6, high: 0), 6);
    expect(E.bisectRight(-1, low: 6, high: 0), 6);
    expect(E.bisectRight(0, low: 6, high: 0), 6);
    expect(E.bisectRight(1, low: 6, high: 0), 6);
    expect(E.bisectRight(2, low: 6, high: 0), 6);
    expect(E.bisectRight(3, low: 6, high: 0), 6);
    expect(E.bisectRight(4, low: 6, high: 0), 6);
    expect(E.bisectRight(5, low: 6, high: 0), 6);
    expect(E.bisectRight(6, low: 6, high: 0), 6);
    expect(E.bisectRight(7, low: 6, high: 0), 6);
    expect(E.bisectRight(8, low: 6, high: 0), 6);
  });
  test('list.bisectRight for A lo=7 hi=0', () {
    expect(A.bisectRight(-2, low: 7, high: 0), 7);
    expect(A.bisectRight(-1, low: 7, high: 0), 7);
    expect(A.bisectRight(0, low: 7, high: 0), 7);
    expect(A.bisectRight(1, low: 7, high: 0), 7);
    expect(A.bisectRight(2, low: 7, high: 0), 7);
    expect(A.bisectRight(3, low: 7, high: 0), 7);
    expect(A.bisectRight(4, low: 7, high: 0), 7);
    expect(A.bisectRight(5, low: 7, high: 0), 7);
    expect(A.bisectRight(6, low: 7, high: 0), 7);
    expect(A.bisectRight(7, low: 7, high: 0), 7);
    expect(A.bisectRight(8, low: 7, high: 0), 7);
  });
  test('list.bisectRight for B lo=7 hi=0', () {
    expect(B.bisectRight(-2, low: 7, high: 0), 7);
    expect(B.bisectRight(-1, low: 7, high: 0), 7);
    expect(B.bisectRight(0, low: 7, high: 0), 7);
    expect(B.bisectRight(1, low: 7, high: 0), 7);
    expect(B.bisectRight(2, low: 7, high: 0), 7);
    expect(B.bisectRight(3, low: 7, high: 0), 7);
    expect(B.bisectRight(4, low: 7, high: 0), 7);
    expect(B.bisectRight(5, low: 7, high: 0), 7);
    expect(B.bisectRight(6, low: 7, high: 0), 7);
    expect(B.bisectRight(7, low: 7, high: 0), 7);
    expect(B.bisectRight(8, low: 7, high: 0), 7);
  });
  test('list.bisectRight for C lo=7 hi=0', () {
    expect(C.bisectRight(-2, low: 7, high: 0), 7);
    expect(C.bisectRight(-1, low: 7, high: 0), 7);
    expect(C.bisectRight(0, low: 7, high: 0), 7);
    expect(C.bisectRight(1, low: 7, high: 0), 7);
    expect(C.bisectRight(2, low: 7, high: 0), 7);
    expect(C.bisectRight(3, low: 7, high: 0), 7);
    expect(C.bisectRight(4, low: 7, high: 0), 7);
    expect(C.bisectRight(5, low: 7, high: 0), 7);
    expect(C.bisectRight(6, low: 7, high: 0), 7);
    expect(C.bisectRight(7, low: 7, high: 0), 7);
    expect(C.bisectRight(8, low: 7, high: 0), 7);
  });
  test('list.bisectRight for D lo=7 hi=0', () {
    expect(D.bisectRight(-2, low: 7, high: 0), 7);
    expect(D.bisectRight(-1, low: 7, high: 0), 7);
    expect(D.bisectRight(0, low: 7, high: 0), 7);
    expect(D.bisectRight(1, low: 7, high: 0), 7);
    expect(D.bisectRight(2, low: 7, high: 0), 7);
    expect(D.bisectRight(3, low: 7, high: 0), 7);
    expect(D.bisectRight(4, low: 7, high: 0), 7);
    expect(D.bisectRight(5, low: 7, high: 0), 7);
    expect(D.bisectRight(6, low: 7, high: 0), 7);
    expect(D.bisectRight(7, low: 7, high: 0), 7);
    expect(D.bisectRight(8, low: 7, high: 0), 7);
  });
  test('list.bisectRight for E lo=7 hi=0', () {
    expect(E.bisectRight(-2, low: 7, high: 0), 7);
    expect(E.bisectRight(-1, low: 7, high: 0), 7);
    expect(E.bisectRight(0, low: 7, high: 0), 7);
    expect(E.bisectRight(1, low: 7, high: 0), 7);
    expect(E.bisectRight(2, low: 7, high: 0), 7);
    expect(E.bisectRight(3, low: 7, high: 0), 7);
    expect(E.bisectRight(4, low: 7, high: 0), 7);
    expect(E.bisectRight(5, low: 7, high: 0), 7);
    expect(E.bisectRight(6, low: 7, high: 0), 7);
    expect(E.bisectRight(7, low: 7, high: 0), 7);
    expect(E.bisectRight(8, low: 7, high: 0), 7);
  });
  test('list.bisectRight for A lo=8 hi=0', () {
    expect(A.bisectRight(-2, low: 8, high: 0), 8);
    expect(A.bisectRight(-1, low: 8, high: 0), 8);
    expect(A.bisectRight(0, low: 8, high: 0), 8);
    expect(A.bisectRight(1, low: 8, high: 0), 8);
    expect(A.bisectRight(2, low: 8, high: 0), 8);
    expect(A.bisectRight(3, low: 8, high: 0), 8);
    expect(A.bisectRight(4, low: 8, high: 0), 8);
    expect(A.bisectRight(5, low: 8, high: 0), 8);
    expect(A.bisectRight(6, low: 8, high: 0), 8);
    expect(A.bisectRight(7, low: 8, high: 0), 8);
    expect(A.bisectRight(8, low: 8, high: 0), 8);
  });
  test('list.bisectRight for B lo=8 hi=0', () {
    expect(B.bisectRight(-2, low: 8, high: 0), 8);
    expect(B.bisectRight(-1, low: 8, high: 0), 8);
    expect(B.bisectRight(0, low: 8, high: 0), 8);
    expect(B.bisectRight(1, low: 8, high: 0), 8);
    expect(B.bisectRight(2, low: 8, high: 0), 8);
    expect(B.bisectRight(3, low: 8, high: 0), 8);
    expect(B.bisectRight(4, low: 8, high: 0), 8);
    expect(B.bisectRight(5, low: 8, high: 0), 8);
    expect(B.bisectRight(6, low: 8, high: 0), 8);
    expect(B.bisectRight(7, low: 8, high: 0), 8);
    expect(B.bisectRight(8, low: 8, high: 0), 8);
  });
  test('list.bisectRight for C lo=8 hi=0', () {
    expect(C.bisectRight(-2, low: 8, high: 0), 8);
    expect(C.bisectRight(-1, low: 8, high: 0), 8);
    expect(C.bisectRight(0, low: 8, high: 0), 8);
    expect(C.bisectRight(1, low: 8, high: 0), 8);
    expect(C.bisectRight(2, low: 8, high: 0), 8);
    expect(C.bisectRight(3, low: 8, high: 0), 8);
    expect(C.bisectRight(4, low: 8, high: 0), 8);
    expect(C.bisectRight(5, low: 8, high: 0), 8);
    expect(C.bisectRight(6, low: 8, high: 0), 8);
    expect(C.bisectRight(7, low: 8, high: 0), 8);
    expect(C.bisectRight(8, low: 8, high: 0), 8);
  });
  test('list.bisectRight for D lo=8 hi=0', () {
    expect(D.bisectRight(-2, low: 8, high: 0), 8);
    expect(D.bisectRight(-1, low: 8, high: 0), 8);
    expect(D.bisectRight(0, low: 8, high: 0), 8);
    expect(D.bisectRight(1, low: 8, high: 0), 8);
    expect(D.bisectRight(2, low: 8, high: 0), 8);
    expect(D.bisectRight(3, low: 8, high: 0), 8);
    expect(D.bisectRight(4, low: 8, high: 0), 8);
    expect(D.bisectRight(5, low: 8, high: 0), 8);
    expect(D.bisectRight(6, low: 8, high: 0), 8);
    expect(D.bisectRight(7, low: 8, high: 0), 8);
    expect(D.bisectRight(8, low: 8, high: 0), 8);
  });
  test('list.bisectRight for E lo=8 hi=0', () {
    expect(E.bisectRight(-2, low: 8, high: 0), 8);
    expect(E.bisectRight(-1, low: 8, high: 0), 8);
    expect(E.bisectRight(0, low: 8, high: 0), 8);
    expect(E.bisectRight(1, low: 8, high: 0), 8);
    expect(E.bisectRight(2, low: 8, high: 0), 8);
    expect(E.bisectRight(3, low: 8, high: 0), 8);
    expect(E.bisectRight(4, low: 8, high: 0), 8);
    expect(E.bisectRight(5, low: 8, high: 0), 8);
    expect(E.bisectRight(6, low: 8, high: 0), 8);
    expect(E.bisectRight(7, low: 8, high: 0), 8);
    expect(E.bisectRight(8, low: 8, high: 0), 8);
  });
  test('list.bisectRight for A lo=9 hi=0', () {
    expect(A.bisectRight(-2, low: 9, high: 0), 9);
    expect(A.bisectRight(-1, low: 9, high: 0), 9);
    expect(A.bisectRight(0, low: 9, high: 0), 9);
    expect(A.bisectRight(1, low: 9, high: 0), 9);
    expect(A.bisectRight(2, low: 9, high: 0), 9);
    expect(A.bisectRight(3, low: 9, high: 0), 9);
    expect(A.bisectRight(4, low: 9, high: 0), 9);
    expect(A.bisectRight(5, low: 9, high: 0), 9);
    expect(A.bisectRight(6, low: 9, high: 0), 9);
    expect(A.bisectRight(7, low: 9, high: 0), 9);
    expect(A.bisectRight(8, low: 9, high: 0), 9);
  });
  test('list.bisectRight for B lo=9 hi=0', () {
    expect(B.bisectRight(-2, low: 9, high: 0), 9);
    expect(B.bisectRight(-1, low: 9, high: 0), 9);
    expect(B.bisectRight(0, low: 9, high: 0), 9);
    expect(B.bisectRight(1, low: 9, high: 0), 9);
    expect(B.bisectRight(2, low: 9, high: 0), 9);
    expect(B.bisectRight(3, low: 9, high: 0), 9);
    expect(B.bisectRight(4, low: 9, high: 0), 9);
    expect(B.bisectRight(5, low: 9, high: 0), 9);
    expect(B.bisectRight(6, low: 9, high: 0), 9);
    expect(B.bisectRight(7, low: 9, high: 0), 9);
    expect(B.bisectRight(8, low: 9, high: 0), 9);
  });
  test('list.bisectRight for C lo=9 hi=0', () {
    expect(C.bisectRight(-2, low: 9, high: 0), 9);
    expect(C.bisectRight(-1, low: 9, high: 0), 9);
    expect(C.bisectRight(0, low: 9, high: 0), 9);
    expect(C.bisectRight(1, low: 9, high: 0), 9);
    expect(C.bisectRight(2, low: 9, high: 0), 9);
    expect(C.bisectRight(3, low: 9, high: 0), 9);
    expect(C.bisectRight(4, low: 9, high: 0), 9);
    expect(C.bisectRight(5, low: 9, high: 0), 9);
    expect(C.bisectRight(6, low: 9, high: 0), 9);
    expect(C.bisectRight(7, low: 9, high: 0), 9);
    expect(C.bisectRight(8, low: 9, high: 0), 9);
  });
  test('list.bisectRight for D lo=9 hi=0', () {
    expect(D.bisectRight(-2, low: 9, high: 0), 9);
    expect(D.bisectRight(-1, low: 9, high: 0), 9);
    expect(D.bisectRight(0, low: 9, high: 0), 9);
    expect(D.bisectRight(1, low: 9, high: 0), 9);
    expect(D.bisectRight(2, low: 9, high: 0), 9);
    expect(D.bisectRight(3, low: 9, high: 0), 9);
    expect(D.bisectRight(4, low: 9, high: 0), 9);
    expect(D.bisectRight(5, low: 9, high: 0), 9);
    expect(D.bisectRight(6, low: 9, high: 0), 9);
    expect(D.bisectRight(7, low: 9, high: 0), 9);
    expect(D.bisectRight(8, low: 9, high: 0), 9);
  });
  test('list.bisectRight for E lo=9 hi=0', () {
    expect(E.bisectRight(-2, low: 9, high: 0), 9);
    expect(E.bisectRight(-1, low: 9, high: 0), 9);
    expect(E.bisectRight(0, low: 9, high: 0), 9);
    expect(E.bisectRight(1, low: 9, high: 0), 9);
    expect(E.bisectRight(2, low: 9, high: 0), 9);
    expect(E.bisectRight(3, low: 9, high: 0), 9);
    expect(E.bisectRight(4, low: 9, high: 0), 9);
    expect(E.bisectRight(5, low: 9, high: 0), 9);
    expect(E.bisectRight(6, low: 9, high: 0), 9);
    expect(E.bisectRight(7, low: 9, high: 0), 9);
    expect(E.bisectRight(8, low: 9, high: 0), 9);
  });
  test('list.bisectRight for A lo=None hi=1', () {
    expect(() => A.bisectRight(-2, high: 1), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 1), throwsRangeError);
    expect(() => A.bisectRight(0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(1, high: 1), throwsRangeError);
    expect(() => A.bisectRight(2, high: 1), throwsRangeError);
    expect(() => A.bisectRight(3, high: 1), throwsRangeError);
    expect(() => A.bisectRight(4, high: 1), throwsRangeError);
    expect(() => A.bisectRight(5, high: 1), throwsRangeError);
    expect(() => A.bisectRight(6, high: 1), throwsRangeError);
    expect(() => A.bisectRight(7, high: 1), throwsRangeError);
    expect(() => A.bisectRight(8, high: 1), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=1', () {
    expect(B.bisectRight(-2, high: 1), 0);
    expect(B.bisectRight(-1, high: 1), 0);
    expect(B.bisectRight(0, high: 1), 0);
    expect(B.bisectRight(1, high: 1), 0);
    expect(B.bisectRight(2, high: 1), 0);
    expect(B.bisectRight(3, high: 1), 0);
    expect(B.bisectRight(4, high: 1), 1);
    expect(B.bisectRight(5, high: 1), 1);
    expect(B.bisectRight(6, high: 1), 1);
    expect(B.bisectRight(7, high: 1), 1);
    expect(B.bisectRight(8, high: 1), 1);
  });
  test('list.bisectRight for C lo=None hi=1', () {
    expect(C.bisectRight(-2, high: 1), 0);
    expect(C.bisectRight(-1, high: 1), 0);
    expect(C.bisectRight(0, high: 1), 0);
    expect(C.bisectRight(1, high: 1), 0);
    expect(C.bisectRight(2, high: 1), 0);
    expect(C.bisectRight(3, high: 1), 0);
    expect(C.bisectRight(4, high: 1), 1);
    expect(C.bisectRight(5, high: 1), 1);
    expect(C.bisectRight(6, high: 1), 1);
    expect(C.bisectRight(7, high: 1), 1);
    expect(C.bisectRight(8, high: 1), 1);
  });
  test('list.bisectRight for D lo=None hi=1', () {
    expect(D.bisectRight(-2, high: 1), 0);
    expect(D.bisectRight(-1, high: 1), 0);
    expect(D.bisectRight(0, high: 1), 0);
    expect(D.bisectRight(1, high: 1), 0);
    expect(D.bisectRight(2, high: 1), 0);
    expect(D.bisectRight(3, high: 1), 1);
    expect(D.bisectRight(4, high: 1), 1);
    expect(D.bisectRight(5, high: 1), 1);
    expect(D.bisectRight(6, high: 1), 1);
    expect(D.bisectRight(7, high: 1), 1);
    expect(D.bisectRight(8, high: 1), 1);
  });
  test('list.bisectRight for E lo=None hi=1', () {
    expect(E.bisectRight(-2, high: 1), 0);
    expect(E.bisectRight(-1, high: 1), 0);
    expect(E.bisectRight(0, high: 1), 1);
    expect(E.bisectRight(1, high: 1), 1);
    expect(E.bisectRight(2, high: 1), 1);
    expect(E.bisectRight(3, high: 1), 1);
    expect(E.bisectRight(4, high: 1), 1);
    expect(E.bisectRight(5, high: 1), 1);
    expect(E.bisectRight(6, high: 1), 1);
    expect(E.bisectRight(7, high: 1), 1);
    expect(E.bisectRight(8, high: 1), 1);
  });
  test('list.bisectRight for A lo=0 hi=1', () {
    expect(() => A.bisectRight(-2, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 1), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=1', () {
    expect(B.bisectRight(-2, low: 0, high: 1), 0);
    expect(B.bisectRight(-1, low: 0, high: 1), 0);
    expect(B.bisectRight(0, low: 0, high: 1), 0);
    expect(B.bisectRight(1, low: 0, high: 1), 0);
    expect(B.bisectRight(2, low: 0, high: 1), 0);
    expect(B.bisectRight(3, low: 0, high: 1), 0);
    expect(B.bisectRight(4, low: 0, high: 1), 1);
    expect(B.bisectRight(5, low: 0, high: 1), 1);
    expect(B.bisectRight(6, low: 0, high: 1), 1);
    expect(B.bisectRight(7, low: 0, high: 1), 1);
    expect(B.bisectRight(8, low: 0, high: 1), 1);
  });
  test('list.bisectRight for C lo=0 hi=1', () {
    expect(C.bisectRight(-2, low: 0, high: 1), 0);
    expect(C.bisectRight(-1, low: 0, high: 1), 0);
    expect(C.bisectRight(0, low: 0, high: 1), 0);
    expect(C.bisectRight(1, low: 0, high: 1), 0);
    expect(C.bisectRight(2, low: 0, high: 1), 0);
    expect(C.bisectRight(3, low: 0, high: 1), 0);
    expect(C.bisectRight(4, low: 0, high: 1), 1);
    expect(C.bisectRight(5, low: 0, high: 1), 1);
    expect(C.bisectRight(6, low: 0, high: 1), 1);
    expect(C.bisectRight(7, low: 0, high: 1), 1);
    expect(C.bisectRight(8, low: 0, high: 1), 1);
  });
  test('list.bisectRight for D lo=0 hi=1', () {
    expect(D.bisectRight(-2, low: 0, high: 1), 0);
    expect(D.bisectRight(-1, low: 0, high: 1), 0);
    expect(D.bisectRight(0, low: 0, high: 1), 0);
    expect(D.bisectRight(1, low: 0, high: 1), 0);
    expect(D.bisectRight(2, low: 0, high: 1), 0);
    expect(D.bisectRight(3, low: 0, high: 1), 1);
    expect(D.bisectRight(4, low: 0, high: 1), 1);
    expect(D.bisectRight(5, low: 0, high: 1), 1);
    expect(D.bisectRight(6, low: 0, high: 1), 1);
    expect(D.bisectRight(7, low: 0, high: 1), 1);
    expect(D.bisectRight(8, low: 0, high: 1), 1);
  });
  test('list.bisectRight for E lo=0 hi=1', () {
    expect(E.bisectRight(-2, low: 0, high: 1), 0);
    expect(E.bisectRight(-1, low: 0, high: 1), 0);
    expect(E.bisectRight(0, low: 0, high: 1), 1);
    expect(E.bisectRight(1, low: 0, high: 1), 1);
    expect(E.bisectRight(2, low: 0, high: 1), 1);
    expect(E.bisectRight(3, low: 0, high: 1), 1);
    expect(E.bisectRight(4, low: 0, high: 1), 1);
    expect(E.bisectRight(5, low: 0, high: 1), 1);
    expect(E.bisectRight(6, low: 0, high: 1), 1);
    expect(E.bisectRight(7, low: 0, high: 1), 1);
    expect(E.bisectRight(8, low: 0, high: 1), 1);
  });
  test('list.bisectRight for A lo=1 hi=1', () {
    expect(A.bisectRight(-2, low: 1, high: 1), 1);
    expect(A.bisectRight(-1, low: 1, high: 1), 1);
    expect(A.bisectRight(0, low: 1, high: 1), 1);
    expect(A.bisectRight(1, low: 1, high: 1), 1);
    expect(A.bisectRight(2, low: 1, high: 1), 1);
    expect(A.bisectRight(3, low: 1, high: 1), 1);
    expect(A.bisectRight(4, low: 1, high: 1), 1);
    expect(A.bisectRight(5, low: 1, high: 1), 1);
    expect(A.bisectRight(6, low: 1, high: 1), 1);
    expect(A.bisectRight(7, low: 1, high: 1), 1);
    expect(A.bisectRight(8, low: 1, high: 1), 1);
  });
  test('list.bisectRight for B lo=1 hi=1', () {
    expect(B.bisectRight(-2, low: 1, high: 1), 1);
    expect(B.bisectRight(-1, low: 1, high: 1), 1);
    expect(B.bisectRight(0, low: 1, high: 1), 1);
    expect(B.bisectRight(1, low: 1, high: 1), 1);
    expect(B.bisectRight(2, low: 1, high: 1), 1);
    expect(B.bisectRight(3, low: 1, high: 1), 1);
    expect(B.bisectRight(4, low: 1, high: 1), 1);
    expect(B.bisectRight(5, low: 1, high: 1), 1);
    expect(B.bisectRight(6, low: 1, high: 1), 1);
    expect(B.bisectRight(7, low: 1, high: 1), 1);
    expect(B.bisectRight(8, low: 1, high: 1), 1);
  });
  test('list.bisectRight for C lo=1 hi=1', () {
    expect(C.bisectRight(-2, low: 1, high: 1), 1);
    expect(C.bisectRight(-1, low: 1, high: 1), 1);
    expect(C.bisectRight(0, low: 1, high: 1), 1);
    expect(C.bisectRight(1, low: 1, high: 1), 1);
    expect(C.bisectRight(2, low: 1, high: 1), 1);
    expect(C.bisectRight(3, low: 1, high: 1), 1);
    expect(C.bisectRight(4, low: 1, high: 1), 1);
    expect(C.bisectRight(5, low: 1, high: 1), 1);
    expect(C.bisectRight(6, low: 1, high: 1), 1);
    expect(C.bisectRight(7, low: 1, high: 1), 1);
    expect(C.bisectRight(8, low: 1, high: 1), 1);
  });
  test('list.bisectRight for D lo=1 hi=1', () {
    expect(D.bisectRight(-2, low: 1, high: 1), 1);
    expect(D.bisectRight(-1, low: 1, high: 1), 1);
    expect(D.bisectRight(0, low: 1, high: 1), 1);
    expect(D.bisectRight(1, low: 1, high: 1), 1);
    expect(D.bisectRight(2, low: 1, high: 1), 1);
    expect(D.bisectRight(3, low: 1, high: 1), 1);
    expect(D.bisectRight(4, low: 1, high: 1), 1);
    expect(D.bisectRight(5, low: 1, high: 1), 1);
    expect(D.bisectRight(6, low: 1, high: 1), 1);
    expect(D.bisectRight(7, low: 1, high: 1), 1);
    expect(D.bisectRight(8, low: 1, high: 1), 1);
  });
  test('list.bisectRight for E lo=1 hi=1', () {
    expect(E.bisectRight(-2, low: 1, high: 1), 1);
    expect(E.bisectRight(-1, low: 1, high: 1), 1);
    expect(E.bisectRight(0, low: 1, high: 1), 1);
    expect(E.bisectRight(1, low: 1, high: 1), 1);
    expect(E.bisectRight(2, low: 1, high: 1), 1);
    expect(E.bisectRight(3, low: 1, high: 1), 1);
    expect(E.bisectRight(4, low: 1, high: 1), 1);
    expect(E.bisectRight(5, low: 1, high: 1), 1);
    expect(E.bisectRight(6, low: 1, high: 1), 1);
    expect(E.bisectRight(7, low: 1, high: 1), 1);
    expect(E.bisectRight(8, low: 1, high: 1), 1);
  });
  test('list.bisectRight for A lo=2 hi=1', () {
    expect(A.bisectRight(-2, low: 2, high: 1), 2);
    expect(A.bisectRight(-1, low: 2, high: 1), 2);
    expect(A.bisectRight(0, low: 2, high: 1), 2);
    expect(A.bisectRight(1, low: 2, high: 1), 2);
    expect(A.bisectRight(2, low: 2, high: 1), 2);
    expect(A.bisectRight(3, low: 2, high: 1), 2);
    expect(A.bisectRight(4, low: 2, high: 1), 2);
    expect(A.bisectRight(5, low: 2, high: 1), 2);
    expect(A.bisectRight(6, low: 2, high: 1), 2);
    expect(A.bisectRight(7, low: 2, high: 1), 2);
    expect(A.bisectRight(8, low: 2, high: 1), 2);
  });
  test('list.bisectRight for B lo=2 hi=1', () {
    expect(B.bisectRight(-2, low: 2, high: 1), 2);
    expect(B.bisectRight(-1, low: 2, high: 1), 2);
    expect(B.bisectRight(0, low: 2, high: 1), 2);
    expect(B.bisectRight(1, low: 2, high: 1), 2);
    expect(B.bisectRight(2, low: 2, high: 1), 2);
    expect(B.bisectRight(3, low: 2, high: 1), 2);
    expect(B.bisectRight(4, low: 2, high: 1), 2);
    expect(B.bisectRight(5, low: 2, high: 1), 2);
    expect(B.bisectRight(6, low: 2, high: 1), 2);
    expect(B.bisectRight(7, low: 2, high: 1), 2);
    expect(B.bisectRight(8, low: 2, high: 1), 2);
  });
  test('list.bisectRight for C lo=2 hi=1', () {
    expect(C.bisectRight(-2, low: 2, high: 1), 2);
    expect(C.bisectRight(-1, low: 2, high: 1), 2);
    expect(C.bisectRight(0, low: 2, high: 1), 2);
    expect(C.bisectRight(1, low: 2, high: 1), 2);
    expect(C.bisectRight(2, low: 2, high: 1), 2);
    expect(C.bisectRight(3, low: 2, high: 1), 2);
    expect(C.bisectRight(4, low: 2, high: 1), 2);
    expect(C.bisectRight(5, low: 2, high: 1), 2);
    expect(C.bisectRight(6, low: 2, high: 1), 2);
    expect(C.bisectRight(7, low: 2, high: 1), 2);
    expect(C.bisectRight(8, low: 2, high: 1), 2);
  });
  test('list.bisectRight for D lo=2 hi=1', () {
    expect(D.bisectRight(-2, low: 2, high: 1), 2);
    expect(D.bisectRight(-1, low: 2, high: 1), 2);
    expect(D.bisectRight(0, low: 2, high: 1), 2);
    expect(D.bisectRight(1, low: 2, high: 1), 2);
    expect(D.bisectRight(2, low: 2, high: 1), 2);
    expect(D.bisectRight(3, low: 2, high: 1), 2);
    expect(D.bisectRight(4, low: 2, high: 1), 2);
    expect(D.bisectRight(5, low: 2, high: 1), 2);
    expect(D.bisectRight(6, low: 2, high: 1), 2);
    expect(D.bisectRight(7, low: 2, high: 1), 2);
    expect(D.bisectRight(8, low: 2, high: 1), 2);
  });
  test('list.bisectRight for E lo=2 hi=1', () {
    expect(E.bisectRight(-2, low: 2, high: 1), 2);
    expect(E.bisectRight(-1, low: 2, high: 1), 2);
    expect(E.bisectRight(0, low: 2, high: 1), 2);
    expect(E.bisectRight(1, low: 2, high: 1), 2);
    expect(E.bisectRight(2, low: 2, high: 1), 2);
    expect(E.bisectRight(3, low: 2, high: 1), 2);
    expect(E.bisectRight(4, low: 2, high: 1), 2);
    expect(E.bisectRight(5, low: 2, high: 1), 2);
    expect(E.bisectRight(6, low: 2, high: 1), 2);
    expect(E.bisectRight(7, low: 2, high: 1), 2);
    expect(E.bisectRight(8, low: 2, high: 1), 2);
  });
  test('list.bisectRight for A lo=3 hi=1', () {
    expect(A.bisectRight(-2, low: 3, high: 1), 3);
    expect(A.bisectRight(-1, low: 3, high: 1), 3);
    expect(A.bisectRight(0, low: 3, high: 1), 3);
    expect(A.bisectRight(1, low: 3, high: 1), 3);
    expect(A.bisectRight(2, low: 3, high: 1), 3);
    expect(A.bisectRight(3, low: 3, high: 1), 3);
    expect(A.bisectRight(4, low: 3, high: 1), 3);
    expect(A.bisectRight(5, low: 3, high: 1), 3);
    expect(A.bisectRight(6, low: 3, high: 1), 3);
    expect(A.bisectRight(7, low: 3, high: 1), 3);
    expect(A.bisectRight(8, low: 3, high: 1), 3);
  });
  test('list.bisectRight for B lo=3 hi=1', () {
    expect(B.bisectRight(-2, low: 3, high: 1), 3);
    expect(B.bisectRight(-1, low: 3, high: 1), 3);
    expect(B.bisectRight(0, low: 3, high: 1), 3);
    expect(B.bisectRight(1, low: 3, high: 1), 3);
    expect(B.bisectRight(2, low: 3, high: 1), 3);
    expect(B.bisectRight(3, low: 3, high: 1), 3);
    expect(B.bisectRight(4, low: 3, high: 1), 3);
    expect(B.bisectRight(5, low: 3, high: 1), 3);
    expect(B.bisectRight(6, low: 3, high: 1), 3);
    expect(B.bisectRight(7, low: 3, high: 1), 3);
    expect(B.bisectRight(8, low: 3, high: 1), 3);
  });
  test('list.bisectRight for C lo=3 hi=1', () {
    expect(C.bisectRight(-2, low: 3, high: 1), 3);
    expect(C.bisectRight(-1, low: 3, high: 1), 3);
    expect(C.bisectRight(0, low: 3, high: 1), 3);
    expect(C.bisectRight(1, low: 3, high: 1), 3);
    expect(C.bisectRight(2, low: 3, high: 1), 3);
    expect(C.bisectRight(3, low: 3, high: 1), 3);
    expect(C.bisectRight(4, low: 3, high: 1), 3);
    expect(C.bisectRight(5, low: 3, high: 1), 3);
    expect(C.bisectRight(6, low: 3, high: 1), 3);
    expect(C.bisectRight(7, low: 3, high: 1), 3);
    expect(C.bisectRight(8, low: 3, high: 1), 3);
  });
  test('list.bisectRight for D lo=3 hi=1', () {
    expect(D.bisectRight(-2, low: 3, high: 1), 3);
    expect(D.bisectRight(-1, low: 3, high: 1), 3);
    expect(D.bisectRight(0, low: 3, high: 1), 3);
    expect(D.bisectRight(1, low: 3, high: 1), 3);
    expect(D.bisectRight(2, low: 3, high: 1), 3);
    expect(D.bisectRight(3, low: 3, high: 1), 3);
    expect(D.bisectRight(4, low: 3, high: 1), 3);
    expect(D.bisectRight(5, low: 3, high: 1), 3);
    expect(D.bisectRight(6, low: 3, high: 1), 3);
    expect(D.bisectRight(7, low: 3, high: 1), 3);
    expect(D.bisectRight(8, low: 3, high: 1), 3);
  });
  test('list.bisectRight for E lo=3 hi=1', () {
    expect(E.bisectRight(-2, low: 3, high: 1), 3);
    expect(E.bisectRight(-1, low: 3, high: 1), 3);
    expect(E.bisectRight(0, low: 3, high: 1), 3);
    expect(E.bisectRight(1, low: 3, high: 1), 3);
    expect(E.bisectRight(2, low: 3, high: 1), 3);
    expect(E.bisectRight(3, low: 3, high: 1), 3);
    expect(E.bisectRight(4, low: 3, high: 1), 3);
    expect(E.bisectRight(5, low: 3, high: 1), 3);
    expect(E.bisectRight(6, low: 3, high: 1), 3);
    expect(E.bisectRight(7, low: 3, high: 1), 3);
    expect(E.bisectRight(8, low: 3, high: 1), 3);
  });
  test('list.bisectRight for A lo=4 hi=1', () {
    expect(A.bisectRight(-2, low: 4, high: 1), 4);
    expect(A.bisectRight(-1, low: 4, high: 1), 4);
    expect(A.bisectRight(0, low: 4, high: 1), 4);
    expect(A.bisectRight(1, low: 4, high: 1), 4);
    expect(A.bisectRight(2, low: 4, high: 1), 4);
    expect(A.bisectRight(3, low: 4, high: 1), 4);
    expect(A.bisectRight(4, low: 4, high: 1), 4);
    expect(A.bisectRight(5, low: 4, high: 1), 4);
    expect(A.bisectRight(6, low: 4, high: 1), 4);
    expect(A.bisectRight(7, low: 4, high: 1), 4);
    expect(A.bisectRight(8, low: 4, high: 1), 4);
  });
  test('list.bisectRight for B lo=4 hi=1', () {
    expect(B.bisectRight(-2, low: 4, high: 1), 4);
    expect(B.bisectRight(-1, low: 4, high: 1), 4);
    expect(B.bisectRight(0, low: 4, high: 1), 4);
    expect(B.bisectRight(1, low: 4, high: 1), 4);
    expect(B.bisectRight(2, low: 4, high: 1), 4);
    expect(B.bisectRight(3, low: 4, high: 1), 4);
    expect(B.bisectRight(4, low: 4, high: 1), 4);
    expect(B.bisectRight(5, low: 4, high: 1), 4);
    expect(B.bisectRight(6, low: 4, high: 1), 4);
    expect(B.bisectRight(7, low: 4, high: 1), 4);
    expect(B.bisectRight(8, low: 4, high: 1), 4);
  });
  test('list.bisectRight for C lo=4 hi=1', () {
    expect(C.bisectRight(-2, low: 4, high: 1), 4);
    expect(C.bisectRight(-1, low: 4, high: 1), 4);
    expect(C.bisectRight(0, low: 4, high: 1), 4);
    expect(C.bisectRight(1, low: 4, high: 1), 4);
    expect(C.bisectRight(2, low: 4, high: 1), 4);
    expect(C.bisectRight(3, low: 4, high: 1), 4);
    expect(C.bisectRight(4, low: 4, high: 1), 4);
    expect(C.bisectRight(5, low: 4, high: 1), 4);
    expect(C.bisectRight(6, low: 4, high: 1), 4);
    expect(C.bisectRight(7, low: 4, high: 1), 4);
    expect(C.bisectRight(8, low: 4, high: 1), 4);
  });
  test('list.bisectRight for D lo=4 hi=1', () {
    expect(D.bisectRight(-2, low: 4, high: 1), 4);
    expect(D.bisectRight(-1, low: 4, high: 1), 4);
    expect(D.bisectRight(0, low: 4, high: 1), 4);
    expect(D.bisectRight(1, low: 4, high: 1), 4);
    expect(D.bisectRight(2, low: 4, high: 1), 4);
    expect(D.bisectRight(3, low: 4, high: 1), 4);
    expect(D.bisectRight(4, low: 4, high: 1), 4);
    expect(D.bisectRight(5, low: 4, high: 1), 4);
    expect(D.bisectRight(6, low: 4, high: 1), 4);
    expect(D.bisectRight(7, low: 4, high: 1), 4);
    expect(D.bisectRight(8, low: 4, high: 1), 4);
  });
  test('list.bisectRight for E lo=4 hi=1', () {
    expect(E.bisectRight(-2, low: 4, high: 1), 4);
    expect(E.bisectRight(-1, low: 4, high: 1), 4);
    expect(E.bisectRight(0, low: 4, high: 1), 4);
    expect(E.bisectRight(1, low: 4, high: 1), 4);
    expect(E.bisectRight(2, low: 4, high: 1), 4);
    expect(E.bisectRight(3, low: 4, high: 1), 4);
    expect(E.bisectRight(4, low: 4, high: 1), 4);
    expect(E.bisectRight(5, low: 4, high: 1), 4);
    expect(E.bisectRight(6, low: 4, high: 1), 4);
    expect(E.bisectRight(7, low: 4, high: 1), 4);
    expect(E.bisectRight(8, low: 4, high: 1), 4);
  });
  test('list.bisectRight for A lo=5 hi=1', () {
    expect(A.bisectRight(-2, low: 5, high: 1), 5);
    expect(A.bisectRight(-1, low: 5, high: 1), 5);
    expect(A.bisectRight(0, low: 5, high: 1), 5);
    expect(A.bisectRight(1, low: 5, high: 1), 5);
    expect(A.bisectRight(2, low: 5, high: 1), 5);
    expect(A.bisectRight(3, low: 5, high: 1), 5);
    expect(A.bisectRight(4, low: 5, high: 1), 5);
    expect(A.bisectRight(5, low: 5, high: 1), 5);
    expect(A.bisectRight(6, low: 5, high: 1), 5);
    expect(A.bisectRight(7, low: 5, high: 1), 5);
    expect(A.bisectRight(8, low: 5, high: 1), 5);
  });
  test('list.bisectRight for B lo=5 hi=1', () {
    expect(B.bisectRight(-2, low: 5, high: 1), 5);
    expect(B.bisectRight(-1, low: 5, high: 1), 5);
    expect(B.bisectRight(0, low: 5, high: 1), 5);
    expect(B.bisectRight(1, low: 5, high: 1), 5);
    expect(B.bisectRight(2, low: 5, high: 1), 5);
    expect(B.bisectRight(3, low: 5, high: 1), 5);
    expect(B.bisectRight(4, low: 5, high: 1), 5);
    expect(B.bisectRight(5, low: 5, high: 1), 5);
    expect(B.bisectRight(6, low: 5, high: 1), 5);
    expect(B.bisectRight(7, low: 5, high: 1), 5);
    expect(B.bisectRight(8, low: 5, high: 1), 5);
  });
  test('list.bisectRight for C lo=5 hi=1', () {
    expect(C.bisectRight(-2, low: 5, high: 1), 5);
    expect(C.bisectRight(-1, low: 5, high: 1), 5);
    expect(C.bisectRight(0, low: 5, high: 1), 5);
    expect(C.bisectRight(1, low: 5, high: 1), 5);
    expect(C.bisectRight(2, low: 5, high: 1), 5);
    expect(C.bisectRight(3, low: 5, high: 1), 5);
    expect(C.bisectRight(4, low: 5, high: 1), 5);
    expect(C.bisectRight(5, low: 5, high: 1), 5);
    expect(C.bisectRight(6, low: 5, high: 1), 5);
    expect(C.bisectRight(7, low: 5, high: 1), 5);
    expect(C.bisectRight(8, low: 5, high: 1), 5);
  });
  test('list.bisectRight for D lo=5 hi=1', () {
    expect(D.bisectRight(-2, low: 5, high: 1), 5);
    expect(D.bisectRight(-1, low: 5, high: 1), 5);
    expect(D.bisectRight(0, low: 5, high: 1), 5);
    expect(D.bisectRight(1, low: 5, high: 1), 5);
    expect(D.bisectRight(2, low: 5, high: 1), 5);
    expect(D.bisectRight(3, low: 5, high: 1), 5);
    expect(D.bisectRight(4, low: 5, high: 1), 5);
    expect(D.bisectRight(5, low: 5, high: 1), 5);
    expect(D.bisectRight(6, low: 5, high: 1), 5);
    expect(D.bisectRight(7, low: 5, high: 1), 5);
    expect(D.bisectRight(8, low: 5, high: 1), 5);
  });
  test('list.bisectRight for E lo=5 hi=1', () {
    expect(E.bisectRight(-2, low: 5, high: 1), 5);
    expect(E.bisectRight(-1, low: 5, high: 1), 5);
    expect(E.bisectRight(0, low: 5, high: 1), 5);
    expect(E.bisectRight(1, low: 5, high: 1), 5);
    expect(E.bisectRight(2, low: 5, high: 1), 5);
    expect(E.bisectRight(3, low: 5, high: 1), 5);
    expect(E.bisectRight(4, low: 5, high: 1), 5);
    expect(E.bisectRight(5, low: 5, high: 1), 5);
    expect(E.bisectRight(6, low: 5, high: 1), 5);
    expect(E.bisectRight(7, low: 5, high: 1), 5);
    expect(E.bisectRight(8, low: 5, high: 1), 5);
  });
  test('list.bisectRight for A lo=6 hi=1', () {
    expect(A.bisectRight(-2, low: 6, high: 1), 6);
    expect(A.bisectRight(-1, low: 6, high: 1), 6);
    expect(A.bisectRight(0, low: 6, high: 1), 6);
    expect(A.bisectRight(1, low: 6, high: 1), 6);
    expect(A.bisectRight(2, low: 6, high: 1), 6);
    expect(A.bisectRight(3, low: 6, high: 1), 6);
    expect(A.bisectRight(4, low: 6, high: 1), 6);
    expect(A.bisectRight(5, low: 6, high: 1), 6);
    expect(A.bisectRight(6, low: 6, high: 1), 6);
    expect(A.bisectRight(7, low: 6, high: 1), 6);
    expect(A.bisectRight(8, low: 6, high: 1), 6);
  });
  test('list.bisectRight for B lo=6 hi=1', () {
    expect(B.bisectRight(-2, low: 6, high: 1), 6);
    expect(B.bisectRight(-1, low: 6, high: 1), 6);
    expect(B.bisectRight(0, low: 6, high: 1), 6);
    expect(B.bisectRight(1, low: 6, high: 1), 6);
    expect(B.bisectRight(2, low: 6, high: 1), 6);
    expect(B.bisectRight(3, low: 6, high: 1), 6);
    expect(B.bisectRight(4, low: 6, high: 1), 6);
    expect(B.bisectRight(5, low: 6, high: 1), 6);
    expect(B.bisectRight(6, low: 6, high: 1), 6);
    expect(B.bisectRight(7, low: 6, high: 1), 6);
    expect(B.bisectRight(8, low: 6, high: 1), 6);
  });
  test('list.bisectRight for C lo=6 hi=1', () {
    expect(C.bisectRight(-2, low: 6, high: 1), 6);
    expect(C.bisectRight(-1, low: 6, high: 1), 6);
    expect(C.bisectRight(0, low: 6, high: 1), 6);
    expect(C.bisectRight(1, low: 6, high: 1), 6);
    expect(C.bisectRight(2, low: 6, high: 1), 6);
    expect(C.bisectRight(3, low: 6, high: 1), 6);
    expect(C.bisectRight(4, low: 6, high: 1), 6);
    expect(C.bisectRight(5, low: 6, high: 1), 6);
    expect(C.bisectRight(6, low: 6, high: 1), 6);
    expect(C.bisectRight(7, low: 6, high: 1), 6);
    expect(C.bisectRight(8, low: 6, high: 1), 6);
  });
  test('list.bisectRight for D lo=6 hi=1', () {
    expect(D.bisectRight(-2, low: 6, high: 1), 6);
    expect(D.bisectRight(-1, low: 6, high: 1), 6);
    expect(D.bisectRight(0, low: 6, high: 1), 6);
    expect(D.bisectRight(1, low: 6, high: 1), 6);
    expect(D.bisectRight(2, low: 6, high: 1), 6);
    expect(D.bisectRight(3, low: 6, high: 1), 6);
    expect(D.bisectRight(4, low: 6, high: 1), 6);
    expect(D.bisectRight(5, low: 6, high: 1), 6);
    expect(D.bisectRight(6, low: 6, high: 1), 6);
    expect(D.bisectRight(7, low: 6, high: 1), 6);
    expect(D.bisectRight(8, low: 6, high: 1), 6);
  });
  test('list.bisectRight for E lo=6 hi=1', () {
    expect(E.bisectRight(-2, low: 6, high: 1), 6);
    expect(E.bisectRight(-1, low: 6, high: 1), 6);
    expect(E.bisectRight(0, low: 6, high: 1), 6);
    expect(E.bisectRight(1, low: 6, high: 1), 6);
    expect(E.bisectRight(2, low: 6, high: 1), 6);
    expect(E.bisectRight(3, low: 6, high: 1), 6);
    expect(E.bisectRight(4, low: 6, high: 1), 6);
    expect(E.bisectRight(5, low: 6, high: 1), 6);
    expect(E.bisectRight(6, low: 6, high: 1), 6);
    expect(E.bisectRight(7, low: 6, high: 1), 6);
    expect(E.bisectRight(8, low: 6, high: 1), 6);
  });
  test('list.bisectRight for A lo=7 hi=1', () {
    expect(A.bisectRight(-2, low: 7, high: 1), 7);
    expect(A.bisectRight(-1, low: 7, high: 1), 7);
    expect(A.bisectRight(0, low: 7, high: 1), 7);
    expect(A.bisectRight(1, low: 7, high: 1), 7);
    expect(A.bisectRight(2, low: 7, high: 1), 7);
    expect(A.bisectRight(3, low: 7, high: 1), 7);
    expect(A.bisectRight(4, low: 7, high: 1), 7);
    expect(A.bisectRight(5, low: 7, high: 1), 7);
    expect(A.bisectRight(6, low: 7, high: 1), 7);
    expect(A.bisectRight(7, low: 7, high: 1), 7);
    expect(A.bisectRight(8, low: 7, high: 1), 7);
  });
  test('list.bisectRight for B lo=7 hi=1', () {
    expect(B.bisectRight(-2, low: 7, high: 1), 7);
    expect(B.bisectRight(-1, low: 7, high: 1), 7);
    expect(B.bisectRight(0, low: 7, high: 1), 7);
    expect(B.bisectRight(1, low: 7, high: 1), 7);
    expect(B.bisectRight(2, low: 7, high: 1), 7);
    expect(B.bisectRight(3, low: 7, high: 1), 7);
    expect(B.bisectRight(4, low: 7, high: 1), 7);
    expect(B.bisectRight(5, low: 7, high: 1), 7);
    expect(B.bisectRight(6, low: 7, high: 1), 7);
    expect(B.bisectRight(7, low: 7, high: 1), 7);
    expect(B.bisectRight(8, low: 7, high: 1), 7);
  });
  test('list.bisectRight for C lo=7 hi=1', () {
    expect(C.bisectRight(-2, low: 7, high: 1), 7);
    expect(C.bisectRight(-1, low: 7, high: 1), 7);
    expect(C.bisectRight(0, low: 7, high: 1), 7);
    expect(C.bisectRight(1, low: 7, high: 1), 7);
    expect(C.bisectRight(2, low: 7, high: 1), 7);
    expect(C.bisectRight(3, low: 7, high: 1), 7);
    expect(C.bisectRight(4, low: 7, high: 1), 7);
    expect(C.bisectRight(5, low: 7, high: 1), 7);
    expect(C.bisectRight(6, low: 7, high: 1), 7);
    expect(C.bisectRight(7, low: 7, high: 1), 7);
    expect(C.bisectRight(8, low: 7, high: 1), 7);
  });
  test('list.bisectRight for D lo=7 hi=1', () {
    expect(D.bisectRight(-2, low: 7, high: 1), 7);
    expect(D.bisectRight(-1, low: 7, high: 1), 7);
    expect(D.bisectRight(0, low: 7, high: 1), 7);
    expect(D.bisectRight(1, low: 7, high: 1), 7);
    expect(D.bisectRight(2, low: 7, high: 1), 7);
    expect(D.bisectRight(3, low: 7, high: 1), 7);
    expect(D.bisectRight(4, low: 7, high: 1), 7);
    expect(D.bisectRight(5, low: 7, high: 1), 7);
    expect(D.bisectRight(6, low: 7, high: 1), 7);
    expect(D.bisectRight(7, low: 7, high: 1), 7);
    expect(D.bisectRight(8, low: 7, high: 1), 7);
  });
  test('list.bisectRight for E lo=7 hi=1', () {
    expect(E.bisectRight(-2, low: 7, high: 1), 7);
    expect(E.bisectRight(-1, low: 7, high: 1), 7);
    expect(E.bisectRight(0, low: 7, high: 1), 7);
    expect(E.bisectRight(1, low: 7, high: 1), 7);
    expect(E.bisectRight(2, low: 7, high: 1), 7);
    expect(E.bisectRight(3, low: 7, high: 1), 7);
    expect(E.bisectRight(4, low: 7, high: 1), 7);
    expect(E.bisectRight(5, low: 7, high: 1), 7);
    expect(E.bisectRight(6, low: 7, high: 1), 7);
    expect(E.bisectRight(7, low: 7, high: 1), 7);
    expect(E.bisectRight(8, low: 7, high: 1), 7);
  });
  test('list.bisectRight for A lo=8 hi=1', () {
    expect(A.bisectRight(-2, low: 8, high: 1), 8);
    expect(A.bisectRight(-1, low: 8, high: 1), 8);
    expect(A.bisectRight(0, low: 8, high: 1), 8);
    expect(A.bisectRight(1, low: 8, high: 1), 8);
    expect(A.bisectRight(2, low: 8, high: 1), 8);
    expect(A.bisectRight(3, low: 8, high: 1), 8);
    expect(A.bisectRight(4, low: 8, high: 1), 8);
    expect(A.bisectRight(5, low: 8, high: 1), 8);
    expect(A.bisectRight(6, low: 8, high: 1), 8);
    expect(A.bisectRight(7, low: 8, high: 1), 8);
    expect(A.bisectRight(8, low: 8, high: 1), 8);
  });
  test('list.bisectRight for B lo=8 hi=1', () {
    expect(B.bisectRight(-2, low: 8, high: 1), 8);
    expect(B.bisectRight(-1, low: 8, high: 1), 8);
    expect(B.bisectRight(0, low: 8, high: 1), 8);
    expect(B.bisectRight(1, low: 8, high: 1), 8);
    expect(B.bisectRight(2, low: 8, high: 1), 8);
    expect(B.bisectRight(3, low: 8, high: 1), 8);
    expect(B.bisectRight(4, low: 8, high: 1), 8);
    expect(B.bisectRight(5, low: 8, high: 1), 8);
    expect(B.bisectRight(6, low: 8, high: 1), 8);
    expect(B.bisectRight(7, low: 8, high: 1), 8);
    expect(B.bisectRight(8, low: 8, high: 1), 8);
  });
  test('list.bisectRight for C lo=8 hi=1', () {
    expect(C.bisectRight(-2, low: 8, high: 1), 8);
    expect(C.bisectRight(-1, low: 8, high: 1), 8);
    expect(C.bisectRight(0, low: 8, high: 1), 8);
    expect(C.bisectRight(1, low: 8, high: 1), 8);
    expect(C.bisectRight(2, low: 8, high: 1), 8);
    expect(C.bisectRight(3, low: 8, high: 1), 8);
    expect(C.bisectRight(4, low: 8, high: 1), 8);
    expect(C.bisectRight(5, low: 8, high: 1), 8);
    expect(C.bisectRight(6, low: 8, high: 1), 8);
    expect(C.bisectRight(7, low: 8, high: 1), 8);
    expect(C.bisectRight(8, low: 8, high: 1), 8);
  });
  test('list.bisectRight for D lo=8 hi=1', () {
    expect(D.bisectRight(-2, low: 8, high: 1), 8);
    expect(D.bisectRight(-1, low: 8, high: 1), 8);
    expect(D.bisectRight(0, low: 8, high: 1), 8);
    expect(D.bisectRight(1, low: 8, high: 1), 8);
    expect(D.bisectRight(2, low: 8, high: 1), 8);
    expect(D.bisectRight(3, low: 8, high: 1), 8);
    expect(D.bisectRight(4, low: 8, high: 1), 8);
    expect(D.bisectRight(5, low: 8, high: 1), 8);
    expect(D.bisectRight(6, low: 8, high: 1), 8);
    expect(D.bisectRight(7, low: 8, high: 1), 8);
    expect(D.bisectRight(8, low: 8, high: 1), 8);
  });
  test('list.bisectRight for E lo=8 hi=1', () {
    expect(E.bisectRight(-2, low: 8, high: 1), 8);
    expect(E.bisectRight(-1, low: 8, high: 1), 8);
    expect(E.bisectRight(0, low: 8, high: 1), 8);
    expect(E.bisectRight(1, low: 8, high: 1), 8);
    expect(E.bisectRight(2, low: 8, high: 1), 8);
    expect(E.bisectRight(3, low: 8, high: 1), 8);
    expect(E.bisectRight(4, low: 8, high: 1), 8);
    expect(E.bisectRight(5, low: 8, high: 1), 8);
    expect(E.bisectRight(6, low: 8, high: 1), 8);
    expect(E.bisectRight(7, low: 8, high: 1), 8);
    expect(E.bisectRight(8, low: 8, high: 1), 8);
  });
  test('list.bisectRight for A lo=9 hi=1', () {
    expect(A.bisectRight(-2, low: 9, high: 1), 9);
    expect(A.bisectRight(-1, low: 9, high: 1), 9);
    expect(A.bisectRight(0, low: 9, high: 1), 9);
    expect(A.bisectRight(1, low: 9, high: 1), 9);
    expect(A.bisectRight(2, low: 9, high: 1), 9);
    expect(A.bisectRight(3, low: 9, high: 1), 9);
    expect(A.bisectRight(4, low: 9, high: 1), 9);
    expect(A.bisectRight(5, low: 9, high: 1), 9);
    expect(A.bisectRight(6, low: 9, high: 1), 9);
    expect(A.bisectRight(7, low: 9, high: 1), 9);
    expect(A.bisectRight(8, low: 9, high: 1), 9);
  });
  test('list.bisectRight for B lo=9 hi=1', () {
    expect(B.bisectRight(-2, low: 9, high: 1), 9);
    expect(B.bisectRight(-1, low: 9, high: 1), 9);
    expect(B.bisectRight(0, low: 9, high: 1), 9);
    expect(B.bisectRight(1, low: 9, high: 1), 9);
    expect(B.bisectRight(2, low: 9, high: 1), 9);
    expect(B.bisectRight(3, low: 9, high: 1), 9);
    expect(B.bisectRight(4, low: 9, high: 1), 9);
    expect(B.bisectRight(5, low: 9, high: 1), 9);
    expect(B.bisectRight(6, low: 9, high: 1), 9);
    expect(B.bisectRight(7, low: 9, high: 1), 9);
    expect(B.bisectRight(8, low: 9, high: 1), 9);
  });
  test('list.bisectRight for C lo=9 hi=1', () {
    expect(C.bisectRight(-2, low: 9, high: 1), 9);
    expect(C.bisectRight(-1, low: 9, high: 1), 9);
    expect(C.bisectRight(0, low: 9, high: 1), 9);
    expect(C.bisectRight(1, low: 9, high: 1), 9);
    expect(C.bisectRight(2, low: 9, high: 1), 9);
    expect(C.bisectRight(3, low: 9, high: 1), 9);
    expect(C.bisectRight(4, low: 9, high: 1), 9);
    expect(C.bisectRight(5, low: 9, high: 1), 9);
    expect(C.bisectRight(6, low: 9, high: 1), 9);
    expect(C.bisectRight(7, low: 9, high: 1), 9);
    expect(C.bisectRight(8, low: 9, high: 1), 9);
  });
  test('list.bisectRight for D lo=9 hi=1', () {
    expect(D.bisectRight(-2, low: 9, high: 1), 9);
    expect(D.bisectRight(-1, low: 9, high: 1), 9);
    expect(D.bisectRight(0, low: 9, high: 1), 9);
    expect(D.bisectRight(1, low: 9, high: 1), 9);
    expect(D.bisectRight(2, low: 9, high: 1), 9);
    expect(D.bisectRight(3, low: 9, high: 1), 9);
    expect(D.bisectRight(4, low: 9, high: 1), 9);
    expect(D.bisectRight(5, low: 9, high: 1), 9);
    expect(D.bisectRight(6, low: 9, high: 1), 9);
    expect(D.bisectRight(7, low: 9, high: 1), 9);
    expect(D.bisectRight(8, low: 9, high: 1), 9);
  });
  test('list.bisectRight for E lo=9 hi=1', () {
    expect(E.bisectRight(-2, low: 9, high: 1), 9);
    expect(E.bisectRight(-1, low: 9, high: 1), 9);
    expect(E.bisectRight(0, low: 9, high: 1), 9);
    expect(E.bisectRight(1, low: 9, high: 1), 9);
    expect(E.bisectRight(2, low: 9, high: 1), 9);
    expect(E.bisectRight(3, low: 9, high: 1), 9);
    expect(E.bisectRight(4, low: 9, high: 1), 9);
    expect(E.bisectRight(5, low: 9, high: 1), 9);
    expect(E.bisectRight(6, low: 9, high: 1), 9);
    expect(E.bisectRight(7, low: 9, high: 1), 9);
    expect(E.bisectRight(8, low: 9, high: 1), 9);
  });
  test('list.bisectRight for A lo=None hi=2', () {
    expect(() => A.bisectRight(-2, high: 2), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(2, high: 2), throwsRangeError);
    expect(() => A.bisectRight(3, high: 2), throwsRangeError);
    expect(() => A.bisectRight(4, high: 2), throwsRangeError);
    expect(() => A.bisectRight(5, high: 2), throwsRangeError);
    expect(() => A.bisectRight(6, high: 2), throwsRangeError);
    expect(() => A.bisectRight(7, high: 2), throwsRangeError);
    expect(() => A.bisectRight(8, high: 2), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=2', () {
    expect(() => B.bisectRight(-2, high: 2), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(2, high: 2), throwsRangeError);
    expect(() => B.bisectRight(3, high: 2), throwsRangeError);
    expect(() => B.bisectRight(4, high: 2), throwsRangeError);
    expect(() => B.bisectRight(5, high: 2), throwsRangeError);
    expect(() => B.bisectRight(6, high: 2), throwsRangeError);
    expect(() => B.bisectRight(7, high: 2), throwsRangeError);
    expect(() => B.bisectRight(8, high: 2), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=2', () {
    expect(C.bisectRight(-2, high: 2), 0);
    expect(C.bisectRight(-1, high: 2), 0);
    expect(C.bisectRight(0, high: 2), 0);
    expect(C.bisectRight(1, high: 2), 0);
    expect(C.bisectRight(2, high: 2), 0);
    expect(C.bisectRight(3, high: 2), 0);
    expect(C.bisectRight(4, high: 2), 1);
    expect(C.bisectRight(5, high: 2), 2);
    expect(C.bisectRight(6, high: 2), 2);
    expect(C.bisectRight(7, high: 2), 2);
    expect(C.bisectRight(8, high: 2), 2);
  });
  test('list.bisectRight for D lo=None hi=2', () {
    expect(D.bisectRight(-2, high: 2), 0);
    expect(D.bisectRight(-1, high: 2), 0);
    expect(D.bisectRight(0, high: 2), 0);
    expect(D.bisectRight(1, high: 2), 0);
    expect(D.bisectRight(2, high: 2), 0);
    expect(D.bisectRight(3, high: 2), 1);
    expect(D.bisectRight(4, high: 2), 2);
    expect(D.bisectRight(5, high: 2), 2);
    expect(D.bisectRight(6, high: 2), 2);
    expect(D.bisectRight(7, high: 2), 2);
    expect(D.bisectRight(8, high: 2), 2);
  });
  test('list.bisectRight for E lo=None hi=2', () {
    expect(E.bisectRight(-2, high: 2), 0);
    expect(E.bisectRight(-1, high: 2), 0);
    expect(E.bisectRight(0, high: 2), 1);
    expect(E.bisectRight(1, high: 2), 2);
    expect(E.bisectRight(2, high: 2), 2);
    expect(E.bisectRight(3, high: 2), 2);
    expect(E.bisectRight(4, high: 2), 2);
    expect(E.bisectRight(5, high: 2), 2);
    expect(E.bisectRight(6, high: 2), 2);
    expect(E.bisectRight(7, high: 2), 2);
    expect(E.bisectRight(8, high: 2), 2);
  });
  test('list.bisectRight for A lo=0 hi=2', () {
    expect(() => A.bisectRight(-2, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 2), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=2', () {
    expect(() => B.bisectRight(-2, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 2), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=2', () {
    expect(C.bisectRight(-2, low: 0, high: 2), 0);
    expect(C.bisectRight(-1, low: 0, high: 2), 0);
    expect(C.bisectRight(0, low: 0, high: 2), 0);
    expect(C.bisectRight(1, low: 0, high: 2), 0);
    expect(C.bisectRight(2, low: 0, high: 2), 0);
    expect(C.bisectRight(3, low: 0, high: 2), 0);
    expect(C.bisectRight(4, low: 0, high: 2), 1);
    expect(C.bisectRight(5, low: 0, high: 2), 2);
    expect(C.bisectRight(6, low: 0, high: 2), 2);
    expect(C.bisectRight(7, low: 0, high: 2), 2);
    expect(C.bisectRight(8, low: 0, high: 2), 2);
  });
  test('list.bisectRight for D lo=0 hi=2', () {
    expect(D.bisectRight(-2, low: 0, high: 2), 0);
    expect(D.bisectRight(-1, low: 0, high: 2), 0);
    expect(D.bisectRight(0, low: 0, high: 2), 0);
    expect(D.bisectRight(1, low: 0, high: 2), 0);
    expect(D.bisectRight(2, low: 0, high: 2), 0);
    expect(D.bisectRight(3, low: 0, high: 2), 1);
    expect(D.bisectRight(4, low: 0, high: 2), 2);
    expect(D.bisectRight(5, low: 0, high: 2), 2);
    expect(D.bisectRight(6, low: 0, high: 2), 2);
    expect(D.bisectRight(7, low: 0, high: 2), 2);
    expect(D.bisectRight(8, low: 0, high: 2), 2);
  });
  test('list.bisectRight for E lo=0 hi=2', () {
    expect(E.bisectRight(-2, low: 0, high: 2), 0);
    expect(E.bisectRight(-1, low: 0, high: 2), 0);
    expect(E.bisectRight(0, low: 0, high: 2), 1);
    expect(E.bisectRight(1, low: 0, high: 2), 2);
    expect(E.bisectRight(2, low: 0, high: 2), 2);
    expect(E.bisectRight(3, low: 0, high: 2), 2);
    expect(E.bisectRight(4, low: 0, high: 2), 2);
    expect(E.bisectRight(5, low: 0, high: 2), 2);
    expect(E.bisectRight(6, low: 0, high: 2), 2);
    expect(E.bisectRight(7, low: 0, high: 2), 2);
    expect(E.bisectRight(8, low: 0, high: 2), 2);
  });
  test('list.bisectRight for A lo=1 hi=2', () {
    expect(() => A.bisectRight(-2, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 2), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=2', () {
    expect(() => B.bisectRight(-2, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 2), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=2', () {
    expect(C.bisectRight(-2, low: 1, high: 2), 1);
    expect(C.bisectRight(-1, low: 1, high: 2), 1);
    expect(C.bisectRight(0, low: 1, high: 2), 1);
    expect(C.bisectRight(1, low: 1, high: 2), 1);
    expect(C.bisectRight(2, low: 1, high: 2), 1);
    expect(C.bisectRight(3, low: 1, high: 2), 1);
    expect(C.bisectRight(4, low: 1, high: 2), 1);
    expect(C.bisectRight(5, low: 1, high: 2), 2);
    expect(C.bisectRight(6, low: 1, high: 2), 2);
    expect(C.bisectRight(7, low: 1, high: 2), 2);
    expect(C.bisectRight(8, low: 1, high: 2), 2);
  });
  test('list.bisectRight for D lo=1 hi=2', () {
    expect(D.bisectRight(-2, low: 1, high: 2), 1);
    expect(D.bisectRight(-1, low: 1, high: 2), 1);
    expect(D.bisectRight(0, low: 1, high: 2), 1);
    expect(D.bisectRight(1, low: 1, high: 2), 1);
    expect(D.bisectRight(2, low: 1, high: 2), 1);
    expect(D.bisectRight(3, low: 1, high: 2), 1);
    expect(D.bisectRight(4, low: 1, high: 2), 2);
    expect(D.bisectRight(5, low: 1, high: 2), 2);
    expect(D.bisectRight(6, low: 1, high: 2), 2);
    expect(D.bisectRight(7, low: 1, high: 2), 2);
    expect(D.bisectRight(8, low: 1, high: 2), 2);
  });
  test('list.bisectRight for E lo=1 hi=2', () {
    expect(E.bisectRight(-2, low: 1, high: 2), 1);
    expect(E.bisectRight(-1, low: 1, high: 2), 1);
    expect(E.bisectRight(0, low: 1, high: 2), 1);
    expect(E.bisectRight(1, low: 1, high: 2), 2);
    expect(E.bisectRight(2, low: 1, high: 2), 2);
    expect(E.bisectRight(3, low: 1, high: 2), 2);
    expect(E.bisectRight(4, low: 1, high: 2), 2);
    expect(E.bisectRight(5, low: 1, high: 2), 2);
    expect(E.bisectRight(6, low: 1, high: 2), 2);
    expect(E.bisectRight(7, low: 1, high: 2), 2);
    expect(E.bisectRight(8, low: 1, high: 2), 2);
  });
  test('list.bisectRight for A lo=2 hi=2', () {
    expect(A.bisectRight(-2, low: 2, high: 2), 2);
    expect(A.bisectRight(-1, low: 2, high: 2), 2);
    expect(A.bisectRight(0, low: 2, high: 2), 2);
    expect(A.bisectRight(1, low: 2, high: 2), 2);
    expect(A.bisectRight(2, low: 2, high: 2), 2);
    expect(A.bisectRight(3, low: 2, high: 2), 2);
    expect(A.bisectRight(4, low: 2, high: 2), 2);
    expect(A.bisectRight(5, low: 2, high: 2), 2);
    expect(A.bisectRight(6, low: 2, high: 2), 2);
    expect(A.bisectRight(7, low: 2, high: 2), 2);
    expect(A.bisectRight(8, low: 2, high: 2), 2);
  });
  test('list.bisectRight for B lo=2 hi=2', () {
    expect(B.bisectRight(-2, low: 2, high: 2), 2);
    expect(B.bisectRight(-1, low: 2, high: 2), 2);
    expect(B.bisectRight(0, low: 2, high: 2), 2);
    expect(B.bisectRight(1, low: 2, high: 2), 2);
    expect(B.bisectRight(2, low: 2, high: 2), 2);
    expect(B.bisectRight(3, low: 2, high: 2), 2);
    expect(B.bisectRight(4, low: 2, high: 2), 2);
    expect(B.bisectRight(5, low: 2, high: 2), 2);
    expect(B.bisectRight(6, low: 2, high: 2), 2);
    expect(B.bisectRight(7, low: 2, high: 2), 2);
    expect(B.bisectRight(8, low: 2, high: 2), 2);
  });
  test('list.bisectRight for C lo=2 hi=2', () {
    expect(C.bisectRight(-2, low: 2, high: 2), 2);
    expect(C.bisectRight(-1, low: 2, high: 2), 2);
    expect(C.bisectRight(0, low: 2, high: 2), 2);
    expect(C.bisectRight(1, low: 2, high: 2), 2);
    expect(C.bisectRight(2, low: 2, high: 2), 2);
    expect(C.bisectRight(3, low: 2, high: 2), 2);
    expect(C.bisectRight(4, low: 2, high: 2), 2);
    expect(C.bisectRight(5, low: 2, high: 2), 2);
    expect(C.bisectRight(6, low: 2, high: 2), 2);
    expect(C.bisectRight(7, low: 2, high: 2), 2);
    expect(C.bisectRight(8, low: 2, high: 2), 2);
  });
  test('list.bisectRight for D lo=2 hi=2', () {
    expect(D.bisectRight(-2, low: 2, high: 2), 2);
    expect(D.bisectRight(-1, low: 2, high: 2), 2);
    expect(D.bisectRight(0, low: 2, high: 2), 2);
    expect(D.bisectRight(1, low: 2, high: 2), 2);
    expect(D.bisectRight(2, low: 2, high: 2), 2);
    expect(D.bisectRight(3, low: 2, high: 2), 2);
    expect(D.bisectRight(4, low: 2, high: 2), 2);
    expect(D.bisectRight(5, low: 2, high: 2), 2);
    expect(D.bisectRight(6, low: 2, high: 2), 2);
    expect(D.bisectRight(7, low: 2, high: 2), 2);
    expect(D.bisectRight(8, low: 2, high: 2), 2);
  });
  test('list.bisectRight for E lo=2 hi=2', () {
    expect(E.bisectRight(-2, low: 2, high: 2), 2);
    expect(E.bisectRight(-1, low: 2, high: 2), 2);
    expect(E.bisectRight(0, low: 2, high: 2), 2);
    expect(E.bisectRight(1, low: 2, high: 2), 2);
    expect(E.bisectRight(2, low: 2, high: 2), 2);
    expect(E.bisectRight(3, low: 2, high: 2), 2);
    expect(E.bisectRight(4, low: 2, high: 2), 2);
    expect(E.bisectRight(5, low: 2, high: 2), 2);
    expect(E.bisectRight(6, low: 2, high: 2), 2);
    expect(E.bisectRight(7, low: 2, high: 2), 2);
    expect(E.bisectRight(8, low: 2, high: 2), 2);
  });
  test('list.bisectRight for A lo=3 hi=2', () {
    expect(A.bisectRight(-2, low: 3, high: 2), 3);
    expect(A.bisectRight(-1, low: 3, high: 2), 3);
    expect(A.bisectRight(0, low: 3, high: 2), 3);
    expect(A.bisectRight(1, low: 3, high: 2), 3);
    expect(A.bisectRight(2, low: 3, high: 2), 3);
    expect(A.bisectRight(3, low: 3, high: 2), 3);
    expect(A.bisectRight(4, low: 3, high: 2), 3);
    expect(A.bisectRight(5, low: 3, high: 2), 3);
    expect(A.bisectRight(6, low: 3, high: 2), 3);
    expect(A.bisectRight(7, low: 3, high: 2), 3);
    expect(A.bisectRight(8, low: 3, high: 2), 3);
  });
  test('list.bisectRight for B lo=3 hi=2', () {
    expect(B.bisectRight(-2, low: 3, high: 2), 3);
    expect(B.bisectRight(-1, low: 3, high: 2), 3);
    expect(B.bisectRight(0, low: 3, high: 2), 3);
    expect(B.bisectRight(1, low: 3, high: 2), 3);
    expect(B.bisectRight(2, low: 3, high: 2), 3);
    expect(B.bisectRight(3, low: 3, high: 2), 3);
    expect(B.bisectRight(4, low: 3, high: 2), 3);
    expect(B.bisectRight(5, low: 3, high: 2), 3);
    expect(B.bisectRight(6, low: 3, high: 2), 3);
    expect(B.bisectRight(7, low: 3, high: 2), 3);
    expect(B.bisectRight(8, low: 3, high: 2), 3);
  });
  test('list.bisectRight for C lo=3 hi=2', () {
    expect(C.bisectRight(-2, low: 3, high: 2), 3);
    expect(C.bisectRight(-1, low: 3, high: 2), 3);
    expect(C.bisectRight(0, low: 3, high: 2), 3);
    expect(C.bisectRight(1, low: 3, high: 2), 3);
    expect(C.bisectRight(2, low: 3, high: 2), 3);
    expect(C.bisectRight(3, low: 3, high: 2), 3);
    expect(C.bisectRight(4, low: 3, high: 2), 3);
    expect(C.bisectRight(5, low: 3, high: 2), 3);
    expect(C.bisectRight(6, low: 3, high: 2), 3);
    expect(C.bisectRight(7, low: 3, high: 2), 3);
    expect(C.bisectRight(8, low: 3, high: 2), 3);
  });
  test('list.bisectRight for D lo=3 hi=2', () {
    expect(D.bisectRight(-2, low: 3, high: 2), 3);
    expect(D.bisectRight(-1, low: 3, high: 2), 3);
    expect(D.bisectRight(0, low: 3, high: 2), 3);
    expect(D.bisectRight(1, low: 3, high: 2), 3);
    expect(D.bisectRight(2, low: 3, high: 2), 3);
    expect(D.bisectRight(3, low: 3, high: 2), 3);
    expect(D.bisectRight(4, low: 3, high: 2), 3);
    expect(D.bisectRight(5, low: 3, high: 2), 3);
    expect(D.bisectRight(6, low: 3, high: 2), 3);
    expect(D.bisectRight(7, low: 3, high: 2), 3);
    expect(D.bisectRight(8, low: 3, high: 2), 3);
  });
  test('list.bisectRight for E lo=3 hi=2', () {
    expect(E.bisectRight(-2, low: 3, high: 2), 3);
    expect(E.bisectRight(-1, low: 3, high: 2), 3);
    expect(E.bisectRight(0, low: 3, high: 2), 3);
    expect(E.bisectRight(1, low: 3, high: 2), 3);
    expect(E.bisectRight(2, low: 3, high: 2), 3);
    expect(E.bisectRight(3, low: 3, high: 2), 3);
    expect(E.bisectRight(4, low: 3, high: 2), 3);
    expect(E.bisectRight(5, low: 3, high: 2), 3);
    expect(E.bisectRight(6, low: 3, high: 2), 3);
    expect(E.bisectRight(7, low: 3, high: 2), 3);
    expect(E.bisectRight(8, low: 3, high: 2), 3);
  });
  test('list.bisectRight for A lo=4 hi=2', () {
    expect(A.bisectRight(-2, low: 4, high: 2), 4);
    expect(A.bisectRight(-1, low: 4, high: 2), 4);
    expect(A.bisectRight(0, low: 4, high: 2), 4);
    expect(A.bisectRight(1, low: 4, high: 2), 4);
    expect(A.bisectRight(2, low: 4, high: 2), 4);
    expect(A.bisectRight(3, low: 4, high: 2), 4);
    expect(A.bisectRight(4, low: 4, high: 2), 4);
    expect(A.bisectRight(5, low: 4, high: 2), 4);
    expect(A.bisectRight(6, low: 4, high: 2), 4);
    expect(A.bisectRight(7, low: 4, high: 2), 4);
    expect(A.bisectRight(8, low: 4, high: 2), 4);
  });
  test('list.bisectRight for B lo=4 hi=2', () {
    expect(B.bisectRight(-2, low: 4, high: 2), 4);
    expect(B.bisectRight(-1, low: 4, high: 2), 4);
    expect(B.bisectRight(0, low: 4, high: 2), 4);
    expect(B.bisectRight(1, low: 4, high: 2), 4);
    expect(B.bisectRight(2, low: 4, high: 2), 4);
    expect(B.bisectRight(3, low: 4, high: 2), 4);
    expect(B.bisectRight(4, low: 4, high: 2), 4);
    expect(B.bisectRight(5, low: 4, high: 2), 4);
    expect(B.bisectRight(6, low: 4, high: 2), 4);
    expect(B.bisectRight(7, low: 4, high: 2), 4);
    expect(B.bisectRight(8, low: 4, high: 2), 4);
  });
  test('list.bisectRight for C lo=4 hi=2', () {
    expect(C.bisectRight(-2, low: 4, high: 2), 4);
    expect(C.bisectRight(-1, low: 4, high: 2), 4);
    expect(C.bisectRight(0, low: 4, high: 2), 4);
    expect(C.bisectRight(1, low: 4, high: 2), 4);
    expect(C.bisectRight(2, low: 4, high: 2), 4);
    expect(C.bisectRight(3, low: 4, high: 2), 4);
    expect(C.bisectRight(4, low: 4, high: 2), 4);
    expect(C.bisectRight(5, low: 4, high: 2), 4);
    expect(C.bisectRight(6, low: 4, high: 2), 4);
    expect(C.bisectRight(7, low: 4, high: 2), 4);
    expect(C.bisectRight(8, low: 4, high: 2), 4);
  });
  test('list.bisectRight for D lo=4 hi=2', () {
    expect(D.bisectRight(-2, low: 4, high: 2), 4);
    expect(D.bisectRight(-1, low: 4, high: 2), 4);
    expect(D.bisectRight(0, low: 4, high: 2), 4);
    expect(D.bisectRight(1, low: 4, high: 2), 4);
    expect(D.bisectRight(2, low: 4, high: 2), 4);
    expect(D.bisectRight(3, low: 4, high: 2), 4);
    expect(D.bisectRight(4, low: 4, high: 2), 4);
    expect(D.bisectRight(5, low: 4, high: 2), 4);
    expect(D.bisectRight(6, low: 4, high: 2), 4);
    expect(D.bisectRight(7, low: 4, high: 2), 4);
    expect(D.bisectRight(8, low: 4, high: 2), 4);
  });
  test('list.bisectRight for E lo=4 hi=2', () {
    expect(E.bisectRight(-2, low: 4, high: 2), 4);
    expect(E.bisectRight(-1, low: 4, high: 2), 4);
    expect(E.bisectRight(0, low: 4, high: 2), 4);
    expect(E.bisectRight(1, low: 4, high: 2), 4);
    expect(E.bisectRight(2, low: 4, high: 2), 4);
    expect(E.bisectRight(3, low: 4, high: 2), 4);
    expect(E.bisectRight(4, low: 4, high: 2), 4);
    expect(E.bisectRight(5, low: 4, high: 2), 4);
    expect(E.bisectRight(6, low: 4, high: 2), 4);
    expect(E.bisectRight(7, low: 4, high: 2), 4);
    expect(E.bisectRight(8, low: 4, high: 2), 4);
  });
  test('list.bisectRight for A lo=5 hi=2', () {
    expect(A.bisectRight(-2, low: 5, high: 2), 5);
    expect(A.bisectRight(-1, low: 5, high: 2), 5);
    expect(A.bisectRight(0, low: 5, high: 2), 5);
    expect(A.bisectRight(1, low: 5, high: 2), 5);
    expect(A.bisectRight(2, low: 5, high: 2), 5);
    expect(A.bisectRight(3, low: 5, high: 2), 5);
    expect(A.bisectRight(4, low: 5, high: 2), 5);
    expect(A.bisectRight(5, low: 5, high: 2), 5);
    expect(A.bisectRight(6, low: 5, high: 2), 5);
    expect(A.bisectRight(7, low: 5, high: 2), 5);
    expect(A.bisectRight(8, low: 5, high: 2), 5);
  });
  test('list.bisectRight for B lo=5 hi=2', () {
    expect(B.bisectRight(-2, low: 5, high: 2), 5);
    expect(B.bisectRight(-1, low: 5, high: 2), 5);
    expect(B.bisectRight(0, low: 5, high: 2), 5);
    expect(B.bisectRight(1, low: 5, high: 2), 5);
    expect(B.bisectRight(2, low: 5, high: 2), 5);
    expect(B.bisectRight(3, low: 5, high: 2), 5);
    expect(B.bisectRight(4, low: 5, high: 2), 5);
    expect(B.bisectRight(5, low: 5, high: 2), 5);
    expect(B.bisectRight(6, low: 5, high: 2), 5);
    expect(B.bisectRight(7, low: 5, high: 2), 5);
    expect(B.bisectRight(8, low: 5, high: 2), 5);
  });
  test('list.bisectRight for C lo=5 hi=2', () {
    expect(C.bisectRight(-2, low: 5, high: 2), 5);
    expect(C.bisectRight(-1, low: 5, high: 2), 5);
    expect(C.bisectRight(0, low: 5, high: 2), 5);
    expect(C.bisectRight(1, low: 5, high: 2), 5);
    expect(C.bisectRight(2, low: 5, high: 2), 5);
    expect(C.bisectRight(3, low: 5, high: 2), 5);
    expect(C.bisectRight(4, low: 5, high: 2), 5);
    expect(C.bisectRight(5, low: 5, high: 2), 5);
    expect(C.bisectRight(6, low: 5, high: 2), 5);
    expect(C.bisectRight(7, low: 5, high: 2), 5);
    expect(C.bisectRight(8, low: 5, high: 2), 5);
  });
  test('list.bisectRight for D lo=5 hi=2', () {
    expect(D.bisectRight(-2, low: 5, high: 2), 5);
    expect(D.bisectRight(-1, low: 5, high: 2), 5);
    expect(D.bisectRight(0, low: 5, high: 2), 5);
    expect(D.bisectRight(1, low: 5, high: 2), 5);
    expect(D.bisectRight(2, low: 5, high: 2), 5);
    expect(D.bisectRight(3, low: 5, high: 2), 5);
    expect(D.bisectRight(4, low: 5, high: 2), 5);
    expect(D.bisectRight(5, low: 5, high: 2), 5);
    expect(D.bisectRight(6, low: 5, high: 2), 5);
    expect(D.bisectRight(7, low: 5, high: 2), 5);
    expect(D.bisectRight(8, low: 5, high: 2), 5);
  });
  test('list.bisectRight for E lo=5 hi=2', () {
    expect(E.bisectRight(-2, low: 5, high: 2), 5);
    expect(E.bisectRight(-1, low: 5, high: 2), 5);
    expect(E.bisectRight(0, low: 5, high: 2), 5);
    expect(E.bisectRight(1, low: 5, high: 2), 5);
    expect(E.bisectRight(2, low: 5, high: 2), 5);
    expect(E.bisectRight(3, low: 5, high: 2), 5);
    expect(E.bisectRight(4, low: 5, high: 2), 5);
    expect(E.bisectRight(5, low: 5, high: 2), 5);
    expect(E.bisectRight(6, low: 5, high: 2), 5);
    expect(E.bisectRight(7, low: 5, high: 2), 5);
    expect(E.bisectRight(8, low: 5, high: 2), 5);
  });
  test('list.bisectRight for A lo=6 hi=2', () {
    expect(A.bisectRight(-2, low: 6, high: 2), 6);
    expect(A.bisectRight(-1, low: 6, high: 2), 6);
    expect(A.bisectRight(0, low: 6, high: 2), 6);
    expect(A.bisectRight(1, low: 6, high: 2), 6);
    expect(A.bisectRight(2, low: 6, high: 2), 6);
    expect(A.bisectRight(3, low: 6, high: 2), 6);
    expect(A.bisectRight(4, low: 6, high: 2), 6);
    expect(A.bisectRight(5, low: 6, high: 2), 6);
    expect(A.bisectRight(6, low: 6, high: 2), 6);
    expect(A.bisectRight(7, low: 6, high: 2), 6);
    expect(A.bisectRight(8, low: 6, high: 2), 6);
  });
  test('list.bisectRight for B lo=6 hi=2', () {
    expect(B.bisectRight(-2, low: 6, high: 2), 6);
    expect(B.bisectRight(-1, low: 6, high: 2), 6);
    expect(B.bisectRight(0, low: 6, high: 2), 6);
    expect(B.bisectRight(1, low: 6, high: 2), 6);
    expect(B.bisectRight(2, low: 6, high: 2), 6);
    expect(B.bisectRight(3, low: 6, high: 2), 6);
    expect(B.bisectRight(4, low: 6, high: 2), 6);
    expect(B.bisectRight(5, low: 6, high: 2), 6);
    expect(B.bisectRight(6, low: 6, high: 2), 6);
    expect(B.bisectRight(7, low: 6, high: 2), 6);
    expect(B.bisectRight(8, low: 6, high: 2), 6);
  });
  test('list.bisectRight for C lo=6 hi=2', () {
    expect(C.bisectRight(-2, low: 6, high: 2), 6);
    expect(C.bisectRight(-1, low: 6, high: 2), 6);
    expect(C.bisectRight(0, low: 6, high: 2), 6);
    expect(C.bisectRight(1, low: 6, high: 2), 6);
    expect(C.bisectRight(2, low: 6, high: 2), 6);
    expect(C.bisectRight(3, low: 6, high: 2), 6);
    expect(C.bisectRight(4, low: 6, high: 2), 6);
    expect(C.bisectRight(5, low: 6, high: 2), 6);
    expect(C.bisectRight(6, low: 6, high: 2), 6);
    expect(C.bisectRight(7, low: 6, high: 2), 6);
    expect(C.bisectRight(8, low: 6, high: 2), 6);
  });
  test('list.bisectRight for D lo=6 hi=2', () {
    expect(D.bisectRight(-2, low: 6, high: 2), 6);
    expect(D.bisectRight(-1, low: 6, high: 2), 6);
    expect(D.bisectRight(0, low: 6, high: 2), 6);
    expect(D.bisectRight(1, low: 6, high: 2), 6);
    expect(D.bisectRight(2, low: 6, high: 2), 6);
    expect(D.bisectRight(3, low: 6, high: 2), 6);
    expect(D.bisectRight(4, low: 6, high: 2), 6);
    expect(D.bisectRight(5, low: 6, high: 2), 6);
    expect(D.bisectRight(6, low: 6, high: 2), 6);
    expect(D.bisectRight(7, low: 6, high: 2), 6);
    expect(D.bisectRight(8, low: 6, high: 2), 6);
  });
  test('list.bisectRight for E lo=6 hi=2', () {
    expect(E.bisectRight(-2, low: 6, high: 2), 6);
    expect(E.bisectRight(-1, low: 6, high: 2), 6);
    expect(E.bisectRight(0, low: 6, high: 2), 6);
    expect(E.bisectRight(1, low: 6, high: 2), 6);
    expect(E.bisectRight(2, low: 6, high: 2), 6);
    expect(E.bisectRight(3, low: 6, high: 2), 6);
    expect(E.bisectRight(4, low: 6, high: 2), 6);
    expect(E.bisectRight(5, low: 6, high: 2), 6);
    expect(E.bisectRight(6, low: 6, high: 2), 6);
    expect(E.bisectRight(7, low: 6, high: 2), 6);
    expect(E.bisectRight(8, low: 6, high: 2), 6);
  });
  test('list.bisectRight for A lo=7 hi=2', () {
    expect(A.bisectRight(-2, low: 7, high: 2), 7);
    expect(A.bisectRight(-1, low: 7, high: 2), 7);
    expect(A.bisectRight(0, low: 7, high: 2), 7);
    expect(A.bisectRight(1, low: 7, high: 2), 7);
    expect(A.bisectRight(2, low: 7, high: 2), 7);
    expect(A.bisectRight(3, low: 7, high: 2), 7);
    expect(A.bisectRight(4, low: 7, high: 2), 7);
    expect(A.bisectRight(5, low: 7, high: 2), 7);
    expect(A.bisectRight(6, low: 7, high: 2), 7);
    expect(A.bisectRight(7, low: 7, high: 2), 7);
    expect(A.bisectRight(8, low: 7, high: 2), 7);
  });
  test('list.bisectRight for B lo=7 hi=2', () {
    expect(B.bisectRight(-2, low: 7, high: 2), 7);
    expect(B.bisectRight(-1, low: 7, high: 2), 7);
    expect(B.bisectRight(0, low: 7, high: 2), 7);
    expect(B.bisectRight(1, low: 7, high: 2), 7);
    expect(B.bisectRight(2, low: 7, high: 2), 7);
    expect(B.bisectRight(3, low: 7, high: 2), 7);
    expect(B.bisectRight(4, low: 7, high: 2), 7);
    expect(B.bisectRight(5, low: 7, high: 2), 7);
    expect(B.bisectRight(6, low: 7, high: 2), 7);
    expect(B.bisectRight(7, low: 7, high: 2), 7);
    expect(B.bisectRight(8, low: 7, high: 2), 7);
  });
  test('list.bisectRight for C lo=7 hi=2', () {
    expect(C.bisectRight(-2, low: 7, high: 2), 7);
    expect(C.bisectRight(-1, low: 7, high: 2), 7);
    expect(C.bisectRight(0, low: 7, high: 2), 7);
    expect(C.bisectRight(1, low: 7, high: 2), 7);
    expect(C.bisectRight(2, low: 7, high: 2), 7);
    expect(C.bisectRight(3, low: 7, high: 2), 7);
    expect(C.bisectRight(4, low: 7, high: 2), 7);
    expect(C.bisectRight(5, low: 7, high: 2), 7);
    expect(C.bisectRight(6, low: 7, high: 2), 7);
    expect(C.bisectRight(7, low: 7, high: 2), 7);
    expect(C.bisectRight(8, low: 7, high: 2), 7);
  });
  test('list.bisectRight for D lo=7 hi=2', () {
    expect(D.bisectRight(-2, low: 7, high: 2), 7);
    expect(D.bisectRight(-1, low: 7, high: 2), 7);
    expect(D.bisectRight(0, low: 7, high: 2), 7);
    expect(D.bisectRight(1, low: 7, high: 2), 7);
    expect(D.bisectRight(2, low: 7, high: 2), 7);
    expect(D.bisectRight(3, low: 7, high: 2), 7);
    expect(D.bisectRight(4, low: 7, high: 2), 7);
    expect(D.bisectRight(5, low: 7, high: 2), 7);
    expect(D.bisectRight(6, low: 7, high: 2), 7);
    expect(D.bisectRight(7, low: 7, high: 2), 7);
    expect(D.bisectRight(8, low: 7, high: 2), 7);
  });
  test('list.bisectRight for E lo=7 hi=2', () {
    expect(E.bisectRight(-2, low: 7, high: 2), 7);
    expect(E.bisectRight(-1, low: 7, high: 2), 7);
    expect(E.bisectRight(0, low: 7, high: 2), 7);
    expect(E.bisectRight(1, low: 7, high: 2), 7);
    expect(E.bisectRight(2, low: 7, high: 2), 7);
    expect(E.bisectRight(3, low: 7, high: 2), 7);
    expect(E.bisectRight(4, low: 7, high: 2), 7);
    expect(E.bisectRight(5, low: 7, high: 2), 7);
    expect(E.bisectRight(6, low: 7, high: 2), 7);
    expect(E.bisectRight(7, low: 7, high: 2), 7);
    expect(E.bisectRight(8, low: 7, high: 2), 7);
  });
  test('list.bisectRight for A lo=8 hi=2', () {
    expect(A.bisectRight(-2, low: 8, high: 2), 8);
    expect(A.bisectRight(-1, low: 8, high: 2), 8);
    expect(A.bisectRight(0, low: 8, high: 2), 8);
    expect(A.bisectRight(1, low: 8, high: 2), 8);
    expect(A.bisectRight(2, low: 8, high: 2), 8);
    expect(A.bisectRight(3, low: 8, high: 2), 8);
    expect(A.bisectRight(4, low: 8, high: 2), 8);
    expect(A.bisectRight(5, low: 8, high: 2), 8);
    expect(A.bisectRight(6, low: 8, high: 2), 8);
    expect(A.bisectRight(7, low: 8, high: 2), 8);
    expect(A.bisectRight(8, low: 8, high: 2), 8);
  });
  test('list.bisectRight for B lo=8 hi=2', () {
    expect(B.bisectRight(-2, low: 8, high: 2), 8);
    expect(B.bisectRight(-1, low: 8, high: 2), 8);
    expect(B.bisectRight(0, low: 8, high: 2), 8);
    expect(B.bisectRight(1, low: 8, high: 2), 8);
    expect(B.bisectRight(2, low: 8, high: 2), 8);
    expect(B.bisectRight(3, low: 8, high: 2), 8);
    expect(B.bisectRight(4, low: 8, high: 2), 8);
    expect(B.bisectRight(5, low: 8, high: 2), 8);
    expect(B.bisectRight(6, low: 8, high: 2), 8);
    expect(B.bisectRight(7, low: 8, high: 2), 8);
    expect(B.bisectRight(8, low: 8, high: 2), 8);
  });
  test('list.bisectRight for C lo=8 hi=2', () {
    expect(C.bisectRight(-2, low: 8, high: 2), 8);
    expect(C.bisectRight(-1, low: 8, high: 2), 8);
    expect(C.bisectRight(0, low: 8, high: 2), 8);
    expect(C.bisectRight(1, low: 8, high: 2), 8);
    expect(C.bisectRight(2, low: 8, high: 2), 8);
    expect(C.bisectRight(3, low: 8, high: 2), 8);
    expect(C.bisectRight(4, low: 8, high: 2), 8);
    expect(C.bisectRight(5, low: 8, high: 2), 8);
    expect(C.bisectRight(6, low: 8, high: 2), 8);
    expect(C.bisectRight(7, low: 8, high: 2), 8);
    expect(C.bisectRight(8, low: 8, high: 2), 8);
  });
  test('list.bisectRight for D lo=8 hi=2', () {
    expect(D.bisectRight(-2, low: 8, high: 2), 8);
    expect(D.bisectRight(-1, low: 8, high: 2), 8);
    expect(D.bisectRight(0, low: 8, high: 2), 8);
    expect(D.bisectRight(1, low: 8, high: 2), 8);
    expect(D.bisectRight(2, low: 8, high: 2), 8);
    expect(D.bisectRight(3, low: 8, high: 2), 8);
    expect(D.bisectRight(4, low: 8, high: 2), 8);
    expect(D.bisectRight(5, low: 8, high: 2), 8);
    expect(D.bisectRight(6, low: 8, high: 2), 8);
    expect(D.bisectRight(7, low: 8, high: 2), 8);
    expect(D.bisectRight(8, low: 8, high: 2), 8);
  });
  test('list.bisectRight for E lo=8 hi=2', () {
    expect(E.bisectRight(-2, low: 8, high: 2), 8);
    expect(E.bisectRight(-1, low: 8, high: 2), 8);
    expect(E.bisectRight(0, low: 8, high: 2), 8);
    expect(E.bisectRight(1, low: 8, high: 2), 8);
    expect(E.bisectRight(2, low: 8, high: 2), 8);
    expect(E.bisectRight(3, low: 8, high: 2), 8);
    expect(E.bisectRight(4, low: 8, high: 2), 8);
    expect(E.bisectRight(5, low: 8, high: 2), 8);
    expect(E.bisectRight(6, low: 8, high: 2), 8);
    expect(E.bisectRight(7, low: 8, high: 2), 8);
    expect(E.bisectRight(8, low: 8, high: 2), 8);
  });
  test('list.bisectRight for A lo=9 hi=2', () {
    expect(A.bisectRight(-2, low: 9, high: 2), 9);
    expect(A.bisectRight(-1, low: 9, high: 2), 9);
    expect(A.bisectRight(0, low: 9, high: 2), 9);
    expect(A.bisectRight(1, low: 9, high: 2), 9);
    expect(A.bisectRight(2, low: 9, high: 2), 9);
    expect(A.bisectRight(3, low: 9, high: 2), 9);
    expect(A.bisectRight(4, low: 9, high: 2), 9);
    expect(A.bisectRight(5, low: 9, high: 2), 9);
    expect(A.bisectRight(6, low: 9, high: 2), 9);
    expect(A.bisectRight(7, low: 9, high: 2), 9);
    expect(A.bisectRight(8, low: 9, high: 2), 9);
  });
  test('list.bisectRight for B lo=9 hi=2', () {
    expect(B.bisectRight(-2, low: 9, high: 2), 9);
    expect(B.bisectRight(-1, low: 9, high: 2), 9);
    expect(B.bisectRight(0, low: 9, high: 2), 9);
    expect(B.bisectRight(1, low: 9, high: 2), 9);
    expect(B.bisectRight(2, low: 9, high: 2), 9);
    expect(B.bisectRight(3, low: 9, high: 2), 9);
    expect(B.bisectRight(4, low: 9, high: 2), 9);
    expect(B.bisectRight(5, low: 9, high: 2), 9);
    expect(B.bisectRight(6, low: 9, high: 2), 9);
    expect(B.bisectRight(7, low: 9, high: 2), 9);
    expect(B.bisectRight(8, low: 9, high: 2), 9);
  });
  test('list.bisectRight for C lo=9 hi=2', () {
    expect(C.bisectRight(-2, low: 9, high: 2), 9);
    expect(C.bisectRight(-1, low: 9, high: 2), 9);
    expect(C.bisectRight(0, low: 9, high: 2), 9);
    expect(C.bisectRight(1, low: 9, high: 2), 9);
    expect(C.bisectRight(2, low: 9, high: 2), 9);
    expect(C.bisectRight(3, low: 9, high: 2), 9);
    expect(C.bisectRight(4, low: 9, high: 2), 9);
    expect(C.bisectRight(5, low: 9, high: 2), 9);
    expect(C.bisectRight(6, low: 9, high: 2), 9);
    expect(C.bisectRight(7, low: 9, high: 2), 9);
    expect(C.bisectRight(8, low: 9, high: 2), 9);
  });
  test('list.bisectRight for D lo=9 hi=2', () {
    expect(D.bisectRight(-2, low: 9, high: 2), 9);
    expect(D.bisectRight(-1, low: 9, high: 2), 9);
    expect(D.bisectRight(0, low: 9, high: 2), 9);
    expect(D.bisectRight(1, low: 9, high: 2), 9);
    expect(D.bisectRight(2, low: 9, high: 2), 9);
    expect(D.bisectRight(3, low: 9, high: 2), 9);
    expect(D.bisectRight(4, low: 9, high: 2), 9);
    expect(D.bisectRight(5, low: 9, high: 2), 9);
    expect(D.bisectRight(6, low: 9, high: 2), 9);
    expect(D.bisectRight(7, low: 9, high: 2), 9);
    expect(D.bisectRight(8, low: 9, high: 2), 9);
  });
  test('list.bisectRight for E lo=9 hi=2', () {
    expect(E.bisectRight(-2, low: 9, high: 2), 9);
    expect(E.bisectRight(-1, low: 9, high: 2), 9);
    expect(E.bisectRight(0, low: 9, high: 2), 9);
    expect(E.bisectRight(1, low: 9, high: 2), 9);
    expect(E.bisectRight(2, low: 9, high: 2), 9);
    expect(E.bisectRight(3, low: 9, high: 2), 9);
    expect(E.bisectRight(4, low: 9, high: 2), 9);
    expect(E.bisectRight(5, low: 9, high: 2), 9);
    expect(E.bisectRight(6, low: 9, high: 2), 9);
    expect(E.bisectRight(7, low: 9, high: 2), 9);
    expect(E.bisectRight(8, low: 9, high: 2), 9);
  });
  test('list.bisectRight for A lo=None hi=3', () {
    expect(() => A.bisectRight(-2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, high: 3), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=3', () {
    expect(() => B.bisectRight(-2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, high: 3), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=3', () {
    expect(C.bisectRight(-2, high: 3), 0);
    expect(C.bisectRight(-1, high: 3), 0);
    expect(C.bisectRight(0, high: 3), 0);
    expect(C.bisectRight(1, high: 3), 0);
    expect(C.bisectRight(2, high: 3), 0);
    expect(C.bisectRight(3, high: 3), 0);
    expect(C.bisectRight(4, high: 3), 1);
    expect(() => C.bisectRight(5, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, high: 3), throwsRangeError);
  });
  test('list.bisectRight for D lo=None hi=3', () {
    expect(D.bisectRight(-2, high: 3), 0);
    expect(D.bisectRight(-1, high: 3), 0);
    expect(D.bisectRight(0, high: 3), 0);
    expect(D.bisectRight(1, high: 3), 0);
    expect(D.bisectRight(2, high: 3), 0);
    expect(D.bisectRight(3, high: 3), 1);
    expect(D.bisectRight(4, high: 3), 2);
    expect(D.bisectRight(5, high: 3), 3);
    expect(D.bisectRight(6, high: 3), 3);
    expect(D.bisectRight(7, high: 3), 3);
    expect(D.bisectRight(8, high: 3), 3);
  });
  test('list.bisectRight for E lo=None hi=3', () {
    expect(E.bisectRight(-2, high: 3), 0);
    expect(E.bisectRight(-1, high: 3), 0);
    expect(E.bisectRight(0, high: 3), 1);
    expect(E.bisectRight(1, high: 3), 2);
    expect(E.bisectRight(2, high: 3), 3);
    expect(E.bisectRight(3, high: 3), 3);
    expect(E.bisectRight(4, high: 3), 3);
    expect(E.bisectRight(5, high: 3), 3);
    expect(E.bisectRight(6, high: 3), 3);
    expect(E.bisectRight(7, high: 3), 3);
    expect(E.bisectRight(8, high: 3), 3);
  });
  test('list.bisectRight for A lo=0 hi=3', () {
    expect(() => A.bisectRight(-2, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 3), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=3', () {
    expect(() => B.bisectRight(-2, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 3), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=3', () {
    expect(C.bisectRight(-2, low: 0, high: 3), 0);
    expect(C.bisectRight(-1, low: 0, high: 3), 0);
    expect(C.bisectRight(0, low: 0, high: 3), 0);
    expect(C.bisectRight(1, low: 0, high: 3), 0);
    expect(C.bisectRight(2, low: 0, high: 3), 0);
    expect(C.bisectRight(3, low: 0, high: 3), 0);
    expect(C.bisectRight(4, low: 0, high: 3), 1);
    expect(() => C.bisectRight(5, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 3), throwsRangeError);
  });
  test('list.bisectRight for D lo=0 hi=3', () {
    expect(D.bisectRight(-2, low: 0, high: 3), 0);
    expect(D.bisectRight(-1, low: 0, high: 3), 0);
    expect(D.bisectRight(0, low: 0, high: 3), 0);
    expect(D.bisectRight(1, low: 0, high: 3), 0);
    expect(D.bisectRight(2, low: 0, high: 3), 0);
    expect(D.bisectRight(3, low: 0, high: 3), 1);
    expect(D.bisectRight(4, low: 0, high: 3), 2);
    expect(D.bisectRight(5, low: 0, high: 3), 3);
    expect(D.bisectRight(6, low: 0, high: 3), 3);
    expect(D.bisectRight(7, low: 0, high: 3), 3);
    expect(D.bisectRight(8, low: 0, high: 3), 3);
  });
  test('list.bisectRight for E lo=0 hi=3', () {
    expect(E.bisectRight(-2, low: 0, high: 3), 0);
    expect(E.bisectRight(-1, low: 0, high: 3), 0);
    expect(E.bisectRight(0, low: 0, high: 3), 1);
    expect(E.bisectRight(1, low: 0, high: 3), 2);
    expect(E.bisectRight(2, low: 0, high: 3), 3);
    expect(E.bisectRight(3, low: 0, high: 3), 3);
    expect(E.bisectRight(4, low: 0, high: 3), 3);
    expect(E.bisectRight(5, low: 0, high: 3), 3);
    expect(E.bisectRight(6, low: 0, high: 3), 3);
    expect(E.bisectRight(7, low: 0, high: 3), 3);
    expect(E.bisectRight(8, low: 0, high: 3), 3);
  });
  test('list.bisectRight for A lo=1 hi=3', () {
    expect(() => A.bisectRight(-2, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 3), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=3', () {
    expect(() => B.bisectRight(-2, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 3), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=3', () {
    expect(() => C.bisectRight(-2, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 3), throwsRangeError);
  });
  test('list.bisectRight for D lo=1 hi=3', () {
    expect(D.bisectRight(-2, low: 1, high: 3), 1);
    expect(D.bisectRight(-1, low: 1, high: 3), 1);
    expect(D.bisectRight(0, low: 1, high: 3), 1);
    expect(D.bisectRight(1, low: 1, high: 3), 1);
    expect(D.bisectRight(2, low: 1, high: 3), 1);
    expect(D.bisectRight(3, low: 1, high: 3), 1);
    expect(D.bisectRight(4, low: 1, high: 3), 2);
    expect(D.bisectRight(5, low: 1, high: 3), 3);
    expect(D.bisectRight(6, low: 1, high: 3), 3);
    expect(D.bisectRight(7, low: 1, high: 3), 3);
    expect(D.bisectRight(8, low: 1, high: 3), 3);
  });
  test('list.bisectRight for E lo=1 hi=3', () {
    expect(E.bisectRight(-2, low: 1, high: 3), 1);
    expect(E.bisectRight(-1, low: 1, high: 3), 1);
    expect(E.bisectRight(0, low: 1, high: 3), 1);
    expect(E.bisectRight(1, low: 1, high: 3), 2);
    expect(E.bisectRight(2, low: 1, high: 3), 3);
    expect(E.bisectRight(3, low: 1, high: 3), 3);
    expect(E.bisectRight(4, low: 1, high: 3), 3);
    expect(E.bisectRight(5, low: 1, high: 3), 3);
    expect(E.bisectRight(6, low: 1, high: 3), 3);
    expect(E.bisectRight(7, low: 1, high: 3), 3);
    expect(E.bisectRight(8, low: 1, high: 3), 3);
  });
  test('list.bisectRight for A lo=2 hi=3', () {
    expect(() => A.bisectRight(-2, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 3), throwsRangeError);
  });
  test('list.bisectRight for B lo=2 hi=3', () {
    expect(() => B.bisectRight(-2, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 3), throwsRangeError);
  });
  test('list.bisectRight for C lo=2 hi=3', () {
    expect(() => C.bisectRight(-2, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 3), throwsRangeError);
  });
  test('list.bisectRight for D lo=2 hi=3', () {
    expect(D.bisectRight(-2, low: 2, high: 3), 2);
    expect(D.bisectRight(-1, low: 2, high: 3), 2);
    expect(D.bisectRight(0, low: 2, high: 3), 2);
    expect(D.bisectRight(1, low: 2, high: 3), 2);
    expect(D.bisectRight(2, low: 2, high: 3), 2);
    expect(D.bisectRight(3, low: 2, high: 3), 2);
    expect(D.bisectRight(4, low: 2, high: 3), 2);
    expect(D.bisectRight(5, low: 2, high: 3), 3);
    expect(D.bisectRight(6, low: 2, high: 3), 3);
    expect(D.bisectRight(7, low: 2, high: 3), 3);
    expect(D.bisectRight(8, low: 2, high: 3), 3);
  });
  test('list.bisectRight for E lo=2 hi=3', () {
    expect(E.bisectRight(-2, low: 2, high: 3), 2);
    expect(E.bisectRight(-1, low: 2, high: 3), 2);
    expect(E.bisectRight(0, low: 2, high: 3), 2);
    expect(E.bisectRight(1, low: 2, high: 3), 2);
    expect(E.bisectRight(2, low: 2, high: 3), 3);
    expect(E.bisectRight(3, low: 2, high: 3), 3);
    expect(E.bisectRight(4, low: 2, high: 3), 3);
    expect(E.bisectRight(5, low: 2, high: 3), 3);
    expect(E.bisectRight(6, low: 2, high: 3), 3);
    expect(E.bisectRight(7, low: 2, high: 3), 3);
    expect(E.bisectRight(8, low: 2, high: 3), 3);
  });
  test('list.bisectRight for A lo=3 hi=3', () {
    expect(A.bisectRight(-2, low: 3, high: 3), 3);
    expect(A.bisectRight(-1, low: 3, high: 3), 3);
    expect(A.bisectRight(0, low: 3, high: 3), 3);
    expect(A.bisectRight(1, low: 3, high: 3), 3);
    expect(A.bisectRight(2, low: 3, high: 3), 3);
    expect(A.bisectRight(3, low: 3, high: 3), 3);
    expect(A.bisectRight(4, low: 3, high: 3), 3);
    expect(A.bisectRight(5, low: 3, high: 3), 3);
    expect(A.bisectRight(6, low: 3, high: 3), 3);
    expect(A.bisectRight(7, low: 3, high: 3), 3);
    expect(A.bisectRight(8, low: 3, high: 3), 3);
  });
  test('list.bisectRight for B lo=3 hi=3', () {
    expect(B.bisectRight(-2, low: 3, high: 3), 3);
    expect(B.bisectRight(-1, low: 3, high: 3), 3);
    expect(B.bisectRight(0, low: 3, high: 3), 3);
    expect(B.bisectRight(1, low: 3, high: 3), 3);
    expect(B.bisectRight(2, low: 3, high: 3), 3);
    expect(B.bisectRight(3, low: 3, high: 3), 3);
    expect(B.bisectRight(4, low: 3, high: 3), 3);
    expect(B.bisectRight(5, low: 3, high: 3), 3);
    expect(B.bisectRight(6, low: 3, high: 3), 3);
    expect(B.bisectRight(7, low: 3, high: 3), 3);
    expect(B.bisectRight(8, low: 3, high: 3), 3);
  });
  test('list.bisectRight for C lo=3 hi=3', () {
    expect(C.bisectRight(-2, low: 3, high: 3), 3);
    expect(C.bisectRight(-1, low: 3, high: 3), 3);
    expect(C.bisectRight(0, low: 3, high: 3), 3);
    expect(C.bisectRight(1, low: 3, high: 3), 3);
    expect(C.bisectRight(2, low: 3, high: 3), 3);
    expect(C.bisectRight(3, low: 3, high: 3), 3);
    expect(C.bisectRight(4, low: 3, high: 3), 3);
    expect(C.bisectRight(5, low: 3, high: 3), 3);
    expect(C.bisectRight(6, low: 3, high: 3), 3);
    expect(C.bisectRight(7, low: 3, high: 3), 3);
    expect(C.bisectRight(8, low: 3, high: 3), 3);
  });
  test('list.bisectRight for D lo=3 hi=3', () {
    expect(D.bisectRight(-2, low: 3, high: 3), 3);
    expect(D.bisectRight(-1, low: 3, high: 3), 3);
    expect(D.bisectRight(0, low: 3, high: 3), 3);
    expect(D.bisectRight(1, low: 3, high: 3), 3);
    expect(D.bisectRight(2, low: 3, high: 3), 3);
    expect(D.bisectRight(3, low: 3, high: 3), 3);
    expect(D.bisectRight(4, low: 3, high: 3), 3);
    expect(D.bisectRight(5, low: 3, high: 3), 3);
    expect(D.bisectRight(6, low: 3, high: 3), 3);
    expect(D.bisectRight(7, low: 3, high: 3), 3);
    expect(D.bisectRight(8, low: 3, high: 3), 3);
  });
  test('list.bisectRight for E lo=3 hi=3', () {
    expect(E.bisectRight(-2, low: 3, high: 3), 3);
    expect(E.bisectRight(-1, low: 3, high: 3), 3);
    expect(E.bisectRight(0, low: 3, high: 3), 3);
    expect(E.bisectRight(1, low: 3, high: 3), 3);
    expect(E.bisectRight(2, low: 3, high: 3), 3);
    expect(E.bisectRight(3, low: 3, high: 3), 3);
    expect(E.bisectRight(4, low: 3, high: 3), 3);
    expect(E.bisectRight(5, low: 3, high: 3), 3);
    expect(E.bisectRight(6, low: 3, high: 3), 3);
    expect(E.bisectRight(7, low: 3, high: 3), 3);
    expect(E.bisectRight(8, low: 3, high: 3), 3);
  });
  test('list.bisectRight for A lo=4 hi=3', () {
    expect(A.bisectRight(-2, low: 4, high: 3), 4);
    expect(A.bisectRight(-1, low: 4, high: 3), 4);
    expect(A.bisectRight(0, low: 4, high: 3), 4);
    expect(A.bisectRight(1, low: 4, high: 3), 4);
    expect(A.bisectRight(2, low: 4, high: 3), 4);
    expect(A.bisectRight(3, low: 4, high: 3), 4);
    expect(A.bisectRight(4, low: 4, high: 3), 4);
    expect(A.bisectRight(5, low: 4, high: 3), 4);
    expect(A.bisectRight(6, low: 4, high: 3), 4);
    expect(A.bisectRight(7, low: 4, high: 3), 4);
    expect(A.bisectRight(8, low: 4, high: 3), 4);
  });
  test('list.bisectRight for B lo=4 hi=3', () {
    expect(B.bisectRight(-2, low: 4, high: 3), 4);
    expect(B.bisectRight(-1, low: 4, high: 3), 4);
    expect(B.bisectRight(0, low: 4, high: 3), 4);
    expect(B.bisectRight(1, low: 4, high: 3), 4);
    expect(B.bisectRight(2, low: 4, high: 3), 4);
    expect(B.bisectRight(3, low: 4, high: 3), 4);
    expect(B.bisectRight(4, low: 4, high: 3), 4);
    expect(B.bisectRight(5, low: 4, high: 3), 4);
    expect(B.bisectRight(6, low: 4, high: 3), 4);
    expect(B.bisectRight(7, low: 4, high: 3), 4);
    expect(B.bisectRight(8, low: 4, high: 3), 4);
  });
  test('list.bisectRight for C lo=4 hi=3', () {
    expect(C.bisectRight(-2, low: 4, high: 3), 4);
    expect(C.bisectRight(-1, low: 4, high: 3), 4);
    expect(C.bisectRight(0, low: 4, high: 3), 4);
    expect(C.bisectRight(1, low: 4, high: 3), 4);
    expect(C.bisectRight(2, low: 4, high: 3), 4);
    expect(C.bisectRight(3, low: 4, high: 3), 4);
    expect(C.bisectRight(4, low: 4, high: 3), 4);
    expect(C.bisectRight(5, low: 4, high: 3), 4);
    expect(C.bisectRight(6, low: 4, high: 3), 4);
    expect(C.bisectRight(7, low: 4, high: 3), 4);
    expect(C.bisectRight(8, low: 4, high: 3), 4);
  });
  test('list.bisectRight for D lo=4 hi=3', () {
    expect(D.bisectRight(-2, low: 4, high: 3), 4);
    expect(D.bisectRight(-1, low: 4, high: 3), 4);
    expect(D.bisectRight(0, low: 4, high: 3), 4);
    expect(D.bisectRight(1, low: 4, high: 3), 4);
    expect(D.bisectRight(2, low: 4, high: 3), 4);
    expect(D.bisectRight(3, low: 4, high: 3), 4);
    expect(D.bisectRight(4, low: 4, high: 3), 4);
    expect(D.bisectRight(5, low: 4, high: 3), 4);
    expect(D.bisectRight(6, low: 4, high: 3), 4);
    expect(D.bisectRight(7, low: 4, high: 3), 4);
    expect(D.bisectRight(8, low: 4, high: 3), 4);
  });
  test('list.bisectRight for E lo=4 hi=3', () {
    expect(E.bisectRight(-2, low: 4, high: 3), 4);
    expect(E.bisectRight(-1, low: 4, high: 3), 4);
    expect(E.bisectRight(0, low: 4, high: 3), 4);
    expect(E.bisectRight(1, low: 4, high: 3), 4);
    expect(E.bisectRight(2, low: 4, high: 3), 4);
    expect(E.bisectRight(3, low: 4, high: 3), 4);
    expect(E.bisectRight(4, low: 4, high: 3), 4);
    expect(E.bisectRight(5, low: 4, high: 3), 4);
    expect(E.bisectRight(6, low: 4, high: 3), 4);
    expect(E.bisectRight(7, low: 4, high: 3), 4);
    expect(E.bisectRight(8, low: 4, high: 3), 4);
  });
  test('list.bisectRight for A lo=5 hi=3', () {
    expect(A.bisectRight(-2, low: 5, high: 3), 5);
    expect(A.bisectRight(-1, low: 5, high: 3), 5);
    expect(A.bisectRight(0, low: 5, high: 3), 5);
    expect(A.bisectRight(1, low: 5, high: 3), 5);
    expect(A.bisectRight(2, low: 5, high: 3), 5);
    expect(A.bisectRight(3, low: 5, high: 3), 5);
    expect(A.bisectRight(4, low: 5, high: 3), 5);
    expect(A.bisectRight(5, low: 5, high: 3), 5);
    expect(A.bisectRight(6, low: 5, high: 3), 5);
    expect(A.bisectRight(7, low: 5, high: 3), 5);
    expect(A.bisectRight(8, low: 5, high: 3), 5);
  });
  test('list.bisectRight for B lo=5 hi=3', () {
    expect(B.bisectRight(-2, low: 5, high: 3), 5);
    expect(B.bisectRight(-1, low: 5, high: 3), 5);
    expect(B.bisectRight(0, low: 5, high: 3), 5);
    expect(B.bisectRight(1, low: 5, high: 3), 5);
    expect(B.bisectRight(2, low: 5, high: 3), 5);
    expect(B.bisectRight(3, low: 5, high: 3), 5);
    expect(B.bisectRight(4, low: 5, high: 3), 5);
    expect(B.bisectRight(5, low: 5, high: 3), 5);
    expect(B.bisectRight(6, low: 5, high: 3), 5);
    expect(B.bisectRight(7, low: 5, high: 3), 5);
    expect(B.bisectRight(8, low: 5, high: 3), 5);
  });
  test('list.bisectRight for C lo=5 hi=3', () {
    expect(C.bisectRight(-2, low: 5, high: 3), 5);
    expect(C.bisectRight(-1, low: 5, high: 3), 5);
    expect(C.bisectRight(0, low: 5, high: 3), 5);
    expect(C.bisectRight(1, low: 5, high: 3), 5);
    expect(C.bisectRight(2, low: 5, high: 3), 5);
    expect(C.bisectRight(3, low: 5, high: 3), 5);
    expect(C.bisectRight(4, low: 5, high: 3), 5);
    expect(C.bisectRight(5, low: 5, high: 3), 5);
    expect(C.bisectRight(6, low: 5, high: 3), 5);
    expect(C.bisectRight(7, low: 5, high: 3), 5);
    expect(C.bisectRight(8, low: 5, high: 3), 5);
  });
  test('list.bisectRight for D lo=5 hi=3', () {
    expect(D.bisectRight(-2, low: 5, high: 3), 5);
    expect(D.bisectRight(-1, low: 5, high: 3), 5);
    expect(D.bisectRight(0, low: 5, high: 3), 5);
    expect(D.bisectRight(1, low: 5, high: 3), 5);
    expect(D.bisectRight(2, low: 5, high: 3), 5);
    expect(D.bisectRight(3, low: 5, high: 3), 5);
    expect(D.bisectRight(4, low: 5, high: 3), 5);
    expect(D.bisectRight(5, low: 5, high: 3), 5);
    expect(D.bisectRight(6, low: 5, high: 3), 5);
    expect(D.bisectRight(7, low: 5, high: 3), 5);
    expect(D.bisectRight(8, low: 5, high: 3), 5);
  });
  test('list.bisectRight for E lo=5 hi=3', () {
    expect(E.bisectRight(-2, low: 5, high: 3), 5);
    expect(E.bisectRight(-1, low: 5, high: 3), 5);
    expect(E.bisectRight(0, low: 5, high: 3), 5);
    expect(E.bisectRight(1, low: 5, high: 3), 5);
    expect(E.bisectRight(2, low: 5, high: 3), 5);
    expect(E.bisectRight(3, low: 5, high: 3), 5);
    expect(E.bisectRight(4, low: 5, high: 3), 5);
    expect(E.bisectRight(5, low: 5, high: 3), 5);
    expect(E.bisectRight(6, low: 5, high: 3), 5);
    expect(E.bisectRight(7, low: 5, high: 3), 5);
    expect(E.bisectRight(8, low: 5, high: 3), 5);
  });
  test('list.bisectRight for A lo=6 hi=3', () {
    expect(A.bisectRight(-2, low: 6, high: 3), 6);
    expect(A.bisectRight(-1, low: 6, high: 3), 6);
    expect(A.bisectRight(0, low: 6, high: 3), 6);
    expect(A.bisectRight(1, low: 6, high: 3), 6);
    expect(A.bisectRight(2, low: 6, high: 3), 6);
    expect(A.bisectRight(3, low: 6, high: 3), 6);
    expect(A.bisectRight(4, low: 6, high: 3), 6);
    expect(A.bisectRight(5, low: 6, high: 3), 6);
    expect(A.bisectRight(6, low: 6, high: 3), 6);
    expect(A.bisectRight(7, low: 6, high: 3), 6);
    expect(A.bisectRight(8, low: 6, high: 3), 6);
  });
  test('list.bisectRight for B lo=6 hi=3', () {
    expect(B.bisectRight(-2, low: 6, high: 3), 6);
    expect(B.bisectRight(-1, low: 6, high: 3), 6);
    expect(B.bisectRight(0, low: 6, high: 3), 6);
    expect(B.bisectRight(1, low: 6, high: 3), 6);
    expect(B.bisectRight(2, low: 6, high: 3), 6);
    expect(B.bisectRight(3, low: 6, high: 3), 6);
    expect(B.bisectRight(4, low: 6, high: 3), 6);
    expect(B.bisectRight(5, low: 6, high: 3), 6);
    expect(B.bisectRight(6, low: 6, high: 3), 6);
    expect(B.bisectRight(7, low: 6, high: 3), 6);
    expect(B.bisectRight(8, low: 6, high: 3), 6);
  });
  test('list.bisectRight for C lo=6 hi=3', () {
    expect(C.bisectRight(-2, low: 6, high: 3), 6);
    expect(C.bisectRight(-1, low: 6, high: 3), 6);
    expect(C.bisectRight(0, low: 6, high: 3), 6);
    expect(C.bisectRight(1, low: 6, high: 3), 6);
    expect(C.bisectRight(2, low: 6, high: 3), 6);
    expect(C.bisectRight(3, low: 6, high: 3), 6);
    expect(C.bisectRight(4, low: 6, high: 3), 6);
    expect(C.bisectRight(5, low: 6, high: 3), 6);
    expect(C.bisectRight(6, low: 6, high: 3), 6);
    expect(C.bisectRight(7, low: 6, high: 3), 6);
    expect(C.bisectRight(8, low: 6, high: 3), 6);
  });
  test('list.bisectRight for D lo=6 hi=3', () {
    expect(D.bisectRight(-2, low: 6, high: 3), 6);
    expect(D.bisectRight(-1, low: 6, high: 3), 6);
    expect(D.bisectRight(0, low: 6, high: 3), 6);
    expect(D.bisectRight(1, low: 6, high: 3), 6);
    expect(D.bisectRight(2, low: 6, high: 3), 6);
    expect(D.bisectRight(3, low: 6, high: 3), 6);
    expect(D.bisectRight(4, low: 6, high: 3), 6);
    expect(D.bisectRight(5, low: 6, high: 3), 6);
    expect(D.bisectRight(6, low: 6, high: 3), 6);
    expect(D.bisectRight(7, low: 6, high: 3), 6);
    expect(D.bisectRight(8, low: 6, high: 3), 6);
  });
  test('list.bisectRight for E lo=6 hi=3', () {
    expect(E.bisectRight(-2, low: 6, high: 3), 6);
    expect(E.bisectRight(-1, low: 6, high: 3), 6);
    expect(E.bisectRight(0, low: 6, high: 3), 6);
    expect(E.bisectRight(1, low: 6, high: 3), 6);
    expect(E.bisectRight(2, low: 6, high: 3), 6);
    expect(E.bisectRight(3, low: 6, high: 3), 6);
    expect(E.bisectRight(4, low: 6, high: 3), 6);
    expect(E.bisectRight(5, low: 6, high: 3), 6);
    expect(E.bisectRight(6, low: 6, high: 3), 6);
    expect(E.bisectRight(7, low: 6, high: 3), 6);
    expect(E.bisectRight(8, low: 6, high: 3), 6);
  });
  test('list.bisectRight for A lo=7 hi=3', () {
    expect(A.bisectRight(-2, low: 7, high: 3), 7);
    expect(A.bisectRight(-1, low: 7, high: 3), 7);
    expect(A.bisectRight(0, low: 7, high: 3), 7);
    expect(A.bisectRight(1, low: 7, high: 3), 7);
    expect(A.bisectRight(2, low: 7, high: 3), 7);
    expect(A.bisectRight(3, low: 7, high: 3), 7);
    expect(A.bisectRight(4, low: 7, high: 3), 7);
    expect(A.bisectRight(5, low: 7, high: 3), 7);
    expect(A.bisectRight(6, low: 7, high: 3), 7);
    expect(A.bisectRight(7, low: 7, high: 3), 7);
    expect(A.bisectRight(8, low: 7, high: 3), 7);
  });
  test('list.bisectRight for B lo=7 hi=3', () {
    expect(B.bisectRight(-2, low: 7, high: 3), 7);
    expect(B.bisectRight(-1, low: 7, high: 3), 7);
    expect(B.bisectRight(0, low: 7, high: 3), 7);
    expect(B.bisectRight(1, low: 7, high: 3), 7);
    expect(B.bisectRight(2, low: 7, high: 3), 7);
    expect(B.bisectRight(3, low: 7, high: 3), 7);
    expect(B.bisectRight(4, low: 7, high: 3), 7);
    expect(B.bisectRight(5, low: 7, high: 3), 7);
    expect(B.bisectRight(6, low: 7, high: 3), 7);
    expect(B.bisectRight(7, low: 7, high: 3), 7);
    expect(B.bisectRight(8, low: 7, high: 3), 7);
  });
  test('list.bisectRight for C lo=7 hi=3', () {
    expect(C.bisectRight(-2, low: 7, high: 3), 7);
    expect(C.bisectRight(-1, low: 7, high: 3), 7);
    expect(C.bisectRight(0, low: 7, high: 3), 7);
    expect(C.bisectRight(1, low: 7, high: 3), 7);
    expect(C.bisectRight(2, low: 7, high: 3), 7);
    expect(C.bisectRight(3, low: 7, high: 3), 7);
    expect(C.bisectRight(4, low: 7, high: 3), 7);
    expect(C.bisectRight(5, low: 7, high: 3), 7);
    expect(C.bisectRight(6, low: 7, high: 3), 7);
    expect(C.bisectRight(7, low: 7, high: 3), 7);
    expect(C.bisectRight(8, low: 7, high: 3), 7);
  });
  test('list.bisectRight for D lo=7 hi=3', () {
    expect(D.bisectRight(-2, low: 7, high: 3), 7);
    expect(D.bisectRight(-1, low: 7, high: 3), 7);
    expect(D.bisectRight(0, low: 7, high: 3), 7);
    expect(D.bisectRight(1, low: 7, high: 3), 7);
    expect(D.bisectRight(2, low: 7, high: 3), 7);
    expect(D.bisectRight(3, low: 7, high: 3), 7);
    expect(D.bisectRight(4, low: 7, high: 3), 7);
    expect(D.bisectRight(5, low: 7, high: 3), 7);
    expect(D.bisectRight(6, low: 7, high: 3), 7);
    expect(D.bisectRight(7, low: 7, high: 3), 7);
    expect(D.bisectRight(8, low: 7, high: 3), 7);
  });
  test('list.bisectRight for E lo=7 hi=3', () {
    expect(E.bisectRight(-2, low: 7, high: 3), 7);
    expect(E.bisectRight(-1, low: 7, high: 3), 7);
    expect(E.bisectRight(0, low: 7, high: 3), 7);
    expect(E.bisectRight(1, low: 7, high: 3), 7);
    expect(E.bisectRight(2, low: 7, high: 3), 7);
    expect(E.bisectRight(3, low: 7, high: 3), 7);
    expect(E.bisectRight(4, low: 7, high: 3), 7);
    expect(E.bisectRight(5, low: 7, high: 3), 7);
    expect(E.bisectRight(6, low: 7, high: 3), 7);
    expect(E.bisectRight(7, low: 7, high: 3), 7);
    expect(E.bisectRight(8, low: 7, high: 3), 7);
  });
  test('list.bisectRight for A lo=8 hi=3', () {
    expect(A.bisectRight(-2, low: 8, high: 3), 8);
    expect(A.bisectRight(-1, low: 8, high: 3), 8);
    expect(A.bisectRight(0, low: 8, high: 3), 8);
    expect(A.bisectRight(1, low: 8, high: 3), 8);
    expect(A.bisectRight(2, low: 8, high: 3), 8);
    expect(A.bisectRight(3, low: 8, high: 3), 8);
    expect(A.bisectRight(4, low: 8, high: 3), 8);
    expect(A.bisectRight(5, low: 8, high: 3), 8);
    expect(A.bisectRight(6, low: 8, high: 3), 8);
    expect(A.bisectRight(7, low: 8, high: 3), 8);
    expect(A.bisectRight(8, low: 8, high: 3), 8);
  });
  test('list.bisectRight for B lo=8 hi=3', () {
    expect(B.bisectRight(-2, low: 8, high: 3), 8);
    expect(B.bisectRight(-1, low: 8, high: 3), 8);
    expect(B.bisectRight(0, low: 8, high: 3), 8);
    expect(B.bisectRight(1, low: 8, high: 3), 8);
    expect(B.bisectRight(2, low: 8, high: 3), 8);
    expect(B.bisectRight(3, low: 8, high: 3), 8);
    expect(B.bisectRight(4, low: 8, high: 3), 8);
    expect(B.bisectRight(5, low: 8, high: 3), 8);
    expect(B.bisectRight(6, low: 8, high: 3), 8);
    expect(B.bisectRight(7, low: 8, high: 3), 8);
    expect(B.bisectRight(8, low: 8, high: 3), 8);
  });
  test('list.bisectRight for C lo=8 hi=3', () {
    expect(C.bisectRight(-2, low: 8, high: 3), 8);
    expect(C.bisectRight(-1, low: 8, high: 3), 8);
    expect(C.bisectRight(0, low: 8, high: 3), 8);
    expect(C.bisectRight(1, low: 8, high: 3), 8);
    expect(C.bisectRight(2, low: 8, high: 3), 8);
    expect(C.bisectRight(3, low: 8, high: 3), 8);
    expect(C.bisectRight(4, low: 8, high: 3), 8);
    expect(C.bisectRight(5, low: 8, high: 3), 8);
    expect(C.bisectRight(6, low: 8, high: 3), 8);
    expect(C.bisectRight(7, low: 8, high: 3), 8);
    expect(C.bisectRight(8, low: 8, high: 3), 8);
  });
  test('list.bisectRight for D lo=8 hi=3', () {
    expect(D.bisectRight(-2, low: 8, high: 3), 8);
    expect(D.bisectRight(-1, low: 8, high: 3), 8);
    expect(D.bisectRight(0, low: 8, high: 3), 8);
    expect(D.bisectRight(1, low: 8, high: 3), 8);
    expect(D.bisectRight(2, low: 8, high: 3), 8);
    expect(D.bisectRight(3, low: 8, high: 3), 8);
    expect(D.bisectRight(4, low: 8, high: 3), 8);
    expect(D.bisectRight(5, low: 8, high: 3), 8);
    expect(D.bisectRight(6, low: 8, high: 3), 8);
    expect(D.bisectRight(7, low: 8, high: 3), 8);
    expect(D.bisectRight(8, low: 8, high: 3), 8);
  });
  test('list.bisectRight for E lo=8 hi=3', () {
    expect(E.bisectRight(-2, low: 8, high: 3), 8);
    expect(E.bisectRight(-1, low: 8, high: 3), 8);
    expect(E.bisectRight(0, low: 8, high: 3), 8);
    expect(E.bisectRight(1, low: 8, high: 3), 8);
    expect(E.bisectRight(2, low: 8, high: 3), 8);
    expect(E.bisectRight(3, low: 8, high: 3), 8);
    expect(E.bisectRight(4, low: 8, high: 3), 8);
    expect(E.bisectRight(5, low: 8, high: 3), 8);
    expect(E.bisectRight(6, low: 8, high: 3), 8);
    expect(E.bisectRight(7, low: 8, high: 3), 8);
    expect(E.bisectRight(8, low: 8, high: 3), 8);
  });
  test('list.bisectRight for A lo=9 hi=3', () {
    expect(A.bisectRight(-2, low: 9, high: 3), 9);
    expect(A.bisectRight(-1, low: 9, high: 3), 9);
    expect(A.bisectRight(0, low: 9, high: 3), 9);
    expect(A.bisectRight(1, low: 9, high: 3), 9);
    expect(A.bisectRight(2, low: 9, high: 3), 9);
    expect(A.bisectRight(3, low: 9, high: 3), 9);
    expect(A.bisectRight(4, low: 9, high: 3), 9);
    expect(A.bisectRight(5, low: 9, high: 3), 9);
    expect(A.bisectRight(6, low: 9, high: 3), 9);
    expect(A.bisectRight(7, low: 9, high: 3), 9);
    expect(A.bisectRight(8, low: 9, high: 3), 9);
  });
  test('list.bisectRight for B lo=9 hi=3', () {
    expect(B.bisectRight(-2, low: 9, high: 3), 9);
    expect(B.bisectRight(-1, low: 9, high: 3), 9);
    expect(B.bisectRight(0, low: 9, high: 3), 9);
    expect(B.bisectRight(1, low: 9, high: 3), 9);
    expect(B.bisectRight(2, low: 9, high: 3), 9);
    expect(B.bisectRight(3, low: 9, high: 3), 9);
    expect(B.bisectRight(4, low: 9, high: 3), 9);
    expect(B.bisectRight(5, low: 9, high: 3), 9);
    expect(B.bisectRight(6, low: 9, high: 3), 9);
    expect(B.bisectRight(7, low: 9, high: 3), 9);
    expect(B.bisectRight(8, low: 9, high: 3), 9);
  });
  test('list.bisectRight for C lo=9 hi=3', () {
    expect(C.bisectRight(-2, low: 9, high: 3), 9);
    expect(C.bisectRight(-1, low: 9, high: 3), 9);
    expect(C.bisectRight(0, low: 9, high: 3), 9);
    expect(C.bisectRight(1, low: 9, high: 3), 9);
    expect(C.bisectRight(2, low: 9, high: 3), 9);
    expect(C.bisectRight(3, low: 9, high: 3), 9);
    expect(C.bisectRight(4, low: 9, high: 3), 9);
    expect(C.bisectRight(5, low: 9, high: 3), 9);
    expect(C.bisectRight(6, low: 9, high: 3), 9);
    expect(C.bisectRight(7, low: 9, high: 3), 9);
    expect(C.bisectRight(8, low: 9, high: 3), 9);
  });
  test('list.bisectRight for D lo=9 hi=3', () {
    expect(D.bisectRight(-2, low: 9, high: 3), 9);
    expect(D.bisectRight(-1, low: 9, high: 3), 9);
    expect(D.bisectRight(0, low: 9, high: 3), 9);
    expect(D.bisectRight(1, low: 9, high: 3), 9);
    expect(D.bisectRight(2, low: 9, high: 3), 9);
    expect(D.bisectRight(3, low: 9, high: 3), 9);
    expect(D.bisectRight(4, low: 9, high: 3), 9);
    expect(D.bisectRight(5, low: 9, high: 3), 9);
    expect(D.bisectRight(6, low: 9, high: 3), 9);
    expect(D.bisectRight(7, low: 9, high: 3), 9);
    expect(D.bisectRight(8, low: 9, high: 3), 9);
  });
  test('list.bisectRight for E lo=9 hi=3', () {
    expect(E.bisectRight(-2, low: 9, high: 3), 9);
    expect(E.bisectRight(-1, low: 9, high: 3), 9);
    expect(E.bisectRight(0, low: 9, high: 3), 9);
    expect(E.bisectRight(1, low: 9, high: 3), 9);
    expect(E.bisectRight(2, low: 9, high: 3), 9);
    expect(E.bisectRight(3, low: 9, high: 3), 9);
    expect(E.bisectRight(4, low: 9, high: 3), 9);
    expect(E.bisectRight(5, low: 9, high: 3), 9);
    expect(E.bisectRight(6, low: 9, high: 3), 9);
    expect(E.bisectRight(7, low: 9, high: 3), 9);
    expect(E.bisectRight(8, low: 9, high: 3), 9);
  });
  test('list.bisectRight for A lo=None hi=4', () {
    expect(() => A.bisectRight(-2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, high: 4), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=4', () {
    expect(() => B.bisectRight(-2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, high: 4), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=4', () {
    expect(() => C.bisectRight(-2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, high: 4), throwsRangeError);
  });
  test('list.bisectRight for D lo=None hi=4', () {
    expect(D.bisectRight(-2, high: 4), 0);
    expect(D.bisectRight(-1, high: 4), 0);
    expect(D.bisectRight(0, high: 4), 0);
    expect(D.bisectRight(1, high: 4), 0);
    expect(D.bisectRight(2, high: 4), 0);
    expect(D.bisectRight(3, high: 4), 1);
    expect(D.bisectRight(4, high: 4), 2);
    expect(() => D.bisectRight(5, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, high: 4), throwsRangeError);
  });
  test('list.bisectRight for E lo=None hi=4', () {
    expect(E.bisectRight(-2, high: 4), 0);
    expect(E.bisectRight(-1, high: 4), 0);
    expect(E.bisectRight(0, high: 4), 1);
    expect(E.bisectRight(1, high: 4), 2);
    expect(E.bisectRight(2, high: 4), 4);
    expect(E.bisectRight(3, high: 4), 4);
    expect(E.bisectRight(4, high: 4), 4);
    expect(E.bisectRight(5, high: 4), 4);
    expect(E.bisectRight(6, high: 4), 4);
    expect(E.bisectRight(7, high: 4), 4);
    expect(E.bisectRight(8, high: 4), 4);
  });
  test('list.bisectRight for A lo=0 hi=4', () {
    expect(() => A.bisectRight(-2, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=4', () {
    expect(() => B.bisectRight(-2, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=4', () {
    expect(() => C.bisectRight(-2, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });
  test('list.bisectRight for D lo=0 hi=4', () {
    expect(D.bisectRight(-2, low: 0, high: 4), 0);
    expect(D.bisectRight(-1, low: 0, high: 4), 0);
    expect(D.bisectRight(0, low: 0, high: 4), 0);
    expect(D.bisectRight(1, low: 0, high: 4), 0);
    expect(D.bisectRight(2, low: 0, high: 4), 0);
    expect(D.bisectRight(3, low: 0, high: 4), 1);
    expect(D.bisectRight(4, low: 0, high: 4), 2);
    expect(() => D.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });
  test('list.bisectRight for E lo=0 hi=4', () {
    expect(E.bisectRight(-2, low: 0, high: 4), 0);
    expect(E.bisectRight(-1, low: 0, high: 4), 0);
    expect(E.bisectRight(0, low: 0, high: 4), 1);
    expect(E.bisectRight(1, low: 0, high: 4), 2);
    expect(E.bisectRight(2, low: 0, high: 4), 4);
    expect(E.bisectRight(3, low: 0, high: 4), 4);
    expect(E.bisectRight(4, low: 0, high: 4), 4);
    expect(E.bisectRight(5, low: 0, high: 4), 4);
    expect(E.bisectRight(6, low: 0, high: 4), 4);
    expect(E.bisectRight(7, low: 0, high: 4), 4);
    expect(E.bisectRight(8, low: 0, high: 4), 4);
  });
  test('list.bisectRight for A lo=1 hi=4', () {
    expect(() => A.bisectRight(-2, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=4', () {
    expect(() => B.bisectRight(-2, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=4', () {
    expect(() => C.bisectRight(-2, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });
  test('list.bisectRight for D lo=1 hi=4', () {
    expect(D.bisectRight(-2, low: 1, high: 4), 1);
    expect(D.bisectRight(-1, low: 1, high: 4), 1);
    expect(D.bisectRight(0, low: 1, high: 4), 1);
    expect(D.bisectRight(1, low: 1, high: 4), 1);
    expect(D.bisectRight(2, low: 1, high: 4), 1);
    expect(D.bisectRight(3, low: 1, high: 4), 1);
    expect(D.bisectRight(4, low: 1, high: 4), 2);
    expect(() => D.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });
  test('list.bisectRight for E lo=1 hi=4', () {
    expect(E.bisectRight(-2, low: 1, high: 4), 1);
    expect(E.bisectRight(-1, low: 1, high: 4), 1);
    expect(E.bisectRight(0, low: 1, high: 4), 1);
    expect(E.bisectRight(1, low: 1, high: 4), 2);
    expect(E.bisectRight(2, low: 1, high: 4), 4);
    expect(E.bisectRight(3, low: 1, high: 4), 4);
    expect(E.bisectRight(4, low: 1, high: 4), 4);
    expect(E.bisectRight(5, low: 1, high: 4), 4);
    expect(E.bisectRight(6, low: 1, high: 4), 4);
    expect(E.bisectRight(7, low: 1, high: 4), 4);
    expect(E.bisectRight(8, low: 1, high: 4), 4);
  });
  test('list.bisectRight for A lo=2 hi=4', () {
    expect(() => A.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });
  test('list.bisectRight for B lo=2 hi=4', () {
    expect(() => B.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });
  test('list.bisectRight for C lo=2 hi=4', () {
    expect(() => C.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });
  test('list.bisectRight for D lo=2 hi=4', () {
    expect(() => D.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });
  test('list.bisectRight for E lo=2 hi=4', () {
    expect(E.bisectRight(-2, low: 2, high: 4), 2);
    expect(E.bisectRight(-1, low: 2, high: 4), 2);
    expect(E.bisectRight(0, low: 2, high: 4), 2);
    expect(E.bisectRight(1, low: 2, high: 4), 2);
    expect(E.bisectRight(2, low: 2, high: 4), 4);
    expect(E.bisectRight(3, low: 2, high: 4), 4);
    expect(E.bisectRight(4, low: 2, high: 4), 4);
    expect(E.bisectRight(5, low: 2, high: 4), 4);
    expect(E.bisectRight(6, low: 2, high: 4), 4);
    expect(E.bisectRight(7, low: 2, high: 4), 4);
    expect(E.bisectRight(8, low: 2, high: 4), 4);
  });
  test('list.bisectRight for A lo=3 hi=4', () {
    expect(() => A.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });
  test('list.bisectRight for B lo=3 hi=4', () {
    expect(() => B.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });
  test('list.bisectRight for C lo=3 hi=4', () {
    expect(() => C.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });
  test('list.bisectRight for D lo=3 hi=4', () {
    expect(() => D.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });
  test('list.bisectRight for E lo=3 hi=4', () {
    expect(E.bisectRight(-2, low: 3, high: 4), 3);
    expect(E.bisectRight(-1, low: 3, high: 4), 3);
    expect(E.bisectRight(0, low: 3, high: 4), 3);
    expect(E.bisectRight(1, low: 3, high: 4), 3);
    expect(E.bisectRight(2, low: 3, high: 4), 4);
    expect(E.bisectRight(3, low: 3, high: 4), 4);
    expect(E.bisectRight(4, low: 3, high: 4), 4);
    expect(E.bisectRight(5, low: 3, high: 4), 4);
    expect(E.bisectRight(6, low: 3, high: 4), 4);
    expect(E.bisectRight(7, low: 3, high: 4), 4);
    expect(E.bisectRight(8, low: 3, high: 4), 4);
  });
  test('list.bisectRight for A lo=4 hi=4', () {
    expect(A.bisectRight(-2, low: 4, high: 4), 4);
    expect(A.bisectRight(-1, low: 4, high: 4), 4);
    expect(A.bisectRight(0, low: 4, high: 4), 4);
    expect(A.bisectRight(1, low: 4, high: 4), 4);
    expect(A.bisectRight(2, low: 4, high: 4), 4);
    expect(A.bisectRight(3, low: 4, high: 4), 4);
    expect(A.bisectRight(4, low: 4, high: 4), 4);
    expect(A.bisectRight(5, low: 4, high: 4), 4);
    expect(A.bisectRight(6, low: 4, high: 4), 4);
    expect(A.bisectRight(7, low: 4, high: 4), 4);
    expect(A.bisectRight(8, low: 4, high: 4), 4);
  });
  test('list.bisectRight for B lo=4 hi=4', () {
    expect(B.bisectRight(-2, low: 4, high: 4), 4);
    expect(B.bisectRight(-1, low: 4, high: 4), 4);
    expect(B.bisectRight(0, low: 4, high: 4), 4);
    expect(B.bisectRight(1, low: 4, high: 4), 4);
    expect(B.bisectRight(2, low: 4, high: 4), 4);
    expect(B.bisectRight(3, low: 4, high: 4), 4);
    expect(B.bisectRight(4, low: 4, high: 4), 4);
    expect(B.bisectRight(5, low: 4, high: 4), 4);
    expect(B.bisectRight(6, low: 4, high: 4), 4);
    expect(B.bisectRight(7, low: 4, high: 4), 4);
    expect(B.bisectRight(8, low: 4, high: 4), 4);
  });
  test('list.bisectRight for C lo=4 hi=4', () {
    expect(C.bisectRight(-2, low: 4, high: 4), 4);
    expect(C.bisectRight(-1, low: 4, high: 4), 4);
    expect(C.bisectRight(0, low: 4, high: 4), 4);
    expect(C.bisectRight(1, low: 4, high: 4), 4);
    expect(C.bisectRight(2, low: 4, high: 4), 4);
    expect(C.bisectRight(3, low: 4, high: 4), 4);
    expect(C.bisectRight(4, low: 4, high: 4), 4);
    expect(C.bisectRight(5, low: 4, high: 4), 4);
    expect(C.bisectRight(6, low: 4, high: 4), 4);
    expect(C.bisectRight(7, low: 4, high: 4), 4);
    expect(C.bisectRight(8, low: 4, high: 4), 4);
  });
  test('list.bisectRight for D lo=4 hi=4', () {
    expect(D.bisectRight(-2, low: 4, high: 4), 4);
    expect(D.bisectRight(-1, low: 4, high: 4), 4);
    expect(D.bisectRight(0, low: 4, high: 4), 4);
    expect(D.bisectRight(1, low: 4, high: 4), 4);
    expect(D.bisectRight(2, low: 4, high: 4), 4);
    expect(D.bisectRight(3, low: 4, high: 4), 4);
    expect(D.bisectRight(4, low: 4, high: 4), 4);
    expect(D.bisectRight(5, low: 4, high: 4), 4);
    expect(D.bisectRight(6, low: 4, high: 4), 4);
    expect(D.bisectRight(7, low: 4, high: 4), 4);
    expect(D.bisectRight(8, low: 4, high: 4), 4);
  });
  test('list.bisectRight for E lo=4 hi=4', () {
    expect(E.bisectRight(-2, low: 4, high: 4), 4);
    expect(E.bisectRight(-1, low: 4, high: 4), 4);
    expect(E.bisectRight(0, low: 4, high: 4), 4);
    expect(E.bisectRight(1, low: 4, high: 4), 4);
    expect(E.bisectRight(2, low: 4, high: 4), 4);
    expect(E.bisectRight(3, low: 4, high: 4), 4);
    expect(E.bisectRight(4, low: 4, high: 4), 4);
    expect(E.bisectRight(5, low: 4, high: 4), 4);
    expect(E.bisectRight(6, low: 4, high: 4), 4);
    expect(E.bisectRight(7, low: 4, high: 4), 4);
    expect(E.bisectRight(8, low: 4, high: 4), 4);
  });
  test('list.bisectRight for A lo=5 hi=4', () {
    expect(A.bisectRight(-2, low: 5, high: 4), 5);
    expect(A.bisectRight(-1, low: 5, high: 4), 5);
    expect(A.bisectRight(0, low: 5, high: 4), 5);
    expect(A.bisectRight(1, low: 5, high: 4), 5);
    expect(A.bisectRight(2, low: 5, high: 4), 5);
    expect(A.bisectRight(3, low: 5, high: 4), 5);
    expect(A.bisectRight(4, low: 5, high: 4), 5);
    expect(A.bisectRight(5, low: 5, high: 4), 5);
    expect(A.bisectRight(6, low: 5, high: 4), 5);
    expect(A.bisectRight(7, low: 5, high: 4), 5);
    expect(A.bisectRight(8, low: 5, high: 4), 5);
  });
  test('list.bisectRight for B lo=5 hi=4', () {
    expect(B.bisectRight(-2, low: 5, high: 4), 5);
    expect(B.bisectRight(-1, low: 5, high: 4), 5);
    expect(B.bisectRight(0, low: 5, high: 4), 5);
    expect(B.bisectRight(1, low: 5, high: 4), 5);
    expect(B.bisectRight(2, low: 5, high: 4), 5);
    expect(B.bisectRight(3, low: 5, high: 4), 5);
    expect(B.bisectRight(4, low: 5, high: 4), 5);
    expect(B.bisectRight(5, low: 5, high: 4), 5);
    expect(B.bisectRight(6, low: 5, high: 4), 5);
    expect(B.bisectRight(7, low: 5, high: 4), 5);
    expect(B.bisectRight(8, low: 5, high: 4), 5);
  });
  test('list.bisectRight for C lo=5 hi=4', () {
    expect(C.bisectRight(-2, low: 5, high: 4), 5);
    expect(C.bisectRight(-1, low: 5, high: 4), 5);
    expect(C.bisectRight(0, low: 5, high: 4), 5);
    expect(C.bisectRight(1, low: 5, high: 4), 5);
    expect(C.bisectRight(2, low: 5, high: 4), 5);
    expect(C.bisectRight(3, low: 5, high: 4), 5);
    expect(C.bisectRight(4, low: 5, high: 4), 5);
    expect(C.bisectRight(5, low: 5, high: 4), 5);
    expect(C.bisectRight(6, low: 5, high: 4), 5);
    expect(C.bisectRight(7, low: 5, high: 4), 5);
    expect(C.bisectRight(8, low: 5, high: 4), 5);
  });
  test('list.bisectRight for D lo=5 hi=4', () {
    expect(D.bisectRight(-2, low: 5, high: 4), 5);
    expect(D.bisectRight(-1, low: 5, high: 4), 5);
    expect(D.bisectRight(0, low: 5, high: 4), 5);
    expect(D.bisectRight(1, low: 5, high: 4), 5);
    expect(D.bisectRight(2, low: 5, high: 4), 5);
    expect(D.bisectRight(3, low: 5, high: 4), 5);
    expect(D.bisectRight(4, low: 5, high: 4), 5);
    expect(D.bisectRight(5, low: 5, high: 4), 5);
    expect(D.bisectRight(6, low: 5, high: 4), 5);
    expect(D.bisectRight(7, low: 5, high: 4), 5);
    expect(D.bisectRight(8, low: 5, high: 4), 5);
  });
  test('list.bisectRight for E lo=5 hi=4', () {
    expect(E.bisectRight(-2, low: 5, high: 4), 5);
    expect(E.bisectRight(-1, low: 5, high: 4), 5);
    expect(E.bisectRight(0, low: 5, high: 4), 5);
    expect(E.bisectRight(1, low: 5, high: 4), 5);
    expect(E.bisectRight(2, low: 5, high: 4), 5);
    expect(E.bisectRight(3, low: 5, high: 4), 5);
    expect(E.bisectRight(4, low: 5, high: 4), 5);
    expect(E.bisectRight(5, low: 5, high: 4), 5);
    expect(E.bisectRight(6, low: 5, high: 4), 5);
    expect(E.bisectRight(7, low: 5, high: 4), 5);
    expect(E.bisectRight(8, low: 5, high: 4), 5);
  });
  test('list.bisectRight for A lo=6 hi=4', () {
    expect(A.bisectRight(-2, low: 6, high: 4), 6);
    expect(A.bisectRight(-1, low: 6, high: 4), 6);
    expect(A.bisectRight(0, low: 6, high: 4), 6);
    expect(A.bisectRight(1, low: 6, high: 4), 6);
    expect(A.bisectRight(2, low: 6, high: 4), 6);
    expect(A.bisectRight(3, low: 6, high: 4), 6);
    expect(A.bisectRight(4, low: 6, high: 4), 6);
    expect(A.bisectRight(5, low: 6, high: 4), 6);
    expect(A.bisectRight(6, low: 6, high: 4), 6);
    expect(A.bisectRight(7, low: 6, high: 4), 6);
    expect(A.bisectRight(8, low: 6, high: 4), 6);
  });
  test('list.bisectRight for B lo=6 hi=4', () {
    expect(B.bisectRight(-2, low: 6, high: 4), 6);
    expect(B.bisectRight(-1, low: 6, high: 4), 6);
    expect(B.bisectRight(0, low: 6, high: 4), 6);
    expect(B.bisectRight(1, low: 6, high: 4), 6);
    expect(B.bisectRight(2, low: 6, high: 4), 6);
    expect(B.bisectRight(3, low: 6, high: 4), 6);
    expect(B.bisectRight(4, low: 6, high: 4), 6);
    expect(B.bisectRight(5, low: 6, high: 4), 6);
    expect(B.bisectRight(6, low: 6, high: 4), 6);
    expect(B.bisectRight(7, low: 6, high: 4), 6);
    expect(B.bisectRight(8, low: 6, high: 4), 6);
  });
  test('list.bisectRight for C lo=6 hi=4', () {
    expect(C.bisectRight(-2, low: 6, high: 4), 6);
    expect(C.bisectRight(-1, low: 6, high: 4), 6);
    expect(C.bisectRight(0, low: 6, high: 4), 6);
    expect(C.bisectRight(1, low: 6, high: 4), 6);
    expect(C.bisectRight(2, low: 6, high: 4), 6);
    expect(C.bisectRight(3, low: 6, high: 4), 6);
    expect(C.bisectRight(4, low: 6, high: 4), 6);
    expect(C.bisectRight(5, low: 6, high: 4), 6);
    expect(C.bisectRight(6, low: 6, high: 4), 6);
    expect(C.bisectRight(7, low: 6, high: 4), 6);
    expect(C.bisectRight(8, low: 6, high: 4), 6);
  });
  test('list.bisectRight for D lo=6 hi=4', () {
    expect(D.bisectRight(-2, low: 6, high: 4), 6);
    expect(D.bisectRight(-1, low: 6, high: 4), 6);
    expect(D.bisectRight(0, low: 6, high: 4), 6);
    expect(D.bisectRight(1, low: 6, high: 4), 6);
    expect(D.bisectRight(2, low: 6, high: 4), 6);
    expect(D.bisectRight(3, low: 6, high: 4), 6);
    expect(D.bisectRight(4, low: 6, high: 4), 6);
    expect(D.bisectRight(5, low: 6, high: 4), 6);
    expect(D.bisectRight(6, low: 6, high: 4), 6);
    expect(D.bisectRight(7, low: 6, high: 4), 6);
    expect(D.bisectRight(8, low: 6, high: 4), 6);
  });
  test('list.bisectRight for E lo=6 hi=4', () {
    expect(E.bisectRight(-2, low: 6, high: 4), 6);
    expect(E.bisectRight(-1, low: 6, high: 4), 6);
    expect(E.bisectRight(0, low: 6, high: 4), 6);
    expect(E.bisectRight(1, low: 6, high: 4), 6);
    expect(E.bisectRight(2, low: 6, high: 4), 6);
    expect(E.bisectRight(3, low: 6, high: 4), 6);
    expect(E.bisectRight(4, low: 6, high: 4), 6);
    expect(E.bisectRight(5, low: 6, high: 4), 6);
    expect(E.bisectRight(6, low: 6, high: 4), 6);
    expect(E.bisectRight(7, low: 6, high: 4), 6);
    expect(E.bisectRight(8, low: 6, high: 4), 6);
  });
  test('list.bisectRight for A lo=7 hi=4', () {
    expect(A.bisectRight(-2, low: 7, high: 4), 7);
    expect(A.bisectRight(-1, low: 7, high: 4), 7);
    expect(A.bisectRight(0, low: 7, high: 4), 7);
    expect(A.bisectRight(1, low: 7, high: 4), 7);
    expect(A.bisectRight(2, low: 7, high: 4), 7);
    expect(A.bisectRight(3, low: 7, high: 4), 7);
    expect(A.bisectRight(4, low: 7, high: 4), 7);
    expect(A.bisectRight(5, low: 7, high: 4), 7);
    expect(A.bisectRight(6, low: 7, high: 4), 7);
    expect(A.bisectRight(7, low: 7, high: 4), 7);
    expect(A.bisectRight(8, low: 7, high: 4), 7);
  });
  test('list.bisectRight for B lo=7 hi=4', () {
    expect(B.bisectRight(-2, low: 7, high: 4), 7);
    expect(B.bisectRight(-1, low: 7, high: 4), 7);
    expect(B.bisectRight(0, low: 7, high: 4), 7);
    expect(B.bisectRight(1, low: 7, high: 4), 7);
    expect(B.bisectRight(2, low: 7, high: 4), 7);
    expect(B.bisectRight(3, low: 7, high: 4), 7);
    expect(B.bisectRight(4, low: 7, high: 4), 7);
    expect(B.bisectRight(5, low: 7, high: 4), 7);
    expect(B.bisectRight(6, low: 7, high: 4), 7);
    expect(B.bisectRight(7, low: 7, high: 4), 7);
    expect(B.bisectRight(8, low: 7, high: 4), 7);
  });
  test('list.bisectRight for C lo=7 hi=4', () {
    expect(C.bisectRight(-2, low: 7, high: 4), 7);
    expect(C.bisectRight(-1, low: 7, high: 4), 7);
    expect(C.bisectRight(0, low: 7, high: 4), 7);
    expect(C.bisectRight(1, low: 7, high: 4), 7);
    expect(C.bisectRight(2, low: 7, high: 4), 7);
    expect(C.bisectRight(3, low: 7, high: 4), 7);
    expect(C.bisectRight(4, low: 7, high: 4), 7);
    expect(C.bisectRight(5, low: 7, high: 4), 7);
    expect(C.bisectRight(6, low: 7, high: 4), 7);
    expect(C.bisectRight(7, low: 7, high: 4), 7);
    expect(C.bisectRight(8, low: 7, high: 4), 7);
  });
  test('list.bisectRight for D lo=7 hi=4', () {
    expect(D.bisectRight(-2, low: 7, high: 4), 7);
    expect(D.bisectRight(-1, low: 7, high: 4), 7);
    expect(D.bisectRight(0, low: 7, high: 4), 7);
    expect(D.bisectRight(1, low: 7, high: 4), 7);
    expect(D.bisectRight(2, low: 7, high: 4), 7);
    expect(D.bisectRight(3, low: 7, high: 4), 7);
    expect(D.bisectRight(4, low: 7, high: 4), 7);
    expect(D.bisectRight(5, low: 7, high: 4), 7);
    expect(D.bisectRight(6, low: 7, high: 4), 7);
    expect(D.bisectRight(7, low: 7, high: 4), 7);
    expect(D.bisectRight(8, low: 7, high: 4), 7);
  });
  test('list.bisectRight for E lo=7 hi=4', () {
    expect(E.bisectRight(-2, low: 7, high: 4), 7);
    expect(E.bisectRight(-1, low: 7, high: 4), 7);
    expect(E.bisectRight(0, low: 7, high: 4), 7);
    expect(E.bisectRight(1, low: 7, high: 4), 7);
    expect(E.bisectRight(2, low: 7, high: 4), 7);
    expect(E.bisectRight(3, low: 7, high: 4), 7);
    expect(E.bisectRight(4, low: 7, high: 4), 7);
    expect(E.bisectRight(5, low: 7, high: 4), 7);
    expect(E.bisectRight(6, low: 7, high: 4), 7);
    expect(E.bisectRight(7, low: 7, high: 4), 7);
    expect(E.bisectRight(8, low: 7, high: 4), 7);
  });
  test('list.bisectRight for A lo=8 hi=4', () {
    expect(A.bisectRight(-2, low: 8, high: 4), 8);
    expect(A.bisectRight(-1, low: 8, high: 4), 8);
    expect(A.bisectRight(0, low: 8, high: 4), 8);
    expect(A.bisectRight(1, low: 8, high: 4), 8);
    expect(A.bisectRight(2, low: 8, high: 4), 8);
    expect(A.bisectRight(3, low: 8, high: 4), 8);
    expect(A.bisectRight(4, low: 8, high: 4), 8);
    expect(A.bisectRight(5, low: 8, high: 4), 8);
    expect(A.bisectRight(6, low: 8, high: 4), 8);
    expect(A.bisectRight(7, low: 8, high: 4), 8);
    expect(A.bisectRight(8, low: 8, high: 4), 8);
  });
  test('list.bisectRight for B lo=8 hi=4', () {
    expect(B.bisectRight(-2, low: 8, high: 4), 8);
    expect(B.bisectRight(-1, low: 8, high: 4), 8);
    expect(B.bisectRight(0, low: 8, high: 4), 8);
    expect(B.bisectRight(1, low: 8, high: 4), 8);
    expect(B.bisectRight(2, low: 8, high: 4), 8);
    expect(B.bisectRight(3, low: 8, high: 4), 8);
    expect(B.bisectRight(4, low: 8, high: 4), 8);
    expect(B.bisectRight(5, low: 8, high: 4), 8);
    expect(B.bisectRight(6, low: 8, high: 4), 8);
    expect(B.bisectRight(7, low: 8, high: 4), 8);
    expect(B.bisectRight(8, low: 8, high: 4), 8);
  });
  test('list.bisectRight for C lo=8 hi=4', () {
    expect(C.bisectRight(-2, low: 8, high: 4), 8);
    expect(C.bisectRight(-1, low: 8, high: 4), 8);
    expect(C.bisectRight(0, low: 8, high: 4), 8);
    expect(C.bisectRight(1, low: 8, high: 4), 8);
    expect(C.bisectRight(2, low: 8, high: 4), 8);
    expect(C.bisectRight(3, low: 8, high: 4), 8);
    expect(C.bisectRight(4, low: 8, high: 4), 8);
    expect(C.bisectRight(5, low: 8, high: 4), 8);
    expect(C.bisectRight(6, low: 8, high: 4), 8);
    expect(C.bisectRight(7, low: 8, high: 4), 8);
    expect(C.bisectRight(8, low: 8, high: 4), 8);
  });
  test('list.bisectRight for D lo=8 hi=4', () {
    expect(D.bisectRight(-2, low: 8, high: 4), 8);
    expect(D.bisectRight(-1, low: 8, high: 4), 8);
    expect(D.bisectRight(0, low: 8, high: 4), 8);
    expect(D.bisectRight(1, low: 8, high: 4), 8);
    expect(D.bisectRight(2, low: 8, high: 4), 8);
    expect(D.bisectRight(3, low: 8, high: 4), 8);
    expect(D.bisectRight(4, low: 8, high: 4), 8);
    expect(D.bisectRight(5, low: 8, high: 4), 8);
    expect(D.bisectRight(6, low: 8, high: 4), 8);
    expect(D.bisectRight(7, low: 8, high: 4), 8);
    expect(D.bisectRight(8, low: 8, high: 4), 8);
  });
  test('list.bisectRight for E lo=8 hi=4', () {
    expect(E.bisectRight(-2, low: 8, high: 4), 8);
    expect(E.bisectRight(-1, low: 8, high: 4), 8);
    expect(E.bisectRight(0, low: 8, high: 4), 8);
    expect(E.bisectRight(1, low: 8, high: 4), 8);
    expect(E.bisectRight(2, low: 8, high: 4), 8);
    expect(E.bisectRight(3, low: 8, high: 4), 8);
    expect(E.bisectRight(4, low: 8, high: 4), 8);
    expect(E.bisectRight(5, low: 8, high: 4), 8);
    expect(E.bisectRight(6, low: 8, high: 4), 8);
    expect(E.bisectRight(7, low: 8, high: 4), 8);
    expect(E.bisectRight(8, low: 8, high: 4), 8);
  });
  test('list.bisectRight for A lo=9 hi=4', () {
    expect(A.bisectRight(-2, low: 9, high: 4), 9);
    expect(A.bisectRight(-1, low: 9, high: 4), 9);
    expect(A.bisectRight(0, low: 9, high: 4), 9);
    expect(A.bisectRight(1, low: 9, high: 4), 9);
    expect(A.bisectRight(2, low: 9, high: 4), 9);
    expect(A.bisectRight(3, low: 9, high: 4), 9);
    expect(A.bisectRight(4, low: 9, high: 4), 9);
    expect(A.bisectRight(5, low: 9, high: 4), 9);
    expect(A.bisectRight(6, low: 9, high: 4), 9);
    expect(A.bisectRight(7, low: 9, high: 4), 9);
    expect(A.bisectRight(8, low: 9, high: 4), 9);
  });
  test('list.bisectRight for B lo=9 hi=4', () {
    expect(B.bisectRight(-2, low: 9, high: 4), 9);
    expect(B.bisectRight(-1, low: 9, high: 4), 9);
    expect(B.bisectRight(0, low: 9, high: 4), 9);
    expect(B.bisectRight(1, low: 9, high: 4), 9);
    expect(B.bisectRight(2, low: 9, high: 4), 9);
    expect(B.bisectRight(3, low: 9, high: 4), 9);
    expect(B.bisectRight(4, low: 9, high: 4), 9);
    expect(B.bisectRight(5, low: 9, high: 4), 9);
    expect(B.bisectRight(6, low: 9, high: 4), 9);
    expect(B.bisectRight(7, low: 9, high: 4), 9);
    expect(B.bisectRight(8, low: 9, high: 4), 9);
  });
  test('list.bisectRight for C lo=9 hi=4', () {
    expect(C.bisectRight(-2, low: 9, high: 4), 9);
    expect(C.bisectRight(-1, low: 9, high: 4), 9);
    expect(C.bisectRight(0, low: 9, high: 4), 9);
    expect(C.bisectRight(1, low: 9, high: 4), 9);
    expect(C.bisectRight(2, low: 9, high: 4), 9);
    expect(C.bisectRight(3, low: 9, high: 4), 9);
    expect(C.bisectRight(4, low: 9, high: 4), 9);
    expect(C.bisectRight(5, low: 9, high: 4), 9);
    expect(C.bisectRight(6, low: 9, high: 4), 9);
    expect(C.bisectRight(7, low: 9, high: 4), 9);
    expect(C.bisectRight(8, low: 9, high: 4), 9);
  });
  test('list.bisectRight for D lo=9 hi=4', () {
    expect(D.bisectRight(-2, low: 9, high: 4), 9);
    expect(D.bisectRight(-1, low: 9, high: 4), 9);
    expect(D.bisectRight(0, low: 9, high: 4), 9);
    expect(D.bisectRight(1, low: 9, high: 4), 9);
    expect(D.bisectRight(2, low: 9, high: 4), 9);
    expect(D.bisectRight(3, low: 9, high: 4), 9);
    expect(D.bisectRight(4, low: 9, high: 4), 9);
    expect(D.bisectRight(5, low: 9, high: 4), 9);
    expect(D.bisectRight(6, low: 9, high: 4), 9);
    expect(D.bisectRight(7, low: 9, high: 4), 9);
    expect(D.bisectRight(8, low: 9, high: 4), 9);
  });
  test('list.bisectRight for E lo=9 hi=4', () {
    expect(E.bisectRight(-2, low: 9, high: 4), 9);
    expect(E.bisectRight(-1, low: 9, high: 4), 9);
    expect(E.bisectRight(0, low: 9, high: 4), 9);
    expect(E.bisectRight(1, low: 9, high: 4), 9);
    expect(E.bisectRight(2, low: 9, high: 4), 9);
    expect(E.bisectRight(3, low: 9, high: 4), 9);
    expect(E.bisectRight(4, low: 9, high: 4), 9);
    expect(E.bisectRight(5, low: 9, high: 4), 9);
    expect(E.bisectRight(6, low: 9, high: 4), 9);
    expect(E.bisectRight(7, low: 9, high: 4), 9);
    expect(E.bisectRight(8, low: 9, high: 4), 9);
  });
  test('list.bisectRight for A lo=None hi=5', () {
    expect(() => A.bisectRight(-2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, high: 5), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=5', () {
    expect(() => B.bisectRight(-2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, high: 5), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=5', () {
    expect(() => C.bisectRight(-2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, high: 5), throwsRangeError);
  });
  test('list.bisectRight for D lo=None hi=5', () {
    expect(D.bisectRight(-2, high: 5), 0);
    expect(D.bisectRight(-1, high: 5), 0);
    expect(D.bisectRight(0, high: 5), 0);
    expect(D.bisectRight(1, high: 5), 0);
    expect(D.bisectRight(2, high: 5), 0);
    expect(D.bisectRight(3, high: 5), 1);
    expect(D.bisectRight(4, high: 5), 2);
    expect(() => D.bisectRight(5, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, high: 5), throwsRangeError);
  });
  test('list.bisectRight for E lo=None hi=5', () {
    expect(E.bisectRight(-2, high: 5), 0);
    expect(E.bisectRight(-1, high: 5), 0);
    expect(E.bisectRight(0, high: 5), 1);
    expect(E.bisectRight(1, high: 5), 2);
    expect(E.bisectRight(2, high: 5), 5);
    expect(E.bisectRight(3, high: 5), 5);
    expect(E.bisectRight(4, high: 5), 5);
    expect(E.bisectRight(5, high: 5), 5);
    expect(E.bisectRight(6, high: 5), 5);
    expect(E.bisectRight(7, high: 5), 5);
    expect(E.bisectRight(8, high: 5), 5);
  });
  test('list.bisectRight for A lo=0 hi=5', () {
    expect(() => A.bisectRight(-2, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=5', () {
    expect(() => B.bisectRight(-2, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=5', () {
    expect(() => C.bisectRight(-2, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });
  test('list.bisectRight for D lo=0 hi=5', () {
    expect(D.bisectRight(-2, low: 0, high: 5), 0);
    expect(D.bisectRight(-1, low: 0, high: 5), 0);
    expect(D.bisectRight(0, low: 0, high: 5), 0);
    expect(D.bisectRight(1, low: 0, high: 5), 0);
    expect(D.bisectRight(2, low: 0, high: 5), 0);
    expect(D.bisectRight(3, low: 0, high: 5), 1);
    expect(D.bisectRight(4, low: 0, high: 5), 2);
    expect(() => D.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });
  test('list.bisectRight for E lo=0 hi=5', () {
    expect(E.bisectRight(-2, low: 0, high: 5), 0);
    expect(E.bisectRight(-1, low: 0, high: 5), 0);
    expect(E.bisectRight(0, low: 0, high: 5), 1);
    expect(E.bisectRight(1, low: 0, high: 5), 2);
    expect(E.bisectRight(2, low: 0, high: 5), 5);
    expect(E.bisectRight(3, low: 0, high: 5), 5);
    expect(E.bisectRight(4, low: 0, high: 5), 5);
    expect(E.bisectRight(5, low: 0, high: 5), 5);
    expect(E.bisectRight(6, low: 0, high: 5), 5);
    expect(E.bisectRight(7, low: 0, high: 5), 5);
    expect(E.bisectRight(8, low: 0, high: 5), 5);
  });
  test('list.bisectRight for A lo=1 hi=5', () {
    expect(() => A.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=5', () {
    expect(() => B.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=5', () {
    expect(() => C.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });
  test('list.bisectRight for D lo=1 hi=5', () {
    expect(() => D.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });
  test('list.bisectRight for E lo=1 hi=5', () {
    expect(E.bisectRight(-2, low: 1, high: 5), 1);
    expect(E.bisectRight(-1, low: 1, high: 5), 1);
    expect(E.bisectRight(0, low: 1, high: 5), 1);
    expect(E.bisectRight(1, low: 1, high: 5), 2);
    expect(E.bisectRight(2, low: 1, high: 5), 5);
    expect(E.bisectRight(3, low: 1, high: 5), 5);
    expect(E.bisectRight(4, low: 1, high: 5), 5);
    expect(E.bisectRight(5, low: 1, high: 5), 5);
    expect(E.bisectRight(6, low: 1, high: 5), 5);
    expect(E.bisectRight(7, low: 1, high: 5), 5);
    expect(E.bisectRight(8, low: 1, high: 5), 5);
  });
  test('list.bisectRight for A lo=2 hi=5', () {
    expect(() => A.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });
  test('list.bisectRight for B lo=2 hi=5', () {
    expect(() => B.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });
  test('list.bisectRight for C lo=2 hi=5', () {
    expect(() => C.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });
  test('list.bisectRight for D lo=2 hi=5', () {
    expect(() => D.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });
  test('list.bisectRight for E lo=2 hi=5', () {
    expect(E.bisectRight(-2, low: 2, high: 5), 2);
    expect(E.bisectRight(-1, low: 2, high: 5), 2);
    expect(E.bisectRight(0, low: 2, high: 5), 2);
    expect(E.bisectRight(1, low: 2, high: 5), 2);
    expect(E.bisectRight(2, low: 2, high: 5), 5);
    expect(E.bisectRight(3, low: 2, high: 5), 5);
    expect(E.bisectRight(4, low: 2, high: 5), 5);
    expect(E.bisectRight(5, low: 2, high: 5), 5);
    expect(E.bisectRight(6, low: 2, high: 5), 5);
    expect(E.bisectRight(7, low: 2, high: 5), 5);
    expect(E.bisectRight(8, low: 2, high: 5), 5);
  });
  test('list.bisectRight for A lo=3 hi=5', () {
    expect(() => A.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });
  test('list.bisectRight for B lo=3 hi=5', () {
    expect(() => B.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });
  test('list.bisectRight for C lo=3 hi=5', () {
    expect(() => C.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });
  test('list.bisectRight for D lo=3 hi=5', () {
    expect(() => D.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });
  test('list.bisectRight for E lo=3 hi=5', () {
    expect(E.bisectRight(-2, low: 3, high: 5), 3);
    expect(E.bisectRight(-1, low: 3, high: 5), 3);
    expect(E.bisectRight(0, low: 3, high: 5), 3);
    expect(E.bisectRight(1, low: 3, high: 5), 3);
    expect(E.bisectRight(2, low: 3, high: 5), 5);
    expect(E.bisectRight(3, low: 3, high: 5), 5);
    expect(E.bisectRight(4, low: 3, high: 5), 5);
    expect(E.bisectRight(5, low: 3, high: 5), 5);
    expect(E.bisectRight(6, low: 3, high: 5), 5);
    expect(E.bisectRight(7, low: 3, high: 5), 5);
    expect(E.bisectRight(8, low: 3, high: 5), 5);
  });
  test('list.bisectRight for A lo=4 hi=5', () {
    expect(() => A.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });
  test('list.bisectRight for B lo=4 hi=5', () {
    expect(() => B.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });
  test('list.bisectRight for C lo=4 hi=5', () {
    expect(() => C.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });
  test('list.bisectRight for D lo=4 hi=5', () {
    expect(() => D.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });
  test('list.bisectRight for E lo=4 hi=5', () {
    expect(E.bisectRight(-2, low: 4, high: 5), 4);
    expect(E.bisectRight(-1, low: 4, high: 5), 4);
    expect(E.bisectRight(0, low: 4, high: 5), 4);
    expect(E.bisectRight(1, low: 4, high: 5), 4);
    expect(E.bisectRight(2, low: 4, high: 5), 5);
    expect(E.bisectRight(3, low: 4, high: 5), 5);
    expect(E.bisectRight(4, low: 4, high: 5), 5);
    expect(E.bisectRight(5, low: 4, high: 5), 5);
    expect(E.bisectRight(6, low: 4, high: 5), 5);
    expect(E.bisectRight(7, low: 4, high: 5), 5);
    expect(E.bisectRight(8, low: 4, high: 5), 5);
  });
  test('list.bisectRight for A lo=5 hi=5', () {
    expect(A.bisectRight(-2, low: 5, high: 5), 5);
    expect(A.bisectRight(-1, low: 5, high: 5), 5);
    expect(A.bisectRight(0, low: 5, high: 5), 5);
    expect(A.bisectRight(1, low: 5, high: 5), 5);
    expect(A.bisectRight(2, low: 5, high: 5), 5);
    expect(A.bisectRight(3, low: 5, high: 5), 5);
    expect(A.bisectRight(4, low: 5, high: 5), 5);
    expect(A.bisectRight(5, low: 5, high: 5), 5);
    expect(A.bisectRight(6, low: 5, high: 5), 5);
    expect(A.bisectRight(7, low: 5, high: 5), 5);
    expect(A.bisectRight(8, low: 5, high: 5), 5);
  });
  test('list.bisectRight for B lo=5 hi=5', () {
    expect(B.bisectRight(-2, low: 5, high: 5), 5);
    expect(B.bisectRight(-1, low: 5, high: 5), 5);
    expect(B.bisectRight(0, low: 5, high: 5), 5);
    expect(B.bisectRight(1, low: 5, high: 5), 5);
    expect(B.bisectRight(2, low: 5, high: 5), 5);
    expect(B.bisectRight(3, low: 5, high: 5), 5);
    expect(B.bisectRight(4, low: 5, high: 5), 5);
    expect(B.bisectRight(5, low: 5, high: 5), 5);
    expect(B.bisectRight(6, low: 5, high: 5), 5);
    expect(B.bisectRight(7, low: 5, high: 5), 5);
    expect(B.bisectRight(8, low: 5, high: 5), 5);
  });
  test('list.bisectRight for C lo=5 hi=5', () {
    expect(C.bisectRight(-2, low: 5, high: 5), 5);
    expect(C.bisectRight(-1, low: 5, high: 5), 5);
    expect(C.bisectRight(0, low: 5, high: 5), 5);
    expect(C.bisectRight(1, low: 5, high: 5), 5);
    expect(C.bisectRight(2, low: 5, high: 5), 5);
    expect(C.bisectRight(3, low: 5, high: 5), 5);
    expect(C.bisectRight(4, low: 5, high: 5), 5);
    expect(C.bisectRight(5, low: 5, high: 5), 5);
    expect(C.bisectRight(6, low: 5, high: 5), 5);
    expect(C.bisectRight(7, low: 5, high: 5), 5);
    expect(C.bisectRight(8, low: 5, high: 5), 5);
  });
  test('list.bisectRight for D lo=5 hi=5', () {
    expect(D.bisectRight(-2, low: 5, high: 5), 5);
    expect(D.bisectRight(-1, low: 5, high: 5), 5);
    expect(D.bisectRight(0, low: 5, high: 5), 5);
    expect(D.bisectRight(1, low: 5, high: 5), 5);
    expect(D.bisectRight(2, low: 5, high: 5), 5);
    expect(D.bisectRight(3, low: 5, high: 5), 5);
    expect(D.bisectRight(4, low: 5, high: 5), 5);
    expect(D.bisectRight(5, low: 5, high: 5), 5);
    expect(D.bisectRight(6, low: 5, high: 5), 5);
    expect(D.bisectRight(7, low: 5, high: 5), 5);
    expect(D.bisectRight(8, low: 5, high: 5), 5);
  });
  test('list.bisectRight for E lo=5 hi=5', () {
    expect(E.bisectRight(-2, low: 5, high: 5), 5);
    expect(E.bisectRight(-1, low: 5, high: 5), 5);
    expect(E.bisectRight(0, low: 5, high: 5), 5);
    expect(E.bisectRight(1, low: 5, high: 5), 5);
    expect(E.bisectRight(2, low: 5, high: 5), 5);
    expect(E.bisectRight(3, low: 5, high: 5), 5);
    expect(E.bisectRight(4, low: 5, high: 5), 5);
    expect(E.bisectRight(5, low: 5, high: 5), 5);
    expect(E.bisectRight(6, low: 5, high: 5), 5);
    expect(E.bisectRight(7, low: 5, high: 5), 5);
    expect(E.bisectRight(8, low: 5, high: 5), 5);
  });
  test('list.bisectRight for A lo=6 hi=5', () {
    expect(A.bisectRight(-2, low: 6, high: 5), 6);
    expect(A.bisectRight(-1, low: 6, high: 5), 6);
    expect(A.bisectRight(0, low: 6, high: 5), 6);
    expect(A.bisectRight(1, low: 6, high: 5), 6);
    expect(A.bisectRight(2, low: 6, high: 5), 6);
    expect(A.bisectRight(3, low: 6, high: 5), 6);
    expect(A.bisectRight(4, low: 6, high: 5), 6);
    expect(A.bisectRight(5, low: 6, high: 5), 6);
    expect(A.bisectRight(6, low: 6, high: 5), 6);
    expect(A.bisectRight(7, low: 6, high: 5), 6);
    expect(A.bisectRight(8, low: 6, high: 5), 6);
  });
  test('list.bisectRight for B lo=6 hi=5', () {
    expect(B.bisectRight(-2, low: 6, high: 5), 6);
    expect(B.bisectRight(-1, low: 6, high: 5), 6);
    expect(B.bisectRight(0, low: 6, high: 5), 6);
    expect(B.bisectRight(1, low: 6, high: 5), 6);
    expect(B.bisectRight(2, low: 6, high: 5), 6);
    expect(B.bisectRight(3, low: 6, high: 5), 6);
    expect(B.bisectRight(4, low: 6, high: 5), 6);
    expect(B.bisectRight(5, low: 6, high: 5), 6);
    expect(B.bisectRight(6, low: 6, high: 5), 6);
    expect(B.bisectRight(7, low: 6, high: 5), 6);
    expect(B.bisectRight(8, low: 6, high: 5), 6);
  });
  test('list.bisectRight for C lo=6 hi=5', () {
    expect(C.bisectRight(-2, low: 6, high: 5), 6);
    expect(C.bisectRight(-1, low: 6, high: 5), 6);
    expect(C.bisectRight(0, low: 6, high: 5), 6);
    expect(C.bisectRight(1, low: 6, high: 5), 6);
    expect(C.bisectRight(2, low: 6, high: 5), 6);
    expect(C.bisectRight(3, low: 6, high: 5), 6);
    expect(C.bisectRight(4, low: 6, high: 5), 6);
    expect(C.bisectRight(5, low: 6, high: 5), 6);
    expect(C.bisectRight(6, low: 6, high: 5), 6);
    expect(C.bisectRight(7, low: 6, high: 5), 6);
    expect(C.bisectRight(8, low: 6, high: 5), 6);
  });
  test('list.bisectRight for D lo=6 hi=5', () {
    expect(D.bisectRight(-2, low: 6, high: 5), 6);
    expect(D.bisectRight(-1, low: 6, high: 5), 6);
    expect(D.bisectRight(0, low: 6, high: 5), 6);
    expect(D.bisectRight(1, low: 6, high: 5), 6);
    expect(D.bisectRight(2, low: 6, high: 5), 6);
    expect(D.bisectRight(3, low: 6, high: 5), 6);
    expect(D.bisectRight(4, low: 6, high: 5), 6);
    expect(D.bisectRight(5, low: 6, high: 5), 6);
    expect(D.bisectRight(6, low: 6, high: 5), 6);
    expect(D.bisectRight(7, low: 6, high: 5), 6);
    expect(D.bisectRight(8, low: 6, high: 5), 6);
  });
  test('list.bisectRight for E lo=6 hi=5', () {
    expect(E.bisectRight(-2, low: 6, high: 5), 6);
    expect(E.bisectRight(-1, low: 6, high: 5), 6);
    expect(E.bisectRight(0, low: 6, high: 5), 6);
    expect(E.bisectRight(1, low: 6, high: 5), 6);
    expect(E.bisectRight(2, low: 6, high: 5), 6);
    expect(E.bisectRight(3, low: 6, high: 5), 6);
    expect(E.bisectRight(4, low: 6, high: 5), 6);
    expect(E.bisectRight(5, low: 6, high: 5), 6);
    expect(E.bisectRight(6, low: 6, high: 5), 6);
    expect(E.bisectRight(7, low: 6, high: 5), 6);
    expect(E.bisectRight(8, low: 6, high: 5), 6);
  });
  test('list.bisectRight for A lo=7 hi=5', () {
    expect(A.bisectRight(-2, low: 7, high: 5), 7);
    expect(A.bisectRight(-1, low: 7, high: 5), 7);
    expect(A.bisectRight(0, low: 7, high: 5), 7);
    expect(A.bisectRight(1, low: 7, high: 5), 7);
    expect(A.bisectRight(2, low: 7, high: 5), 7);
    expect(A.bisectRight(3, low: 7, high: 5), 7);
    expect(A.bisectRight(4, low: 7, high: 5), 7);
    expect(A.bisectRight(5, low: 7, high: 5), 7);
    expect(A.bisectRight(6, low: 7, high: 5), 7);
    expect(A.bisectRight(7, low: 7, high: 5), 7);
    expect(A.bisectRight(8, low: 7, high: 5), 7);
  });
  test('list.bisectRight for B lo=7 hi=5', () {
    expect(B.bisectRight(-2, low: 7, high: 5), 7);
    expect(B.bisectRight(-1, low: 7, high: 5), 7);
    expect(B.bisectRight(0, low: 7, high: 5), 7);
    expect(B.bisectRight(1, low: 7, high: 5), 7);
    expect(B.bisectRight(2, low: 7, high: 5), 7);
    expect(B.bisectRight(3, low: 7, high: 5), 7);
    expect(B.bisectRight(4, low: 7, high: 5), 7);
    expect(B.bisectRight(5, low: 7, high: 5), 7);
    expect(B.bisectRight(6, low: 7, high: 5), 7);
    expect(B.bisectRight(7, low: 7, high: 5), 7);
    expect(B.bisectRight(8, low: 7, high: 5), 7);
  });
  test('list.bisectRight for C lo=7 hi=5', () {
    expect(C.bisectRight(-2, low: 7, high: 5), 7);
    expect(C.bisectRight(-1, low: 7, high: 5), 7);
    expect(C.bisectRight(0, low: 7, high: 5), 7);
    expect(C.bisectRight(1, low: 7, high: 5), 7);
    expect(C.bisectRight(2, low: 7, high: 5), 7);
    expect(C.bisectRight(3, low: 7, high: 5), 7);
    expect(C.bisectRight(4, low: 7, high: 5), 7);
    expect(C.bisectRight(5, low: 7, high: 5), 7);
    expect(C.bisectRight(6, low: 7, high: 5), 7);
    expect(C.bisectRight(7, low: 7, high: 5), 7);
    expect(C.bisectRight(8, low: 7, high: 5), 7);
  });
  test('list.bisectRight for D lo=7 hi=5', () {
    expect(D.bisectRight(-2, low: 7, high: 5), 7);
    expect(D.bisectRight(-1, low: 7, high: 5), 7);
    expect(D.bisectRight(0, low: 7, high: 5), 7);
    expect(D.bisectRight(1, low: 7, high: 5), 7);
    expect(D.bisectRight(2, low: 7, high: 5), 7);
    expect(D.bisectRight(3, low: 7, high: 5), 7);
    expect(D.bisectRight(4, low: 7, high: 5), 7);
    expect(D.bisectRight(5, low: 7, high: 5), 7);
    expect(D.bisectRight(6, low: 7, high: 5), 7);
    expect(D.bisectRight(7, low: 7, high: 5), 7);
    expect(D.bisectRight(8, low: 7, high: 5), 7);
  });
  test('list.bisectRight for E lo=7 hi=5', () {
    expect(E.bisectRight(-2, low: 7, high: 5), 7);
    expect(E.bisectRight(-1, low: 7, high: 5), 7);
    expect(E.bisectRight(0, low: 7, high: 5), 7);
    expect(E.bisectRight(1, low: 7, high: 5), 7);
    expect(E.bisectRight(2, low: 7, high: 5), 7);
    expect(E.bisectRight(3, low: 7, high: 5), 7);
    expect(E.bisectRight(4, low: 7, high: 5), 7);
    expect(E.bisectRight(5, low: 7, high: 5), 7);
    expect(E.bisectRight(6, low: 7, high: 5), 7);
    expect(E.bisectRight(7, low: 7, high: 5), 7);
    expect(E.bisectRight(8, low: 7, high: 5), 7);
  });
  test('list.bisectRight for A lo=8 hi=5', () {
    expect(A.bisectRight(-2, low: 8, high: 5), 8);
    expect(A.bisectRight(-1, low: 8, high: 5), 8);
    expect(A.bisectRight(0, low: 8, high: 5), 8);
    expect(A.bisectRight(1, low: 8, high: 5), 8);
    expect(A.bisectRight(2, low: 8, high: 5), 8);
    expect(A.bisectRight(3, low: 8, high: 5), 8);
    expect(A.bisectRight(4, low: 8, high: 5), 8);
    expect(A.bisectRight(5, low: 8, high: 5), 8);
    expect(A.bisectRight(6, low: 8, high: 5), 8);
    expect(A.bisectRight(7, low: 8, high: 5), 8);
    expect(A.bisectRight(8, low: 8, high: 5), 8);
  });
  test('list.bisectRight for B lo=8 hi=5', () {
    expect(B.bisectRight(-2, low: 8, high: 5), 8);
    expect(B.bisectRight(-1, low: 8, high: 5), 8);
    expect(B.bisectRight(0, low: 8, high: 5), 8);
    expect(B.bisectRight(1, low: 8, high: 5), 8);
    expect(B.bisectRight(2, low: 8, high: 5), 8);
    expect(B.bisectRight(3, low: 8, high: 5), 8);
    expect(B.bisectRight(4, low: 8, high: 5), 8);
    expect(B.bisectRight(5, low: 8, high: 5), 8);
    expect(B.bisectRight(6, low: 8, high: 5), 8);
    expect(B.bisectRight(7, low: 8, high: 5), 8);
    expect(B.bisectRight(8, low: 8, high: 5), 8);
  });
  test('list.bisectRight for C lo=8 hi=5', () {
    expect(C.bisectRight(-2, low: 8, high: 5), 8);
    expect(C.bisectRight(-1, low: 8, high: 5), 8);
    expect(C.bisectRight(0, low: 8, high: 5), 8);
    expect(C.bisectRight(1, low: 8, high: 5), 8);
    expect(C.bisectRight(2, low: 8, high: 5), 8);
    expect(C.bisectRight(3, low: 8, high: 5), 8);
    expect(C.bisectRight(4, low: 8, high: 5), 8);
    expect(C.bisectRight(5, low: 8, high: 5), 8);
    expect(C.bisectRight(6, low: 8, high: 5), 8);
    expect(C.bisectRight(7, low: 8, high: 5), 8);
    expect(C.bisectRight(8, low: 8, high: 5), 8);
  });
  test('list.bisectRight for D lo=8 hi=5', () {
    expect(D.bisectRight(-2, low: 8, high: 5), 8);
    expect(D.bisectRight(-1, low: 8, high: 5), 8);
    expect(D.bisectRight(0, low: 8, high: 5), 8);
    expect(D.bisectRight(1, low: 8, high: 5), 8);
    expect(D.bisectRight(2, low: 8, high: 5), 8);
    expect(D.bisectRight(3, low: 8, high: 5), 8);
    expect(D.bisectRight(4, low: 8, high: 5), 8);
    expect(D.bisectRight(5, low: 8, high: 5), 8);
    expect(D.bisectRight(6, low: 8, high: 5), 8);
    expect(D.bisectRight(7, low: 8, high: 5), 8);
    expect(D.bisectRight(8, low: 8, high: 5), 8);
  });
  test('list.bisectRight for E lo=8 hi=5', () {
    expect(E.bisectRight(-2, low: 8, high: 5), 8);
    expect(E.bisectRight(-1, low: 8, high: 5), 8);
    expect(E.bisectRight(0, low: 8, high: 5), 8);
    expect(E.bisectRight(1, low: 8, high: 5), 8);
    expect(E.bisectRight(2, low: 8, high: 5), 8);
    expect(E.bisectRight(3, low: 8, high: 5), 8);
    expect(E.bisectRight(4, low: 8, high: 5), 8);
    expect(E.bisectRight(5, low: 8, high: 5), 8);
    expect(E.bisectRight(6, low: 8, high: 5), 8);
    expect(E.bisectRight(7, low: 8, high: 5), 8);
    expect(E.bisectRight(8, low: 8, high: 5), 8);
  });
  test('list.bisectRight for A lo=9 hi=5', () {
    expect(A.bisectRight(-2, low: 9, high: 5), 9);
    expect(A.bisectRight(-1, low: 9, high: 5), 9);
    expect(A.bisectRight(0, low: 9, high: 5), 9);
    expect(A.bisectRight(1, low: 9, high: 5), 9);
    expect(A.bisectRight(2, low: 9, high: 5), 9);
    expect(A.bisectRight(3, low: 9, high: 5), 9);
    expect(A.bisectRight(4, low: 9, high: 5), 9);
    expect(A.bisectRight(5, low: 9, high: 5), 9);
    expect(A.bisectRight(6, low: 9, high: 5), 9);
    expect(A.bisectRight(7, low: 9, high: 5), 9);
    expect(A.bisectRight(8, low: 9, high: 5), 9);
  });
  test('list.bisectRight for B lo=9 hi=5', () {
    expect(B.bisectRight(-2, low: 9, high: 5), 9);
    expect(B.bisectRight(-1, low: 9, high: 5), 9);
    expect(B.bisectRight(0, low: 9, high: 5), 9);
    expect(B.bisectRight(1, low: 9, high: 5), 9);
    expect(B.bisectRight(2, low: 9, high: 5), 9);
    expect(B.bisectRight(3, low: 9, high: 5), 9);
    expect(B.bisectRight(4, low: 9, high: 5), 9);
    expect(B.bisectRight(5, low: 9, high: 5), 9);
    expect(B.bisectRight(6, low: 9, high: 5), 9);
    expect(B.bisectRight(7, low: 9, high: 5), 9);
    expect(B.bisectRight(8, low: 9, high: 5), 9);
  });
  test('list.bisectRight for C lo=9 hi=5', () {
    expect(C.bisectRight(-2, low: 9, high: 5), 9);
    expect(C.bisectRight(-1, low: 9, high: 5), 9);
    expect(C.bisectRight(0, low: 9, high: 5), 9);
    expect(C.bisectRight(1, low: 9, high: 5), 9);
    expect(C.bisectRight(2, low: 9, high: 5), 9);
    expect(C.bisectRight(3, low: 9, high: 5), 9);
    expect(C.bisectRight(4, low: 9, high: 5), 9);
    expect(C.bisectRight(5, low: 9, high: 5), 9);
    expect(C.bisectRight(6, low: 9, high: 5), 9);
    expect(C.bisectRight(7, low: 9, high: 5), 9);
    expect(C.bisectRight(8, low: 9, high: 5), 9);
  });
  test('list.bisectRight for D lo=9 hi=5', () {
    expect(D.bisectRight(-2, low: 9, high: 5), 9);
    expect(D.bisectRight(-1, low: 9, high: 5), 9);
    expect(D.bisectRight(0, low: 9, high: 5), 9);
    expect(D.bisectRight(1, low: 9, high: 5), 9);
    expect(D.bisectRight(2, low: 9, high: 5), 9);
    expect(D.bisectRight(3, low: 9, high: 5), 9);
    expect(D.bisectRight(4, low: 9, high: 5), 9);
    expect(D.bisectRight(5, low: 9, high: 5), 9);
    expect(D.bisectRight(6, low: 9, high: 5), 9);
    expect(D.bisectRight(7, low: 9, high: 5), 9);
    expect(D.bisectRight(8, low: 9, high: 5), 9);
  });
  test('list.bisectRight for E lo=9 hi=5', () {
    expect(E.bisectRight(-2, low: 9, high: 5), 9);
    expect(E.bisectRight(-1, low: 9, high: 5), 9);
    expect(E.bisectRight(0, low: 9, high: 5), 9);
    expect(E.bisectRight(1, low: 9, high: 5), 9);
    expect(E.bisectRight(2, low: 9, high: 5), 9);
    expect(E.bisectRight(3, low: 9, high: 5), 9);
    expect(E.bisectRight(4, low: 9, high: 5), 9);
    expect(E.bisectRight(5, low: 9, high: 5), 9);
    expect(E.bisectRight(6, low: 9, high: 5), 9);
    expect(E.bisectRight(7, low: 9, high: 5), 9);
    expect(E.bisectRight(8, low: 9, high: 5), 9);
  });
  test('list.bisectRight for A lo=None hi=6', () {
    expect(() => A.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, high: 6), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=6', () {
    expect(() => B.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, high: 6), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=6', () {
    expect(() => C.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, high: 6), throwsRangeError);
  });
  test('list.bisectRight for D lo=None hi=6', () {
    expect(() => D.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, high: 6), throwsRangeError);
  });
  test('list.bisectRight for E lo=None hi=6', () {
    expect(E.bisectRight(-2, high: 6), 0);
    expect(E.bisectRight(-1, high: 6), 0);
    expect(E.bisectRight(0, high: 6), 1);
    expect(E.bisectRight(1, high: 6), 2);
    expect(E.bisectRight(2, high: 6), 6);
    expect(E.bisectRight(3, high: 6), 6);
    expect(E.bisectRight(4, high: 6), 6);
    expect(E.bisectRight(5, high: 6), 6);
    expect(E.bisectRight(6, high: 6), 6);
    expect(E.bisectRight(7, high: 6), 6);
    expect(E.bisectRight(8, high: 6), 6);
  });
  test('list.bisectRight for A lo=0 hi=6', () {
    expect(() => A.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=6', () {
    expect(() => B.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=6', () {
    expect(() => C.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });
  test('list.bisectRight for D lo=0 hi=6', () {
    expect(() => D.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });
  test('list.bisectRight for E lo=0 hi=6', () {
    expect(E.bisectRight(-2, low: 0, high: 6), 0);
    expect(E.bisectRight(-1, low: 0, high: 6), 0);
    expect(E.bisectRight(0, low: 0, high: 6), 1);
    expect(E.bisectRight(1, low: 0, high: 6), 2);
    expect(E.bisectRight(2, low: 0, high: 6), 6);
    expect(E.bisectRight(3, low: 0, high: 6), 6);
    expect(E.bisectRight(4, low: 0, high: 6), 6);
    expect(E.bisectRight(5, low: 0, high: 6), 6);
    expect(E.bisectRight(6, low: 0, high: 6), 6);
    expect(E.bisectRight(7, low: 0, high: 6), 6);
    expect(E.bisectRight(8, low: 0, high: 6), 6);
  });
  test('list.bisectRight for A lo=1 hi=6', () {
    expect(() => A.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=6', () {
    expect(() => B.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=6', () {
    expect(() => C.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });
  test('list.bisectRight for D lo=1 hi=6', () {
    expect(() => D.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });
  test('list.bisectRight for E lo=1 hi=6', () {
    expect(E.bisectRight(-2, low: 1, high: 6), 1);
    expect(E.bisectRight(-1, low: 1, high: 6), 1);
    expect(E.bisectRight(0, low: 1, high: 6), 1);
    expect(E.bisectRight(1, low: 1, high: 6), 2);
    expect(E.bisectRight(2, low: 1, high: 6), 6);
    expect(E.bisectRight(3, low: 1, high: 6), 6);
    expect(E.bisectRight(4, low: 1, high: 6), 6);
    expect(E.bisectRight(5, low: 1, high: 6), 6);
    expect(E.bisectRight(6, low: 1, high: 6), 6);
    expect(E.bisectRight(7, low: 1, high: 6), 6);
    expect(E.bisectRight(8, low: 1, high: 6), 6);
  });
  test('list.bisectRight for A lo=2 hi=6', () {
    expect(() => A.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });
  test('list.bisectRight for B lo=2 hi=6', () {
    expect(() => B.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });
  test('list.bisectRight for C lo=2 hi=6', () {
    expect(() => C.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });
  test('list.bisectRight for D lo=2 hi=6', () {
    expect(() => D.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });
  test('list.bisectRight for E lo=2 hi=6', () {
    expect(E.bisectRight(-2, low: 2, high: 6), 2);
    expect(E.bisectRight(-1, low: 2, high: 6), 2);
    expect(E.bisectRight(0, low: 2, high: 6), 2);
    expect(E.bisectRight(1, low: 2, high: 6), 2);
    expect(E.bisectRight(2, low: 2, high: 6), 6);
    expect(E.bisectRight(3, low: 2, high: 6), 6);
    expect(E.bisectRight(4, low: 2, high: 6), 6);
    expect(E.bisectRight(5, low: 2, high: 6), 6);
    expect(E.bisectRight(6, low: 2, high: 6), 6);
    expect(E.bisectRight(7, low: 2, high: 6), 6);
    expect(E.bisectRight(8, low: 2, high: 6), 6);
  });
  test('list.bisectRight for A lo=3 hi=6', () {
    expect(() => A.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });
  test('list.bisectRight for B lo=3 hi=6', () {
    expect(() => B.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });
  test('list.bisectRight for C lo=3 hi=6', () {
    expect(() => C.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });
  test('list.bisectRight for D lo=3 hi=6', () {
    expect(() => D.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });
  test('list.bisectRight for E lo=3 hi=6', () {
    expect(E.bisectRight(-2, low: 3, high: 6), 3);
    expect(E.bisectRight(-1, low: 3, high: 6), 3);
    expect(E.bisectRight(0, low: 3, high: 6), 3);
    expect(E.bisectRight(1, low: 3, high: 6), 3);
    expect(E.bisectRight(2, low: 3, high: 6), 6);
    expect(E.bisectRight(3, low: 3, high: 6), 6);
    expect(E.bisectRight(4, low: 3, high: 6), 6);
    expect(E.bisectRight(5, low: 3, high: 6), 6);
    expect(E.bisectRight(6, low: 3, high: 6), 6);
    expect(E.bisectRight(7, low: 3, high: 6), 6);
    expect(E.bisectRight(8, low: 3, high: 6), 6);
  });
  test('list.bisectRight for A lo=4 hi=6', () {
    expect(() => A.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });
  test('list.bisectRight for B lo=4 hi=6', () {
    expect(() => B.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });
  test('list.bisectRight for C lo=4 hi=6', () {
    expect(() => C.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });
  test('list.bisectRight for D lo=4 hi=6', () {
    expect(() => D.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });
  test('list.bisectRight for E lo=4 hi=6', () {
    expect(E.bisectRight(-2, low: 4, high: 6), 4);
    expect(E.bisectRight(-1, low: 4, high: 6), 4);
    expect(E.bisectRight(0, low: 4, high: 6), 4);
    expect(E.bisectRight(1, low: 4, high: 6), 4);
    expect(E.bisectRight(2, low: 4, high: 6), 6);
    expect(E.bisectRight(3, low: 4, high: 6), 6);
    expect(E.bisectRight(4, low: 4, high: 6), 6);
    expect(E.bisectRight(5, low: 4, high: 6), 6);
    expect(E.bisectRight(6, low: 4, high: 6), 6);
    expect(E.bisectRight(7, low: 4, high: 6), 6);
    expect(E.bisectRight(8, low: 4, high: 6), 6);
  });
  test('list.bisectRight for A lo=5 hi=6', () {
    expect(() => A.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });
  test('list.bisectRight for B lo=5 hi=6', () {
    expect(() => B.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });
  test('list.bisectRight for C lo=5 hi=6', () {
    expect(() => C.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });
  test('list.bisectRight for D lo=5 hi=6', () {
    expect(() => D.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });
  test('list.bisectRight for E lo=5 hi=6', () {
    expect(E.bisectRight(-2, low: 5, high: 6), 5);
    expect(E.bisectRight(-1, low: 5, high: 6), 5);
    expect(E.bisectRight(0, low: 5, high: 6), 5);
    expect(E.bisectRight(1, low: 5, high: 6), 5);
    expect(E.bisectRight(2, low: 5, high: 6), 6);
    expect(E.bisectRight(3, low: 5, high: 6), 6);
    expect(E.bisectRight(4, low: 5, high: 6), 6);
    expect(E.bisectRight(5, low: 5, high: 6), 6);
    expect(E.bisectRight(6, low: 5, high: 6), 6);
    expect(E.bisectRight(7, low: 5, high: 6), 6);
    expect(E.bisectRight(8, low: 5, high: 6), 6);
  });
  test('list.bisectRight for A lo=6 hi=6', () {
    expect(A.bisectRight(-2, low: 6, high: 6), 6);
    expect(A.bisectRight(-1, low: 6, high: 6), 6);
    expect(A.bisectRight(0, low: 6, high: 6), 6);
    expect(A.bisectRight(1, low: 6, high: 6), 6);
    expect(A.bisectRight(2, low: 6, high: 6), 6);
    expect(A.bisectRight(3, low: 6, high: 6), 6);
    expect(A.bisectRight(4, low: 6, high: 6), 6);
    expect(A.bisectRight(5, low: 6, high: 6), 6);
    expect(A.bisectRight(6, low: 6, high: 6), 6);
    expect(A.bisectRight(7, low: 6, high: 6), 6);
    expect(A.bisectRight(8, low: 6, high: 6), 6);
  });
  test('list.bisectRight for B lo=6 hi=6', () {
    expect(B.bisectRight(-2, low: 6, high: 6), 6);
    expect(B.bisectRight(-1, low: 6, high: 6), 6);
    expect(B.bisectRight(0, low: 6, high: 6), 6);
    expect(B.bisectRight(1, low: 6, high: 6), 6);
    expect(B.bisectRight(2, low: 6, high: 6), 6);
    expect(B.bisectRight(3, low: 6, high: 6), 6);
    expect(B.bisectRight(4, low: 6, high: 6), 6);
    expect(B.bisectRight(5, low: 6, high: 6), 6);
    expect(B.bisectRight(6, low: 6, high: 6), 6);
    expect(B.bisectRight(7, low: 6, high: 6), 6);
    expect(B.bisectRight(8, low: 6, high: 6), 6);
  });
  test('list.bisectRight for C lo=6 hi=6', () {
    expect(C.bisectRight(-2, low: 6, high: 6), 6);
    expect(C.bisectRight(-1, low: 6, high: 6), 6);
    expect(C.bisectRight(0, low: 6, high: 6), 6);
    expect(C.bisectRight(1, low: 6, high: 6), 6);
    expect(C.bisectRight(2, low: 6, high: 6), 6);
    expect(C.bisectRight(3, low: 6, high: 6), 6);
    expect(C.bisectRight(4, low: 6, high: 6), 6);
    expect(C.bisectRight(5, low: 6, high: 6), 6);
    expect(C.bisectRight(6, low: 6, high: 6), 6);
    expect(C.bisectRight(7, low: 6, high: 6), 6);
    expect(C.bisectRight(8, low: 6, high: 6), 6);
  });
  test('list.bisectRight for D lo=6 hi=6', () {
    expect(D.bisectRight(-2, low: 6, high: 6), 6);
    expect(D.bisectRight(-1, low: 6, high: 6), 6);
    expect(D.bisectRight(0, low: 6, high: 6), 6);
    expect(D.bisectRight(1, low: 6, high: 6), 6);
    expect(D.bisectRight(2, low: 6, high: 6), 6);
    expect(D.bisectRight(3, low: 6, high: 6), 6);
    expect(D.bisectRight(4, low: 6, high: 6), 6);
    expect(D.bisectRight(5, low: 6, high: 6), 6);
    expect(D.bisectRight(6, low: 6, high: 6), 6);
    expect(D.bisectRight(7, low: 6, high: 6), 6);
    expect(D.bisectRight(8, low: 6, high: 6), 6);
  });
  test('list.bisectRight for E lo=6 hi=6', () {
    expect(E.bisectRight(-2, low: 6, high: 6), 6);
    expect(E.bisectRight(-1, low: 6, high: 6), 6);
    expect(E.bisectRight(0, low: 6, high: 6), 6);
    expect(E.bisectRight(1, low: 6, high: 6), 6);
    expect(E.bisectRight(2, low: 6, high: 6), 6);
    expect(E.bisectRight(3, low: 6, high: 6), 6);
    expect(E.bisectRight(4, low: 6, high: 6), 6);
    expect(E.bisectRight(5, low: 6, high: 6), 6);
    expect(E.bisectRight(6, low: 6, high: 6), 6);
    expect(E.bisectRight(7, low: 6, high: 6), 6);
    expect(E.bisectRight(8, low: 6, high: 6), 6);
  });
  test('list.bisectRight for A lo=7 hi=6', () {
    expect(A.bisectRight(-2, low: 7, high: 6), 7);
    expect(A.bisectRight(-1, low: 7, high: 6), 7);
    expect(A.bisectRight(0, low: 7, high: 6), 7);
    expect(A.bisectRight(1, low: 7, high: 6), 7);
    expect(A.bisectRight(2, low: 7, high: 6), 7);
    expect(A.bisectRight(3, low: 7, high: 6), 7);
    expect(A.bisectRight(4, low: 7, high: 6), 7);
    expect(A.bisectRight(5, low: 7, high: 6), 7);
    expect(A.bisectRight(6, low: 7, high: 6), 7);
    expect(A.bisectRight(7, low: 7, high: 6), 7);
    expect(A.bisectRight(8, low: 7, high: 6), 7);
  });
  test('list.bisectRight for B lo=7 hi=6', () {
    expect(B.bisectRight(-2, low: 7, high: 6), 7);
    expect(B.bisectRight(-1, low: 7, high: 6), 7);
    expect(B.bisectRight(0, low: 7, high: 6), 7);
    expect(B.bisectRight(1, low: 7, high: 6), 7);
    expect(B.bisectRight(2, low: 7, high: 6), 7);
    expect(B.bisectRight(3, low: 7, high: 6), 7);
    expect(B.bisectRight(4, low: 7, high: 6), 7);
    expect(B.bisectRight(5, low: 7, high: 6), 7);
    expect(B.bisectRight(6, low: 7, high: 6), 7);
    expect(B.bisectRight(7, low: 7, high: 6), 7);
    expect(B.bisectRight(8, low: 7, high: 6), 7);
  });
  test('list.bisectRight for C lo=7 hi=6', () {
    expect(C.bisectRight(-2, low: 7, high: 6), 7);
    expect(C.bisectRight(-1, low: 7, high: 6), 7);
    expect(C.bisectRight(0, low: 7, high: 6), 7);
    expect(C.bisectRight(1, low: 7, high: 6), 7);
    expect(C.bisectRight(2, low: 7, high: 6), 7);
    expect(C.bisectRight(3, low: 7, high: 6), 7);
    expect(C.bisectRight(4, low: 7, high: 6), 7);
    expect(C.bisectRight(5, low: 7, high: 6), 7);
    expect(C.bisectRight(6, low: 7, high: 6), 7);
    expect(C.bisectRight(7, low: 7, high: 6), 7);
    expect(C.bisectRight(8, low: 7, high: 6), 7);
  });
  test('list.bisectRight for D lo=7 hi=6', () {
    expect(D.bisectRight(-2, low: 7, high: 6), 7);
    expect(D.bisectRight(-1, low: 7, high: 6), 7);
    expect(D.bisectRight(0, low: 7, high: 6), 7);
    expect(D.bisectRight(1, low: 7, high: 6), 7);
    expect(D.bisectRight(2, low: 7, high: 6), 7);
    expect(D.bisectRight(3, low: 7, high: 6), 7);
    expect(D.bisectRight(4, low: 7, high: 6), 7);
    expect(D.bisectRight(5, low: 7, high: 6), 7);
    expect(D.bisectRight(6, low: 7, high: 6), 7);
    expect(D.bisectRight(7, low: 7, high: 6), 7);
    expect(D.bisectRight(8, low: 7, high: 6), 7);
  });
  test('list.bisectRight for E lo=7 hi=6', () {
    expect(E.bisectRight(-2, low: 7, high: 6), 7);
    expect(E.bisectRight(-1, low: 7, high: 6), 7);
    expect(E.bisectRight(0, low: 7, high: 6), 7);
    expect(E.bisectRight(1, low: 7, high: 6), 7);
    expect(E.bisectRight(2, low: 7, high: 6), 7);
    expect(E.bisectRight(3, low: 7, high: 6), 7);
    expect(E.bisectRight(4, low: 7, high: 6), 7);
    expect(E.bisectRight(5, low: 7, high: 6), 7);
    expect(E.bisectRight(6, low: 7, high: 6), 7);
    expect(E.bisectRight(7, low: 7, high: 6), 7);
    expect(E.bisectRight(8, low: 7, high: 6), 7);
  });
  test('list.bisectRight for A lo=8 hi=6', () {
    expect(A.bisectRight(-2, low: 8, high: 6), 8);
    expect(A.bisectRight(-1, low: 8, high: 6), 8);
    expect(A.bisectRight(0, low: 8, high: 6), 8);
    expect(A.bisectRight(1, low: 8, high: 6), 8);
    expect(A.bisectRight(2, low: 8, high: 6), 8);
    expect(A.bisectRight(3, low: 8, high: 6), 8);
    expect(A.bisectRight(4, low: 8, high: 6), 8);
    expect(A.bisectRight(5, low: 8, high: 6), 8);
    expect(A.bisectRight(6, low: 8, high: 6), 8);
    expect(A.bisectRight(7, low: 8, high: 6), 8);
    expect(A.bisectRight(8, low: 8, high: 6), 8);
  });
  test('list.bisectRight for B lo=8 hi=6', () {
    expect(B.bisectRight(-2, low: 8, high: 6), 8);
    expect(B.bisectRight(-1, low: 8, high: 6), 8);
    expect(B.bisectRight(0, low: 8, high: 6), 8);
    expect(B.bisectRight(1, low: 8, high: 6), 8);
    expect(B.bisectRight(2, low: 8, high: 6), 8);
    expect(B.bisectRight(3, low: 8, high: 6), 8);
    expect(B.bisectRight(4, low: 8, high: 6), 8);
    expect(B.bisectRight(5, low: 8, high: 6), 8);
    expect(B.bisectRight(6, low: 8, high: 6), 8);
    expect(B.bisectRight(7, low: 8, high: 6), 8);
    expect(B.bisectRight(8, low: 8, high: 6), 8);
  });
  test('list.bisectRight for C lo=8 hi=6', () {
    expect(C.bisectRight(-2, low: 8, high: 6), 8);
    expect(C.bisectRight(-1, low: 8, high: 6), 8);
    expect(C.bisectRight(0, low: 8, high: 6), 8);
    expect(C.bisectRight(1, low: 8, high: 6), 8);
    expect(C.bisectRight(2, low: 8, high: 6), 8);
    expect(C.bisectRight(3, low: 8, high: 6), 8);
    expect(C.bisectRight(4, low: 8, high: 6), 8);
    expect(C.bisectRight(5, low: 8, high: 6), 8);
    expect(C.bisectRight(6, low: 8, high: 6), 8);
    expect(C.bisectRight(7, low: 8, high: 6), 8);
    expect(C.bisectRight(8, low: 8, high: 6), 8);
  });
  test('list.bisectRight for D lo=8 hi=6', () {
    expect(D.bisectRight(-2, low: 8, high: 6), 8);
    expect(D.bisectRight(-1, low: 8, high: 6), 8);
    expect(D.bisectRight(0, low: 8, high: 6), 8);
    expect(D.bisectRight(1, low: 8, high: 6), 8);
    expect(D.bisectRight(2, low: 8, high: 6), 8);
    expect(D.bisectRight(3, low: 8, high: 6), 8);
    expect(D.bisectRight(4, low: 8, high: 6), 8);
    expect(D.bisectRight(5, low: 8, high: 6), 8);
    expect(D.bisectRight(6, low: 8, high: 6), 8);
    expect(D.bisectRight(7, low: 8, high: 6), 8);
    expect(D.bisectRight(8, low: 8, high: 6), 8);
  });
  test('list.bisectRight for E lo=8 hi=6', () {
    expect(E.bisectRight(-2, low: 8, high: 6), 8);
    expect(E.bisectRight(-1, low: 8, high: 6), 8);
    expect(E.bisectRight(0, low: 8, high: 6), 8);
    expect(E.bisectRight(1, low: 8, high: 6), 8);
    expect(E.bisectRight(2, low: 8, high: 6), 8);
    expect(E.bisectRight(3, low: 8, high: 6), 8);
    expect(E.bisectRight(4, low: 8, high: 6), 8);
    expect(E.bisectRight(5, low: 8, high: 6), 8);
    expect(E.bisectRight(6, low: 8, high: 6), 8);
    expect(E.bisectRight(7, low: 8, high: 6), 8);
    expect(E.bisectRight(8, low: 8, high: 6), 8);
  });
  test('list.bisectRight for A lo=9 hi=6', () {
    expect(A.bisectRight(-2, low: 9, high: 6), 9);
    expect(A.bisectRight(-1, low: 9, high: 6), 9);
    expect(A.bisectRight(0, low: 9, high: 6), 9);
    expect(A.bisectRight(1, low: 9, high: 6), 9);
    expect(A.bisectRight(2, low: 9, high: 6), 9);
    expect(A.bisectRight(3, low: 9, high: 6), 9);
    expect(A.bisectRight(4, low: 9, high: 6), 9);
    expect(A.bisectRight(5, low: 9, high: 6), 9);
    expect(A.bisectRight(6, low: 9, high: 6), 9);
    expect(A.bisectRight(7, low: 9, high: 6), 9);
    expect(A.bisectRight(8, low: 9, high: 6), 9);
  });
  test('list.bisectRight for B lo=9 hi=6', () {
    expect(B.bisectRight(-2, low: 9, high: 6), 9);
    expect(B.bisectRight(-1, low: 9, high: 6), 9);
    expect(B.bisectRight(0, low: 9, high: 6), 9);
    expect(B.bisectRight(1, low: 9, high: 6), 9);
    expect(B.bisectRight(2, low: 9, high: 6), 9);
    expect(B.bisectRight(3, low: 9, high: 6), 9);
    expect(B.bisectRight(4, low: 9, high: 6), 9);
    expect(B.bisectRight(5, low: 9, high: 6), 9);
    expect(B.bisectRight(6, low: 9, high: 6), 9);
    expect(B.bisectRight(7, low: 9, high: 6), 9);
    expect(B.bisectRight(8, low: 9, high: 6), 9);
  });
  test('list.bisectRight for C lo=9 hi=6', () {
    expect(C.bisectRight(-2, low: 9, high: 6), 9);
    expect(C.bisectRight(-1, low: 9, high: 6), 9);
    expect(C.bisectRight(0, low: 9, high: 6), 9);
    expect(C.bisectRight(1, low: 9, high: 6), 9);
    expect(C.bisectRight(2, low: 9, high: 6), 9);
    expect(C.bisectRight(3, low: 9, high: 6), 9);
    expect(C.bisectRight(4, low: 9, high: 6), 9);
    expect(C.bisectRight(5, low: 9, high: 6), 9);
    expect(C.bisectRight(6, low: 9, high: 6), 9);
    expect(C.bisectRight(7, low: 9, high: 6), 9);
    expect(C.bisectRight(8, low: 9, high: 6), 9);
  });
  test('list.bisectRight for D lo=9 hi=6', () {
    expect(D.bisectRight(-2, low: 9, high: 6), 9);
    expect(D.bisectRight(-1, low: 9, high: 6), 9);
    expect(D.bisectRight(0, low: 9, high: 6), 9);
    expect(D.bisectRight(1, low: 9, high: 6), 9);
    expect(D.bisectRight(2, low: 9, high: 6), 9);
    expect(D.bisectRight(3, low: 9, high: 6), 9);
    expect(D.bisectRight(4, low: 9, high: 6), 9);
    expect(D.bisectRight(5, low: 9, high: 6), 9);
    expect(D.bisectRight(6, low: 9, high: 6), 9);
    expect(D.bisectRight(7, low: 9, high: 6), 9);
    expect(D.bisectRight(8, low: 9, high: 6), 9);
  });
  test('list.bisectRight for E lo=9 hi=6', () {
    expect(E.bisectRight(-2, low: 9, high: 6), 9);
    expect(E.bisectRight(-1, low: 9, high: 6), 9);
    expect(E.bisectRight(0, low: 9, high: 6), 9);
    expect(E.bisectRight(1, low: 9, high: 6), 9);
    expect(E.bisectRight(2, low: 9, high: 6), 9);
    expect(E.bisectRight(3, low: 9, high: 6), 9);
    expect(E.bisectRight(4, low: 9, high: 6), 9);
    expect(E.bisectRight(5, low: 9, high: 6), 9);
    expect(E.bisectRight(6, low: 9, high: 6), 9);
    expect(E.bisectRight(7, low: 9, high: 6), 9);
    expect(E.bisectRight(8, low: 9, high: 6), 9);
  });
  test('list.bisectRight for A lo=None hi=7', () {
    expect(() => A.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=7', () {
    expect(() => B.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=7', () {
    expect(() => C.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=None hi=7', () {
    expect(() => D.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=None hi=7', () {
    expect(E.bisectRight(-2, high: 7), 0);
    expect(E.bisectRight(-1, high: 7), 0);
    expect(E.bisectRight(0, high: 7), 1);
    expect(E.bisectRight(1, high: 7), 2);
    expect(E.bisectRight(2, high: 7), 6);
    expect(E.bisectRight(3, high: 7), 7);
    expect(E.bisectRight(4, high: 7), 7);
    expect(E.bisectRight(5, high: 7), 7);
    expect(E.bisectRight(6, high: 7), 7);
    expect(E.bisectRight(7, high: 7), 7);
    expect(E.bisectRight(8, high: 7), 7);
  });
  test('list.bisectRight for A lo=0 hi=7', () {
    expect(() => A.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=7', () {
    expect(() => B.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=7', () {
    expect(() => C.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=0 hi=7', () {
    expect(() => D.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=0 hi=7', () {
    expect(E.bisectRight(-2, low: 0, high: 7), 0);
    expect(E.bisectRight(-1, low: 0, high: 7), 0);
    expect(E.bisectRight(0, low: 0, high: 7), 1);
    expect(E.bisectRight(1, low: 0, high: 7), 2);
    expect(E.bisectRight(2, low: 0, high: 7), 6);
    expect(E.bisectRight(3, low: 0, high: 7), 7);
    expect(E.bisectRight(4, low: 0, high: 7), 7);
    expect(E.bisectRight(5, low: 0, high: 7), 7);
    expect(E.bisectRight(6, low: 0, high: 7), 7);
    expect(E.bisectRight(7, low: 0, high: 7), 7);
    expect(E.bisectRight(8, low: 0, high: 7), 7);
  });
  test('list.bisectRight for A lo=1 hi=7', () {
    expect(() => A.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=7', () {
    expect(() => B.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=7', () {
    expect(() => C.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=1 hi=7', () {
    expect(() => D.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=1 hi=7', () {
    expect(E.bisectRight(-2, low: 1, high: 7), 1);
    expect(E.bisectRight(-1, low: 1, high: 7), 1);
    expect(E.bisectRight(0, low: 1, high: 7), 1);
    expect(E.bisectRight(1, low: 1, high: 7), 2);
    expect(E.bisectRight(2, low: 1, high: 7), 6);
    expect(E.bisectRight(3, low: 1, high: 7), 7);
    expect(E.bisectRight(4, low: 1, high: 7), 7);
    expect(E.bisectRight(5, low: 1, high: 7), 7);
    expect(E.bisectRight(6, low: 1, high: 7), 7);
    expect(E.bisectRight(7, low: 1, high: 7), 7);
    expect(E.bisectRight(8, low: 1, high: 7), 7);
  });
  test('list.bisectRight for A lo=2 hi=7', () {
    expect(() => A.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=2 hi=7', () {
    expect(() => B.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=2 hi=7', () {
    expect(() => C.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=2 hi=7', () {
    expect(() => D.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=2 hi=7', () {
    expect(E.bisectRight(-2, low: 2, high: 7), 2);
    expect(E.bisectRight(-1, low: 2, high: 7), 2);
    expect(E.bisectRight(0, low: 2, high: 7), 2);
    expect(E.bisectRight(1, low: 2, high: 7), 2);
    expect(E.bisectRight(2, low: 2, high: 7), 6);
    expect(E.bisectRight(3, low: 2, high: 7), 7);
    expect(E.bisectRight(4, low: 2, high: 7), 7);
    expect(E.bisectRight(5, low: 2, high: 7), 7);
    expect(E.bisectRight(6, low: 2, high: 7), 7);
    expect(E.bisectRight(7, low: 2, high: 7), 7);
    expect(E.bisectRight(8, low: 2, high: 7), 7);
  });
  test('list.bisectRight for A lo=3 hi=7', () {
    expect(() => A.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=3 hi=7', () {
    expect(() => B.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=3 hi=7', () {
    expect(() => C.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=3 hi=7', () {
    expect(() => D.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=3 hi=7', () {
    expect(E.bisectRight(-2, low: 3, high: 7), 3);
    expect(E.bisectRight(-1, low: 3, high: 7), 3);
    expect(E.bisectRight(0, low: 3, high: 7), 3);
    expect(E.bisectRight(1, low: 3, high: 7), 3);
    expect(E.bisectRight(2, low: 3, high: 7), 6);
    expect(E.bisectRight(3, low: 3, high: 7), 7);
    expect(E.bisectRight(4, low: 3, high: 7), 7);
    expect(E.bisectRight(5, low: 3, high: 7), 7);
    expect(E.bisectRight(6, low: 3, high: 7), 7);
    expect(E.bisectRight(7, low: 3, high: 7), 7);
    expect(E.bisectRight(8, low: 3, high: 7), 7);
  });
  test('list.bisectRight for A lo=4 hi=7', () {
    expect(() => A.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=4 hi=7', () {
    expect(() => B.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=4 hi=7', () {
    expect(() => C.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=4 hi=7', () {
    expect(() => D.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=4 hi=7', () {
    expect(E.bisectRight(-2, low: 4, high: 7), 4);
    expect(E.bisectRight(-1, low: 4, high: 7), 4);
    expect(E.bisectRight(0, low: 4, high: 7), 4);
    expect(E.bisectRight(1, low: 4, high: 7), 4);
    expect(E.bisectRight(2, low: 4, high: 7), 6);
    expect(E.bisectRight(3, low: 4, high: 7), 7);
    expect(E.bisectRight(4, low: 4, high: 7), 7);
    expect(E.bisectRight(5, low: 4, high: 7), 7);
    expect(E.bisectRight(6, low: 4, high: 7), 7);
    expect(E.bisectRight(7, low: 4, high: 7), 7);
    expect(E.bisectRight(8, low: 4, high: 7), 7);
  });
  test('list.bisectRight for A lo=5 hi=7', () {
    expect(() => A.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=5 hi=7', () {
    expect(() => B.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=5 hi=7', () {
    expect(() => C.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=5 hi=7', () {
    expect(() => D.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=5 hi=7', () {
    expect(E.bisectRight(-2, low: 5, high: 7), 5);
    expect(E.bisectRight(-1, low: 5, high: 7), 5);
    expect(E.bisectRight(0, low: 5, high: 7), 5);
    expect(E.bisectRight(1, low: 5, high: 7), 5);
    expect(E.bisectRight(2, low: 5, high: 7), 6);
    expect(E.bisectRight(3, low: 5, high: 7), 7);
    expect(E.bisectRight(4, low: 5, high: 7), 7);
    expect(E.bisectRight(5, low: 5, high: 7), 7);
    expect(E.bisectRight(6, low: 5, high: 7), 7);
    expect(E.bisectRight(7, low: 5, high: 7), 7);
    expect(E.bisectRight(8, low: 5, high: 7), 7);
  });
  test('list.bisectRight for A lo=6 hi=7', () {
    expect(() => A.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });
  test('list.bisectRight for B lo=6 hi=7', () {
    expect(() => B.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });
  test('list.bisectRight for C lo=6 hi=7', () {
    expect(() => C.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });
  test('list.bisectRight for D lo=6 hi=7', () {
    expect(() => D.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });
  test('list.bisectRight for E lo=6 hi=7', () {
    expect(E.bisectRight(-2, low: 6, high: 7), 6);
    expect(E.bisectRight(-1, low: 6, high: 7), 6);
    expect(E.bisectRight(0, low: 6, high: 7), 6);
    expect(E.bisectRight(1, low: 6, high: 7), 6);
    expect(E.bisectRight(2, low: 6, high: 7), 6);
    expect(E.bisectRight(3, low: 6, high: 7), 7);
    expect(E.bisectRight(4, low: 6, high: 7), 7);
    expect(E.bisectRight(5, low: 6, high: 7), 7);
    expect(E.bisectRight(6, low: 6, high: 7), 7);
    expect(E.bisectRight(7, low: 6, high: 7), 7);
    expect(E.bisectRight(8, low: 6, high: 7), 7);
  });
  test('list.bisectRight for A lo=7 hi=7', () {
    expect(A.bisectRight(-2, low: 7, high: 7), 7);
    expect(A.bisectRight(-1, low: 7, high: 7), 7);
    expect(A.bisectRight(0, low: 7, high: 7), 7);
    expect(A.bisectRight(1, low: 7, high: 7), 7);
    expect(A.bisectRight(2, low: 7, high: 7), 7);
    expect(A.bisectRight(3, low: 7, high: 7), 7);
    expect(A.bisectRight(4, low: 7, high: 7), 7);
    expect(A.bisectRight(5, low: 7, high: 7), 7);
    expect(A.bisectRight(6, low: 7, high: 7), 7);
    expect(A.bisectRight(7, low: 7, high: 7), 7);
    expect(A.bisectRight(8, low: 7, high: 7), 7);
  });
  test('list.bisectRight for B lo=7 hi=7', () {
    expect(B.bisectRight(-2, low: 7, high: 7), 7);
    expect(B.bisectRight(-1, low: 7, high: 7), 7);
    expect(B.bisectRight(0, low: 7, high: 7), 7);
    expect(B.bisectRight(1, low: 7, high: 7), 7);
    expect(B.bisectRight(2, low: 7, high: 7), 7);
    expect(B.bisectRight(3, low: 7, high: 7), 7);
    expect(B.bisectRight(4, low: 7, high: 7), 7);
    expect(B.bisectRight(5, low: 7, high: 7), 7);
    expect(B.bisectRight(6, low: 7, high: 7), 7);
    expect(B.bisectRight(7, low: 7, high: 7), 7);
    expect(B.bisectRight(8, low: 7, high: 7), 7);
  });
  test('list.bisectRight for C lo=7 hi=7', () {
    expect(C.bisectRight(-2, low: 7, high: 7), 7);
    expect(C.bisectRight(-1, low: 7, high: 7), 7);
    expect(C.bisectRight(0, low: 7, high: 7), 7);
    expect(C.bisectRight(1, low: 7, high: 7), 7);
    expect(C.bisectRight(2, low: 7, high: 7), 7);
    expect(C.bisectRight(3, low: 7, high: 7), 7);
    expect(C.bisectRight(4, low: 7, high: 7), 7);
    expect(C.bisectRight(5, low: 7, high: 7), 7);
    expect(C.bisectRight(6, low: 7, high: 7), 7);
    expect(C.bisectRight(7, low: 7, high: 7), 7);
    expect(C.bisectRight(8, low: 7, high: 7), 7);
  });
  test('list.bisectRight for D lo=7 hi=7', () {
    expect(D.bisectRight(-2, low: 7, high: 7), 7);
    expect(D.bisectRight(-1, low: 7, high: 7), 7);
    expect(D.bisectRight(0, low: 7, high: 7), 7);
    expect(D.bisectRight(1, low: 7, high: 7), 7);
    expect(D.bisectRight(2, low: 7, high: 7), 7);
    expect(D.bisectRight(3, low: 7, high: 7), 7);
    expect(D.bisectRight(4, low: 7, high: 7), 7);
    expect(D.bisectRight(5, low: 7, high: 7), 7);
    expect(D.bisectRight(6, low: 7, high: 7), 7);
    expect(D.bisectRight(7, low: 7, high: 7), 7);
    expect(D.bisectRight(8, low: 7, high: 7), 7);
  });
  test('list.bisectRight for E lo=7 hi=7', () {
    expect(E.bisectRight(-2, low: 7, high: 7), 7);
    expect(E.bisectRight(-1, low: 7, high: 7), 7);
    expect(E.bisectRight(0, low: 7, high: 7), 7);
    expect(E.bisectRight(1, low: 7, high: 7), 7);
    expect(E.bisectRight(2, low: 7, high: 7), 7);
    expect(E.bisectRight(3, low: 7, high: 7), 7);
    expect(E.bisectRight(4, low: 7, high: 7), 7);
    expect(E.bisectRight(5, low: 7, high: 7), 7);
    expect(E.bisectRight(6, low: 7, high: 7), 7);
    expect(E.bisectRight(7, low: 7, high: 7), 7);
    expect(E.bisectRight(8, low: 7, high: 7), 7);
  });
  test('list.bisectRight for A lo=8 hi=7', () {
    expect(A.bisectRight(-2, low: 8, high: 7), 8);
    expect(A.bisectRight(-1, low: 8, high: 7), 8);
    expect(A.bisectRight(0, low: 8, high: 7), 8);
    expect(A.bisectRight(1, low: 8, high: 7), 8);
    expect(A.bisectRight(2, low: 8, high: 7), 8);
    expect(A.bisectRight(3, low: 8, high: 7), 8);
    expect(A.bisectRight(4, low: 8, high: 7), 8);
    expect(A.bisectRight(5, low: 8, high: 7), 8);
    expect(A.bisectRight(6, low: 8, high: 7), 8);
    expect(A.bisectRight(7, low: 8, high: 7), 8);
    expect(A.bisectRight(8, low: 8, high: 7), 8);
  });
  test('list.bisectRight for B lo=8 hi=7', () {
    expect(B.bisectRight(-2, low: 8, high: 7), 8);
    expect(B.bisectRight(-1, low: 8, high: 7), 8);
    expect(B.bisectRight(0, low: 8, high: 7), 8);
    expect(B.bisectRight(1, low: 8, high: 7), 8);
    expect(B.bisectRight(2, low: 8, high: 7), 8);
    expect(B.bisectRight(3, low: 8, high: 7), 8);
    expect(B.bisectRight(4, low: 8, high: 7), 8);
    expect(B.bisectRight(5, low: 8, high: 7), 8);
    expect(B.bisectRight(6, low: 8, high: 7), 8);
    expect(B.bisectRight(7, low: 8, high: 7), 8);
    expect(B.bisectRight(8, low: 8, high: 7), 8);
  });
  test('list.bisectRight for C lo=8 hi=7', () {
    expect(C.bisectRight(-2, low: 8, high: 7), 8);
    expect(C.bisectRight(-1, low: 8, high: 7), 8);
    expect(C.bisectRight(0, low: 8, high: 7), 8);
    expect(C.bisectRight(1, low: 8, high: 7), 8);
    expect(C.bisectRight(2, low: 8, high: 7), 8);
    expect(C.bisectRight(3, low: 8, high: 7), 8);
    expect(C.bisectRight(4, low: 8, high: 7), 8);
    expect(C.bisectRight(5, low: 8, high: 7), 8);
    expect(C.bisectRight(6, low: 8, high: 7), 8);
    expect(C.bisectRight(7, low: 8, high: 7), 8);
    expect(C.bisectRight(8, low: 8, high: 7), 8);
  });
  test('list.bisectRight for D lo=8 hi=7', () {
    expect(D.bisectRight(-2, low: 8, high: 7), 8);
    expect(D.bisectRight(-1, low: 8, high: 7), 8);
    expect(D.bisectRight(0, low: 8, high: 7), 8);
    expect(D.bisectRight(1, low: 8, high: 7), 8);
    expect(D.bisectRight(2, low: 8, high: 7), 8);
    expect(D.bisectRight(3, low: 8, high: 7), 8);
    expect(D.bisectRight(4, low: 8, high: 7), 8);
    expect(D.bisectRight(5, low: 8, high: 7), 8);
    expect(D.bisectRight(6, low: 8, high: 7), 8);
    expect(D.bisectRight(7, low: 8, high: 7), 8);
    expect(D.bisectRight(8, low: 8, high: 7), 8);
  });
  test('list.bisectRight for E lo=8 hi=7', () {
    expect(E.bisectRight(-2, low: 8, high: 7), 8);
    expect(E.bisectRight(-1, low: 8, high: 7), 8);
    expect(E.bisectRight(0, low: 8, high: 7), 8);
    expect(E.bisectRight(1, low: 8, high: 7), 8);
    expect(E.bisectRight(2, low: 8, high: 7), 8);
    expect(E.bisectRight(3, low: 8, high: 7), 8);
    expect(E.bisectRight(4, low: 8, high: 7), 8);
    expect(E.bisectRight(5, low: 8, high: 7), 8);
    expect(E.bisectRight(6, low: 8, high: 7), 8);
    expect(E.bisectRight(7, low: 8, high: 7), 8);
    expect(E.bisectRight(8, low: 8, high: 7), 8);
  });
  test('list.bisectRight for A lo=9 hi=7', () {
    expect(A.bisectRight(-2, low: 9, high: 7), 9);
    expect(A.bisectRight(-1, low: 9, high: 7), 9);
    expect(A.bisectRight(0, low: 9, high: 7), 9);
    expect(A.bisectRight(1, low: 9, high: 7), 9);
    expect(A.bisectRight(2, low: 9, high: 7), 9);
    expect(A.bisectRight(3, low: 9, high: 7), 9);
    expect(A.bisectRight(4, low: 9, high: 7), 9);
    expect(A.bisectRight(5, low: 9, high: 7), 9);
    expect(A.bisectRight(6, low: 9, high: 7), 9);
    expect(A.bisectRight(7, low: 9, high: 7), 9);
    expect(A.bisectRight(8, low: 9, high: 7), 9);
  });
  test('list.bisectRight for B lo=9 hi=7', () {
    expect(B.bisectRight(-2, low: 9, high: 7), 9);
    expect(B.bisectRight(-1, low: 9, high: 7), 9);
    expect(B.bisectRight(0, low: 9, high: 7), 9);
    expect(B.bisectRight(1, low: 9, high: 7), 9);
    expect(B.bisectRight(2, low: 9, high: 7), 9);
    expect(B.bisectRight(3, low: 9, high: 7), 9);
    expect(B.bisectRight(4, low: 9, high: 7), 9);
    expect(B.bisectRight(5, low: 9, high: 7), 9);
    expect(B.bisectRight(6, low: 9, high: 7), 9);
    expect(B.bisectRight(7, low: 9, high: 7), 9);
    expect(B.bisectRight(8, low: 9, high: 7), 9);
  });
  test('list.bisectRight for C lo=9 hi=7', () {
    expect(C.bisectRight(-2, low: 9, high: 7), 9);
    expect(C.bisectRight(-1, low: 9, high: 7), 9);
    expect(C.bisectRight(0, low: 9, high: 7), 9);
    expect(C.bisectRight(1, low: 9, high: 7), 9);
    expect(C.bisectRight(2, low: 9, high: 7), 9);
    expect(C.bisectRight(3, low: 9, high: 7), 9);
    expect(C.bisectRight(4, low: 9, high: 7), 9);
    expect(C.bisectRight(5, low: 9, high: 7), 9);
    expect(C.bisectRight(6, low: 9, high: 7), 9);
    expect(C.bisectRight(7, low: 9, high: 7), 9);
    expect(C.bisectRight(8, low: 9, high: 7), 9);
  });
  test('list.bisectRight for D lo=9 hi=7', () {
    expect(D.bisectRight(-2, low: 9, high: 7), 9);
    expect(D.bisectRight(-1, low: 9, high: 7), 9);
    expect(D.bisectRight(0, low: 9, high: 7), 9);
    expect(D.bisectRight(1, low: 9, high: 7), 9);
    expect(D.bisectRight(2, low: 9, high: 7), 9);
    expect(D.bisectRight(3, low: 9, high: 7), 9);
    expect(D.bisectRight(4, low: 9, high: 7), 9);
    expect(D.bisectRight(5, low: 9, high: 7), 9);
    expect(D.bisectRight(6, low: 9, high: 7), 9);
    expect(D.bisectRight(7, low: 9, high: 7), 9);
    expect(D.bisectRight(8, low: 9, high: 7), 9);
  });
  test('list.bisectRight for E lo=9 hi=7', () {
    expect(E.bisectRight(-2, low: 9, high: 7), 9);
    expect(E.bisectRight(-1, low: 9, high: 7), 9);
    expect(E.bisectRight(0, low: 9, high: 7), 9);
    expect(E.bisectRight(1, low: 9, high: 7), 9);
    expect(E.bisectRight(2, low: 9, high: 7), 9);
    expect(E.bisectRight(3, low: 9, high: 7), 9);
    expect(E.bisectRight(4, low: 9, high: 7), 9);
    expect(E.bisectRight(5, low: 9, high: 7), 9);
    expect(E.bisectRight(6, low: 9, high: 7), 9);
    expect(E.bisectRight(7, low: 9, high: 7), 9);
    expect(E.bisectRight(8, low: 9, high: 7), 9);
  });
  test('list.bisectRight for A lo=None hi=8', () {
    expect(() => A.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=8', () {
    expect(() => B.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=8', () {
    expect(() => C.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=None hi=8', () {
    expect(() => D.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=None hi=8', () {
    expect(E.bisectRight(-2, high: 8), 0);
    expect(E.bisectRight(-1, high: 8), 0);
    expect(E.bisectRight(0, high: 8), 1);
    expect(E.bisectRight(1, high: 8), 2);
    expect(E.bisectRight(2, high: 8), 6);
    expect(E.bisectRight(3, high: 8), 8);
    expect(E.bisectRight(4, high: 8), 8);
    expect(E.bisectRight(5, high: 8), 8);
    expect(E.bisectRight(6, high: 8), 8);
    expect(E.bisectRight(7, high: 8), 8);
    expect(E.bisectRight(8, high: 8), 8);
  });
  test('list.bisectRight for A lo=0 hi=8', () {
    expect(() => A.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=8', () {
    expect(() => B.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=8', () {
    expect(() => C.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=0 hi=8', () {
    expect(() => D.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=0 hi=8', () {
    expect(E.bisectRight(-2, low: 0, high: 8), 0);
    expect(E.bisectRight(-1, low: 0, high: 8), 0);
    expect(E.bisectRight(0, low: 0, high: 8), 1);
    expect(E.bisectRight(1, low: 0, high: 8), 2);
    expect(E.bisectRight(2, low: 0, high: 8), 6);
    expect(E.bisectRight(3, low: 0, high: 8), 8);
    expect(E.bisectRight(4, low: 0, high: 8), 8);
    expect(E.bisectRight(5, low: 0, high: 8), 8);
    expect(E.bisectRight(6, low: 0, high: 8), 8);
    expect(E.bisectRight(7, low: 0, high: 8), 8);
    expect(E.bisectRight(8, low: 0, high: 8), 8);
  });
  test('list.bisectRight for A lo=1 hi=8', () {
    expect(() => A.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=8', () {
    expect(() => B.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=8', () {
    expect(() => C.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=1 hi=8', () {
    expect(() => D.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=1 hi=8', () {
    expect(E.bisectRight(-2, low: 1, high: 8), 1);
    expect(E.bisectRight(-1, low: 1, high: 8), 1);
    expect(E.bisectRight(0, low: 1, high: 8), 1);
    expect(E.bisectRight(1, low: 1, high: 8), 2);
    expect(E.bisectRight(2, low: 1, high: 8), 6);
    expect(E.bisectRight(3, low: 1, high: 8), 8);
    expect(E.bisectRight(4, low: 1, high: 8), 8);
    expect(E.bisectRight(5, low: 1, high: 8), 8);
    expect(E.bisectRight(6, low: 1, high: 8), 8);
    expect(E.bisectRight(7, low: 1, high: 8), 8);
    expect(E.bisectRight(8, low: 1, high: 8), 8);
  });
  test('list.bisectRight for A lo=2 hi=8', () {
    expect(() => A.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=2 hi=8', () {
    expect(() => B.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=2 hi=8', () {
    expect(() => C.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=2 hi=8', () {
    expect(() => D.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=2 hi=8', () {
    expect(E.bisectRight(-2, low: 2, high: 8), 2);
    expect(E.bisectRight(-1, low: 2, high: 8), 2);
    expect(E.bisectRight(0, low: 2, high: 8), 2);
    expect(E.bisectRight(1, low: 2, high: 8), 2);
    expect(E.bisectRight(2, low: 2, high: 8), 6);
    expect(E.bisectRight(3, low: 2, high: 8), 8);
    expect(E.bisectRight(4, low: 2, high: 8), 8);
    expect(E.bisectRight(5, low: 2, high: 8), 8);
    expect(E.bisectRight(6, low: 2, high: 8), 8);
    expect(E.bisectRight(7, low: 2, high: 8), 8);
    expect(E.bisectRight(8, low: 2, high: 8), 8);
  });
  test('list.bisectRight for A lo=3 hi=8', () {
    expect(() => A.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=3 hi=8', () {
    expect(() => B.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=3 hi=8', () {
    expect(() => C.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=3 hi=8', () {
    expect(() => D.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=3 hi=8', () {
    expect(E.bisectRight(-2, low: 3, high: 8), 3);
    expect(E.bisectRight(-1, low: 3, high: 8), 3);
    expect(E.bisectRight(0, low: 3, high: 8), 3);
    expect(E.bisectRight(1, low: 3, high: 8), 3);
    expect(E.bisectRight(2, low: 3, high: 8), 6);
    expect(E.bisectRight(3, low: 3, high: 8), 8);
    expect(E.bisectRight(4, low: 3, high: 8), 8);
    expect(E.bisectRight(5, low: 3, high: 8), 8);
    expect(E.bisectRight(6, low: 3, high: 8), 8);
    expect(E.bisectRight(7, low: 3, high: 8), 8);
    expect(E.bisectRight(8, low: 3, high: 8), 8);
  });
  test('list.bisectRight for A lo=4 hi=8', () {
    expect(() => A.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=4 hi=8', () {
    expect(() => B.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=4 hi=8', () {
    expect(() => C.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=4 hi=8', () {
    expect(() => D.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=4 hi=8', () {
    expect(E.bisectRight(-2, low: 4, high: 8), 4);
    expect(E.bisectRight(-1, low: 4, high: 8), 4);
    expect(E.bisectRight(0, low: 4, high: 8), 4);
    expect(E.bisectRight(1, low: 4, high: 8), 4);
    expect(E.bisectRight(2, low: 4, high: 8), 6);
    expect(E.bisectRight(3, low: 4, high: 8), 8);
    expect(E.bisectRight(4, low: 4, high: 8), 8);
    expect(E.bisectRight(5, low: 4, high: 8), 8);
    expect(E.bisectRight(6, low: 4, high: 8), 8);
    expect(E.bisectRight(7, low: 4, high: 8), 8);
    expect(E.bisectRight(8, low: 4, high: 8), 8);
  });
  test('list.bisectRight for A lo=5 hi=8', () {
    expect(() => A.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=5 hi=8', () {
    expect(() => B.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=5 hi=8', () {
    expect(() => C.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=5 hi=8', () {
    expect(() => D.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=5 hi=8', () {
    expect(E.bisectRight(-2, low: 5, high: 8), 5);
    expect(E.bisectRight(-1, low: 5, high: 8), 5);
    expect(E.bisectRight(0, low: 5, high: 8), 5);
    expect(E.bisectRight(1, low: 5, high: 8), 5);
    expect(E.bisectRight(2, low: 5, high: 8), 6);
    expect(E.bisectRight(3, low: 5, high: 8), 8);
    expect(E.bisectRight(4, low: 5, high: 8), 8);
    expect(E.bisectRight(5, low: 5, high: 8), 8);
    expect(E.bisectRight(6, low: 5, high: 8), 8);
    expect(E.bisectRight(7, low: 5, high: 8), 8);
    expect(E.bisectRight(8, low: 5, high: 8), 8);
  });
  test('list.bisectRight for A lo=6 hi=8', () {
    expect(() => A.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=6 hi=8', () {
    expect(() => B.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=6 hi=8', () {
    expect(() => C.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=6 hi=8', () {
    expect(() => D.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=6 hi=8', () {
    expect(E.bisectRight(-2, low: 6, high: 8), 6);
    expect(E.bisectRight(-1, low: 6, high: 8), 6);
    expect(E.bisectRight(0, low: 6, high: 8), 6);
    expect(E.bisectRight(1, low: 6, high: 8), 6);
    expect(E.bisectRight(2, low: 6, high: 8), 6);
    expect(E.bisectRight(3, low: 6, high: 8), 8);
    expect(E.bisectRight(4, low: 6, high: 8), 8);
    expect(E.bisectRight(5, low: 6, high: 8), 8);
    expect(E.bisectRight(6, low: 6, high: 8), 8);
    expect(E.bisectRight(7, low: 6, high: 8), 8);
    expect(E.bisectRight(8, low: 6, high: 8), 8);
  });
  test('list.bisectRight for A lo=7 hi=8', () {
    expect(() => A.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });
  test('list.bisectRight for B lo=7 hi=8', () {
    expect(() => B.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });
  test('list.bisectRight for C lo=7 hi=8', () {
    expect(() => C.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });
  test('list.bisectRight for D lo=7 hi=8', () {
    expect(() => D.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });
  test('list.bisectRight for E lo=7 hi=8', () {
    expect(E.bisectRight(-2, low: 7, high: 8), 7);
    expect(E.bisectRight(-1, low: 7, high: 8), 7);
    expect(E.bisectRight(0, low: 7, high: 8), 7);
    expect(E.bisectRight(1, low: 7, high: 8), 7);
    expect(E.bisectRight(2, low: 7, high: 8), 7);
    expect(E.bisectRight(3, low: 7, high: 8), 8);
    expect(E.bisectRight(4, low: 7, high: 8), 8);
    expect(E.bisectRight(5, low: 7, high: 8), 8);
    expect(E.bisectRight(6, low: 7, high: 8), 8);
    expect(E.bisectRight(7, low: 7, high: 8), 8);
    expect(E.bisectRight(8, low: 7, high: 8), 8);
  });
  test('list.bisectRight for A lo=8 hi=8', () {
    expect(A.bisectRight(-2, low: 8, high: 8), 8);
    expect(A.bisectRight(-1, low: 8, high: 8), 8);
    expect(A.bisectRight(0, low: 8, high: 8), 8);
    expect(A.bisectRight(1, low: 8, high: 8), 8);
    expect(A.bisectRight(2, low: 8, high: 8), 8);
    expect(A.bisectRight(3, low: 8, high: 8), 8);
    expect(A.bisectRight(4, low: 8, high: 8), 8);
    expect(A.bisectRight(5, low: 8, high: 8), 8);
    expect(A.bisectRight(6, low: 8, high: 8), 8);
    expect(A.bisectRight(7, low: 8, high: 8), 8);
    expect(A.bisectRight(8, low: 8, high: 8), 8);
  });
  test('list.bisectRight for B lo=8 hi=8', () {
    expect(B.bisectRight(-2, low: 8, high: 8), 8);
    expect(B.bisectRight(-1, low: 8, high: 8), 8);
    expect(B.bisectRight(0, low: 8, high: 8), 8);
    expect(B.bisectRight(1, low: 8, high: 8), 8);
    expect(B.bisectRight(2, low: 8, high: 8), 8);
    expect(B.bisectRight(3, low: 8, high: 8), 8);
    expect(B.bisectRight(4, low: 8, high: 8), 8);
    expect(B.bisectRight(5, low: 8, high: 8), 8);
    expect(B.bisectRight(6, low: 8, high: 8), 8);
    expect(B.bisectRight(7, low: 8, high: 8), 8);
    expect(B.bisectRight(8, low: 8, high: 8), 8);
  });
  test('list.bisectRight for C lo=8 hi=8', () {
    expect(C.bisectRight(-2, low: 8, high: 8), 8);
    expect(C.bisectRight(-1, low: 8, high: 8), 8);
    expect(C.bisectRight(0, low: 8, high: 8), 8);
    expect(C.bisectRight(1, low: 8, high: 8), 8);
    expect(C.bisectRight(2, low: 8, high: 8), 8);
    expect(C.bisectRight(3, low: 8, high: 8), 8);
    expect(C.bisectRight(4, low: 8, high: 8), 8);
    expect(C.bisectRight(5, low: 8, high: 8), 8);
    expect(C.bisectRight(6, low: 8, high: 8), 8);
    expect(C.bisectRight(7, low: 8, high: 8), 8);
    expect(C.bisectRight(8, low: 8, high: 8), 8);
  });
  test('list.bisectRight for D lo=8 hi=8', () {
    expect(D.bisectRight(-2, low: 8, high: 8), 8);
    expect(D.bisectRight(-1, low: 8, high: 8), 8);
    expect(D.bisectRight(0, low: 8, high: 8), 8);
    expect(D.bisectRight(1, low: 8, high: 8), 8);
    expect(D.bisectRight(2, low: 8, high: 8), 8);
    expect(D.bisectRight(3, low: 8, high: 8), 8);
    expect(D.bisectRight(4, low: 8, high: 8), 8);
    expect(D.bisectRight(5, low: 8, high: 8), 8);
    expect(D.bisectRight(6, low: 8, high: 8), 8);
    expect(D.bisectRight(7, low: 8, high: 8), 8);
    expect(D.bisectRight(8, low: 8, high: 8), 8);
  });
  test('list.bisectRight for E lo=8 hi=8', () {
    expect(E.bisectRight(-2, low: 8, high: 8), 8);
    expect(E.bisectRight(-1, low: 8, high: 8), 8);
    expect(E.bisectRight(0, low: 8, high: 8), 8);
    expect(E.bisectRight(1, low: 8, high: 8), 8);
    expect(E.bisectRight(2, low: 8, high: 8), 8);
    expect(E.bisectRight(3, low: 8, high: 8), 8);
    expect(E.bisectRight(4, low: 8, high: 8), 8);
    expect(E.bisectRight(5, low: 8, high: 8), 8);
    expect(E.bisectRight(6, low: 8, high: 8), 8);
    expect(E.bisectRight(7, low: 8, high: 8), 8);
    expect(E.bisectRight(8, low: 8, high: 8), 8);
  });
  test('list.bisectRight for A lo=9 hi=8', () {
    expect(A.bisectRight(-2, low: 9, high: 8), 9);
    expect(A.bisectRight(-1, low: 9, high: 8), 9);
    expect(A.bisectRight(0, low: 9, high: 8), 9);
    expect(A.bisectRight(1, low: 9, high: 8), 9);
    expect(A.bisectRight(2, low: 9, high: 8), 9);
    expect(A.bisectRight(3, low: 9, high: 8), 9);
    expect(A.bisectRight(4, low: 9, high: 8), 9);
    expect(A.bisectRight(5, low: 9, high: 8), 9);
    expect(A.bisectRight(6, low: 9, high: 8), 9);
    expect(A.bisectRight(7, low: 9, high: 8), 9);
    expect(A.bisectRight(8, low: 9, high: 8), 9);
  });
  test('list.bisectRight for B lo=9 hi=8', () {
    expect(B.bisectRight(-2, low: 9, high: 8), 9);
    expect(B.bisectRight(-1, low: 9, high: 8), 9);
    expect(B.bisectRight(0, low: 9, high: 8), 9);
    expect(B.bisectRight(1, low: 9, high: 8), 9);
    expect(B.bisectRight(2, low: 9, high: 8), 9);
    expect(B.bisectRight(3, low: 9, high: 8), 9);
    expect(B.bisectRight(4, low: 9, high: 8), 9);
    expect(B.bisectRight(5, low: 9, high: 8), 9);
    expect(B.bisectRight(6, low: 9, high: 8), 9);
    expect(B.bisectRight(7, low: 9, high: 8), 9);
    expect(B.bisectRight(8, low: 9, high: 8), 9);
  });
  test('list.bisectRight for C lo=9 hi=8', () {
    expect(C.bisectRight(-2, low: 9, high: 8), 9);
    expect(C.bisectRight(-1, low: 9, high: 8), 9);
    expect(C.bisectRight(0, low: 9, high: 8), 9);
    expect(C.bisectRight(1, low: 9, high: 8), 9);
    expect(C.bisectRight(2, low: 9, high: 8), 9);
    expect(C.bisectRight(3, low: 9, high: 8), 9);
    expect(C.bisectRight(4, low: 9, high: 8), 9);
    expect(C.bisectRight(5, low: 9, high: 8), 9);
    expect(C.bisectRight(6, low: 9, high: 8), 9);
    expect(C.bisectRight(7, low: 9, high: 8), 9);
    expect(C.bisectRight(8, low: 9, high: 8), 9);
  });
  test('list.bisectRight for D lo=9 hi=8', () {
    expect(D.bisectRight(-2, low: 9, high: 8), 9);
    expect(D.bisectRight(-1, low: 9, high: 8), 9);
    expect(D.bisectRight(0, low: 9, high: 8), 9);
    expect(D.bisectRight(1, low: 9, high: 8), 9);
    expect(D.bisectRight(2, low: 9, high: 8), 9);
    expect(D.bisectRight(3, low: 9, high: 8), 9);
    expect(D.bisectRight(4, low: 9, high: 8), 9);
    expect(D.bisectRight(5, low: 9, high: 8), 9);
    expect(D.bisectRight(6, low: 9, high: 8), 9);
    expect(D.bisectRight(7, low: 9, high: 8), 9);
    expect(D.bisectRight(8, low: 9, high: 8), 9);
  });
  test('list.bisectRight for E lo=9 hi=8', () {
    expect(E.bisectRight(-2, low: 9, high: 8), 9);
    expect(E.bisectRight(-1, low: 9, high: 8), 9);
    expect(E.bisectRight(0, low: 9, high: 8), 9);
    expect(E.bisectRight(1, low: 9, high: 8), 9);
    expect(E.bisectRight(2, low: 9, high: 8), 9);
    expect(E.bisectRight(3, low: 9, high: 8), 9);
    expect(E.bisectRight(4, low: 9, high: 8), 9);
    expect(E.bisectRight(5, low: 9, high: 8), 9);
    expect(E.bisectRight(6, low: 9, high: 8), 9);
    expect(E.bisectRight(7, low: 9, high: 8), 9);
    expect(E.bisectRight(8, low: 9, high: 8), 9);
  });
  test('list.bisectRight for A lo=None hi=9', () {
    expect(() => A.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=None hi=9', () {
    expect(() => B.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=None hi=9', () {
    expect(() => C.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=None hi=9', () {
    expect(() => D.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=None hi=9', () {
    expect(E.bisectRight(-2, high: 9), 0);
    expect(E.bisectRight(-1, high: 9), 0);
    expect(E.bisectRight(0, high: 9), 1);
    expect(E.bisectRight(1, high: 9), 2);
    expect(E.bisectRight(2, high: 9), 6);
    expect(E.bisectRight(3, high: 9), 8);
    expect(E.bisectRight(4, high: 9), 8);
    expect(E.bisectRight(5, high: 9), 9);
    expect(E.bisectRight(6, high: 9), 9);
    expect(E.bisectRight(7, high: 9), 9);
    expect(E.bisectRight(8, high: 9), 9);
  });
  test('list.bisectRight for A lo=0 hi=9', () {
    expect(() => A.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=0 hi=9', () {
    expect(() => B.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=0 hi=9', () {
    expect(() => C.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=0 hi=9', () {
    expect(() => D.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=0 hi=9', () {
    expect(E.bisectRight(-2, low: 0, high: 9), 0);
    expect(E.bisectRight(-1, low: 0, high: 9), 0);
    expect(E.bisectRight(0, low: 0, high: 9), 1);
    expect(E.bisectRight(1, low: 0, high: 9), 2);
    expect(E.bisectRight(2, low: 0, high: 9), 6);
    expect(E.bisectRight(3, low: 0, high: 9), 8);
    expect(E.bisectRight(4, low: 0, high: 9), 8);
    expect(E.bisectRight(5, low: 0, high: 9), 9);
    expect(E.bisectRight(6, low: 0, high: 9), 9);
    expect(E.bisectRight(7, low: 0, high: 9), 9);
    expect(E.bisectRight(8, low: 0, high: 9), 9);
  });
  test('list.bisectRight for A lo=1 hi=9', () {
    expect(() => A.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=1 hi=9', () {
    expect(() => B.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=1 hi=9', () {
    expect(() => C.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=1 hi=9', () {
    expect(() => D.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=1 hi=9', () {
    expect(E.bisectRight(-2, low: 1, high: 9), 1);
    expect(E.bisectRight(-1, low: 1, high: 9), 1);
    expect(E.bisectRight(0, low: 1, high: 9), 1);
    expect(E.bisectRight(1, low: 1, high: 9), 2);
    expect(E.bisectRight(2, low: 1, high: 9), 6);
    expect(E.bisectRight(3, low: 1, high: 9), 8);
    expect(E.bisectRight(4, low: 1, high: 9), 8);
    expect(E.bisectRight(5, low: 1, high: 9), 9);
    expect(E.bisectRight(6, low: 1, high: 9), 9);
    expect(E.bisectRight(7, low: 1, high: 9), 9);
    expect(E.bisectRight(8, low: 1, high: 9), 9);
  });
  test('list.bisectRight for A lo=2 hi=9', () {
    expect(() => A.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=2 hi=9', () {
    expect(() => B.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=2 hi=9', () {
    expect(() => C.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=2 hi=9', () {
    expect(() => D.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=2 hi=9', () {
    expect(E.bisectRight(-2, low: 2, high: 9), 2);
    expect(E.bisectRight(-1, low: 2, high: 9), 2);
    expect(E.bisectRight(0, low: 2, high: 9), 2);
    expect(E.bisectRight(1, low: 2, high: 9), 2);
    expect(E.bisectRight(2, low: 2, high: 9), 6);
    expect(E.bisectRight(3, low: 2, high: 9), 8);
    expect(E.bisectRight(4, low: 2, high: 9), 8);
    expect(E.bisectRight(5, low: 2, high: 9), 9);
    expect(E.bisectRight(6, low: 2, high: 9), 9);
    expect(E.bisectRight(7, low: 2, high: 9), 9);
    expect(E.bisectRight(8, low: 2, high: 9), 9);
  });
  test('list.bisectRight for A lo=3 hi=9', () {
    expect(() => A.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=3 hi=9', () {
    expect(() => B.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=3 hi=9', () {
    expect(() => C.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=3 hi=9', () {
    expect(() => D.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=3 hi=9', () {
    expect(E.bisectRight(-2, low: 3, high: 9), 3);
    expect(E.bisectRight(-1, low: 3, high: 9), 3);
    expect(E.bisectRight(0, low: 3, high: 9), 3);
    expect(E.bisectRight(1, low: 3, high: 9), 3);
    expect(E.bisectRight(2, low: 3, high: 9), 6);
    expect(E.bisectRight(3, low: 3, high: 9), 8);
    expect(E.bisectRight(4, low: 3, high: 9), 8);
    expect(E.bisectRight(5, low: 3, high: 9), 9);
    expect(E.bisectRight(6, low: 3, high: 9), 9);
    expect(E.bisectRight(7, low: 3, high: 9), 9);
    expect(E.bisectRight(8, low: 3, high: 9), 9);
  });
  test('list.bisectRight for A lo=4 hi=9', () {
    expect(() => A.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=4 hi=9', () {
    expect(() => B.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=4 hi=9', () {
    expect(() => C.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=4 hi=9', () {
    expect(() => D.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=4 hi=9', () {
    expect(E.bisectRight(-2, low: 4, high: 9), 4);
    expect(E.bisectRight(-1, low: 4, high: 9), 4);
    expect(E.bisectRight(0, low: 4, high: 9), 4);
    expect(E.bisectRight(1, low: 4, high: 9), 4);
    expect(E.bisectRight(2, low: 4, high: 9), 6);
    expect(E.bisectRight(3, low: 4, high: 9), 8);
    expect(E.bisectRight(4, low: 4, high: 9), 8);
    expect(E.bisectRight(5, low: 4, high: 9), 9);
    expect(E.bisectRight(6, low: 4, high: 9), 9);
    expect(E.bisectRight(7, low: 4, high: 9), 9);
    expect(E.bisectRight(8, low: 4, high: 9), 9);
  });
  test('list.bisectRight for A lo=5 hi=9', () {
    expect(() => A.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=5 hi=9', () {
    expect(() => B.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=5 hi=9', () {
    expect(() => C.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=5 hi=9', () {
    expect(() => D.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=5 hi=9', () {
    expect(E.bisectRight(-2, low: 5, high: 9), 5);
    expect(E.bisectRight(-1, low: 5, high: 9), 5);
    expect(E.bisectRight(0, low: 5, high: 9), 5);
    expect(E.bisectRight(1, low: 5, high: 9), 5);
    expect(E.bisectRight(2, low: 5, high: 9), 6);
    expect(E.bisectRight(3, low: 5, high: 9), 8);
    expect(E.bisectRight(4, low: 5, high: 9), 8);
    expect(E.bisectRight(5, low: 5, high: 9), 9);
    expect(E.bisectRight(6, low: 5, high: 9), 9);
    expect(E.bisectRight(7, low: 5, high: 9), 9);
    expect(E.bisectRight(8, low: 5, high: 9), 9);
  });
  test('list.bisectRight for A lo=6 hi=9', () {
    expect(() => A.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=6 hi=9', () {
    expect(() => B.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=6 hi=9', () {
    expect(() => C.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=6 hi=9', () {
    expect(() => D.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=6 hi=9', () {
    expect(E.bisectRight(-2, low: 6, high: 9), 6);
    expect(E.bisectRight(-1, low: 6, high: 9), 6);
    expect(E.bisectRight(0, low: 6, high: 9), 6);
    expect(E.bisectRight(1, low: 6, high: 9), 6);
    expect(E.bisectRight(2, low: 6, high: 9), 6);
    expect(E.bisectRight(3, low: 6, high: 9), 8);
    expect(E.bisectRight(4, low: 6, high: 9), 8);
    expect(E.bisectRight(5, low: 6, high: 9), 9);
    expect(E.bisectRight(6, low: 6, high: 9), 9);
    expect(E.bisectRight(7, low: 6, high: 9), 9);
    expect(E.bisectRight(8, low: 6, high: 9), 9);
  });
  test('list.bisectRight for A lo=7 hi=9', () {
    expect(() => A.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=7 hi=9', () {
    expect(() => B.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=7 hi=9', () {
    expect(() => C.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=7 hi=9', () {
    expect(() => D.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=7 hi=9', () {
    expect(E.bisectRight(-2, low: 7, high: 9), 7);
    expect(E.bisectRight(-1, low: 7, high: 9), 7);
    expect(E.bisectRight(0, low: 7, high: 9), 7);
    expect(E.bisectRight(1, low: 7, high: 9), 7);
    expect(E.bisectRight(2, low: 7, high: 9), 7);
    expect(E.bisectRight(3, low: 7, high: 9), 8);
    expect(E.bisectRight(4, low: 7, high: 9), 8);
    expect(E.bisectRight(5, low: 7, high: 9), 9);
    expect(E.bisectRight(6, low: 7, high: 9), 9);
    expect(E.bisectRight(7, low: 7, high: 9), 9);
    expect(E.bisectRight(8, low: 7, high: 9), 9);
  });
  test('list.bisectRight for A lo=8 hi=9', () {
    expect(() => A.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for B lo=8 hi=9', () {
    expect(() => B.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for C lo=8 hi=9', () {
    expect(() => C.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for D lo=8 hi=9', () {
    expect(() => D.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });
  test('list.bisectRight for E lo=8 hi=9', () {
    expect(E.bisectRight(-2, low: 8, high: 9), 8);
    expect(E.bisectRight(-1, low: 8, high: 9), 8);
    expect(E.bisectRight(0, low: 8, high: 9), 8);
    expect(E.bisectRight(1, low: 8, high: 9), 8);
    expect(E.bisectRight(2, low: 8, high: 9), 8);
    expect(E.bisectRight(3, low: 8, high: 9), 8);
    expect(E.bisectRight(4, low: 8, high: 9), 8);
    expect(E.bisectRight(5, low: 8, high: 9), 9);
    expect(E.bisectRight(6, low: 8, high: 9), 9);
    expect(E.bisectRight(7, low: 8, high: 9), 9);
    expect(E.bisectRight(8, low: 8, high: 9), 9);
  });
  test('list.bisectRight for A lo=9 hi=9', () {
    expect(A.bisectRight(-2, low: 9, high: 9), 9);
    expect(A.bisectRight(-1, low: 9, high: 9), 9);
    expect(A.bisectRight(0, low: 9, high: 9), 9);
    expect(A.bisectRight(1, low: 9, high: 9), 9);
    expect(A.bisectRight(2, low: 9, high: 9), 9);
    expect(A.bisectRight(3, low: 9, high: 9), 9);
    expect(A.bisectRight(4, low: 9, high: 9), 9);
    expect(A.bisectRight(5, low: 9, high: 9), 9);
    expect(A.bisectRight(6, low: 9, high: 9), 9);
    expect(A.bisectRight(7, low: 9, high: 9), 9);
    expect(A.bisectRight(8, low: 9, high: 9), 9);
  });
  test('list.bisectRight for B lo=9 hi=9', () {
    expect(B.bisectRight(-2, low: 9, high: 9), 9);
    expect(B.bisectRight(-1, low: 9, high: 9), 9);
    expect(B.bisectRight(0, low: 9, high: 9), 9);
    expect(B.bisectRight(1, low: 9, high: 9), 9);
    expect(B.bisectRight(2, low: 9, high: 9), 9);
    expect(B.bisectRight(3, low: 9, high: 9), 9);
    expect(B.bisectRight(4, low: 9, high: 9), 9);
    expect(B.bisectRight(5, low: 9, high: 9), 9);
    expect(B.bisectRight(6, low: 9, high: 9), 9);
    expect(B.bisectRight(7, low: 9, high: 9), 9);
    expect(B.bisectRight(8, low: 9, high: 9), 9);
  });
  test('list.bisectRight for C lo=9 hi=9', () {
    expect(C.bisectRight(-2, low: 9, high: 9), 9);
    expect(C.bisectRight(-1, low: 9, high: 9), 9);
    expect(C.bisectRight(0, low: 9, high: 9), 9);
    expect(C.bisectRight(1, low: 9, high: 9), 9);
    expect(C.bisectRight(2, low: 9, high: 9), 9);
    expect(C.bisectRight(3, low: 9, high: 9), 9);
    expect(C.bisectRight(4, low: 9, high: 9), 9);
    expect(C.bisectRight(5, low: 9, high: 9), 9);
    expect(C.bisectRight(6, low: 9, high: 9), 9);
    expect(C.bisectRight(7, low: 9, high: 9), 9);
    expect(C.bisectRight(8, low: 9, high: 9), 9);
  });
  test('list.bisectRight for D lo=9 hi=9', () {
    expect(D.bisectRight(-2, low: 9, high: 9), 9);
    expect(D.bisectRight(-1, low: 9, high: 9), 9);
    expect(D.bisectRight(0, low: 9, high: 9), 9);
    expect(D.bisectRight(1, low: 9, high: 9), 9);
    expect(D.bisectRight(2, low: 9, high: 9), 9);
    expect(D.bisectRight(3, low: 9, high: 9), 9);
    expect(D.bisectRight(4, low: 9, high: 9), 9);
    expect(D.bisectRight(5, low: 9, high: 9), 9);
    expect(D.bisectRight(6, low: 9, high: 9), 9);
    expect(D.bisectRight(7, low: 9, high: 9), 9);
    expect(D.bisectRight(8, low: 9, high: 9), 9);
  });
  test('list.bisectRight for E lo=9 hi=9', () {
    expect(E.bisectRight(-2, low: 9, high: 9), 9);
    expect(E.bisectRight(-1, low: 9, high: 9), 9);
    expect(E.bisectRight(0, low: 9, high: 9), 9);
    expect(E.bisectRight(1, low: 9, high: 9), 9);
    expect(E.bisectRight(2, low: 9, high: 9), 9);
    expect(E.bisectRight(3, low: 9, high: 9), 9);
    expect(E.bisectRight(4, low: 9, high: 9), 9);
    expect(E.bisectRight(5, low: 9, high: 9), 9);
    expect(E.bisectRight(6, low: 9, high: 9), 9);
    expect(E.bisectRight(7, low: 9, high: 9), 9);
    expect(E.bisectRight(8, low: 9, high: 9), 9);
  });
}
