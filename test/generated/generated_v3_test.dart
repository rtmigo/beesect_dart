// Generated by bisect_test_generator_v3.py at 2021-11-16 01:28:31.804933

import 'package:bisection/bisection.dart';
import 'package:test/test.dart';

void main() {
  var A = [];
  var B = [4];
  var C = [4, 5];
  var D = [3, 4, 5];
  var E = [0, 1, 2, 2, 2, 2, 3, 3, 5, 6];

  test('bisect_left for A lo=None hi=None', () {
    expect(bisect_left(A, -2), 0);
    expect(bisect_left(A, -1), 0);
    expect(bisect_left(A, 0), 0);
    expect(bisect_left(A, 1), 0);
    expect(bisect_left(A, 2), 0);
    expect(bisect_left(A, 3), 0);
    expect(bisect_left(A, 4), 0);
    expect(bisect_left(A, 5), 0);
    expect(bisect_left(A, 6), 0);
    expect(bisect_left(A, 7), 0);
    expect(bisect_left(A, 8), 0);
  });

  test('bisect_left for B lo=None hi=None', () {
    expect(bisect_left(B, -2), 0);
    expect(bisect_left(B, -1), 0);
    expect(bisect_left(B, 0), 0);
    expect(bisect_left(B, 1), 0);
    expect(bisect_left(B, 2), 0);
    expect(bisect_left(B, 3), 0);
    expect(bisect_left(B, 4), 0);
    expect(bisect_left(B, 5), 1);
    expect(bisect_left(B, 6), 1);
    expect(bisect_left(B, 7), 1);
    expect(bisect_left(B, 8), 1);
  });

  test('bisect_left for C lo=None hi=None', () {
    expect(bisect_left(C, -2), 0);
    expect(bisect_left(C, -1), 0);
    expect(bisect_left(C, 0), 0);
    expect(bisect_left(C, 1), 0);
    expect(bisect_left(C, 2), 0);
    expect(bisect_left(C, 3), 0);
    expect(bisect_left(C, 4), 0);
    expect(bisect_left(C, 5), 1);
    expect(bisect_left(C, 6), 2);
    expect(bisect_left(C, 7), 2);
    expect(bisect_left(C, 8), 2);
  });

  test('bisect_left for D lo=None hi=None', () {
    expect(bisect_left(D, -2), 0);
    expect(bisect_left(D, -1), 0);
    expect(bisect_left(D, 0), 0);
    expect(bisect_left(D, 1), 0);
    expect(bisect_left(D, 2), 0);
    expect(bisect_left(D, 3), 0);
    expect(bisect_left(D, 4), 1);
    expect(bisect_left(D, 5), 2);
    expect(bisect_left(D, 6), 3);
    expect(bisect_left(D, 7), 3);
    expect(bisect_left(D, 8), 3);
  });

  test('bisect_left for E lo=None hi=None', () {
    expect(bisect_left(E, -2), 0);
    expect(bisect_left(E, -1), 0);
    expect(bisect_left(E, 0), 0);
    expect(bisect_left(E, 1), 1);
    expect(bisect_left(E, 2), 2);
    expect(bisect_left(E, 3), 6);
    expect(bisect_left(E, 4), 8);
    expect(bisect_left(E, 5), 8);
    expect(bisect_left(E, 6), 9);
    expect(bisect_left(E, 7), 10);
    expect(bisect_left(E, 8), 10);
  });

  test('bisect_left for A lo=0 hi=None', () {
    expect(bisect_left(A, -2, lo: 0), 0);
    expect(bisect_left(A, -1, lo: 0), 0);
    expect(bisect_left(A, 0, lo: 0), 0);
    expect(bisect_left(A, 1, lo: 0), 0);
    expect(bisect_left(A, 2, lo: 0), 0);
    expect(bisect_left(A, 3, lo: 0), 0);
    expect(bisect_left(A, 4, lo: 0), 0);
    expect(bisect_left(A, 5, lo: 0), 0);
    expect(bisect_left(A, 6, lo: 0), 0);
    expect(bisect_left(A, 7, lo: 0), 0);
    expect(bisect_left(A, 8, lo: 0), 0);
  });

  test('bisect_left for B lo=0 hi=None', () {
    expect(bisect_left(B, -2, lo: 0), 0);
    expect(bisect_left(B, -1, lo: 0), 0);
    expect(bisect_left(B, 0, lo: 0), 0);
    expect(bisect_left(B, 1, lo: 0), 0);
    expect(bisect_left(B, 2, lo: 0), 0);
    expect(bisect_left(B, 3, lo: 0), 0);
    expect(bisect_left(B, 4, lo: 0), 0);
    expect(bisect_left(B, 5, lo: 0), 1);
    expect(bisect_left(B, 6, lo: 0), 1);
    expect(bisect_left(B, 7, lo: 0), 1);
    expect(bisect_left(B, 8, lo: 0), 1);
  });

  test('bisect_left for C lo=0 hi=None', () {
    expect(bisect_left(C, -2, lo: 0), 0);
    expect(bisect_left(C, -1, lo: 0), 0);
    expect(bisect_left(C, 0, lo: 0), 0);
    expect(bisect_left(C, 1, lo: 0), 0);
    expect(bisect_left(C, 2, lo: 0), 0);
    expect(bisect_left(C, 3, lo: 0), 0);
    expect(bisect_left(C, 4, lo: 0), 0);
    expect(bisect_left(C, 5, lo: 0), 1);
    expect(bisect_left(C, 6, lo: 0), 2);
    expect(bisect_left(C, 7, lo: 0), 2);
    expect(bisect_left(C, 8, lo: 0), 2);
  });

  test('bisect_left for D lo=0 hi=None', () {
    expect(bisect_left(D, -2, lo: 0), 0);
    expect(bisect_left(D, -1, lo: 0), 0);
    expect(bisect_left(D, 0, lo: 0), 0);
    expect(bisect_left(D, 1, lo: 0), 0);
    expect(bisect_left(D, 2, lo: 0), 0);
    expect(bisect_left(D, 3, lo: 0), 0);
    expect(bisect_left(D, 4, lo: 0), 1);
    expect(bisect_left(D, 5, lo: 0), 2);
    expect(bisect_left(D, 6, lo: 0), 3);
    expect(bisect_left(D, 7, lo: 0), 3);
    expect(bisect_left(D, 8, lo: 0), 3);
  });

  test('bisect_left for E lo=0 hi=None', () {
    expect(bisect_left(E, -2, lo: 0), 0);
    expect(bisect_left(E, -1, lo: 0), 0);
    expect(bisect_left(E, 0, lo: 0), 0);
    expect(bisect_left(E, 1, lo: 0), 1);
    expect(bisect_left(E, 2, lo: 0), 2);
    expect(bisect_left(E, 3, lo: 0), 6);
    expect(bisect_left(E, 4, lo: 0), 8);
    expect(bisect_left(E, 5, lo: 0), 8);
    expect(bisect_left(E, 6, lo: 0), 9);
    expect(bisect_left(E, 7, lo: 0), 10);
    expect(bisect_left(E, 8, lo: 0), 10);
  });

  test('bisect_left for A lo=1 hi=None', () {
    expect(bisect_left(A, -2, lo: 1), 1);
    expect(bisect_left(A, -1, lo: 1), 1);
    expect(bisect_left(A, 0, lo: 1), 1);
    expect(bisect_left(A, 1, lo: 1), 1);
    expect(bisect_left(A, 2, lo: 1), 1);
    expect(bisect_left(A, 3, lo: 1), 1);
    expect(bisect_left(A, 4, lo: 1), 1);
    expect(bisect_left(A, 5, lo: 1), 1);
    expect(bisect_left(A, 6, lo: 1), 1);
    expect(bisect_left(A, 7, lo: 1), 1);
    expect(bisect_left(A, 8, lo: 1), 1);
  });

  test('bisect_left for B lo=1 hi=None', () {
    expect(bisect_left(B, -2, lo: 1), 1);
    expect(bisect_left(B, -1, lo: 1), 1);
    expect(bisect_left(B, 0, lo: 1), 1);
    expect(bisect_left(B, 1, lo: 1), 1);
    expect(bisect_left(B, 2, lo: 1), 1);
    expect(bisect_left(B, 3, lo: 1), 1);
    expect(bisect_left(B, 4, lo: 1), 1);
    expect(bisect_left(B, 5, lo: 1), 1);
    expect(bisect_left(B, 6, lo: 1), 1);
    expect(bisect_left(B, 7, lo: 1), 1);
    expect(bisect_left(B, 8, lo: 1), 1);
  });

  test('bisect_left for C lo=1 hi=None', () {
    expect(bisect_left(C, -2, lo: 1), 1);
    expect(bisect_left(C, -1, lo: 1), 1);
    expect(bisect_left(C, 0, lo: 1), 1);
    expect(bisect_left(C, 1, lo: 1), 1);
    expect(bisect_left(C, 2, lo: 1), 1);
    expect(bisect_left(C, 3, lo: 1), 1);
    expect(bisect_left(C, 4, lo: 1), 1);
    expect(bisect_left(C, 5, lo: 1), 1);
    expect(bisect_left(C, 6, lo: 1), 2);
    expect(bisect_left(C, 7, lo: 1), 2);
    expect(bisect_left(C, 8, lo: 1), 2);
  });

  test('bisect_left for D lo=1 hi=None', () {
    expect(bisect_left(D, -2, lo: 1), 1);
    expect(bisect_left(D, -1, lo: 1), 1);
    expect(bisect_left(D, 0, lo: 1), 1);
    expect(bisect_left(D, 1, lo: 1), 1);
    expect(bisect_left(D, 2, lo: 1), 1);
    expect(bisect_left(D, 3, lo: 1), 1);
    expect(bisect_left(D, 4, lo: 1), 1);
    expect(bisect_left(D, 5, lo: 1), 2);
    expect(bisect_left(D, 6, lo: 1), 3);
    expect(bisect_left(D, 7, lo: 1), 3);
    expect(bisect_left(D, 8, lo: 1), 3);
  });

  test('bisect_left for E lo=1 hi=None', () {
    expect(bisect_left(E, -2, lo: 1), 1);
    expect(bisect_left(E, -1, lo: 1), 1);
    expect(bisect_left(E, 0, lo: 1), 1);
    expect(bisect_left(E, 1, lo: 1), 1);
    expect(bisect_left(E, 2, lo: 1), 2);
    expect(bisect_left(E, 3, lo: 1), 6);
    expect(bisect_left(E, 4, lo: 1), 8);
    expect(bisect_left(E, 5, lo: 1), 8);
    expect(bisect_left(E, 6, lo: 1), 9);
    expect(bisect_left(E, 7, lo: 1), 10);
    expect(bisect_left(E, 8, lo: 1), 10);
  });

  test('bisect_left for A lo=2 hi=None', () {
    expect(bisect_left(A, -2, lo: 2), 2);
    expect(bisect_left(A, -1, lo: 2), 2);
    expect(bisect_left(A, 0, lo: 2), 2);
    expect(bisect_left(A, 1, lo: 2), 2);
    expect(bisect_left(A, 2, lo: 2), 2);
    expect(bisect_left(A, 3, lo: 2), 2);
    expect(bisect_left(A, 4, lo: 2), 2);
    expect(bisect_left(A, 5, lo: 2), 2);
    expect(bisect_left(A, 6, lo: 2), 2);
    expect(bisect_left(A, 7, lo: 2), 2);
    expect(bisect_left(A, 8, lo: 2), 2);
  });

  test('bisect_left for B lo=2 hi=None', () {
    expect(bisect_left(B, -2, lo: 2), 2);
    expect(bisect_left(B, -1, lo: 2), 2);
    expect(bisect_left(B, 0, lo: 2), 2);
    expect(bisect_left(B, 1, lo: 2), 2);
    expect(bisect_left(B, 2, lo: 2), 2);
    expect(bisect_left(B, 3, lo: 2), 2);
    expect(bisect_left(B, 4, lo: 2), 2);
    expect(bisect_left(B, 5, lo: 2), 2);
    expect(bisect_left(B, 6, lo: 2), 2);
    expect(bisect_left(B, 7, lo: 2), 2);
    expect(bisect_left(B, 8, lo: 2), 2);
  });

  test('bisect_left for C lo=2 hi=None', () {
    expect(bisect_left(C, -2, lo: 2), 2);
    expect(bisect_left(C, -1, lo: 2), 2);
    expect(bisect_left(C, 0, lo: 2), 2);
    expect(bisect_left(C, 1, lo: 2), 2);
    expect(bisect_left(C, 2, lo: 2), 2);
    expect(bisect_left(C, 3, lo: 2), 2);
    expect(bisect_left(C, 4, lo: 2), 2);
    expect(bisect_left(C, 5, lo: 2), 2);
    expect(bisect_left(C, 6, lo: 2), 2);
    expect(bisect_left(C, 7, lo: 2), 2);
    expect(bisect_left(C, 8, lo: 2), 2);
  });

  test('bisect_left for D lo=2 hi=None', () {
    expect(bisect_left(D, -2, lo: 2), 2);
    expect(bisect_left(D, -1, lo: 2), 2);
    expect(bisect_left(D, 0, lo: 2), 2);
    expect(bisect_left(D, 1, lo: 2), 2);
    expect(bisect_left(D, 2, lo: 2), 2);
    expect(bisect_left(D, 3, lo: 2), 2);
    expect(bisect_left(D, 4, lo: 2), 2);
    expect(bisect_left(D, 5, lo: 2), 2);
    expect(bisect_left(D, 6, lo: 2), 3);
    expect(bisect_left(D, 7, lo: 2), 3);
    expect(bisect_left(D, 8, lo: 2), 3);
  });

  test('bisect_left for E lo=2 hi=None', () {
    expect(bisect_left(E, -2, lo: 2), 2);
    expect(bisect_left(E, -1, lo: 2), 2);
    expect(bisect_left(E, 0, lo: 2), 2);
    expect(bisect_left(E, 1, lo: 2), 2);
    expect(bisect_left(E, 2, lo: 2), 2);
    expect(bisect_left(E, 3, lo: 2), 6);
    expect(bisect_left(E, 4, lo: 2), 8);
    expect(bisect_left(E, 5, lo: 2), 8);
    expect(bisect_left(E, 6, lo: 2), 9);
    expect(bisect_left(E, 7, lo: 2), 10);
    expect(bisect_left(E, 8, lo: 2), 10);
  });

  test('bisect_left for A lo=3 hi=None', () {
    expect(bisect_left(A, -2, lo: 3), 3);
    expect(bisect_left(A, -1, lo: 3), 3);
    expect(bisect_left(A, 0, lo: 3), 3);
    expect(bisect_left(A, 1, lo: 3), 3);
    expect(bisect_left(A, 2, lo: 3), 3);
    expect(bisect_left(A, 3, lo: 3), 3);
    expect(bisect_left(A, 4, lo: 3), 3);
    expect(bisect_left(A, 5, lo: 3), 3);
    expect(bisect_left(A, 6, lo: 3), 3);
    expect(bisect_left(A, 7, lo: 3), 3);
    expect(bisect_left(A, 8, lo: 3), 3);
  });

  test('bisect_left for B lo=3 hi=None', () {
    expect(bisect_left(B, -2, lo: 3), 3);
    expect(bisect_left(B, -1, lo: 3), 3);
    expect(bisect_left(B, 0, lo: 3), 3);
    expect(bisect_left(B, 1, lo: 3), 3);
    expect(bisect_left(B, 2, lo: 3), 3);
    expect(bisect_left(B, 3, lo: 3), 3);
    expect(bisect_left(B, 4, lo: 3), 3);
    expect(bisect_left(B, 5, lo: 3), 3);
    expect(bisect_left(B, 6, lo: 3), 3);
    expect(bisect_left(B, 7, lo: 3), 3);
    expect(bisect_left(B, 8, lo: 3), 3);
  });

  test('bisect_left for C lo=3 hi=None', () {
    expect(bisect_left(C, -2, lo: 3), 3);
    expect(bisect_left(C, -1, lo: 3), 3);
    expect(bisect_left(C, 0, lo: 3), 3);
    expect(bisect_left(C, 1, lo: 3), 3);
    expect(bisect_left(C, 2, lo: 3), 3);
    expect(bisect_left(C, 3, lo: 3), 3);
    expect(bisect_left(C, 4, lo: 3), 3);
    expect(bisect_left(C, 5, lo: 3), 3);
    expect(bisect_left(C, 6, lo: 3), 3);
    expect(bisect_left(C, 7, lo: 3), 3);
    expect(bisect_left(C, 8, lo: 3), 3);
  });

  test('bisect_left for D lo=3 hi=None', () {
    expect(bisect_left(D, -2, lo: 3), 3);
    expect(bisect_left(D, -1, lo: 3), 3);
    expect(bisect_left(D, 0, lo: 3), 3);
    expect(bisect_left(D, 1, lo: 3), 3);
    expect(bisect_left(D, 2, lo: 3), 3);
    expect(bisect_left(D, 3, lo: 3), 3);
    expect(bisect_left(D, 4, lo: 3), 3);
    expect(bisect_left(D, 5, lo: 3), 3);
    expect(bisect_left(D, 6, lo: 3), 3);
    expect(bisect_left(D, 7, lo: 3), 3);
    expect(bisect_left(D, 8, lo: 3), 3);
  });

  test('bisect_left for E lo=3 hi=None', () {
    expect(bisect_left(E, -2, lo: 3), 3);
    expect(bisect_left(E, -1, lo: 3), 3);
    expect(bisect_left(E, 0, lo: 3), 3);
    expect(bisect_left(E, 1, lo: 3), 3);
    expect(bisect_left(E, 2, lo: 3), 3);
    expect(bisect_left(E, 3, lo: 3), 6);
    expect(bisect_left(E, 4, lo: 3), 8);
    expect(bisect_left(E, 5, lo: 3), 8);
    expect(bisect_left(E, 6, lo: 3), 9);
    expect(bisect_left(E, 7, lo: 3), 10);
    expect(bisect_left(E, 8, lo: 3), 10);
  });

  test('bisect_left for A lo=4 hi=None', () {
    expect(bisect_left(A, -2, lo: 4), 4);
    expect(bisect_left(A, -1, lo: 4), 4);
    expect(bisect_left(A, 0, lo: 4), 4);
    expect(bisect_left(A, 1, lo: 4), 4);
    expect(bisect_left(A, 2, lo: 4), 4);
    expect(bisect_left(A, 3, lo: 4), 4);
    expect(bisect_left(A, 4, lo: 4), 4);
    expect(bisect_left(A, 5, lo: 4), 4);
    expect(bisect_left(A, 6, lo: 4), 4);
    expect(bisect_left(A, 7, lo: 4), 4);
    expect(bisect_left(A, 8, lo: 4), 4);
  });

  test('bisect_left for B lo=4 hi=None', () {
    expect(bisect_left(B, -2, lo: 4), 4);
    expect(bisect_left(B, -1, lo: 4), 4);
    expect(bisect_left(B, 0, lo: 4), 4);
    expect(bisect_left(B, 1, lo: 4), 4);
    expect(bisect_left(B, 2, lo: 4), 4);
    expect(bisect_left(B, 3, lo: 4), 4);
    expect(bisect_left(B, 4, lo: 4), 4);
    expect(bisect_left(B, 5, lo: 4), 4);
    expect(bisect_left(B, 6, lo: 4), 4);
    expect(bisect_left(B, 7, lo: 4), 4);
    expect(bisect_left(B, 8, lo: 4), 4);
  });

  test('bisect_left for C lo=4 hi=None', () {
    expect(bisect_left(C, -2, lo: 4), 4);
    expect(bisect_left(C, -1, lo: 4), 4);
    expect(bisect_left(C, 0, lo: 4), 4);
    expect(bisect_left(C, 1, lo: 4), 4);
    expect(bisect_left(C, 2, lo: 4), 4);
    expect(bisect_left(C, 3, lo: 4), 4);
    expect(bisect_left(C, 4, lo: 4), 4);
    expect(bisect_left(C, 5, lo: 4), 4);
    expect(bisect_left(C, 6, lo: 4), 4);
    expect(bisect_left(C, 7, lo: 4), 4);
    expect(bisect_left(C, 8, lo: 4), 4);
  });

  test('bisect_left for D lo=4 hi=None', () {
    expect(bisect_left(D, -2, lo: 4), 4);
    expect(bisect_left(D, -1, lo: 4), 4);
    expect(bisect_left(D, 0, lo: 4), 4);
    expect(bisect_left(D, 1, lo: 4), 4);
    expect(bisect_left(D, 2, lo: 4), 4);
    expect(bisect_left(D, 3, lo: 4), 4);
    expect(bisect_left(D, 4, lo: 4), 4);
    expect(bisect_left(D, 5, lo: 4), 4);
    expect(bisect_left(D, 6, lo: 4), 4);
    expect(bisect_left(D, 7, lo: 4), 4);
    expect(bisect_left(D, 8, lo: 4), 4);
  });

  test('bisect_left for E lo=4 hi=None', () {
    expect(bisect_left(E, -2, lo: 4), 4);
    expect(bisect_left(E, -1, lo: 4), 4);
    expect(bisect_left(E, 0, lo: 4), 4);
    expect(bisect_left(E, 1, lo: 4), 4);
    expect(bisect_left(E, 2, lo: 4), 4);
    expect(bisect_left(E, 3, lo: 4), 6);
    expect(bisect_left(E, 4, lo: 4), 8);
    expect(bisect_left(E, 5, lo: 4), 8);
    expect(bisect_left(E, 6, lo: 4), 9);
    expect(bisect_left(E, 7, lo: 4), 10);
    expect(bisect_left(E, 8, lo: 4), 10);
  });

  test('bisect_left for A lo=5 hi=None', () {
    expect(bisect_left(A, -2, lo: 5), 5);
    expect(bisect_left(A, -1, lo: 5), 5);
    expect(bisect_left(A, 0, lo: 5), 5);
    expect(bisect_left(A, 1, lo: 5), 5);
    expect(bisect_left(A, 2, lo: 5), 5);
    expect(bisect_left(A, 3, lo: 5), 5);
    expect(bisect_left(A, 4, lo: 5), 5);
    expect(bisect_left(A, 5, lo: 5), 5);
    expect(bisect_left(A, 6, lo: 5), 5);
    expect(bisect_left(A, 7, lo: 5), 5);
    expect(bisect_left(A, 8, lo: 5), 5);
  });

  test('bisect_left for B lo=5 hi=None', () {
    expect(bisect_left(B, -2, lo: 5), 5);
    expect(bisect_left(B, -1, lo: 5), 5);
    expect(bisect_left(B, 0, lo: 5), 5);
    expect(bisect_left(B, 1, lo: 5), 5);
    expect(bisect_left(B, 2, lo: 5), 5);
    expect(bisect_left(B, 3, lo: 5), 5);
    expect(bisect_left(B, 4, lo: 5), 5);
    expect(bisect_left(B, 5, lo: 5), 5);
    expect(bisect_left(B, 6, lo: 5), 5);
    expect(bisect_left(B, 7, lo: 5), 5);
    expect(bisect_left(B, 8, lo: 5), 5);
  });

  test('bisect_left for C lo=5 hi=None', () {
    expect(bisect_left(C, -2, lo: 5), 5);
    expect(bisect_left(C, -1, lo: 5), 5);
    expect(bisect_left(C, 0, lo: 5), 5);
    expect(bisect_left(C, 1, lo: 5), 5);
    expect(bisect_left(C, 2, lo: 5), 5);
    expect(bisect_left(C, 3, lo: 5), 5);
    expect(bisect_left(C, 4, lo: 5), 5);
    expect(bisect_left(C, 5, lo: 5), 5);
    expect(bisect_left(C, 6, lo: 5), 5);
    expect(bisect_left(C, 7, lo: 5), 5);
    expect(bisect_left(C, 8, lo: 5), 5);
  });

  test('bisect_left for D lo=5 hi=None', () {
    expect(bisect_left(D, -2, lo: 5), 5);
    expect(bisect_left(D, -1, lo: 5), 5);
    expect(bisect_left(D, 0, lo: 5), 5);
    expect(bisect_left(D, 1, lo: 5), 5);
    expect(bisect_left(D, 2, lo: 5), 5);
    expect(bisect_left(D, 3, lo: 5), 5);
    expect(bisect_left(D, 4, lo: 5), 5);
    expect(bisect_left(D, 5, lo: 5), 5);
    expect(bisect_left(D, 6, lo: 5), 5);
    expect(bisect_left(D, 7, lo: 5), 5);
    expect(bisect_left(D, 8, lo: 5), 5);
  });

  test('bisect_left for E lo=5 hi=None', () {
    expect(bisect_left(E, -2, lo: 5), 5);
    expect(bisect_left(E, -1, lo: 5), 5);
    expect(bisect_left(E, 0, lo: 5), 5);
    expect(bisect_left(E, 1, lo: 5), 5);
    expect(bisect_left(E, 2, lo: 5), 5);
    expect(bisect_left(E, 3, lo: 5), 6);
    expect(bisect_left(E, 4, lo: 5), 8);
    expect(bisect_left(E, 5, lo: 5), 8);
    expect(bisect_left(E, 6, lo: 5), 9);
    expect(bisect_left(E, 7, lo: 5), 10);
    expect(bisect_left(E, 8, lo: 5), 10);
  });

  test('bisect_left for A lo=6 hi=None', () {
    expect(bisect_left(A, -2, lo: 6), 6);
    expect(bisect_left(A, -1, lo: 6), 6);
    expect(bisect_left(A, 0, lo: 6), 6);
    expect(bisect_left(A, 1, lo: 6), 6);
    expect(bisect_left(A, 2, lo: 6), 6);
    expect(bisect_left(A, 3, lo: 6), 6);
    expect(bisect_left(A, 4, lo: 6), 6);
    expect(bisect_left(A, 5, lo: 6), 6);
    expect(bisect_left(A, 6, lo: 6), 6);
    expect(bisect_left(A, 7, lo: 6), 6);
    expect(bisect_left(A, 8, lo: 6), 6);
  });

  test('bisect_left for B lo=6 hi=None', () {
    expect(bisect_left(B, -2, lo: 6), 6);
    expect(bisect_left(B, -1, lo: 6), 6);
    expect(bisect_left(B, 0, lo: 6), 6);
    expect(bisect_left(B, 1, lo: 6), 6);
    expect(bisect_left(B, 2, lo: 6), 6);
    expect(bisect_left(B, 3, lo: 6), 6);
    expect(bisect_left(B, 4, lo: 6), 6);
    expect(bisect_left(B, 5, lo: 6), 6);
    expect(bisect_left(B, 6, lo: 6), 6);
    expect(bisect_left(B, 7, lo: 6), 6);
    expect(bisect_left(B, 8, lo: 6), 6);
  });

  test('bisect_left for C lo=6 hi=None', () {
    expect(bisect_left(C, -2, lo: 6), 6);
    expect(bisect_left(C, -1, lo: 6), 6);
    expect(bisect_left(C, 0, lo: 6), 6);
    expect(bisect_left(C, 1, lo: 6), 6);
    expect(bisect_left(C, 2, lo: 6), 6);
    expect(bisect_left(C, 3, lo: 6), 6);
    expect(bisect_left(C, 4, lo: 6), 6);
    expect(bisect_left(C, 5, lo: 6), 6);
    expect(bisect_left(C, 6, lo: 6), 6);
    expect(bisect_left(C, 7, lo: 6), 6);
    expect(bisect_left(C, 8, lo: 6), 6);
  });

  test('bisect_left for D lo=6 hi=None', () {
    expect(bisect_left(D, -2, lo: 6), 6);
    expect(bisect_left(D, -1, lo: 6), 6);
    expect(bisect_left(D, 0, lo: 6), 6);
    expect(bisect_left(D, 1, lo: 6), 6);
    expect(bisect_left(D, 2, lo: 6), 6);
    expect(bisect_left(D, 3, lo: 6), 6);
    expect(bisect_left(D, 4, lo: 6), 6);
    expect(bisect_left(D, 5, lo: 6), 6);
    expect(bisect_left(D, 6, lo: 6), 6);
    expect(bisect_left(D, 7, lo: 6), 6);
    expect(bisect_left(D, 8, lo: 6), 6);
  });

  test('bisect_left for E lo=6 hi=None', () {
    expect(bisect_left(E, -2, lo: 6), 6);
    expect(bisect_left(E, -1, lo: 6), 6);
    expect(bisect_left(E, 0, lo: 6), 6);
    expect(bisect_left(E, 1, lo: 6), 6);
    expect(bisect_left(E, 2, lo: 6), 6);
    expect(bisect_left(E, 3, lo: 6), 6);
    expect(bisect_left(E, 4, lo: 6), 8);
    expect(bisect_left(E, 5, lo: 6), 8);
    expect(bisect_left(E, 6, lo: 6), 9);
    expect(bisect_left(E, 7, lo: 6), 10);
    expect(bisect_left(E, 8, lo: 6), 10);
  });

  test('bisect_left for A lo=7 hi=None', () {
    expect(bisect_left(A, -2, lo: 7), 7);
    expect(bisect_left(A, -1, lo: 7), 7);
    expect(bisect_left(A, 0, lo: 7), 7);
    expect(bisect_left(A, 1, lo: 7), 7);
    expect(bisect_left(A, 2, lo: 7), 7);
    expect(bisect_left(A, 3, lo: 7), 7);
    expect(bisect_left(A, 4, lo: 7), 7);
    expect(bisect_left(A, 5, lo: 7), 7);
    expect(bisect_left(A, 6, lo: 7), 7);
    expect(bisect_left(A, 7, lo: 7), 7);
    expect(bisect_left(A, 8, lo: 7), 7);
  });

  test('bisect_left for B lo=7 hi=None', () {
    expect(bisect_left(B, -2, lo: 7), 7);
    expect(bisect_left(B, -1, lo: 7), 7);
    expect(bisect_left(B, 0, lo: 7), 7);
    expect(bisect_left(B, 1, lo: 7), 7);
    expect(bisect_left(B, 2, lo: 7), 7);
    expect(bisect_left(B, 3, lo: 7), 7);
    expect(bisect_left(B, 4, lo: 7), 7);
    expect(bisect_left(B, 5, lo: 7), 7);
    expect(bisect_left(B, 6, lo: 7), 7);
    expect(bisect_left(B, 7, lo: 7), 7);
    expect(bisect_left(B, 8, lo: 7), 7);
  });

  test('bisect_left for C lo=7 hi=None', () {
    expect(bisect_left(C, -2, lo: 7), 7);
    expect(bisect_left(C, -1, lo: 7), 7);
    expect(bisect_left(C, 0, lo: 7), 7);
    expect(bisect_left(C, 1, lo: 7), 7);
    expect(bisect_left(C, 2, lo: 7), 7);
    expect(bisect_left(C, 3, lo: 7), 7);
    expect(bisect_left(C, 4, lo: 7), 7);
    expect(bisect_left(C, 5, lo: 7), 7);
    expect(bisect_left(C, 6, lo: 7), 7);
    expect(bisect_left(C, 7, lo: 7), 7);
    expect(bisect_left(C, 8, lo: 7), 7);
  });

  test('bisect_left for D lo=7 hi=None', () {
    expect(bisect_left(D, -2, lo: 7), 7);
    expect(bisect_left(D, -1, lo: 7), 7);
    expect(bisect_left(D, 0, lo: 7), 7);
    expect(bisect_left(D, 1, lo: 7), 7);
    expect(bisect_left(D, 2, lo: 7), 7);
    expect(bisect_left(D, 3, lo: 7), 7);
    expect(bisect_left(D, 4, lo: 7), 7);
    expect(bisect_left(D, 5, lo: 7), 7);
    expect(bisect_left(D, 6, lo: 7), 7);
    expect(bisect_left(D, 7, lo: 7), 7);
    expect(bisect_left(D, 8, lo: 7), 7);
  });

  test('bisect_left for E lo=7 hi=None', () {
    expect(bisect_left(E, -2, lo: 7), 7);
    expect(bisect_left(E, -1, lo: 7), 7);
    expect(bisect_left(E, 0, lo: 7), 7);
    expect(bisect_left(E, 1, lo: 7), 7);
    expect(bisect_left(E, 2, lo: 7), 7);
    expect(bisect_left(E, 3, lo: 7), 7);
    expect(bisect_left(E, 4, lo: 7), 8);
    expect(bisect_left(E, 5, lo: 7), 8);
    expect(bisect_left(E, 6, lo: 7), 9);
    expect(bisect_left(E, 7, lo: 7), 10);
    expect(bisect_left(E, 8, lo: 7), 10);
  });

  test('bisect_left for A lo=8 hi=None', () {
    expect(bisect_left(A, -2, lo: 8), 8);
    expect(bisect_left(A, -1, lo: 8), 8);
    expect(bisect_left(A, 0, lo: 8), 8);
    expect(bisect_left(A, 1, lo: 8), 8);
    expect(bisect_left(A, 2, lo: 8), 8);
    expect(bisect_left(A, 3, lo: 8), 8);
    expect(bisect_left(A, 4, lo: 8), 8);
    expect(bisect_left(A, 5, lo: 8), 8);
    expect(bisect_left(A, 6, lo: 8), 8);
    expect(bisect_left(A, 7, lo: 8), 8);
    expect(bisect_left(A, 8, lo: 8), 8);
  });

  test('bisect_left for B lo=8 hi=None', () {
    expect(bisect_left(B, -2, lo: 8), 8);
    expect(bisect_left(B, -1, lo: 8), 8);
    expect(bisect_left(B, 0, lo: 8), 8);
    expect(bisect_left(B, 1, lo: 8), 8);
    expect(bisect_left(B, 2, lo: 8), 8);
    expect(bisect_left(B, 3, lo: 8), 8);
    expect(bisect_left(B, 4, lo: 8), 8);
    expect(bisect_left(B, 5, lo: 8), 8);
    expect(bisect_left(B, 6, lo: 8), 8);
    expect(bisect_left(B, 7, lo: 8), 8);
    expect(bisect_left(B, 8, lo: 8), 8);
  });

  test('bisect_left for C lo=8 hi=None', () {
    expect(bisect_left(C, -2, lo: 8), 8);
    expect(bisect_left(C, -1, lo: 8), 8);
    expect(bisect_left(C, 0, lo: 8), 8);
    expect(bisect_left(C, 1, lo: 8), 8);
    expect(bisect_left(C, 2, lo: 8), 8);
    expect(bisect_left(C, 3, lo: 8), 8);
    expect(bisect_left(C, 4, lo: 8), 8);
    expect(bisect_left(C, 5, lo: 8), 8);
    expect(bisect_left(C, 6, lo: 8), 8);
    expect(bisect_left(C, 7, lo: 8), 8);
    expect(bisect_left(C, 8, lo: 8), 8);
  });

  test('bisect_left for D lo=8 hi=None', () {
    expect(bisect_left(D, -2, lo: 8), 8);
    expect(bisect_left(D, -1, lo: 8), 8);
    expect(bisect_left(D, 0, lo: 8), 8);
    expect(bisect_left(D, 1, lo: 8), 8);
    expect(bisect_left(D, 2, lo: 8), 8);
    expect(bisect_left(D, 3, lo: 8), 8);
    expect(bisect_left(D, 4, lo: 8), 8);
    expect(bisect_left(D, 5, lo: 8), 8);
    expect(bisect_left(D, 6, lo: 8), 8);
    expect(bisect_left(D, 7, lo: 8), 8);
    expect(bisect_left(D, 8, lo: 8), 8);
  });

  test('bisect_left for E lo=8 hi=None', () {
    expect(bisect_left(E, -2, lo: 8), 8);
    expect(bisect_left(E, -1, lo: 8), 8);
    expect(bisect_left(E, 0, lo: 8), 8);
    expect(bisect_left(E, 1, lo: 8), 8);
    expect(bisect_left(E, 2, lo: 8), 8);
    expect(bisect_left(E, 3, lo: 8), 8);
    expect(bisect_left(E, 4, lo: 8), 8);
    expect(bisect_left(E, 5, lo: 8), 8);
    expect(bisect_left(E, 6, lo: 8), 9);
    expect(bisect_left(E, 7, lo: 8), 10);
    expect(bisect_left(E, 8, lo: 8), 10);
  });

  test('bisect_left for A lo=9 hi=None', () {
    expect(bisect_left(A, -2, lo: 9), 9);
    expect(bisect_left(A, -1, lo: 9), 9);
    expect(bisect_left(A, 0, lo: 9), 9);
    expect(bisect_left(A, 1, lo: 9), 9);
    expect(bisect_left(A, 2, lo: 9), 9);
    expect(bisect_left(A, 3, lo: 9), 9);
    expect(bisect_left(A, 4, lo: 9), 9);
    expect(bisect_left(A, 5, lo: 9), 9);
    expect(bisect_left(A, 6, lo: 9), 9);
    expect(bisect_left(A, 7, lo: 9), 9);
    expect(bisect_left(A, 8, lo: 9), 9);
  });

  test('bisect_left for B lo=9 hi=None', () {
    expect(bisect_left(B, -2, lo: 9), 9);
    expect(bisect_left(B, -1, lo: 9), 9);
    expect(bisect_left(B, 0, lo: 9), 9);
    expect(bisect_left(B, 1, lo: 9), 9);
    expect(bisect_left(B, 2, lo: 9), 9);
    expect(bisect_left(B, 3, lo: 9), 9);
    expect(bisect_left(B, 4, lo: 9), 9);
    expect(bisect_left(B, 5, lo: 9), 9);
    expect(bisect_left(B, 6, lo: 9), 9);
    expect(bisect_left(B, 7, lo: 9), 9);
    expect(bisect_left(B, 8, lo: 9), 9);
  });

  test('bisect_left for C lo=9 hi=None', () {
    expect(bisect_left(C, -2, lo: 9), 9);
    expect(bisect_left(C, -1, lo: 9), 9);
    expect(bisect_left(C, 0, lo: 9), 9);
    expect(bisect_left(C, 1, lo: 9), 9);
    expect(bisect_left(C, 2, lo: 9), 9);
    expect(bisect_left(C, 3, lo: 9), 9);
    expect(bisect_left(C, 4, lo: 9), 9);
    expect(bisect_left(C, 5, lo: 9), 9);
    expect(bisect_left(C, 6, lo: 9), 9);
    expect(bisect_left(C, 7, lo: 9), 9);
    expect(bisect_left(C, 8, lo: 9), 9);
  });

  test('bisect_left for D lo=9 hi=None', () {
    expect(bisect_left(D, -2, lo: 9), 9);
    expect(bisect_left(D, -1, lo: 9), 9);
    expect(bisect_left(D, 0, lo: 9), 9);
    expect(bisect_left(D, 1, lo: 9), 9);
    expect(bisect_left(D, 2, lo: 9), 9);
    expect(bisect_left(D, 3, lo: 9), 9);
    expect(bisect_left(D, 4, lo: 9), 9);
    expect(bisect_left(D, 5, lo: 9), 9);
    expect(bisect_left(D, 6, lo: 9), 9);
    expect(bisect_left(D, 7, lo: 9), 9);
    expect(bisect_left(D, 8, lo: 9), 9);
  });

  test('bisect_left for E lo=9 hi=None', () {
    expect(bisect_left(E, -2, lo: 9), 9);
    expect(bisect_left(E, -1, lo: 9), 9);
    expect(bisect_left(E, 0, lo: 9), 9);
    expect(bisect_left(E, 1, lo: 9), 9);
    expect(bisect_left(E, 2, lo: 9), 9);
    expect(bisect_left(E, 3, lo: 9), 9);
    expect(bisect_left(E, 4, lo: 9), 9);
    expect(bisect_left(E, 5, lo: 9), 9);
    expect(bisect_left(E, 6, lo: 9), 9);
    expect(bisect_left(E, 7, lo: 9), 10);
    expect(bisect_left(E, 8, lo: 9), 10);
  });

  test('bisect_left for A lo=None hi=0', () {
    expect(bisect_left(A, -2, hi: 0), 0);
    expect(bisect_left(A, -1, hi: 0), 0);
    expect(bisect_left(A, 0, hi: 0), 0);
    expect(bisect_left(A, 1, hi: 0), 0);
    expect(bisect_left(A, 2, hi: 0), 0);
    expect(bisect_left(A, 3, hi: 0), 0);
    expect(bisect_left(A, 4, hi: 0), 0);
    expect(bisect_left(A, 5, hi: 0), 0);
    expect(bisect_left(A, 6, hi: 0), 0);
    expect(bisect_left(A, 7, hi: 0), 0);
    expect(bisect_left(A, 8, hi: 0), 0);
  });

  test('bisect_left for B lo=None hi=0', () {
    expect(bisect_left(B, -2, hi: 0), 0);
    expect(bisect_left(B, -1, hi: 0), 0);
    expect(bisect_left(B, 0, hi: 0), 0);
    expect(bisect_left(B, 1, hi: 0), 0);
    expect(bisect_left(B, 2, hi: 0), 0);
    expect(bisect_left(B, 3, hi: 0), 0);
    expect(bisect_left(B, 4, hi: 0), 0);
    expect(bisect_left(B, 5, hi: 0), 0);
    expect(bisect_left(B, 6, hi: 0), 0);
    expect(bisect_left(B, 7, hi: 0), 0);
    expect(bisect_left(B, 8, hi: 0), 0);
  });

  test('bisect_left for C lo=None hi=0', () {
    expect(bisect_left(C, -2, hi: 0), 0);
    expect(bisect_left(C, -1, hi: 0), 0);
    expect(bisect_left(C, 0, hi: 0), 0);
    expect(bisect_left(C, 1, hi: 0), 0);
    expect(bisect_left(C, 2, hi: 0), 0);
    expect(bisect_left(C, 3, hi: 0), 0);
    expect(bisect_left(C, 4, hi: 0), 0);
    expect(bisect_left(C, 5, hi: 0), 0);
    expect(bisect_left(C, 6, hi: 0), 0);
    expect(bisect_left(C, 7, hi: 0), 0);
    expect(bisect_left(C, 8, hi: 0), 0);
  });

  test('bisect_left for D lo=None hi=0', () {
    expect(bisect_left(D, -2, hi: 0), 0);
    expect(bisect_left(D, -1, hi: 0), 0);
    expect(bisect_left(D, 0, hi: 0), 0);
    expect(bisect_left(D, 1, hi: 0), 0);
    expect(bisect_left(D, 2, hi: 0), 0);
    expect(bisect_left(D, 3, hi: 0), 0);
    expect(bisect_left(D, 4, hi: 0), 0);
    expect(bisect_left(D, 5, hi: 0), 0);
    expect(bisect_left(D, 6, hi: 0), 0);
    expect(bisect_left(D, 7, hi: 0), 0);
    expect(bisect_left(D, 8, hi: 0), 0);
  });

  test('bisect_left for E lo=None hi=0', () {
    expect(bisect_left(E, -2, hi: 0), 0);
    expect(bisect_left(E, -1, hi: 0), 0);
    expect(bisect_left(E, 0, hi: 0), 0);
    expect(bisect_left(E, 1, hi: 0), 0);
    expect(bisect_left(E, 2, hi: 0), 0);
    expect(bisect_left(E, 3, hi: 0), 0);
    expect(bisect_left(E, 4, hi: 0), 0);
    expect(bisect_left(E, 5, hi: 0), 0);
    expect(bisect_left(E, 6, hi: 0), 0);
    expect(bisect_left(E, 7, hi: 0), 0);
    expect(bisect_left(E, 8, hi: 0), 0);
  });

  test('bisect_left for A lo=0 hi=0', () {
    expect(bisect_left(A, -2, lo: 0, hi: 0), 0);
    expect(bisect_left(A, -1, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 0, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 1, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 2, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 3, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 4, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 5, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 6, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 7, lo: 0, hi: 0), 0);
    expect(bisect_left(A, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_left for B lo=0 hi=0', () {
    expect(bisect_left(B, -2, lo: 0, hi: 0), 0);
    expect(bisect_left(B, -1, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 0, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 1, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 2, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 3, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 4, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 5, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 6, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 7, lo: 0, hi: 0), 0);
    expect(bisect_left(B, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_left for C lo=0 hi=0', () {
    expect(bisect_left(C, -2, lo: 0, hi: 0), 0);
    expect(bisect_left(C, -1, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 0, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 1, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 2, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 3, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 4, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 5, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 6, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 7, lo: 0, hi: 0), 0);
    expect(bisect_left(C, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_left for D lo=0 hi=0', () {
    expect(bisect_left(D, -2, lo: 0, hi: 0), 0);
    expect(bisect_left(D, -1, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 0, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 1, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 2, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 3, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 4, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 5, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 6, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 7, lo: 0, hi: 0), 0);
    expect(bisect_left(D, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_left for E lo=0 hi=0', () {
    expect(bisect_left(E, -2, lo: 0, hi: 0), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 2, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 3, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 4, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 5, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 6, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 7, lo: 0, hi: 0), 0);
    expect(bisect_left(E, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_left for A lo=1 hi=0', () {
    expect(bisect_left(A, -2, lo: 1, hi: 0), 1);
    expect(bisect_left(A, -1, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 0, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 1, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 2, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 3, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 4, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 5, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 6, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 7, lo: 1, hi: 0), 1);
    expect(bisect_left(A, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_left for B lo=1 hi=0', () {
    expect(bisect_left(B, -2, lo: 1, hi: 0), 1);
    expect(bisect_left(B, -1, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 0, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 1, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 2, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 3, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 4, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 5, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 6, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 7, lo: 1, hi: 0), 1);
    expect(bisect_left(B, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_left for C lo=1 hi=0', () {
    expect(bisect_left(C, -2, lo: 1, hi: 0), 1);
    expect(bisect_left(C, -1, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 0, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 1, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 2, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 3, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 4, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 5, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 6, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 7, lo: 1, hi: 0), 1);
    expect(bisect_left(C, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_left for D lo=1 hi=0', () {
    expect(bisect_left(D, -2, lo: 1, hi: 0), 1);
    expect(bisect_left(D, -1, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 0, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 1, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 2, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 3, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 4, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 5, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 6, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 7, lo: 1, hi: 0), 1);
    expect(bisect_left(D, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_left for E lo=1 hi=0', () {
    expect(bisect_left(E, -2, lo: 1, hi: 0), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 3, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 4, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 5, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 6, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 7, lo: 1, hi: 0), 1);
    expect(bisect_left(E, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_left for A lo=2 hi=0', () {
    expect(bisect_left(A, -2, lo: 2, hi: 0), 2);
    expect(bisect_left(A, -1, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 0, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 1, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 2, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 3, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 4, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 5, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 6, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 7, lo: 2, hi: 0), 2);
    expect(bisect_left(A, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_left for B lo=2 hi=0', () {
    expect(bisect_left(B, -2, lo: 2, hi: 0), 2);
    expect(bisect_left(B, -1, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 0, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 1, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 2, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 3, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 4, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 5, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 6, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 7, lo: 2, hi: 0), 2);
    expect(bisect_left(B, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_left for C lo=2 hi=0', () {
    expect(bisect_left(C, -2, lo: 2, hi: 0), 2);
    expect(bisect_left(C, -1, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 0, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 1, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 2, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 3, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 4, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 5, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 6, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 7, lo: 2, hi: 0), 2);
    expect(bisect_left(C, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_left for D lo=2 hi=0', () {
    expect(bisect_left(D, -2, lo: 2, hi: 0), 2);
    expect(bisect_left(D, -1, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 0, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 1, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 2, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 3, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 4, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 5, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 6, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 7, lo: 2, hi: 0), 2);
    expect(bisect_left(D, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_left for E lo=2 hi=0', () {
    expect(bisect_left(E, -2, lo: 2, hi: 0), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 4, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 5, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 6, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 7, lo: 2, hi: 0), 2);
    expect(bisect_left(E, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_left for A lo=3 hi=0', () {
    expect(bisect_left(A, -2, lo: 3, hi: 0), 3);
    expect(bisect_left(A, -1, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 0, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 1, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 2, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 3, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 4, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 5, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 6, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 7, lo: 3, hi: 0), 3);
    expect(bisect_left(A, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_left for B lo=3 hi=0', () {
    expect(bisect_left(B, -2, lo: 3, hi: 0), 3);
    expect(bisect_left(B, -1, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 0, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 1, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 2, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 3, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 4, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 5, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 6, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 7, lo: 3, hi: 0), 3);
    expect(bisect_left(B, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_left for C lo=3 hi=0', () {
    expect(bisect_left(C, -2, lo: 3, hi: 0), 3);
    expect(bisect_left(C, -1, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 0, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 1, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 2, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 3, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 4, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 5, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 6, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 7, lo: 3, hi: 0), 3);
    expect(bisect_left(C, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_left for D lo=3 hi=0', () {
    expect(bisect_left(D, -2, lo: 3, hi: 0), 3);
    expect(bisect_left(D, -1, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 0, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 1, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 2, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 3, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 4, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 5, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 6, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 7, lo: 3, hi: 0), 3);
    expect(bisect_left(D, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_left for E lo=3 hi=0', () {
    expect(bisect_left(E, -2, lo: 3, hi: 0), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 4, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 5, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 6, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 7, lo: 3, hi: 0), 3);
    expect(bisect_left(E, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_left for A lo=4 hi=0', () {
    expect(bisect_left(A, -2, lo: 4, hi: 0), 4);
    expect(bisect_left(A, -1, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 0, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 1, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 2, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 3, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 4, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 5, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 6, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 7, lo: 4, hi: 0), 4);
    expect(bisect_left(A, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_left for B lo=4 hi=0', () {
    expect(bisect_left(B, -2, lo: 4, hi: 0), 4);
    expect(bisect_left(B, -1, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 0, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 1, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 2, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 3, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 4, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 5, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 6, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 7, lo: 4, hi: 0), 4);
    expect(bisect_left(B, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_left for C lo=4 hi=0', () {
    expect(bisect_left(C, -2, lo: 4, hi: 0), 4);
    expect(bisect_left(C, -1, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 0, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 1, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 2, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 3, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 4, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 5, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 6, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 7, lo: 4, hi: 0), 4);
    expect(bisect_left(C, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_left for D lo=4 hi=0', () {
    expect(bisect_left(D, -2, lo: 4, hi: 0), 4);
    expect(bisect_left(D, -1, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 0, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 1, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 2, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 3, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 4, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 5, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 6, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 7, lo: 4, hi: 0), 4);
    expect(bisect_left(D, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_left for E lo=4 hi=0', () {
    expect(bisect_left(E, -2, lo: 4, hi: 0), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 4, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 5, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 6, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 7, lo: 4, hi: 0), 4);
    expect(bisect_left(E, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_left for A lo=5 hi=0', () {
    expect(bisect_left(A, -2, lo: 5, hi: 0), 5);
    expect(bisect_left(A, -1, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 0, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 1, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 2, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 3, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 4, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 5, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 6, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 7, lo: 5, hi: 0), 5);
    expect(bisect_left(A, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_left for B lo=5 hi=0', () {
    expect(bisect_left(B, -2, lo: 5, hi: 0), 5);
    expect(bisect_left(B, -1, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 0, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 1, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 2, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 3, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 4, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 5, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 6, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 7, lo: 5, hi: 0), 5);
    expect(bisect_left(B, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_left for C lo=5 hi=0', () {
    expect(bisect_left(C, -2, lo: 5, hi: 0), 5);
    expect(bisect_left(C, -1, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 0, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 1, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 2, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 3, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 4, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 5, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 6, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 7, lo: 5, hi: 0), 5);
    expect(bisect_left(C, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_left for D lo=5 hi=0', () {
    expect(bisect_left(D, -2, lo: 5, hi: 0), 5);
    expect(bisect_left(D, -1, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 0, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 1, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 2, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 3, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 4, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 5, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 6, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 7, lo: 5, hi: 0), 5);
    expect(bisect_left(D, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_left for E lo=5 hi=0', () {
    expect(bisect_left(E, -2, lo: 5, hi: 0), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 4, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 5, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 6, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 7, lo: 5, hi: 0), 5);
    expect(bisect_left(E, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_left for A lo=6 hi=0', () {
    expect(bisect_left(A, -2, lo: 6, hi: 0), 6);
    expect(bisect_left(A, -1, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 0, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 1, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 2, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 3, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 4, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 5, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 6, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 7, lo: 6, hi: 0), 6);
    expect(bisect_left(A, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_left for B lo=6 hi=0', () {
    expect(bisect_left(B, -2, lo: 6, hi: 0), 6);
    expect(bisect_left(B, -1, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 0, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 1, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 2, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 3, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 4, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 5, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 6, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 7, lo: 6, hi: 0), 6);
    expect(bisect_left(B, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_left for C lo=6 hi=0', () {
    expect(bisect_left(C, -2, lo: 6, hi: 0), 6);
    expect(bisect_left(C, -1, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 0, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 1, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 2, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 3, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 4, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 5, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 6, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 7, lo: 6, hi: 0), 6);
    expect(bisect_left(C, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_left for D lo=6 hi=0', () {
    expect(bisect_left(D, -2, lo: 6, hi: 0), 6);
    expect(bisect_left(D, -1, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 0, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 1, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 2, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 3, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 4, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 5, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 6, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 7, lo: 6, hi: 0), 6);
    expect(bisect_left(D, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_left for E lo=6 hi=0', () {
    expect(bisect_left(E, -2, lo: 6, hi: 0), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 5, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 6, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 7, lo: 6, hi: 0), 6);
    expect(bisect_left(E, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_left for A lo=7 hi=0', () {
    expect(bisect_left(A, -2, lo: 7, hi: 0), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 0), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_left for B lo=7 hi=0', () {
    expect(bisect_left(B, -2, lo: 7, hi: 0), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 0), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_left for C lo=7 hi=0', () {
    expect(bisect_left(C, -2, lo: 7, hi: 0), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 0), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_left for D lo=7 hi=0', () {
    expect(bisect_left(D, -2, lo: 7, hi: 0), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 0), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_left for E lo=7 hi=0', () {
    expect(bisect_left(E, -2, lo: 7, hi: 0), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 0), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_left for A lo=8 hi=0', () {
    expect(bisect_left(A, -2, lo: 8, hi: 0), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 0), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_left for B lo=8 hi=0', () {
    expect(bisect_left(B, -2, lo: 8, hi: 0), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 0), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_left for C lo=8 hi=0', () {
    expect(bisect_left(C, -2, lo: 8, hi: 0), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 0), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_left for D lo=8 hi=0', () {
    expect(bisect_left(D, -2, lo: 8, hi: 0), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 0), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_left for E lo=8 hi=0', () {
    expect(bisect_left(E, -2, lo: 8, hi: 0), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 0), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_left for A lo=9 hi=0', () {
    expect(bisect_left(A, -2, lo: 9, hi: 0), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 0), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_left for B lo=9 hi=0', () {
    expect(bisect_left(B, -2, lo: 9, hi: 0), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 0), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_left for C lo=9 hi=0', () {
    expect(bisect_left(C, -2, lo: 9, hi: 0), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 0), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_left for D lo=9 hi=0', () {
    expect(bisect_left(D, -2, lo: 9, hi: 0), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 0), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_left for E lo=9 hi=0', () {
    expect(bisect_left(E, -2, lo: 9, hi: 0), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 0), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_left for A lo=None hi=1', () {
    expect(() => bisect_left(A, -2, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 1), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=1', () {
    expect(bisect_left(B, -2, hi: 1), 0);
    expect(bisect_left(B, -1, hi: 1), 0);
    expect(bisect_left(B, 0, hi: 1), 0);
    expect(bisect_left(B, 1, hi: 1), 0);
    expect(bisect_left(B, 2, hi: 1), 0);
    expect(bisect_left(B, 3, hi: 1), 0);
    expect(bisect_left(B, 4, hi: 1), 0);
    expect(bisect_left(B, 5, hi: 1), 1);
    expect(bisect_left(B, 6, hi: 1), 1);
    expect(bisect_left(B, 7, hi: 1), 1);
    expect(bisect_left(B, 8, hi: 1), 1);
  });

  test('bisect_left for C lo=None hi=1', () {
    expect(bisect_left(C, -2, hi: 1), 0);
    expect(bisect_left(C, -1, hi: 1), 0);
    expect(bisect_left(C, 0, hi: 1), 0);
    expect(bisect_left(C, 1, hi: 1), 0);
    expect(bisect_left(C, 2, hi: 1), 0);
    expect(bisect_left(C, 3, hi: 1), 0);
    expect(bisect_left(C, 4, hi: 1), 0);
    expect(bisect_left(C, 5, hi: 1), 1);
    expect(bisect_left(C, 6, hi: 1), 1);
    expect(bisect_left(C, 7, hi: 1), 1);
    expect(bisect_left(C, 8, hi: 1), 1);
  });

  test('bisect_left for D lo=None hi=1', () {
    expect(bisect_left(D, -2, hi: 1), 0);
    expect(bisect_left(D, -1, hi: 1), 0);
    expect(bisect_left(D, 0, hi: 1), 0);
    expect(bisect_left(D, 1, hi: 1), 0);
    expect(bisect_left(D, 2, hi: 1), 0);
    expect(bisect_left(D, 3, hi: 1), 0);
    expect(bisect_left(D, 4, hi: 1), 1);
    expect(bisect_left(D, 5, hi: 1), 1);
    expect(bisect_left(D, 6, hi: 1), 1);
    expect(bisect_left(D, 7, hi: 1), 1);
    expect(bisect_left(D, 8, hi: 1), 1);
  });

  test('bisect_left for E lo=None hi=1', () {
    expect(bisect_left(E, -2, hi: 1), 0);
    expect(bisect_left(E, -1, hi: 1), 0);
    expect(bisect_left(E, 0, hi: 1), 0);
    expect(bisect_left(E, 1, hi: 1), 1);
    expect(bisect_left(E, 2, hi: 1), 1);
    expect(bisect_left(E, 3, hi: 1), 1);
    expect(bisect_left(E, 4, hi: 1), 1);
    expect(bisect_left(E, 5, hi: 1), 1);
    expect(bisect_left(E, 6, hi: 1), 1);
    expect(bisect_left(E, 7, hi: 1), 1);
    expect(bisect_left(E, 8, hi: 1), 1);
  });

  test('bisect_left for A lo=0 hi=1', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 1), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=1', () {
    expect(bisect_left(B, -2, lo: 0, hi: 1), 0);
    expect(bisect_left(B, -1, lo: 0, hi: 1), 0);
    expect(bisect_left(B, 0, lo: 0, hi: 1), 0);
    expect(bisect_left(B, 1, lo: 0, hi: 1), 0);
    expect(bisect_left(B, 2, lo: 0, hi: 1), 0);
    expect(bisect_left(B, 3, lo: 0, hi: 1), 0);
    expect(bisect_left(B, 4, lo: 0, hi: 1), 0);
    expect(bisect_left(B, 5, lo: 0, hi: 1), 1);
    expect(bisect_left(B, 6, lo: 0, hi: 1), 1);
    expect(bisect_left(B, 7, lo: 0, hi: 1), 1);
    expect(bisect_left(B, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_left for C lo=0 hi=1', () {
    expect(bisect_left(C, -2, lo: 0, hi: 1), 0);
    expect(bisect_left(C, -1, lo: 0, hi: 1), 0);
    expect(bisect_left(C, 0, lo: 0, hi: 1), 0);
    expect(bisect_left(C, 1, lo: 0, hi: 1), 0);
    expect(bisect_left(C, 2, lo: 0, hi: 1), 0);
    expect(bisect_left(C, 3, lo: 0, hi: 1), 0);
    expect(bisect_left(C, 4, lo: 0, hi: 1), 0);
    expect(bisect_left(C, 5, lo: 0, hi: 1), 1);
    expect(bisect_left(C, 6, lo: 0, hi: 1), 1);
    expect(bisect_left(C, 7, lo: 0, hi: 1), 1);
    expect(bisect_left(C, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_left for D lo=0 hi=1', () {
    expect(bisect_left(D, -2, lo: 0, hi: 1), 0);
    expect(bisect_left(D, -1, lo: 0, hi: 1), 0);
    expect(bisect_left(D, 0, lo: 0, hi: 1), 0);
    expect(bisect_left(D, 1, lo: 0, hi: 1), 0);
    expect(bisect_left(D, 2, lo: 0, hi: 1), 0);
    expect(bisect_left(D, 3, lo: 0, hi: 1), 0);
    expect(bisect_left(D, 4, lo: 0, hi: 1), 1);
    expect(bisect_left(D, 5, lo: 0, hi: 1), 1);
    expect(bisect_left(D, 6, lo: 0, hi: 1), 1);
    expect(bisect_left(D, 7, lo: 0, hi: 1), 1);
    expect(bisect_left(D, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_left for E lo=0 hi=1', () {
    expect(bisect_left(E, -2, lo: 0, hi: 1), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 1), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 1), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 1), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 1), 1);
    expect(bisect_left(E, 3, lo: 0, hi: 1), 1);
    expect(bisect_left(E, 4, lo: 0, hi: 1), 1);
    expect(bisect_left(E, 5, lo: 0, hi: 1), 1);
    expect(bisect_left(E, 6, lo: 0, hi: 1), 1);
    expect(bisect_left(E, 7, lo: 0, hi: 1), 1);
    expect(bisect_left(E, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_left for A lo=1 hi=1', () {
    expect(bisect_left(A, -2, lo: 1, hi: 1), 1);
    expect(bisect_left(A, -1, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 0, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 1, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 2, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 3, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 4, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 5, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 6, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 7, lo: 1, hi: 1), 1);
    expect(bisect_left(A, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_left for B lo=1 hi=1', () {
    expect(bisect_left(B, -2, lo: 1, hi: 1), 1);
    expect(bisect_left(B, -1, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 0, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 1, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 2, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 3, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 4, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 5, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 6, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 7, lo: 1, hi: 1), 1);
    expect(bisect_left(B, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_left for C lo=1 hi=1', () {
    expect(bisect_left(C, -2, lo: 1, hi: 1), 1);
    expect(bisect_left(C, -1, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 0, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 1, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 2, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 3, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 4, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 5, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 6, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 7, lo: 1, hi: 1), 1);
    expect(bisect_left(C, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_left for D lo=1 hi=1', () {
    expect(bisect_left(D, -2, lo: 1, hi: 1), 1);
    expect(bisect_left(D, -1, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 0, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 1, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 2, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 3, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 4, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 5, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 6, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 7, lo: 1, hi: 1), 1);
    expect(bisect_left(D, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_left for E lo=1 hi=1', () {
    expect(bisect_left(E, -2, lo: 1, hi: 1), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 3, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 4, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 5, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 6, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 7, lo: 1, hi: 1), 1);
    expect(bisect_left(E, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_left for A lo=2 hi=1', () {
    expect(bisect_left(A, -2, lo: 2, hi: 1), 2);
    expect(bisect_left(A, -1, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 0, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 1, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 2, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 3, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 4, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 5, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 6, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 7, lo: 2, hi: 1), 2);
    expect(bisect_left(A, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_left for B lo=2 hi=1', () {
    expect(bisect_left(B, -2, lo: 2, hi: 1), 2);
    expect(bisect_left(B, -1, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 0, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 1, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 2, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 3, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 4, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 5, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 6, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 7, lo: 2, hi: 1), 2);
    expect(bisect_left(B, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_left for C lo=2 hi=1', () {
    expect(bisect_left(C, -2, lo: 2, hi: 1), 2);
    expect(bisect_left(C, -1, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 0, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 1, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 2, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 3, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 4, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 5, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 6, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 7, lo: 2, hi: 1), 2);
    expect(bisect_left(C, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_left for D lo=2 hi=1', () {
    expect(bisect_left(D, -2, lo: 2, hi: 1), 2);
    expect(bisect_left(D, -1, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 0, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 1, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 2, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 3, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 4, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 5, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 6, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 7, lo: 2, hi: 1), 2);
    expect(bisect_left(D, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_left for E lo=2 hi=1', () {
    expect(bisect_left(E, -2, lo: 2, hi: 1), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 4, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 5, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 6, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 7, lo: 2, hi: 1), 2);
    expect(bisect_left(E, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_left for A lo=3 hi=1', () {
    expect(bisect_left(A, -2, lo: 3, hi: 1), 3);
    expect(bisect_left(A, -1, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 0, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 1, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 2, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 3, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 4, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 5, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 6, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 7, lo: 3, hi: 1), 3);
    expect(bisect_left(A, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_left for B lo=3 hi=1', () {
    expect(bisect_left(B, -2, lo: 3, hi: 1), 3);
    expect(bisect_left(B, -1, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 0, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 1, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 2, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 3, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 4, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 5, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 6, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 7, lo: 3, hi: 1), 3);
    expect(bisect_left(B, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_left for C lo=3 hi=1', () {
    expect(bisect_left(C, -2, lo: 3, hi: 1), 3);
    expect(bisect_left(C, -1, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 0, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 1, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 2, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 3, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 4, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 5, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 6, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 7, lo: 3, hi: 1), 3);
    expect(bisect_left(C, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_left for D lo=3 hi=1', () {
    expect(bisect_left(D, -2, lo: 3, hi: 1), 3);
    expect(bisect_left(D, -1, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 0, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 1, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 2, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 3, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 4, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 5, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 6, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 7, lo: 3, hi: 1), 3);
    expect(bisect_left(D, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_left for E lo=3 hi=1', () {
    expect(bisect_left(E, -2, lo: 3, hi: 1), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 4, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 5, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 6, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 7, lo: 3, hi: 1), 3);
    expect(bisect_left(E, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_left for A lo=4 hi=1', () {
    expect(bisect_left(A, -2, lo: 4, hi: 1), 4);
    expect(bisect_left(A, -1, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 0, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 1, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 2, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 3, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 4, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 5, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 6, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 7, lo: 4, hi: 1), 4);
    expect(bisect_left(A, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_left for B lo=4 hi=1', () {
    expect(bisect_left(B, -2, lo: 4, hi: 1), 4);
    expect(bisect_left(B, -1, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 0, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 1, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 2, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 3, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 4, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 5, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 6, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 7, lo: 4, hi: 1), 4);
    expect(bisect_left(B, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_left for C lo=4 hi=1', () {
    expect(bisect_left(C, -2, lo: 4, hi: 1), 4);
    expect(bisect_left(C, -1, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 0, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 1, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 2, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 3, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 4, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 5, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 6, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 7, lo: 4, hi: 1), 4);
    expect(bisect_left(C, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_left for D lo=4 hi=1', () {
    expect(bisect_left(D, -2, lo: 4, hi: 1), 4);
    expect(bisect_left(D, -1, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 0, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 1, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 2, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 3, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 4, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 5, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 6, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 7, lo: 4, hi: 1), 4);
    expect(bisect_left(D, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_left for E lo=4 hi=1', () {
    expect(bisect_left(E, -2, lo: 4, hi: 1), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 4, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 5, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 6, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 7, lo: 4, hi: 1), 4);
    expect(bisect_left(E, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_left for A lo=5 hi=1', () {
    expect(bisect_left(A, -2, lo: 5, hi: 1), 5);
    expect(bisect_left(A, -1, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 0, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 1, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 2, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 3, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 4, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 5, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 6, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 7, lo: 5, hi: 1), 5);
    expect(bisect_left(A, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_left for B lo=5 hi=1', () {
    expect(bisect_left(B, -2, lo: 5, hi: 1), 5);
    expect(bisect_left(B, -1, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 0, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 1, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 2, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 3, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 4, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 5, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 6, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 7, lo: 5, hi: 1), 5);
    expect(bisect_left(B, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_left for C lo=5 hi=1', () {
    expect(bisect_left(C, -2, lo: 5, hi: 1), 5);
    expect(bisect_left(C, -1, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 0, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 1, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 2, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 3, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 4, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 5, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 6, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 7, lo: 5, hi: 1), 5);
    expect(bisect_left(C, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_left for D lo=5 hi=1', () {
    expect(bisect_left(D, -2, lo: 5, hi: 1), 5);
    expect(bisect_left(D, -1, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 0, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 1, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 2, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 3, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 4, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 5, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 6, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 7, lo: 5, hi: 1), 5);
    expect(bisect_left(D, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_left for E lo=5 hi=1', () {
    expect(bisect_left(E, -2, lo: 5, hi: 1), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 4, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 5, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 6, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 7, lo: 5, hi: 1), 5);
    expect(bisect_left(E, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_left for A lo=6 hi=1', () {
    expect(bisect_left(A, -2, lo: 6, hi: 1), 6);
    expect(bisect_left(A, -1, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 0, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 1, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 2, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 3, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 4, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 5, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 6, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 7, lo: 6, hi: 1), 6);
    expect(bisect_left(A, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_left for B lo=6 hi=1', () {
    expect(bisect_left(B, -2, lo: 6, hi: 1), 6);
    expect(bisect_left(B, -1, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 0, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 1, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 2, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 3, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 4, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 5, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 6, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 7, lo: 6, hi: 1), 6);
    expect(bisect_left(B, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_left for C lo=6 hi=1', () {
    expect(bisect_left(C, -2, lo: 6, hi: 1), 6);
    expect(bisect_left(C, -1, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 0, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 1, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 2, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 3, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 4, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 5, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 6, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 7, lo: 6, hi: 1), 6);
    expect(bisect_left(C, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_left for D lo=6 hi=1', () {
    expect(bisect_left(D, -2, lo: 6, hi: 1), 6);
    expect(bisect_left(D, -1, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 0, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 1, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 2, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 3, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 4, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 5, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 6, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 7, lo: 6, hi: 1), 6);
    expect(bisect_left(D, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_left for E lo=6 hi=1', () {
    expect(bisect_left(E, -2, lo: 6, hi: 1), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 5, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 6, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 7, lo: 6, hi: 1), 6);
    expect(bisect_left(E, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_left for A lo=7 hi=1', () {
    expect(bisect_left(A, -2, lo: 7, hi: 1), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 1), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_left for B lo=7 hi=1', () {
    expect(bisect_left(B, -2, lo: 7, hi: 1), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 1), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_left for C lo=7 hi=1', () {
    expect(bisect_left(C, -2, lo: 7, hi: 1), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 1), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_left for D lo=7 hi=1', () {
    expect(bisect_left(D, -2, lo: 7, hi: 1), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 1), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_left for E lo=7 hi=1', () {
    expect(bisect_left(E, -2, lo: 7, hi: 1), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 1), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_left for A lo=8 hi=1', () {
    expect(bisect_left(A, -2, lo: 8, hi: 1), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 1), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_left for B lo=8 hi=1', () {
    expect(bisect_left(B, -2, lo: 8, hi: 1), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 1), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_left for C lo=8 hi=1', () {
    expect(bisect_left(C, -2, lo: 8, hi: 1), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 1), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_left for D lo=8 hi=1', () {
    expect(bisect_left(D, -2, lo: 8, hi: 1), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 1), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_left for E lo=8 hi=1', () {
    expect(bisect_left(E, -2, lo: 8, hi: 1), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 1), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_left for A lo=9 hi=1', () {
    expect(bisect_left(A, -2, lo: 9, hi: 1), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 1), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_left for B lo=9 hi=1', () {
    expect(bisect_left(B, -2, lo: 9, hi: 1), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 1), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_left for C lo=9 hi=1', () {
    expect(bisect_left(C, -2, lo: 9, hi: 1), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 1), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_left for D lo=9 hi=1', () {
    expect(bisect_left(D, -2, lo: 9, hi: 1), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 1), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_left for E lo=9 hi=1', () {
    expect(bisect_left(E, -2, lo: 9, hi: 1), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 1), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_left for A lo=None hi=2', () {
    expect(() => bisect_left(A, -2, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 2), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=2', () {
    expect(() => bisect_left(B, -2, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 2), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=2', () {
    expect(bisect_left(C, -2, hi: 2), 0);
    expect(bisect_left(C, -1, hi: 2), 0);
    expect(bisect_left(C, 0, hi: 2), 0);
    expect(bisect_left(C, 1, hi: 2), 0);
    expect(bisect_left(C, 2, hi: 2), 0);
    expect(bisect_left(C, 3, hi: 2), 0);
    expect(bisect_left(C, 4, hi: 2), 0);
    expect(bisect_left(C, 5, hi: 2), 1);
    expect(bisect_left(C, 6, hi: 2), 2);
    expect(bisect_left(C, 7, hi: 2), 2);
    expect(bisect_left(C, 8, hi: 2), 2);
  });

  test('bisect_left for D lo=None hi=2', () {
    expect(bisect_left(D, -2, hi: 2), 0);
    expect(bisect_left(D, -1, hi: 2), 0);
    expect(bisect_left(D, 0, hi: 2), 0);
    expect(bisect_left(D, 1, hi: 2), 0);
    expect(bisect_left(D, 2, hi: 2), 0);
    expect(bisect_left(D, 3, hi: 2), 0);
    expect(bisect_left(D, 4, hi: 2), 1);
    expect(bisect_left(D, 5, hi: 2), 2);
    expect(bisect_left(D, 6, hi: 2), 2);
    expect(bisect_left(D, 7, hi: 2), 2);
    expect(bisect_left(D, 8, hi: 2), 2);
  });

  test('bisect_left for E lo=None hi=2', () {
    expect(bisect_left(E, -2, hi: 2), 0);
    expect(bisect_left(E, -1, hi: 2), 0);
    expect(bisect_left(E, 0, hi: 2), 0);
    expect(bisect_left(E, 1, hi: 2), 1);
    expect(bisect_left(E, 2, hi: 2), 2);
    expect(bisect_left(E, 3, hi: 2), 2);
    expect(bisect_left(E, 4, hi: 2), 2);
    expect(bisect_left(E, 5, hi: 2), 2);
    expect(bisect_left(E, 6, hi: 2), 2);
    expect(bisect_left(E, 7, hi: 2), 2);
    expect(bisect_left(E, 8, hi: 2), 2);
  });

  test('bisect_left for A lo=0 hi=2', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=2', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=2', () {
    expect(bisect_left(C, -2, lo: 0, hi: 2), 0);
    expect(bisect_left(C, -1, lo: 0, hi: 2), 0);
    expect(bisect_left(C, 0, lo: 0, hi: 2), 0);
    expect(bisect_left(C, 1, lo: 0, hi: 2), 0);
    expect(bisect_left(C, 2, lo: 0, hi: 2), 0);
    expect(bisect_left(C, 3, lo: 0, hi: 2), 0);
    expect(bisect_left(C, 4, lo: 0, hi: 2), 0);
    expect(bisect_left(C, 5, lo: 0, hi: 2), 1);
    expect(bisect_left(C, 6, lo: 0, hi: 2), 2);
    expect(bisect_left(C, 7, lo: 0, hi: 2), 2);
    expect(bisect_left(C, 8, lo: 0, hi: 2), 2);
  });

  test('bisect_left for D lo=0 hi=2', () {
    expect(bisect_left(D, -2, lo: 0, hi: 2), 0);
    expect(bisect_left(D, -1, lo: 0, hi: 2), 0);
    expect(bisect_left(D, 0, lo: 0, hi: 2), 0);
    expect(bisect_left(D, 1, lo: 0, hi: 2), 0);
    expect(bisect_left(D, 2, lo: 0, hi: 2), 0);
    expect(bisect_left(D, 3, lo: 0, hi: 2), 0);
    expect(bisect_left(D, 4, lo: 0, hi: 2), 1);
    expect(bisect_left(D, 5, lo: 0, hi: 2), 2);
    expect(bisect_left(D, 6, lo: 0, hi: 2), 2);
    expect(bisect_left(D, 7, lo: 0, hi: 2), 2);
    expect(bisect_left(D, 8, lo: 0, hi: 2), 2);
  });

  test('bisect_left for E lo=0 hi=2', () {
    expect(bisect_left(E, -2, lo: 0, hi: 2), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 2), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 2), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 2), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 2), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 2), 2);
    expect(bisect_left(E, 4, lo: 0, hi: 2), 2);
    expect(bisect_left(E, 5, lo: 0, hi: 2), 2);
    expect(bisect_left(E, 6, lo: 0, hi: 2), 2);
    expect(bisect_left(E, 7, lo: 0, hi: 2), 2);
    expect(bisect_left(E, 8, lo: 0, hi: 2), 2);
  });

  test('bisect_left for A lo=1 hi=2', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=2', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=2', () {
    expect(bisect_left(C, -2, lo: 1, hi: 2), 1);
    expect(bisect_left(C, -1, lo: 1, hi: 2), 1);
    expect(bisect_left(C, 0, lo: 1, hi: 2), 1);
    expect(bisect_left(C, 1, lo: 1, hi: 2), 1);
    expect(bisect_left(C, 2, lo: 1, hi: 2), 1);
    expect(bisect_left(C, 3, lo: 1, hi: 2), 1);
    expect(bisect_left(C, 4, lo: 1, hi: 2), 1);
    expect(bisect_left(C, 5, lo: 1, hi: 2), 1);
    expect(bisect_left(C, 6, lo: 1, hi: 2), 2);
    expect(bisect_left(C, 7, lo: 1, hi: 2), 2);
    expect(bisect_left(C, 8, lo: 1, hi: 2), 2);
  });

  test('bisect_left for D lo=1 hi=2', () {
    expect(bisect_left(D, -2, lo: 1, hi: 2), 1);
    expect(bisect_left(D, -1, lo: 1, hi: 2), 1);
    expect(bisect_left(D, 0, lo: 1, hi: 2), 1);
    expect(bisect_left(D, 1, lo: 1, hi: 2), 1);
    expect(bisect_left(D, 2, lo: 1, hi: 2), 1);
    expect(bisect_left(D, 3, lo: 1, hi: 2), 1);
    expect(bisect_left(D, 4, lo: 1, hi: 2), 1);
    expect(bisect_left(D, 5, lo: 1, hi: 2), 2);
    expect(bisect_left(D, 6, lo: 1, hi: 2), 2);
    expect(bisect_left(D, 7, lo: 1, hi: 2), 2);
    expect(bisect_left(D, 8, lo: 1, hi: 2), 2);
  });

  test('bisect_left for E lo=1 hi=2', () {
    expect(bisect_left(E, -2, lo: 1, hi: 2), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 2), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 2), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 2), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 2), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 2), 2);
    expect(bisect_left(E, 4, lo: 1, hi: 2), 2);
    expect(bisect_left(E, 5, lo: 1, hi: 2), 2);
    expect(bisect_left(E, 6, lo: 1, hi: 2), 2);
    expect(bisect_left(E, 7, lo: 1, hi: 2), 2);
    expect(bisect_left(E, 8, lo: 1, hi: 2), 2);
  });

  test('bisect_left for A lo=2 hi=2', () {
    expect(bisect_left(A, -2, lo: 2, hi: 2), 2);
    expect(bisect_left(A, -1, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 0, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 1, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 2, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 3, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 4, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 5, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 6, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 7, lo: 2, hi: 2), 2);
    expect(bisect_left(A, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_left for B lo=2 hi=2', () {
    expect(bisect_left(B, -2, lo: 2, hi: 2), 2);
    expect(bisect_left(B, -1, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 0, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 1, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 2, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 3, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 4, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 5, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 6, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 7, lo: 2, hi: 2), 2);
    expect(bisect_left(B, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_left for C lo=2 hi=2', () {
    expect(bisect_left(C, -2, lo: 2, hi: 2), 2);
    expect(bisect_left(C, -1, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 0, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 1, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 2, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 3, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 4, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 5, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 6, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 7, lo: 2, hi: 2), 2);
    expect(bisect_left(C, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_left for D lo=2 hi=2', () {
    expect(bisect_left(D, -2, lo: 2, hi: 2), 2);
    expect(bisect_left(D, -1, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 0, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 1, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 2, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 3, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 4, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 5, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 6, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 7, lo: 2, hi: 2), 2);
    expect(bisect_left(D, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_left for E lo=2 hi=2', () {
    expect(bisect_left(E, -2, lo: 2, hi: 2), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 4, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 5, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 6, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 7, lo: 2, hi: 2), 2);
    expect(bisect_left(E, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_left for A lo=3 hi=2', () {
    expect(bisect_left(A, -2, lo: 3, hi: 2), 3);
    expect(bisect_left(A, -1, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 0, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 1, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 2, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 3, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 4, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 5, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 6, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 7, lo: 3, hi: 2), 3);
    expect(bisect_left(A, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_left for B lo=3 hi=2', () {
    expect(bisect_left(B, -2, lo: 3, hi: 2), 3);
    expect(bisect_left(B, -1, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 0, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 1, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 2, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 3, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 4, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 5, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 6, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 7, lo: 3, hi: 2), 3);
    expect(bisect_left(B, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_left for C lo=3 hi=2', () {
    expect(bisect_left(C, -2, lo: 3, hi: 2), 3);
    expect(bisect_left(C, -1, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 0, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 1, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 2, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 3, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 4, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 5, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 6, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 7, lo: 3, hi: 2), 3);
    expect(bisect_left(C, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_left for D lo=3 hi=2', () {
    expect(bisect_left(D, -2, lo: 3, hi: 2), 3);
    expect(bisect_left(D, -1, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 0, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 1, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 2, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 3, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 4, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 5, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 6, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 7, lo: 3, hi: 2), 3);
    expect(bisect_left(D, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_left for E lo=3 hi=2', () {
    expect(bisect_left(E, -2, lo: 3, hi: 2), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 4, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 5, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 6, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 7, lo: 3, hi: 2), 3);
    expect(bisect_left(E, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_left for A lo=4 hi=2', () {
    expect(bisect_left(A, -2, lo: 4, hi: 2), 4);
    expect(bisect_left(A, -1, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 0, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 1, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 2, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 3, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 4, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 5, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 6, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 7, lo: 4, hi: 2), 4);
    expect(bisect_left(A, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_left for B lo=4 hi=2', () {
    expect(bisect_left(B, -2, lo: 4, hi: 2), 4);
    expect(bisect_left(B, -1, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 0, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 1, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 2, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 3, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 4, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 5, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 6, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 7, lo: 4, hi: 2), 4);
    expect(bisect_left(B, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_left for C lo=4 hi=2', () {
    expect(bisect_left(C, -2, lo: 4, hi: 2), 4);
    expect(bisect_left(C, -1, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 0, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 1, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 2, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 3, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 4, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 5, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 6, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 7, lo: 4, hi: 2), 4);
    expect(bisect_left(C, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_left for D lo=4 hi=2', () {
    expect(bisect_left(D, -2, lo: 4, hi: 2), 4);
    expect(bisect_left(D, -1, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 0, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 1, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 2, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 3, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 4, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 5, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 6, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 7, lo: 4, hi: 2), 4);
    expect(bisect_left(D, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_left for E lo=4 hi=2', () {
    expect(bisect_left(E, -2, lo: 4, hi: 2), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 4, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 5, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 6, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 7, lo: 4, hi: 2), 4);
    expect(bisect_left(E, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_left for A lo=5 hi=2', () {
    expect(bisect_left(A, -2, lo: 5, hi: 2), 5);
    expect(bisect_left(A, -1, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 0, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 1, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 2, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 3, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 4, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 5, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 6, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 7, lo: 5, hi: 2), 5);
    expect(bisect_left(A, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_left for B lo=5 hi=2', () {
    expect(bisect_left(B, -2, lo: 5, hi: 2), 5);
    expect(bisect_left(B, -1, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 0, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 1, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 2, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 3, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 4, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 5, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 6, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 7, lo: 5, hi: 2), 5);
    expect(bisect_left(B, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_left for C lo=5 hi=2', () {
    expect(bisect_left(C, -2, lo: 5, hi: 2), 5);
    expect(bisect_left(C, -1, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 0, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 1, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 2, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 3, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 4, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 5, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 6, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 7, lo: 5, hi: 2), 5);
    expect(bisect_left(C, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_left for D lo=5 hi=2', () {
    expect(bisect_left(D, -2, lo: 5, hi: 2), 5);
    expect(bisect_left(D, -1, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 0, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 1, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 2, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 3, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 4, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 5, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 6, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 7, lo: 5, hi: 2), 5);
    expect(bisect_left(D, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_left for E lo=5 hi=2', () {
    expect(bisect_left(E, -2, lo: 5, hi: 2), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 4, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 5, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 6, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 7, lo: 5, hi: 2), 5);
    expect(bisect_left(E, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_left for A lo=6 hi=2', () {
    expect(bisect_left(A, -2, lo: 6, hi: 2), 6);
    expect(bisect_left(A, -1, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 0, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 1, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 2, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 3, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 4, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 5, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 6, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 7, lo: 6, hi: 2), 6);
    expect(bisect_left(A, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_left for B lo=6 hi=2', () {
    expect(bisect_left(B, -2, lo: 6, hi: 2), 6);
    expect(bisect_left(B, -1, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 0, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 1, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 2, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 3, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 4, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 5, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 6, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 7, lo: 6, hi: 2), 6);
    expect(bisect_left(B, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_left for C lo=6 hi=2', () {
    expect(bisect_left(C, -2, lo: 6, hi: 2), 6);
    expect(bisect_left(C, -1, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 0, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 1, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 2, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 3, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 4, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 5, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 6, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 7, lo: 6, hi: 2), 6);
    expect(bisect_left(C, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_left for D lo=6 hi=2', () {
    expect(bisect_left(D, -2, lo: 6, hi: 2), 6);
    expect(bisect_left(D, -1, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 0, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 1, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 2, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 3, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 4, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 5, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 6, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 7, lo: 6, hi: 2), 6);
    expect(bisect_left(D, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_left for E lo=6 hi=2', () {
    expect(bisect_left(E, -2, lo: 6, hi: 2), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 5, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 6, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 7, lo: 6, hi: 2), 6);
    expect(bisect_left(E, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_left for A lo=7 hi=2', () {
    expect(bisect_left(A, -2, lo: 7, hi: 2), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 2), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_left for B lo=7 hi=2', () {
    expect(bisect_left(B, -2, lo: 7, hi: 2), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 2), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_left for C lo=7 hi=2', () {
    expect(bisect_left(C, -2, lo: 7, hi: 2), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 2), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_left for D lo=7 hi=2', () {
    expect(bisect_left(D, -2, lo: 7, hi: 2), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 2), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_left for E lo=7 hi=2', () {
    expect(bisect_left(E, -2, lo: 7, hi: 2), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 2), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_left for A lo=8 hi=2', () {
    expect(bisect_left(A, -2, lo: 8, hi: 2), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 2), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_left for B lo=8 hi=2', () {
    expect(bisect_left(B, -2, lo: 8, hi: 2), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 2), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_left for C lo=8 hi=2', () {
    expect(bisect_left(C, -2, lo: 8, hi: 2), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 2), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_left for D lo=8 hi=2', () {
    expect(bisect_left(D, -2, lo: 8, hi: 2), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 2), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_left for E lo=8 hi=2', () {
    expect(bisect_left(E, -2, lo: 8, hi: 2), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 2), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_left for A lo=9 hi=2', () {
    expect(bisect_left(A, -2, lo: 9, hi: 2), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 2), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_left for B lo=9 hi=2', () {
    expect(bisect_left(B, -2, lo: 9, hi: 2), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 2), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_left for C lo=9 hi=2', () {
    expect(bisect_left(C, -2, lo: 9, hi: 2), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 2), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_left for D lo=9 hi=2', () {
    expect(bisect_left(D, -2, lo: 9, hi: 2), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 2), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_left for E lo=9 hi=2', () {
    expect(bisect_left(E, -2, lo: 9, hi: 2), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 2), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_left for A lo=None hi=3', () {
    expect(() => bisect_left(A, -2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 3), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=3', () {
    expect(() => bisect_left(B, -2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 3), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=3', () {
    expect(bisect_left(C, -2, hi: 3), 0);
    expect(bisect_left(C, -1, hi: 3), 0);
    expect(bisect_left(C, 0, hi: 3), 0);
    expect(bisect_left(C, 1, hi: 3), 0);
    expect(bisect_left(C, 2, hi: 3), 0);
    expect(bisect_left(C, 3, hi: 3), 0);
    expect(bisect_left(C, 4, hi: 3), 0);
    expect(bisect_left(C, 5, hi: 3), 1);
    expect(() => bisect_left(C, 6, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 7, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 8, hi: 3), throwsRangeError);
  });

  test('bisect_left for D lo=None hi=3', () {
    expect(bisect_left(D, -2, hi: 3), 0);
    expect(bisect_left(D, -1, hi: 3), 0);
    expect(bisect_left(D, 0, hi: 3), 0);
    expect(bisect_left(D, 1, hi: 3), 0);
    expect(bisect_left(D, 2, hi: 3), 0);
    expect(bisect_left(D, 3, hi: 3), 0);
    expect(bisect_left(D, 4, hi: 3), 1);
    expect(bisect_left(D, 5, hi: 3), 2);
    expect(bisect_left(D, 6, hi: 3), 3);
    expect(bisect_left(D, 7, hi: 3), 3);
    expect(bisect_left(D, 8, hi: 3), 3);
  });

  test('bisect_left for E lo=None hi=3', () {
    expect(bisect_left(E, -2, hi: 3), 0);
    expect(bisect_left(E, -1, hi: 3), 0);
    expect(bisect_left(E, 0, hi: 3), 0);
    expect(bisect_left(E, 1, hi: 3), 1);
    expect(bisect_left(E, 2, hi: 3), 2);
    expect(bisect_left(E, 3, hi: 3), 3);
    expect(bisect_left(E, 4, hi: 3), 3);
    expect(bisect_left(E, 5, hi: 3), 3);
    expect(bisect_left(E, 6, hi: 3), 3);
    expect(bisect_left(E, 7, hi: 3), 3);
    expect(bisect_left(E, 8, hi: 3), 3);
  });

  test('bisect_left for A lo=0 hi=3', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=3', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=3', () {
    expect(bisect_left(C, -2, lo: 0, hi: 3), 0);
    expect(bisect_left(C, -1, lo: 0, hi: 3), 0);
    expect(bisect_left(C, 0, lo: 0, hi: 3), 0);
    expect(bisect_left(C, 1, lo: 0, hi: 3), 0);
    expect(bisect_left(C, 2, lo: 0, hi: 3), 0);
    expect(bisect_left(C, 3, lo: 0, hi: 3), 0);
    expect(bisect_left(C, 4, lo: 0, hi: 3), 0);
    expect(bisect_left(C, 5, lo: 0, hi: 3), 1);
    expect(() => bisect_left(C, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect_left for D lo=0 hi=3', () {
    expect(bisect_left(D, -2, lo: 0, hi: 3), 0);
    expect(bisect_left(D, -1, lo: 0, hi: 3), 0);
    expect(bisect_left(D, 0, lo: 0, hi: 3), 0);
    expect(bisect_left(D, 1, lo: 0, hi: 3), 0);
    expect(bisect_left(D, 2, lo: 0, hi: 3), 0);
    expect(bisect_left(D, 3, lo: 0, hi: 3), 0);
    expect(bisect_left(D, 4, lo: 0, hi: 3), 1);
    expect(bisect_left(D, 5, lo: 0, hi: 3), 2);
    expect(bisect_left(D, 6, lo: 0, hi: 3), 3);
    expect(bisect_left(D, 7, lo: 0, hi: 3), 3);
    expect(bisect_left(D, 8, lo: 0, hi: 3), 3);
  });

  test('bisect_left for E lo=0 hi=3', () {
    expect(bisect_left(E, -2, lo: 0, hi: 3), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 3), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 3), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 3), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 3), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 3), 3);
    expect(bisect_left(E, 4, lo: 0, hi: 3), 3);
    expect(bisect_left(E, 5, lo: 0, hi: 3), 3);
    expect(bisect_left(E, 6, lo: 0, hi: 3), 3);
    expect(bisect_left(E, 7, lo: 0, hi: 3), 3);
    expect(bisect_left(E, 8, lo: 0, hi: 3), 3);
  });

  test('bisect_left for A lo=1 hi=3', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=3', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=3', () {
    expect(() => bisect_left(C, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect_left for D lo=1 hi=3', () {
    expect(bisect_left(D, -2, lo: 1, hi: 3), 1);
    expect(bisect_left(D, -1, lo: 1, hi: 3), 1);
    expect(bisect_left(D, 0, lo: 1, hi: 3), 1);
    expect(bisect_left(D, 1, lo: 1, hi: 3), 1);
    expect(bisect_left(D, 2, lo: 1, hi: 3), 1);
    expect(bisect_left(D, 3, lo: 1, hi: 3), 1);
    expect(bisect_left(D, 4, lo: 1, hi: 3), 1);
    expect(bisect_left(D, 5, lo: 1, hi: 3), 2);
    expect(bisect_left(D, 6, lo: 1, hi: 3), 3);
    expect(bisect_left(D, 7, lo: 1, hi: 3), 3);
    expect(bisect_left(D, 8, lo: 1, hi: 3), 3);
  });

  test('bisect_left for E lo=1 hi=3', () {
    expect(bisect_left(E, -2, lo: 1, hi: 3), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 3), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 3), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 3), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 3), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 3), 3);
    expect(bisect_left(E, 4, lo: 1, hi: 3), 3);
    expect(bisect_left(E, 5, lo: 1, hi: 3), 3);
    expect(bisect_left(E, 6, lo: 1, hi: 3), 3);
    expect(bisect_left(E, 7, lo: 1, hi: 3), 3);
    expect(bisect_left(E, 8, lo: 1, hi: 3), 3);
  });

  test('bisect_left for A lo=2 hi=3', () {
    expect(() => bisect_left(A, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect_left for B lo=2 hi=3', () {
    expect(() => bisect_left(B, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect_left for C lo=2 hi=3', () {
    expect(() => bisect_left(C, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect_left for D lo=2 hi=3', () {
    expect(bisect_left(D, -2, lo: 2, hi: 3), 2);
    expect(bisect_left(D, -1, lo: 2, hi: 3), 2);
    expect(bisect_left(D, 0, lo: 2, hi: 3), 2);
    expect(bisect_left(D, 1, lo: 2, hi: 3), 2);
    expect(bisect_left(D, 2, lo: 2, hi: 3), 2);
    expect(bisect_left(D, 3, lo: 2, hi: 3), 2);
    expect(bisect_left(D, 4, lo: 2, hi: 3), 2);
    expect(bisect_left(D, 5, lo: 2, hi: 3), 2);
    expect(bisect_left(D, 6, lo: 2, hi: 3), 3);
    expect(bisect_left(D, 7, lo: 2, hi: 3), 3);
    expect(bisect_left(D, 8, lo: 2, hi: 3), 3);
  });

  test('bisect_left for E lo=2 hi=3', () {
    expect(bisect_left(E, -2, lo: 2, hi: 3), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 3), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 3), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 3), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 3), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 3), 3);
    expect(bisect_left(E, 4, lo: 2, hi: 3), 3);
    expect(bisect_left(E, 5, lo: 2, hi: 3), 3);
    expect(bisect_left(E, 6, lo: 2, hi: 3), 3);
    expect(bisect_left(E, 7, lo: 2, hi: 3), 3);
    expect(bisect_left(E, 8, lo: 2, hi: 3), 3);
  });

  test('bisect_left for A lo=3 hi=3', () {
    expect(bisect_left(A, -2, lo: 3, hi: 3), 3);
    expect(bisect_left(A, -1, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 0, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 1, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 2, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 3, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 4, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 5, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 6, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 7, lo: 3, hi: 3), 3);
    expect(bisect_left(A, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_left for B lo=3 hi=3', () {
    expect(bisect_left(B, -2, lo: 3, hi: 3), 3);
    expect(bisect_left(B, -1, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 0, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 1, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 2, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 3, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 4, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 5, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 6, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 7, lo: 3, hi: 3), 3);
    expect(bisect_left(B, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_left for C lo=3 hi=3', () {
    expect(bisect_left(C, -2, lo: 3, hi: 3), 3);
    expect(bisect_left(C, -1, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 0, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 1, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 2, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 3, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 4, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 5, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 6, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 7, lo: 3, hi: 3), 3);
    expect(bisect_left(C, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_left for D lo=3 hi=3', () {
    expect(bisect_left(D, -2, lo: 3, hi: 3), 3);
    expect(bisect_left(D, -1, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 0, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 1, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 2, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 3, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 4, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 5, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 6, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 7, lo: 3, hi: 3), 3);
    expect(bisect_left(D, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_left for E lo=3 hi=3', () {
    expect(bisect_left(E, -2, lo: 3, hi: 3), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 4, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 5, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 6, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 7, lo: 3, hi: 3), 3);
    expect(bisect_left(E, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_left for A lo=4 hi=3', () {
    expect(bisect_left(A, -2, lo: 4, hi: 3), 4);
    expect(bisect_left(A, -1, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 0, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 1, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 2, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 3, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 4, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 5, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 6, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 7, lo: 4, hi: 3), 4);
    expect(bisect_left(A, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_left for B lo=4 hi=3', () {
    expect(bisect_left(B, -2, lo: 4, hi: 3), 4);
    expect(bisect_left(B, -1, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 0, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 1, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 2, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 3, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 4, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 5, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 6, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 7, lo: 4, hi: 3), 4);
    expect(bisect_left(B, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_left for C lo=4 hi=3', () {
    expect(bisect_left(C, -2, lo: 4, hi: 3), 4);
    expect(bisect_left(C, -1, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 0, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 1, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 2, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 3, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 4, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 5, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 6, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 7, lo: 4, hi: 3), 4);
    expect(bisect_left(C, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_left for D lo=4 hi=3', () {
    expect(bisect_left(D, -2, lo: 4, hi: 3), 4);
    expect(bisect_left(D, -1, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 0, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 1, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 2, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 3, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 4, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 5, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 6, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 7, lo: 4, hi: 3), 4);
    expect(bisect_left(D, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_left for E lo=4 hi=3', () {
    expect(bisect_left(E, -2, lo: 4, hi: 3), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 4, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 5, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 6, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 7, lo: 4, hi: 3), 4);
    expect(bisect_left(E, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_left for A lo=5 hi=3', () {
    expect(bisect_left(A, -2, lo: 5, hi: 3), 5);
    expect(bisect_left(A, -1, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 0, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 1, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 2, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 3, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 4, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 5, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 6, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 7, lo: 5, hi: 3), 5);
    expect(bisect_left(A, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_left for B lo=5 hi=3', () {
    expect(bisect_left(B, -2, lo: 5, hi: 3), 5);
    expect(bisect_left(B, -1, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 0, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 1, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 2, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 3, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 4, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 5, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 6, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 7, lo: 5, hi: 3), 5);
    expect(bisect_left(B, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_left for C lo=5 hi=3', () {
    expect(bisect_left(C, -2, lo: 5, hi: 3), 5);
    expect(bisect_left(C, -1, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 0, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 1, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 2, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 3, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 4, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 5, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 6, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 7, lo: 5, hi: 3), 5);
    expect(bisect_left(C, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_left for D lo=5 hi=3', () {
    expect(bisect_left(D, -2, lo: 5, hi: 3), 5);
    expect(bisect_left(D, -1, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 0, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 1, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 2, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 3, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 4, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 5, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 6, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 7, lo: 5, hi: 3), 5);
    expect(bisect_left(D, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_left for E lo=5 hi=3', () {
    expect(bisect_left(E, -2, lo: 5, hi: 3), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 4, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 5, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 6, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 7, lo: 5, hi: 3), 5);
    expect(bisect_left(E, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_left for A lo=6 hi=3', () {
    expect(bisect_left(A, -2, lo: 6, hi: 3), 6);
    expect(bisect_left(A, -1, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 0, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 1, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 2, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 3, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 4, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 5, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 6, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 7, lo: 6, hi: 3), 6);
    expect(bisect_left(A, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_left for B lo=6 hi=3', () {
    expect(bisect_left(B, -2, lo: 6, hi: 3), 6);
    expect(bisect_left(B, -1, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 0, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 1, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 2, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 3, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 4, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 5, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 6, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 7, lo: 6, hi: 3), 6);
    expect(bisect_left(B, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_left for C lo=6 hi=3', () {
    expect(bisect_left(C, -2, lo: 6, hi: 3), 6);
    expect(bisect_left(C, -1, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 0, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 1, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 2, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 3, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 4, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 5, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 6, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 7, lo: 6, hi: 3), 6);
    expect(bisect_left(C, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_left for D lo=6 hi=3', () {
    expect(bisect_left(D, -2, lo: 6, hi: 3), 6);
    expect(bisect_left(D, -1, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 0, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 1, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 2, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 3, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 4, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 5, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 6, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 7, lo: 6, hi: 3), 6);
    expect(bisect_left(D, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_left for E lo=6 hi=3', () {
    expect(bisect_left(E, -2, lo: 6, hi: 3), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 5, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 6, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 7, lo: 6, hi: 3), 6);
    expect(bisect_left(E, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_left for A lo=7 hi=3', () {
    expect(bisect_left(A, -2, lo: 7, hi: 3), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 3), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_left for B lo=7 hi=3', () {
    expect(bisect_left(B, -2, lo: 7, hi: 3), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 3), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_left for C lo=7 hi=3', () {
    expect(bisect_left(C, -2, lo: 7, hi: 3), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 3), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_left for D lo=7 hi=3', () {
    expect(bisect_left(D, -2, lo: 7, hi: 3), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 3), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_left for E lo=7 hi=3', () {
    expect(bisect_left(E, -2, lo: 7, hi: 3), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 3), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_left for A lo=8 hi=3', () {
    expect(bisect_left(A, -2, lo: 8, hi: 3), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 3), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_left for B lo=8 hi=3', () {
    expect(bisect_left(B, -2, lo: 8, hi: 3), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 3), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_left for C lo=8 hi=3', () {
    expect(bisect_left(C, -2, lo: 8, hi: 3), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 3), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_left for D lo=8 hi=3', () {
    expect(bisect_left(D, -2, lo: 8, hi: 3), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 3), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_left for E lo=8 hi=3', () {
    expect(bisect_left(E, -2, lo: 8, hi: 3), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 3), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_left for A lo=9 hi=3', () {
    expect(bisect_left(A, -2, lo: 9, hi: 3), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 3), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_left for B lo=9 hi=3', () {
    expect(bisect_left(B, -2, lo: 9, hi: 3), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 3), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_left for C lo=9 hi=3', () {
    expect(bisect_left(C, -2, lo: 9, hi: 3), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 3), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_left for D lo=9 hi=3', () {
    expect(bisect_left(D, -2, lo: 9, hi: 3), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 3), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_left for E lo=9 hi=3', () {
    expect(bisect_left(E, -2, lo: 9, hi: 3), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 3), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_left for A lo=None hi=4', () {
    expect(() => bisect_left(A, -2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 4), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=4', () {
    expect(() => bisect_left(B, -2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 4), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=4', () {
    expect(() => bisect_left(C, -2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, -1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 4, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 5, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 6, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 7, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 8, hi: 4), throwsRangeError);
  });

  test('bisect_left for D lo=None hi=4', () {
    expect(bisect_left(D, -2, hi: 4), 0);
    expect(bisect_left(D, -1, hi: 4), 0);
    expect(bisect_left(D, 0, hi: 4), 0);
    expect(bisect_left(D, 1, hi: 4), 0);
    expect(bisect_left(D, 2, hi: 4), 0);
    expect(bisect_left(D, 3, hi: 4), 0);
    expect(bisect_left(D, 4, hi: 4), 1);
    expect(bisect_left(D, 5, hi: 4), 2);
    expect(() => bisect_left(D, 6, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 7, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 8, hi: 4), throwsRangeError);
  });

  test('bisect_left for E lo=None hi=4', () {
    expect(bisect_left(E, -2, hi: 4), 0);
    expect(bisect_left(E, -1, hi: 4), 0);
    expect(bisect_left(E, 0, hi: 4), 0);
    expect(bisect_left(E, 1, hi: 4), 1);
    expect(bisect_left(E, 2, hi: 4), 2);
    expect(bisect_left(E, 3, hi: 4), 4);
    expect(bisect_left(E, 4, hi: 4), 4);
    expect(bisect_left(E, 5, hi: 4), 4);
    expect(bisect_left(E, 6, hi: 4), 4);
    expect(bisect_left(E, 7, hi: 4), 4);
    expect(bisect_left(E, 8, hi: 4), 4);
  });

  test('bisect_left for A lo=0 hi=4', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=4', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=4', () {
    expect(() => bisect_left(C, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_left for D lo=0 hi=4', () {
    expect(bisect_left(D, -2, lo: 0, hi: 4), 0);
    expect(bisect_left(D, -1, lo: 0, hi: 4), 0);
    expect(bisect_left(D, 0, lo: 0, hi: 4), 0);
    expect(bisect_left(D, 1, lo: 0, hi: 4), 0);
    expect(bisect_left(D, 2, lo: 0, hi: 4), 0);
    expect(bisect_left(D, 3, lo: 0, hi: 4), 0);
    expect(bisect_left(D, 4, lo: 0, hi: 4), 1);
    expect(bisect_left(D, 5, lo: 0, hi: 4), 2);
    expect(() => bisect_left(D, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_left for E lo=0 hi=4', () {
    expect(bisect_left(E, -2, lo: 0, hi: 4), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 4), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 4), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 4), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 4), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 4), 4);
    expect(bisect_left(E, 4, lo: 0, hi: 4), 4);
    expect(bisect_left(E, 5, lo: 0, hi: 4), 4);
    expect(bisect_left(E, 6, lo: 0, hi: 4), 4);
    expect(bisect_left(E, 7, lo: 0, hi: 4), 4);
    expect(bisect_left(E, 8, lo: 0, hi: 4), 4);
  });

  test('bisect_left for A lo=1 hi=4', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=4', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=4', () {
    expect(() => bisect_left(C, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_left for D lo=1 hi=4', () {
    expect(bisect_left(D, -2, lo: 1, hi: 4), 1);
    expect(bisect_left(D, -1, lo: 1, hi: 4), 1);
    expect(bisect_left(D, 0, lo: 1, hi: 4), 1);
    expect(bisect_left(D, 1, lo: 1, hi: 4), 1);
    expect(bisect_left(D, 2, lo: 1, hi: 4), 1);
    expect(bisect_left(D, 3, lo: 1, hi: 4), 1);
    expect(bisect_left(D, 4, lo: 1, hi: 4), 1);
    expect(bisect_left(D, 5, lo: 1, hi: 4), 2);
    expect(() => bisect_left(D, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_left for E lo=1 hi=4', () {
    expect(bisect_left(E, -2, lo: 1, hi: 4), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 4), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 4), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 4), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 4), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 4), 4);
    expect(bisect_left(E, 4, lo: 1, hi: 4), 4);
    expect(bisect_left(E, 5, lo: 1, hi: 4), 4);
    expect(bisect_left(E, 6, lo: 1, hi: 4), 4);
    expect(bisect_left(E, 7, lo: 1, hi: 4), 4);
    expect(bisect_left(E, 8, lo: 1, hi: 4), 4);
  });

  test('bisect_left for A lo=2 hi=4', () {
    expect(() => bisect_left(A, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_left for B lo=2 hi=4', () {
    expect(() => bisect_left(B, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_left for C lo=2 hi=4', () {
    expect(() => bisect_left(C, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_left for D lo=2 hi=4', () {
    expect(() => bisect_left(D, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_left for E lo=2 hi=4', () {
    expect(bisect_left(E, -2, lo: 2, hi: 4), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 4), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 4), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 4), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 4), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 4), 4);
    expect(bisect_left(E, 4, lo: 2, hi: 4), 4);
    expect(bisect_left(E, 5, lo: 2, hi: 4), 4);
    expect(bisect_left(E, 6, lo: 2, hi: 4), 4);
    expect(bisect_left(E, 7, lo: 2, hi: 4), 4);
    expect(bisect_left(E, 8, lo: 2, hi: 4), 4);
  });

  test('bisect_left for A lo=3 hi=4', () {
    expect(() => bisect_left(A, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_left for B lo=3 hi=4', () {
    expect(() => bisect_left(B, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_left for C lo=3 hi=4', () {
    expect(() => bisect_left(C, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_left for D lo=3 hi=4', () {
    expect(() => bisect_left(D, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_left for E lo=3 hi=4', () {
    expect(bisect_left(E, -2, lo: 3, hi: 4), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 4), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 4), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 4), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 4), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 4), 4);
    expect(bisect_left(E, 4, lo: 3, hi: 4), 4);
    expect(bisect_left(E, 5, lo: 3, hi: 4), 4);
    expect(bisect_left(E, 6, lo: 3, hi: 4), 4);
    expect(bisect_left(E, 7, lo: 3, hi: 4), 4);
    expect(bisect_left(E, 8, lo: 3, hi: 4), 4);
  });

  test('bisect_left for A lo=4 hi=4', () {
    expect(bisect_left(A, -2, lo: 4, hi: 4), 4);
    expect(bisect_left(A, -1, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 0, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 1, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 2, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 3, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 4, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 5, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 6, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 7, lo: 4, hi: 4), 4);
    expect(bisect_left(A, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_left for B lo=4 hi=4', () {
    expect(bisect_left(B, -2, lo: 4, hi: 4), 4);
    expect(bisect_left(B, -1, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 0, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 1, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 2, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 3, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 4, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 5, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 6, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 7, lo: 4, hi: 4), 4);
    expect(bisect_left(B, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_left for C lo=4 hi=4', () {
    expect(bisect_left(C, -2, lo: 4, hi: 4), 4);
    expect(bisect_left(C, -1, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 0, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 1, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 2, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 3, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 4, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 5, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 6, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 7, lo: 4, hi: 4), 4);
    expect(bisect_left(C, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_left for D lo=4 hi=4', () {
    expect(bisect_left(D, -2, lo: 4, hi: 4), 4);
    expect(bisect_left(D, -1, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 0, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 1, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 2, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 3, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 4, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 5, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 6, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 7, lo: 4, hi: 4), 4);
    expect(bisect_left(D, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_left for E lo=4 hi=4', () {
    expect(bisect_left(E, -2, lo: 4, hi: 4), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 4, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 5, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 6, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 7, lo: 4, hi: 4), 4);
    expect(bisect_left(E, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_left for A lo=5 hi=4', () {
    expect(bisect_left(A, -2, lo: 5, hi: 4), 5);
    expect(bisect_left(A, -1, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 0, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 1, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 2, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 3, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 4, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 5, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 6, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 7, lo: 5, hi: 4), 5);
    expect(bisect_left(A, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_left for B lo=5 hi=4', () {
    expect(bisect_left(B, -2, lo: 5, hi: 4), 5);
    expect(bisect_left(B, -1, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 0, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 1, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 2, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 3, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 4, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 5, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 6, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 7, lo: 5, hi: 4), 5);
    expect(bisect_left(B, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_left for C lo=5 hi=4', () {
    expect(bisect_left(C, -2, lo: 5, hi: 4), 5);
    expect(bisect_left(C, -1, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 0, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 1, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 2, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 3, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 4, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 5, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 6, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 7, lo: 5, hi: 4), 5);
    expect(bisect_left(C, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_left for D lo=5 hi=4', () {
    expect(bisect_left(D, -2, lo: 5, hi: 4), 5);
    expect(bisect_left(D, -1, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 0, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 1, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 2, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 3, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 4, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 5, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 6, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 7, lo: 5, hi: 4), 5);
    expect(bisect_left(D, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_left for E lo=5 hi=4', () {
    expect(bisect_left(E, -2, lo: 5, hi: 4), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 4, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 5, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 6, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 7, lo: 5, hi: 4), 5);
    expect(bisect_left(E, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_left for A lo=6 hi=4', () {
    expect(bisect_left(A, -2, lo: 6, hi: 4), 6);
    expect(bisect_left(A, -1, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 0, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 1, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 2, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 3, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 4, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 5, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 6, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 7, lo: 6, hi: 4), 6);
    expect(bisect_left(A, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_left for B lo=6 hi=4', () {
    expect(bisect_left(B, -2, lo: 6, hi: 4), 6);
    expect(bisect_left(B, -1, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 0, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 1, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 2, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 3, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 4, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 5, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 6, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 7, lo: 6, hi: 4), 6);
    expect(bisect_left(B, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_left for C lo=6 hi=4', () {
    expect(bisect_left(C, -2, lo: 6, hi: 4), 6);
    expect(bisect_left(C, -1, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 0, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 1, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 2, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 3, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 4, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 5, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 6, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 7, lo: 6, hi: 4), 6);
    expect(bisect_left(C, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_left for D lo=6 hi=4', () {
    expect(bisect_left(D, -2, lo: 6, hi: 4), 6);
    expect(bisect_left(D, -1, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 0, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 1, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 2, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 3, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 4, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 5, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 6, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 7, lo: 6, hi: 4), 6);
    expect(bisect_left(D, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_left for E lo=6 hi=4', () {
    expect(bisect_left(E, -2, lo: 6, hi: 4), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 5, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 6, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 7, lo: 6, hi: 4), 6);
    expect(bisect_left(E, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_left for A lo=7 hi=4', () {
    expect(bisect_left(A, -2, lo: 7, hi: 4), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 4), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_left for B lo=7 hi=4', () {
    expect(bisect_left(B, -2, lo: 7, hi: 4), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 4), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_left for C lo=7 hi=4', () {
    expect(bisect_left(C, -2, lo: 7, hi: 4), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 4), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_left for D lo=7 hi=4', () {
    expect(bisect_left(D, -2, lo: 7, hi: 4), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 4), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_left for E lo=7 hi=4', () {
    expect(bisect_left(E, -2, lo: 7, hi: 4), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 4), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_left for A lo=8 hi=4', () {
    expect(bisect_left(A, -2, lo: 8, hi: 4), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 4), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_left for B lo=8 hi=4', () {
    expect(bisect_left(B, -2, lo: 8, hi: 4), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 4), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_left for C lo=8 hi=4', () {
    expect(bisect_left(C, -2, lo: 8, hi: 4), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 4), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_left for D lo=8 hi=4', () {
    expect(bisect_left(D, -2, lo: 8, hi: 4), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 4), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_left for E lo=8 hi=4', () {
    expect(bisect_left(E, -2, lo: 8, hi: 4), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 4), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_left for A lo=9 hi=4', () {
    expect(bisect_left(A, -2, lo: 9, hi: 4), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 4), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_left for B lo=9 hi=4', () {
    expect(bisect_left(B, -2, lo: 9, hi: 4), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 4), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_left for C lo=9 hi=4', () {
    expect(bisect_left(C, -2, lo: 9, hi: 4), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 4), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_left for D lo=9 hi=4', () {
    expect(bisect_left(D, -2, lo: 9, hi: 4), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 4), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_left for E lo=9 hi=4', () {
    expect(bisect_left(E, -2, lo: 9, hi: 4), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 4), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_left for A lo=None hi=5', () {
    expect(() => bisect_left(A, -2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 5), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=5', () {
    expect(() => bisect_left(B, -2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 5), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=5', () {
    expect(() => bisect_left(C, -2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, -1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 5, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 6, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 7, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 8, hi: 5), throwsRangeError);
  });

  test('bisect_left for D lo=None hi=5', () {
    expect(bisect_left(D, -2, hi: 5), 0);
    expect(bisect_left(D, -1, hi: 5), 0);
    expect(bisect_left(D, 0, hi: 5), 0);
    expect(bisect_left(D, 1, hi: 5), 0);
    expect(bisect_left(D, 2, hi: 5), 0);
    expect(bisect_left(D, 3, hi: 5), 0);
    expect(bisect_left(D, 4, hi: 5), 1);
    expect(bisect_left(D, 5, hi: 5), 2);
    expect(() => bisect_left(D, 6, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 7, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 8, hi: 5), throwsRangeError);
  });

  test('bisect_left for E lo=None hi=5', () {
    expect(bisect_left(E, -2, hi: 5), 0);
    expect(bisect_left(E, -1, hi: 5), 0);
    expect(bisect_left(E, 0, hi: 5), 0);
    expect(bisect_left(E, 1, hi: 5), 1);
    expect(bisect_left(E, 2, hi: 5), 2);
    expect(bisect_left(E, 3, hi: 5), 5);
    expect(bisect_left(E, 4, hi: 5), 5);
    expect(bisect_left(E, 5, hi: 5), 5);
    expect(bisect_left(E, 6, hi: 5), 5);
    expect(bisect_left(E, 7, hi: 5), 5);
    expect(bisect_left(E, 8, hi: 5), 5);
  });

  test('bisect_left for A lo=0 hi=5', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=5', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=5', () {
    expect(() => bisect_left(C, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_left for D lo=0 hi=5', () {
    expect(bisect_left(D, -2, lo: 0, hi: 5), 0);
    expect(bisect_left(D, -1, lo: 0, hi: 5), 0);
    expect(bisect_left(D, 0, lo: 0, hi: 5), 0);
    expect(bisect_left(D, 1, lo: 0, hi: 5), 0);
    expect(bisect_left(D, 2, lo: 0, hi: 5), 0);
    expect(bisect_left(D, 3, lo: 0, hi: 5), 0);
    expect(bisect_left(D, 4, lo: 0, hi: 5), 1);
    expect(bisect_left(D, 5, lo: 0, hi: 5), 2);
    expect(() => bisect_left(D, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_left for E lo=0 hi=5', () {
    expect(bisect_left(E, -2, lo: 0, hi: 5), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 5), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 5), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 5), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 5), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 5), 5);
    expect(bisect_left(E, 4, lo: 0, hi: 5), 5);
    expect(bisect_left(E, 5, lo: 0, hi: 5), 5);
    expect(bisect_left(E, 6, lo: 0, hi: 5), 5);
    expect(bisect_left(E, 7, lo: 0, hi: 5), 5);
    expect(bisect_left(E, 8, lo: 0, hi: 5), 5);
  });

  test('bisect_left for A lo=1 hi=5', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=5', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=5', () {
    expect(() => bisect_left(C, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_left for D lo=1 hi=5', () {
    expect(() => bisect_left(D, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_left for E lo=1 hi=5', () {
    expect(bisect_left(E, -2, lo: 1, hi: 5), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 5), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 5), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 5), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 5), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 5), 5);
    expect(bisect_left(E, 4, lo: 1, hi: 5), 5);
    expect(bisect_left(E, 5, lo: 1, hi: 5), 5);
    expect(bisect_left(E, 6, lo: 1, hi: 5), 5);
    expect(bisect_left(E, 7, lo: 1, hi: 5), 5);
    expect(bisect_left(E, 8, lo: 1, hi: 5), 5);
  });

  test('bisect_left for A lo=2 hi=5', () {
    expect(() => bisect_left(A, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_left for B lo=2 hi=5', () {
    expect(() => bisect_left(B, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_left for C lo=2 hi=5', () {
    expect(() => bisect_left(C, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_left for D lo=2 hi=5', () {
    expect(() => bisect_left(D, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_left for E lo=2 hi=5', () {
    expect(bisect_left(E, -2, lo: 2, hi: 5), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 5), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 5), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 5), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 5), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 5), 5);
    expect(bisect_left(E, 4, lo: 2, hi: 5), 5);
    expect(bisect_left(E, 5, lo: 2, hi: 5), 5);
    expect(bisect_left(E, 6, lo: 2, hi: 5), 5);
    expect(bisect_left(E, 7, lo: 2, hi: 5), 5);
    expect(bisect_left(E, 8, lo: 2, hi: 5), 5);
  });

  test('bisect_left for A lo=3 hi=5', () {
    expect(() => bisect_left(A, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_left for B lo=3 hi=5', () {
    expect(() => bisect_left(B, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_left for C lo=3 hi=5', () {
    expect(() => bisect_left(C, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_left for D lo=3 hi=5', () {
    expect(() => bisect_left(D, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_left for E lo=3 hi=5', () {
    expect(bisect_left(E, -2, lo: 3, hi: 5), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 5), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 5), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 5), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 5), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 5), 5);
    expect(bisect_left(E, 4, lo: 3, hi: 5), 5);
    expect(bisect_left(E, 5, lo: 3, hi: 5), 5);
    expect(bisect_left(E, 6, lo: 3, hi: 5), 5);
    expect(bisect_left(E, 7, lo: 3, hi: 5), 5);
    expect(bisect_left(E, 8, lo: 3, hi: 5), 5);
  });

  test('bisect_left for A lo=4 hi=5', () {
    expect(() => bisect_left(A, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_left for B lo=4 hi=5', () {
    expect(() => bisect_left(B, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_left for C lo=4 hi=5', () {
    expect(() => bisect_left(C, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_left for D lo=4 hi=5', () {
    expect(() => bisect_left(D, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_left for E lo=4 hi=5', () {
    expect(bisect_left(E, -2, lo: 4, hi: 5), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 5), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 5), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 5), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 5), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 5), 5);
    expect(bisect_left(E, 4, lo: 4, hi: 5), 5);
    expect(bisect_left(E, 5, lo: 4, hi: 5), 5);
    expect(bisect_left(E, 6, lo: 4, hi: 5), 5);
    expect(bisect_left(E, 7, lo: 4, hi: 5), 5);
    expect(bisect_left(E, 8, lo: 4, hi: 5), 5);
  });

  test('bisect_left for A lo=5 hi=5', () {
    expect(bisect_left(A, -2, lo: 5, hi: 5), 5);
    expect(bisect_left(A, -1, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 0, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 1, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 2, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 3, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 4, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 5, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 6, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 7, lo: 5, hi: 5), 5);
    expect(bisect_left(A, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_left for B lo=5 hi=5', () {
    expect(bisect_left(B, -2, lo: 5, hi: 5), 5);
    expect(bisect_left(B, -1, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 0, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 1, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 2, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 3, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 4, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 5, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 6, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 7, lo: 5, hi: 5), 5);
    expect(bisect_left(B, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_left for C lo=5 hi=5', () {
    expect(bisect_left(C, -2, lo: 5, hi: 5), 5);
    expect(bisect_left(C, -1, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 0, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 1, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 2, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 3, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 4, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 5, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 6, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 7, lo: 5, hi: 5), 5);
    expect(bisect_left(C, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_left for D lo=5 hi=5', () {
    expect(bisect_left(D, -2, lo: 5, hi: 5), 5);
    expect(bisect_left(D, -1, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 0, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 1, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 2, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 3, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 4, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 5, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 6, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 7, lo: 5, hi: 5), 5);
    expect(bisect_left(D, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_left for E lo=5 hi=5', () {
    expect(bisect_left(E, -2, lo: 5, hi: 5), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 4, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 5, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 6, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 7, lo: 5, hi: 5), 5);
    expect(bisect_left(E, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_left for A lo=6 hi=5', () {
    expect(bisect_left(A, -2, lo: 6, hi: 5), 6);
    expect(bisect_left(A, -1, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 0, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 1, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 2, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 3, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 4, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 5, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 6, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 7, lo: 6, hi: 5), 6);
    expect(bisect_left(A, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_left for B lo=6 hi=5', () {
    expect(bisect_left(B, -2, lo: 6, hi: 5), 6);
    expect(bisect_left(B, -1, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 0, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 1, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 2, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 3, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 4, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 5, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 6, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 7, lo: 6, hi: 5), 6);
    expect(bisect_left(B, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_left for C lo=6 hi=5', () {
    expect(bisect_left(C, -2, lo: 6, hi: 5), 6);
    expect(bisect_left(C, -1, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 0, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 1, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 2, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 3, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 4, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 5, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 6, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 7, lo: 6, hi: 5), 6);
    expect(bisect_left(C, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_left for D lo=6 hi=5', () {
    expect(bisect_left(D, -2, lo: 6, hi: 5), 6);
    expect(bisect_left(D, -1, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 0, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 1, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 2, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 3, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 4, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 5, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 6, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 7, lo: 6, hi: 5), 6);
    expect(bisect_left(D, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_left for E lo=6 hi=5', () {
    expect(bisect_left(E, -2, lo: 6, hi: 5), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 5, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 6, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 7, lo: 6, hi: 5), 6);
    expect(bisect_left(E, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_left for A lo=7 hi=5', () {
    expect(bisect_left(A, -2, lo: 7, hi: 5), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 5), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_left for B lo=7 hi=5', () {
    expect(bisect_left(B, -2, lo: 7, hi: 5), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 5), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_left for C lo=7 hi=5', () {
    expect(bisect_left(C, -2, lo: 7, hi: 5), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 5), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_left for D lo=7 hi=5', () {
    expect(bisect_left(D, -2, lo: 7, hi: 5), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 5), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_left for E lo=7 hi=5', () {
    expect(bisect_left(E, -2, lo: 7, hi: 5), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 5), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_left for A lo=8 hi=5', () {
    expect(bisect_left(A, -2, lo: 8, hi: 5), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 5), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_left for B lo=8 hi=5', () {
    expect(bisect_left(B, -2, lo: 8, hi: 5), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 5), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_left for C lo=8 hi=5', () {
    expect(bisect_left(C, -2, lo: 8, hi: 5), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 5), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_left for D lo=8 hi=5', () {
    expect(bisect_left(D, -2, lo: 8, hi: 5), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 5), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_left for E lo=8 hi=5', () {
    expect(bisect_left(E, -2, lo: 8, hi: 5), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 5), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_left for A lo=9 hi=5', () {
    expect(bisect_left(A, -2, lo: 9, hi: 5), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 5), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_left for B lo=9 hi=5', () {
    expect(bisect_left(B, -2, lo: 9, hi: 5), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 5), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_left for C lo=9 hi=5', () {
    expect(bisect_left(C, -2, lo: 9, hi: 5), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 5), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_left for D lo=9 hi=5', () {
    expect(bisect_left(D, -2, lo: 9, hi: 5), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 5), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_left for E lo=9 hi=5', () {
    expect(bisect_left(E, -2, lo: 9, hi: 5), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 5), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_left for A lo=None hi=6', () {
    expect(() => bisect_left(A, -2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 6), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=6', () {
    expect(() => bisect_left(B, -2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 6), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=6', () {
    expect(() => bisect_left(C, -2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, -1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 6, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 7, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 8, hi: 6), throwsRangeError);
  });

  test('bisect_left for D lo=None hi=6', () {
    expect(() => bisect_left(D, -2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, -1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 6, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 7, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 8, hi: 6), throwsRangeError);
  });

  test('bisect_left for E lo=None hi=6', () {
    expect(bisect_left(E, -2, hi: 6), 0);
    expect(bisect_left(E, -1, hi: 6), 0);
    expect(bisect_left(E, 0, hi: 6), 0);
    expect(bisect_left(E, 1, hi: 6), 1);
    expect(bisect_left(E, 2, hi: 6), 2);
    expect(bisect_left(E, 3, hi: 6), 6);
    expect(bisect_left(E, 4, hi: 6), 6);
    expect(bisect_left(E, 5, hi: 6), 6);
    expect(bisect_left(E, 6, hi: 6), 6);
    expect(bisect_left(E, 7, hi: 6), 6);
    expect(bisect_left(E, 8, hi: 6), 6);
  });

  test('bisect_left for A lo=0 hi=6', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=6', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=6', () {
    expect(() => bisect_left(C, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_left for D lo=0 hi=6', () {
    expect(() => bisect_left(D, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_left for E lo=0 hi=6', () {
    expect(bisect_left(E, -2, lo: 0, hi: 6), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 6), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 6), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 6), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 6), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 6), 6);
    expect(bisect_left(E, 4, lo: 0, hi: 6), 6);
    expect(bisect_left(E, 5, lo: 0, hi: 6), 6);
    expect(bisect_left(E, 6, lo: 0, hi: 6), 6);
    expect(bisect_left(E, 7, lo: 0, hi: 6), 6);
    expect(bisect_left(E, 8, lo: 0, hi: 6), 6);
  });

  test('bisect_left for A lo=1 hi=6', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=6', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=6', () {
    expect(() => bisect_left(C, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_left for D lo=1 hi=6', () {
    expect(() => bisect_left(D, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_left for E lo=1 hi=6', () {
    expect(bisect_left(E, -2, lo: 1, hi: 6), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 6), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 6), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 6), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 6), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 6), 6);
    expect(bisect_left(E, 4, lo: 1, hi: 6), 6);
    expect(bisect_left(E, 5, lo: 1, hi: 6), 6);
    expect(bisect_left(E, 6, lo: 1, hi: 6), 6);
    expect(bisect_left(E, 7, lo: 1, hi: 6), 6);
    expect(bisect_left(E, 8, lo: 1, hi: 6), 6);
  });

  test('bisect_left for A lo=2 hi=6', () {
    expect(() => bisect_left(A, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_left for B lo=2 hi=6', () {
    expect(() => bisect_left(B, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_left for C lo=2 hi=6', () {
    expect(() => bisect_left(C, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_left for D lo=2 hi=6', () {
    expect(() => bisect_left(D, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_left for E lo=2 hi=6', () {
    expect(bisect_left(E, -2, lo: 2, hi: 6), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 6), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 6), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 6), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 6), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 6), 6);
    expect(bisect_left(E, 4, lo: 2, hi: 6), 6);
    expect(bisect_left(E, 5, lo: 2, hi: 6), 6);
    expect(bisect_left(E, 6, lo: 2, hi: 6), 6);
    expect(bisect_left(E, 7, lo: 2, hi: 6), 6);
    expect(bisect_left(E, 8, lo: 2, hi: 6), 6);
  });

  test('bisect_left for A lo=3 hi=6', () {
    expect(() => bisect_left(A, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_left for B lo=3 hi=6', () {
    expect(() => bisect_left(B, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_left for C lo=3 hi=6', () {
    expect(() => bisect_left(C, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_left for D lo=3 hi=6', () {
    expect(() => bisect_left(D, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_left for E lo=3 hi=6', () {
    expect(bisect_left(E, -2, lo: 3, hi: 6), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 6), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 6), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 6), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 6), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 6), 6);
    expect(bisect_left(E, 4, lo: 3, hi: 6), 6);
    expect(bisect_left(E, 5, lo: 3, hi: 6), 6);
    expect(bisect_left(E, 6, lo: 3, hi: 6), 6);
    expect(bisect_left(E, 7, lo: 3, hi: 6), 6);
    expect(bisect_left(E, 8, lo: 3, hi: 6), 6);
  });

  test('bisect_left for A lo=4 hi=6', () {
    expect(() => bisect_left(A, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_left for B lo=4 hi=6', () {
    expect(() => bisect_left(B, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_left for C lo=4 hi=6', () {
    expect(() => bisect_left(C, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_left for D lo=4 hi=6', () {
    expect(() => bisect_left(D, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_left for E lo=4 hi=6', () {
    expect(bisect_left(E, -2, lo: 4, hi: 6), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 6), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 6), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 6), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 6), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 6), 6);
    expect(bisect_left(E, 4, lo: 4, hi: 6), 6);
    expect(bisect_left(E, 5, lo: 4, hi: 6), 6);
    expect(bisect_left(E, 6, lo: 4, hi: 6), 6);
    expect(bisect_left(E, 7, lo: 4, hi: 6), 6);
    expect(bisect_left(E, 8, lo: 4, hi: 6), 6);
  });

  test('bisect_left for A lo=5 hi=6', () {
    expect(() => bisect_left(A, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_left for B lo=5 hi=6', () {
    expect(() => bisect_left(B, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_left for C lo=5 hi=6', () {
    expect(() => bisect_left(C, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_left for D lo=5 hi=6', () {
    expect(() => bisect_left(D, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_left for E lo=5 hi=6', () {
    expect(bisect_left(E, -2, lo: 5, hi: 6), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 6), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 6), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 6), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 6), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 6), 6);
    expect(bisect_left(E, 4, lo: 5, hi: 6), 6);
    expect(bisect_left(E, 5, lo: 5, hi: 6), 6);
    expect(bisect_left(E, 6, lo: 5, hi: 6), 6);
    expect(bisect_left(E, 7, lo: 5, hi: 6), 6);
    expect(bisect_left(E, 8, lo: 5, hi: 6), 6);
  });

  test('bisect_left for A lo=6 hi=6', () {
    expect(bisect_left(A, -2, lo: 6, hi: 6), 6);
    expect(bisect_left(A, -1, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 0, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 1, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 2, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 3, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 4, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 5, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 6, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 7, lo: 6, hi: 6), 6);
    expect(bisect_left(A, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_left for B lo=6 hi=6', () {
    expect(bisect_left(B, -2, lo: 6, hi: 6), 6);
    expect(bisect_left(B, -1, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 0, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 1, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 2, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 3, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 4, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 5, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 6, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 7, lo: 6, hi: 6), 6);
    expect(bisect_left(B, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_left for C lo=6 hi=6', () {
    expect(bisect_left(C, -2, lo: 6, hi: 6), 6);
    expect(bisect_left(C, -1, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 0, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 1, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 2, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 3, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 4, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 5, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 6, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 7, lo: 6, hi: 6), 6);
    expect(bisect_left(C, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_left for D lo=6 hi=6', () {
    expect(bisect_left(D, -2, lo: 6, hi: 6), 6);
    expect(bisect_left(D, -1, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 0, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 1, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 2, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 3, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 4, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 5, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 6, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 7, lo: 6, hi: 6), 6);
    expect(bisect_left(D, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_left for E lo=6 hi=6', () {
    expect(bisect_left(E, -2, lo: 6, hi: 6), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 5, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 6, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 7, lo: 6, hi: 6), 6);
    expect(bisect_left(E, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_left for A lo=7 hi=6', () {
    expect(bisect_left(A, -2, lo: 7, hi: 6), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 6), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_left for B lo=7 hi=6', () {
    expect(bisect_left(B, -2, lo: 7, hi: 6), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 6), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_left for C lo=7 hi=6', () {
    expect(bisect_left(C, -2, lo: 7, hi: 6), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 6), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_left for D lo=7 hi=6', () {
    expect(bisect_left(D, -2, lo: 7, hi: 6), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 6), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_left for E lo=7 hi=6', () {
    expect(bisect_left(E, -2, lo: 7, hi: 6), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 6), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_left for A lo=8 hi=6', () {
    expect(bisect_left(A, -2, lo: 8, hi: 6), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 6), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_left for B lo=8 hi=6', () {
    expect(bisect_left(B, -2, lo: 8, hi: 6), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 6), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_left for C lo=8 hi=6', () {
    expect(bisect_left(C, -2, lo: 8, hi: 6), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 6), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_left for D lo=8 hi=6', () {
    expect(bisect_left(D, -2, lo: 8, hi: 6), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 6), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_left for E lo=8 hi=6', () {
    expect(bisect_left(E, -2, lo: 8, hi: 6), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 6), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_left for A lo=9 hi=6', () {
    expect(bisect_left(A, -2, lo: 9, hi: 6), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 6), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_left for B lo=9 hi=6', () {
    expect(bisect_left(B, -2, lo: 9, hi: 6), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 6), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_left for C lo=9 hi=6', () {
    expect(bisect_left(C, -2, lo: 9, hi: 6), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 6), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_left for D lo=9 hi=6', () {
    expect(bisect_left(D, -2, lo: 9, hi: 6), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 6), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_left for E lo=9 hi=6', () {
    expect(bisect_left(E, -2, lo: 9, hi: 6), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 6), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_left for A lo=None hi=7', () {
    expect(() => bisect_left(A, -2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=7', () {
    expect(() => bisect_left(B, -2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=7', () {
    expect(() => bisect_left(C, -2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=None hi=7', () {
    expect(() => bisect_left(D, -2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=None hi=7', () {
    expect(bisect_left(E, -2, hi: 7), 0);
    expect(bisect_left(E, -1, hi: 7), 0);
    expect(bisect_left(E, 0, hi: 7), 0);
    expect(bisect_left(E, 1, hi: 7), 1);
    expect(bisect_left(E, 2, hi: 7), 2);
    expect(bisect_left(E, 3, hi: 7), 6);
    expect(bisect_left(E, 4, hi: 7), 7);
    expect(bisect_left(E, 5, hi: 7), 7);
    expect(bisect_left(E, 6, hi: 7), 7);
    expect(bisect_left(E, 7, hi: 7), 7);
    expect(bisect_left(E, 8, hi: 7), 7);
  });

  test('bisect_left for A lo=0 hi=7', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=7', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=7', () {
    expect(() => bisect_left(C, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=0 hi=7', () {
    expect(() => bisect_left(D, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=0 hi=7', () {
    expect(bisect_left(E, -2, lo: 0, hi: 7), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 7), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 7), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 7), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 7), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 7), 6);
    expect(bisect_left(E, 4, lo: 0, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 0, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 0, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 0, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 0, hi: 7), 7);
  });

  test('bisect_left for A lo=1 hi=7', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=7', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=7', () {
    expect(() => bisect_left(C, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=1 hi=7', () {
    expect(() => bisect_left(D, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=1 hi=7', () {
    expect(bisect_left(E, -2, lo: 1, hi: 7), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 7), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 7), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 7), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 7), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 7), 6);
    expect(bisect_left(E, 4, lo: 1, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 1, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 1, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 1, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 1, hi: 7), 7);
  });

  test('bisect_left for A lo=2 hi=7', () {
    expect(() => bisect_left(A, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=2 hi=7', () {
    expect(() => bisect_left(B, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=2 hi=7', () {
    expect(() => bisect_left(C, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=2 hi=7', () {
    expect(() => bisect_left(D, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=2 hi=7', () {
    expect(bisect_left(E, -2, lo: 2, hi: 7), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 7), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 7), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 7), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 7), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 7), 6);
    expect(bisect_left(E, 4, lo: 2, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 2, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 2, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 2, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 2, hi: 7), 7);
  });

  test('bisect_left for A lo=3 hi=7', () {
    expect(() => bisect_left(A, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=3 hi=7', () {
    expect(() => bisect_left(B, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=3 hi=7', () {
    expect(() => bisect_left(C, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=3 hi=7', () {
    expect(() => bisect_left(D, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=3 hi=7', () {
    expect(bisect_left(E, -2, lo: 3, hi: 7), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 7), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 7), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 7), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 7), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 7), 6);
    expect(bisect_left(E, 4, lo: 3, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 3, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 3, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 3, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 3, hi: 7), 7);
  });

  test('bisect_left for A lo=4 hi=7', () {
    expect(() => bisect_left(A, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=4 hi=7', () {
    expect(() => bisect_left(B, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=4 hi=7', () {
    expect(() => bisect_left(C, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=4 hi=7', () {
    expect(() => bisect_left(D, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=4 hi=7', () {
    expect(bisect_left(E, -2, lo: 4, hi: 7), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 7), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 7), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 7), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 7), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 7), 6);
    expect(bisect_left(E, 4, lo: 4, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 4, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 4, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 4, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 4, hi: 7), 7);
  });

  test('bisect_left for A lo=5 hi=7', () {
    expect(() => bisect_left(A, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=5 hi=7', () {
    expect(() => bisect_left(B, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=5 hi=7', () {
    expect(() => bisect_left(C, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=5 hi=7', () {
    expect(() => bisect_left(D, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=5 hi=7', () {
    expect(bisect_left(E, -2, lo: 5, hi: 7), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 7), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 7), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 7), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 7), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 7), 6);
    expect(bisect_left(E, 4, lo: 5, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 5, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 5, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 5, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 5, hi: 7), 7);
  });

  test('bisect_left for A lo=6 hi=7', () {
    expect(() => bisect_left(A, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_left for B lo=6 hi=7', () {
    expect(() => bisect_left(B, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_left for C lo=6 hi=7', () {
    expect(() => bisect_left(C, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_left for D lo=6 hi=7', () {
    expect(() => bisect_left(D, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_left for E lo=6 hi=7', () {
    expect(bisect_left(E, -2, lo: 6, hi: 7), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 7), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 7), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 7), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 7), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 7), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 6, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 6, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 6, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 6, hi: 7), 7);
  });

  test('bisect_left for A lo=7 hi=7', () {
    expect(bisect_left(A, -2, lo: 7, hi: 7), 7);
    expect(bisect_left(A, -1, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 0, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 1, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 2, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 3, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 4, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 5, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 6, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 7, lo: 7, hi: 7), 7);
    expect(bisect_left(A, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_left for B lo=7 hi=7', () {
    expect(bisect_left(B, -2, lo: 7, hi: 7), 7);
    expect(bisect_left(B, -1, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 0, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 1, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 2, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 3, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 4, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 5, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 6, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 7, lo: 7, hi: 7), 7);
    expect(bisect_left(B, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_left for C lo=7 hi=7', () {
    expect(bisect_left(C, -2, lo: 7, hi: 7), 7);
    expect(bisect_left(C, -1, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 0, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 1, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 2, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 3, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 4, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 5, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 6, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 7, lo: 7, hi: 7), 7);
    expect(bisect_left(C, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_left for D lo=7 hi=7', () {
    expect(bisect_left(D, -2, lo: 7, hi: 7), 7);
    expect(bisect_left(D, -1, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 0, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 1, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 2, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 3, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 4, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 5, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 6, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 7, lo: 7, hi: 7), 7);
    expect(bisect_left(D, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_left for E lo=7 hi=7', () {
    expect(bisect_left(E, -2, lo: 7, hi: 7), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 5, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 6, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 7, lo: 7, hi: 7), 7);
    expect(bisect_left(E, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_left for A lo=8 hi=7', () {
    expect(bisect_left(A, -2, lo: 8, hi: 7), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 7), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_left for B lo=8 hi=7', () {
    expect(bisect_left(B, -2, lo: 8, hi: 7), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 7), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_left for C lo=8 hi=7', () {
    expect(bisect_left(C, -2, lo: 8, hi: 7), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 7), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_left for D lo=8 hi=7', () {
    expect(bisect_left(D, -2, lo: 8, hi: 7), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 7), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_left for E lo=8 hi=7', () {
    expect(bisect_left(E, -2, lo: 8, hi: 7), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 7), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_left for A lo=9 hi=7', () {
    expect(bisect_left(A, -2, lo: 9, hi: 7), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 7), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_left for B lo=9 hi=7', () {
    expect(bisect_left(B, -2, lo: 9, hi: 7), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 7), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_left for C lo=9 hi=7', () {
    expect(bisect_left(C, -2, lo: 9, hi: 7), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 7), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_left for D lo=9 hi=7', () {
    expect(bisect_left(D, -2, lo: 9, hi: 7), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 7), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_left for E lo=9 hi=7', () {
    expect(bisect_left(E, -2, lo: 9, hi: 7), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 7), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_left for A lo=None hi=8', () {
    expect(() => bisect_left(A, -2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=8', () {
    expect(() => bisect_left(B, -2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=8', () {
    expect(() => bisect_left(C, -2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=None hi=8', () {
    expect(() => bisect_left(D, -2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=None hi=8', () {
    expect(bisect_left(E, -2, hi: 8), 0);
    expect(bisect_left(E, -1, hi: 8), 0);
    expect(bisect_left(E, 0, hi: 8), 0);
    expect(bisect_left(E, 1, hi: 8), 1);
    expect(bisect_left(E, 2, hi: 8), 2);
    expect(bisect_left(E, 3, hi: 8), 6);
    expect(bisect_left(E, 4, hi: 8), 8);
    expect(bisect_left(E, 5, hi: 8), 8);
    expect(bisect_left(E, 6, hi: 8), 8);
    expect(bisect_left(E, 7, hi: 8), 8);
    expect(bisect_left(E, 8, hi: 8), 8);
  });

  test('bisect_left for A lo=0 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=0 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=0 hi=8', () {
    expect(bisect_left(E, -2, lo: 0, hi: 8), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 8), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 8), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 8), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 8), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 8), 6);
    expect(bisect_left(E, 4, lo: 0, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 0, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 0, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 0, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 0, hi: 8), 8);
  });

  test('bisect_left for A lo=1 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=1 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=1 hi=8', () {
    expect(bisect_left(E, -2, lo: 1, hi: 8), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 8), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 8), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 8), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 8), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 8), 6);
    expect(bisect_left(E, 4, lo: 1, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 1, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 1, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 1, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 1, hi: 8), 8);
  });

  test('bisect_left for A lo=2 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=2 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=2 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=2 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=2 hi=8', () {
    expect(bisect_left(E, -2, lo: 2, hi: 8), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 8), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 8), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 8), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 8), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 8), 6);
    expect(bisect_left(E, 4, lo: 2, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 2, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 2, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 2, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 2, hi: 8), 8);
  });

  test('bisect_left for A lo=3 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=3 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=3 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=3 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=3 hi=8', () {
    expect(bisect_left(E, -2, lo: 3, hi: 8), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 8), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 8), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 8), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 8), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 8), 6);
    expect(bisect_left(E, 4, lo: 3, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 3, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 3, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 3, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 3, hi: 8), 8);
  });

  test('bisect_left for A lo=4 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=4 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=4 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=4 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=4 hi=8', () {
    expect(bisect_left(E, -2, lo: 4, hi: 8), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 8), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 8), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 8), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 8), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 8), 6);
    expect(bisect_left(E, 4, lo: 4, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 4, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 4, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 4, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 4, hi: 8), 8);
  });

  test('bisect_left for A lo=5 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=5 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=5 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=5 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=5 hi=8', () {
    expect(bisect_left(E, -2, lo: 5, hi: 8), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 8), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 8), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 8), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 8), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 8), 6);
    expect(bisect_left(E, 4, lo: 5, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 5, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 5, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 5, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 5, hi: 8), 8);
  });

  test('bisect_left for A lo=6 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=6 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=6 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=6 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=6 hi=8', () {
    expect(bisect_left(E, -2, lo: 6, hi: 8), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 8), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 8), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 8), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 8), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 8), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 6, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 6, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 6, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 6, hi: 8), 8);
  });

  test('bisect_left for A lo=7 hi=8', () {
    expect(() => bisect_left(A, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_left for B lo=7 hi=8', () {
    expect(() => bisect_left(B, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_left for C lo=7 hi=8', () {
    expect(() => bisect_left(C, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_left for D lo=7 hi=8', () {
    expect(() => bisect_left(D, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_left for E lo=7 hi=8', () {
    expect(bisect_left(E, -2, lo: 7, hi: 8), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 8), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 8), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 8), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 8), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 8), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 7, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 7, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 7, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 7, hi: 8), 8);
  });

  test('bisect_left for A lo=8 hi=8', () {
    expect(bisect_left(A, -2, lo: 8, hi: 8), 8);
    expect(bisect_left(A, -1, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 0, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 1, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 2, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 3, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 4, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 5, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 6, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 7, lo: 8, hi: 8), 8);
    expect(bisect_left(A, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_left for B lo=8 hi=8', () {
    expect(bisect_left(B, -2, lo: 8, hi: 8), 8);
    expect(bisect_left(B, -1, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 0, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 1, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 2, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 3, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 4, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 5, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 6, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 7, lo: 8, hi: 8), 8);
    expect(bisect_left(B, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_left for C lo=8 hi=8', () {
    expect(bisect_left(C, -2, lo: 8, hi: 8), 8);
    expect(bisect_left(C, -1, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 0, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 1, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 2, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 3, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 4, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 5, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 6, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 7, lo: 8, hi: 8), 8);
    expect(bisect_left(C, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_left for D lo=8 hi=8', () {
    expect(bisect_left(D, -2, lo: 8, hi: 8), 8);
    expect(bisect_left(D, -1, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 0, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 1, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 2, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 3, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 4, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 5, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 6, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 7, lo: 8, hi: 8), 8);
    expect(bisect_left(D, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_left for E lo=8 hi=8', () {
    expect(bisect_left(E, -2, lo: 8, hi: 8), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 7, lo: 8, hi: 8), 8);
    expect(bisect_left(E, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_left for A lo=9 hi=8', () {
    expect(bisect_left(A, -2, lo: 9, hi: 8), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 8), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_left for B lo=9 hi=8', () {
    expect(bisect_left(B, -2, lo: 9, hi: 8), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 8), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_left for C lo=9 hi=8', () {
    expect(bisect_left(C, -2, lo: 9, hi: 8), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 8), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_left for D lo=9 hi=8', () {
    expect(bisect_left(D, -2, lo: 9, hi: 8), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 8), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_left for E lo=9 hi=8', () {
    expect(bisect_left(E, -2, lo: 9, hi: 8), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 8), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_left for A lo=None hi=9', () {
    expect(() => bisect_left(A, -2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=None hi=9', () {
    expect(() => bisect_left(B, -2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=None hi=9', () {
    expect(() => bisect_left(C, -2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=None hi=9', () {
    expect(() => bisect_left(D, -2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=None hi=9', () {
    expect(bisect_left(E, -2, hi: 9), 0);
    expect(bisect_left(E, -1, hi: 9), 0);
    expect(bisect_left(E, 0, hi: 9), 0);
    expect(bisect_left(E, 1, hi: 9), 1);
    expect(bisect_left(E, 2, hi: 9), 2);
    expect(bisect_left(E, 3, hi: 9), 6);
    expect(bisect_left(E, 4, hi: 9), 8);
    expect(bisect_left(E, 5, hi: 9), 8);
    expect(bisect_left(E, 6, hi: 9), 9);
    expect(bisect_left(E, 7, hi: 9), 9);
    expect(bisect_left(E, 8, hi: 9), 9);
  });

  test('bisect_left for A lo=0 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=0 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=0 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=0 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=0 hi=9', () {
    expect(bisect_left(E, -2, lo: 0, hi: 9), 0);
    expect(bisect_left(E, -1, lo: 0, hi: 9), 0);
    expect(bisect_left(E, 0, lo: 0, hi: 9), 0);
    expect(bisect_left(E, 1, lo: 0, hi: 9), 1);
    expect(bisect_left(E, 2, lo: 0, hi: 9), 2);
    expect(bisect_left(E, 3, lo: 0, hi: 9), 6);
    expect(bisect_left(E, 4, lo: 0, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 0, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 0, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 0, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 0, hi: 9), 9);
  });

  test('bisect_left for A lo=1 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=1 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=1 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=1 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=1 hi=9', () {
    expect(bisect_left(E, -2, lo: 1, hi: 9), 1);
    expect(bisect_left(E, -1, lo: 1, hi: 9), 1);
    expect(bisect_left(E, 0, lo: 1, hi: 9), 1);
    expect(bisect_left(E, 1, lo: 1, hi: 9), 1);
    expect(bisect_left(E, 2, lo: 1, hi: 9), 2);
    expect(bisect_left(E, 3, lo: 1, hi: 9), 6);
    expect(bisect_left(E, 4, lo: 1, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 1, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 1, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 1, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 1, hi: 9), 9);
  });

  test('bisect_left for A lo=2 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=2 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=2 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=2 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=2 hi=9', () {
    expect(bisect_left(E, -2, lo: 2, hi: 9), 2);
    expect(bisect_left(E, -1, lo: 2, hi: 9), 2);
    expect(bisect_left(E, 0, lo: 2, hi: 9), 2);
    expect(bisect_left(E, 1, lo: 2, hi: 9), 2);
    expect(bisect_left(E, 2, lo: 2, hi: 9), 2);
    expect(bisect_left(E, 3, lo: 2, hi: 9), 6);
    expect(bisect_left(E, 4, lo: 2, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 2, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 2, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 2, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 2, hi: 9), 9);
  });

  test('bisect_left for A lo=3 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=3 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=3 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=3 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=3 hi=9', () {
    expect(bisect_left(E, -2, lo: 3, hi: 9), 3);
    expect(bisect_left(E, -1, lo: 3, hi: 9), 3);
    expect(bisect_left(E, 0, lo: 3, hi: 9), 3);
    expect(bisect_left(E, 1, lo: 3, hi: 9), 3);
    expect(bisect_left(E, 2, lo: 3, hi: 9), 3);
    expect(bisect_left(E, 3, lo: 3, hi: 9), 6);
    expect(bisect_left(E, 4, lo: 3, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 3, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 3, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 3, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 3, hi: 9), 9);
  });

  test('bisect_left for A lo=4 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=4 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=4 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=4 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=4 hi=9', () {
    expect(bisect_left(E, -2, lo: 4, hi: 9), 4);
    expect(bisect_left(E, -1, lo: 4, hi: 9), 4);
    expect(bisect_left(E, 0, lo: 4, hi: 9), 4);
    expect(bisect_left(E, 1, lo: 4, hi: 9), 4);
    expect(bisect_left(E, 2, lo: 4, hi: 9), 4);
    expect(bisect_left(E, 3, lo: 4, hi: 9), 6);
    expect(bisect_left(E, 4, lo: 4, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 4, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 4, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 4, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 4, hi: 9), 9);
  });

  test('bisect_left for A lo=5 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=5 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=5 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=5 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=5 hi=9', () {
    expect(bisect_left(E, -2, lo: 5, hi: 9), 5);
    expect(bisect_left(E, -1, lo: 5, hi: 9), 5);
    expect(bisect_left(E, 0, lo: 5, hi: 9), 5);
    expect(bisect_left(E, 1, lo: 5, hi: 9), 5);
    expect(bisect_left(E, 2, lo: 5, hi: 9), 5);
    expect(bisect_left(E, 3, lo: 5, hi: 9), 6);
    expect(bisect_left(E, 4, lo: 5, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 5, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 5, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 5, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 5, hi: 9), 9);
  });

  test('bisect_left for A lo=6 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=6 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=6 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=6 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=6 hi=9', () {
    expect(bisect_left(E, -2, lo: 6, hi: 9), 6);
    expect(bisect_left(E, -1, lo: 6, hi: 9), 6);
    expect(bisect_left(E, 0, lo: 6, hi: 9), 6);
    expect(bisect_left(E, 1, lo: 6, hi: 9), 6);
    expect(bisect_left(E, 2, lo: 6, hi: 9), 6);
    expect(bisect_left(E, 3, lo: 6, hi: 9), 6);
    expect(bisect_left(E, 4, lo: 6, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 6, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 6, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 6, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 6, hi: 9), 9);
  });

  test('bisect_left for A lo=7 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=7 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=7 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=7 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=7 hi=9', () {
    expect(bisect_left(E, -2, lo: 7, hi: 9), 7);
    expect(bisect_left(E, -1, lo: 7, hi: 9), 7);
    expect(bisect_left(E, 0, lo: 7, hi: 9), 7);
    expect(bisect_left(E, 1, lo: 7, hi: 9), 7);
    expect(bisect_left(E, 2, lo: 7, hi: 9), 7);
    expect(bisect_left(E, 3, lo: 7, hi: 9), 7);
    expect(bisect_left(E, 4, lo: 7, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 7, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 7, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 7, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 7, hi: 9), 9);
  });

  test('bisect_left for A lo=8 hi=9', () {
    expect(() => bisect_left(A, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(A, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for B lo=8 hi=9', () {
    expect(() => bisect_left(B, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(B, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for C lo=8 hi=9', () {
    expect(() => bisect_left(C, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(C, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for D lo=8 hi=9', () {
    expect(() => bisect_left(D, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_left(D, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_left for E lo=8 hi=9', () {
    expect(bisect_left(E, -2, lo: 8, hi: 9), 8);
    expect(bisect_left(E, -1, lo: 8, hi: 9), 8);
    expect(bisect_left(E, 0, lo: 8, hi: 9), 8);
    expect(bisect_left(E, 1, lo: 8, hi: 9), 8);
    expect(bisect_left(E, 2, lo: 8, hi: 9), 8);
    expect(bisect_left(E, 3, lo: 8, hi: 9), 8);
    expect(bisect_left(E, 4, lo: 8, hi: 9), 8);
    expect(bisect_left(E, 5, lo: 8, hi: 9), 8);
    expect(bisect_left(E, 6, lo: 8, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 8, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 8, hi: 9), 9);
  });

  test('bisect_left for A lo=9 hi=9', () {
    expect(bisect_left(A, -2, lo: 9, hi: 9), 9);
    expect(bisect_left(A, -1, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 0, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 1, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 2, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 3, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 4, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 5, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 6, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 7, lo: 9, hi: 9), 9);
    expect(bisect_left(A, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_left for B lo=9 hi=9', () {
    expect(bisect_left(B, -2, lo: 9, hi: 9), 9);
    expect(bisect_left(B, -1, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 0, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 1, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 2, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 3, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 4, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 5, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 6, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 7, lo: 9, hi: 9), 9);
    expect(bisect_left(B, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_left for C lo=9 hi=9', () {
    expect(bisect_left(C, -2, lo: 9, hi: 9), 9);
    expect(bisect_left(C, -1, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 0, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 1, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 2, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 3, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 4, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 5, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 6, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 7, lo: 9, hi: 9), 9);
    expect(bisect_left(C, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_left for D lo=9 hi=9', () {
    expect(bisect_left(D, -2, lo: 9, hi: 9), 9);
    expect(bisect_left(D, -1, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 0, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 1, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 2, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 3, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 4, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 5, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 6, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 7, lo: 9, hi: 9), 9);
    expect(bisect_left(D, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_left for E lo=9 hi=9', () {
    expect(bisect_left(E, -2, lo: 9, hi: 9), 9);
    expect(bisect_left(E, -1, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 0, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 1, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 2, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 3, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 4, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 5, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 6, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 7, lo: 9, hi: 9), 9);
    expect(bisect_left(E, 8, lo: 9, hi: 9), 9);
  });

  test('list.bisectLeft for A lo=None hi=None', () {
    expect(A.bisectLeft(-2), 0);
    expect(A.bisectLeft(-1), 0);
    expect(A.bisectLeft(0), 0);
    expect(A.bisectLeft(1), 0);
    expect(A.bisectLeft(2), 0);
    expect(A.bisectLeft(3), 0);
    expect(A.bisectLeft(4), 0);
    expect(A.bisectLeft(5), 0);
    expect(A.bisectLeft(6), 0);
    expect(A.bisectLeft(7), 0);
    expect(A.bisectLeft(8), 0);
  });

  test('list.bisectLeft for B lo=None hi=None', () {
    expect(B.bisectLeft(-2), 0);
    expect(B.bisectLeft(-1), 0);
    expect(B.bisectLeft(0), 0);
    expect(B.bisectLeft(1), 0);
    expect(B.bisectLeft(2), 0);
    expect(B.bisectLeft(3), 0);
    expect(B.bisectLeft(4), 0);
    expect(B.bisectLeft(5), 1);
    expect(B.bisectLeft(6), 1);
    expect(B.bisectLeft(7), 1);
    expect(B.bisectLeft(8), 1);
  });

  test('list.bisectLeft for C lo=None hi=None', () {
    expect(C.bisectLeft(-2), 0);
    expect(C.bisectLeft(-1), 0);
    expect(C.bisectLeft(0), 0);
    expect(C.bisectLeft(1), 0);
    expect(C.bisectLeft(2), 0);
    expect(C.bisectLeft(3), 0);
    expect(C.bisectLeft(4), 0);
    expect(C.bisectLeft(5), 1);
    expect(C.bisectLeft(6), 2);
    expect(C.bisectLeft(7), 2);
    expect(C.bisectLeft(8), 2);
  });

  test('list.bisectLeft for D lo=None hi=None', () {
    expect(D.bisectLeft(-2), 0);
    expect(D.bisectLeft(-1), 0);
    expect(D.bisectLeft(0), 0);
    expect(D.bisectLeft(1), 0);
    expect(D.bisectLeft(2), 0);
    expect(D.bisectLeft(3), 0);
    expect(D.bisectLeft(4), 1);
    expect(D.bisectLeft(5), 2);
    expect(D.bisectLeft(6), 3);
    expect(D.bisectLeft(7), 3);
    expect(D.bisectLeft(8), 3);
  });

  test('list.bisectLeft for E lo=None hi=None', () {
    expect(E.bisectLeft(-2), 0);
    expect(E.bisectLeft(-1), 0);
    expect(E.bisectLeft(0), 0);
    expect(E.bisectLeft(1), 1);
    expect(E.bisectLeft(2), 2);
    expect(E.bisectLeft(3), 6);
    expect(E.bisectLeft(4), 8);
    expect(E.bisectLeft(5), 8);
    expect(E.bisectLeft(6), 9);
    expect(E.bisectLeft(7), 10);
    expect(E.bisectLeft(8), 10);
  });

  test('list.bisectLeft for A lo=0 hi=None', () {
    expect(A.bisectLeft(-2, low: 0), 0);
    expect(A.bisectLeft(-1, low: 0), 0);
    expect(A.bisectLeft(0, low: 0), 0);
    expect(A.bisectLeft(1, low: 0), 0);
    expect(A.bisectLeft(2, low: 0), 0);
    expect(A.bisectLeft(3, low: 0), 0);
    expect(A.bisectLeft(4, low: 0), 0);
    expect(A.bisectLeft(5, low: 0), 0);
    expect(A.bisectLeft(6, low: 0), 0);
    expect(A.bisectLeft(7, low: 0), 0);
    expect(A.bisectLeft(8, low: 0), 0);
  });

  test('list.bisectLeft for B lo=0 hi=None', () {
    expect(B.bisectLeft(-2, low: 0), 0);
    expect(B.bisectLeft(-1, low: 0), 0);
    expect(B.bisectLeft(0, low: 0), 0);
    expect(B.bisectLeft(1, low: 0), 0);
    expect(B.bisectLeft(2, low: 0), 0);
    expect(B.bisectLeft(3, low: 0), 0);
    expect(B.bisectLeft(4, low: 0), 0);
    expect(B.bisectLeft(5, low: 0), 1);
    expect(B.bisectLeft(6, low: 0), 1);
    expect(B.bisectLeft(7, low: 0), 1);
    expect(B.bisectLeft(8, low: 0), 1);
  });

  test('list.bisectLeft for C lo=0 hi=None', () {
    expect(C.bisectLeft(-2, low: 0), 0);
    expect(C.bisectLeft(-1, low: 0), 0);
    expect(C.bisectLeft(0, low: 0), 0);
    expect(C.bisectLeft(1, low: 0), 0);
    expect(C.bisectLeft(2, low: 0), 0);
    expect(C.bisectLeft(3, low: 0), 0);
    expect(C.bisectLeft(4, low: 0), 0);
    expect(C.bisectLeft(5, low: 0), 1);
    expect(C.bisectLeft(6, low: 0), 2);
    expect(C.bisectLeft(7, low: 0), 2);
    expect(C.bisectLeft(8, low: 0), 2);
  });

  test('list.bisectLeft for D lo=0 hi=None', () {
    expect(D.bisectLeft(-2, low: 0), 0);
    expect(D.bisectLeft(-1, low: 0), 0);
    expect(D.bisectLeft(0, low: 0), 0);
    expect(D.bisectLeft(1, low: 0), 0);
    expect(D.bisectLeft(2, low: 0), 0);
    expect(D.bisectLeft(3, low: 0), 0);
    expect(D.bisectLeft(4, low: 0), 1);
    expect(D.bisectLeft(5, low: 0), 2);
    expect(D.bisectLeft(6, low: 0), 3);
    expect(D.bisectLeft(7, low: 0), 3);
    expect(D.bisectLeft(8, low: 0), 3);
  });

  test('list.bisectLeft for E lo=0 hi=None', () {
    expect(E.bisectLeft(-2, low: 0), 0);
    expect(E.bisectLeft(-1, low: 0), 0);
    expect(E.bisectLeft(0, low: 0), 0);
    expect(E.bisectLeft(1, low: 0), 1);
    expect(E.bisectLeft(2, low: 0), 2);
    expect(E.bisectLeft(3, low: 0), 6);
    expect(E.bisectLeft(4, low: 0), 8);
    expect(E.bisectLeft(5, low: 0), 8);
    expect(E.bisectLeft(6, low: 0), 9);
    expect(E.bisectLeft(7, low: 0), 10);
    expect(E.bisectLeft(8, low: 0), 10);
  });

  test('list.bisectLeft for A lo=1 hi=None', () {
    expect(A.bisectLeft(-2, low: 1), 1);
    expect(A.bisectLeft(-1, low: 1), 1);
    expect(A.bisectLeft(0, low: 1), 1);
    expect(A.bisectLeft(1, low: 1), 1);
    expect(A.bisectLeft(2, low: 1), 1);
    expect(A.bisectLeft(3, low: 1), 1);
    expect(A.bisectLeft(4, low: 1), 1);
    expect(A.bisectLeft(5, low: 1), 1);
    expect(A.bisectLeft(6, low: 1), 1);
    expect(A.bisectLeft(7, low: 1), 1);
    expect(A.bisectLeft(8, low: 1), 1);
  });

  test('list.bisectLeft for B lo=1 hi=None', () {
    expect(B.bisectLeft(-2, low: 1), 1);
    expect(B.bisectLeft(-1, low: 1), 1);
    expect(B.bisectLeft(0, low: 1), 1);
    expect(B.bisectLeft(1, low: 1), 1);
    expect(B.bisectLeft(2, low: 1), 1);
    expect(B.bisectLeft(3, low: 1), 1);
    expect(B.bisectLeft(4, low: 1), 1);
    expect(B.bisectLeft(5, low: 1), 1);
    expect(B.bisectLeft(6, low: 1), 1);
    expect(B.bisectLeft(7, low: 1), 1);
    expect(B.bisectLeft(8, low: 1), 1);
  });

  test('list.bisectLeft for C lo=1 hi=None', () {
    expect(C.bisectLeft(-2, low: 1), 1);
    expect(C.bisectLeft(-1, low: 1), 1);
    expect(C.bisectLeft(0, low: 1), 1);
    expect(C.bisectLeft(1, low: 1), 1);
    expect(C.bisectLeft(2, low: 1), 1);
    expect(C.bisectLeft(3, low: 1), 1);
    expect(C.bisectLeft(4, low: 1), 1);
    expect(C.bisectLeft(5, low: 1), 1);
    expect(C.bisectLeft(6, low: 1), 2);
    expect(C.bisectLeft(7, low: 1), 2);
    expect(C.bisectLeft(8, low: 1), 2);
  });

  test('list.bisectLeft for D lo=1 hi=None', () {
    expect(D.bisectLeft(-2, low: 1), 1);
    expect(D.bisectLeft(-1, low: 1), 1);
    expect(D.bisectLeft(0, low: 1), 1);
    expect(D.bisectLeft(1, low: 1), 1);
    expect(D.bisectLeft(2, low: 1), 1);
    expect(D.bisectLeft(3, low: 1), 1);
    expect(D.bisectLeft(4, low: 1), 1);
    expect(D.bisectLeft(5, low: 1), 2);
    expect(D.bisectLeft(6, low: 1), 3);
    expect(D.bisectLeft(7, low: 1), 3);
    expect(D.bisectLeft(8, low: 1), 3);
  });

  test('list.bisectLeft for E lo=1 hi=None', () {
    expect(E.bisectLeft(-2, low: 1), 1);
    expect(E.bisectLeft(-1, low: 1), 1);
    expect(E.bisectLeft(0, low: 1), 1);
    expect(E.bisectLeft(1, low: 1), 1);
    expect(E.bisectLeft(2, low: 1), 2);
    expect(E.bisectLeft(3, low: 1), 6);
    expect(E.bisectLeft(4, low: 1), 8);
    expect(E.bisectLeft(5, low: 1), 8);
    expect(E.bisectLeft(6, low: 1), 9);
    expect(E.bisectLeft(7, low: 1), 10);
    expect(E.bisectLeft(8, low: 1), 10);
  });

  test('list.bisectLeft for A lo=2 hi=None', () {
    expect(A.bisectLeft(-2, low: 2), 2);
    expect(A.bisectLeft(-1, low: 2), 2);
    expect(A.bisectLeft(0, low: 2), 2);
    expect(A.bisectLeft(1, low: 2), 2);
    expect(A.bisectLeft(2, low: 2), 2);
    expect(A.bisectLeft(3, low: 2), 2);
    expect(A.bisectLeft(4, low: 2), 2);
    expect(A.bisectLeft(5, low: 2), 2);
    expect(A.bisectLeft(6, low: 2), 2);
    expect(A.bisectLeft(7, low: 2), 2);
    expect(A.bisectLeft(8, low: 2), 2);
  });

  test('list.bisectLeft for B lo=2 hi=None', () {
    expect(B.bisectLeft(-2, low: 2), 2);
    expect(B.bisectLeft(-1, low: 2), 2);
    expect(B.bisectLeft(0, low: 2), 2);
    expect(B.bisectLeft(1, low: 2), 2);
    expect(B.bisectLeft(2, low: 2), 2);
    expect(B.bisectLeft(3, low: 2), 2);
    expect(B.bisectLeft(4, low: 2), 2);
    expect(B.bisectLeft(5, low: 2), 2);
    expect(B.bisectLeft(6, low: 2), 2);
    expect(B.bisectLeft(7, low: 2), 2);
    expect(B.bisectLeft(8, low: 2), 2);
  });

  test('list.bisectLeft for C lo=2 hi=None', () {
    expect(C.bisectLeft(-2, low: 2), 2);
    expect(C.bisectLeft(-1, low: 2), 2);
    expect(C.bisectLeft(0, low: 2), 2);
    expect(C.bisectLeft(1, low: 2), 2);
    expect(C.bisectLeft(2, low: 2), 2);
    expect(C.bisectLeft(3, low: 2), 2);
    expect(C.bisectLeft(4, low: 2), 2);
    expect(C.bisectLeft(5, low: 2), 2);
    expect(C.bisectLeft(6, low: 2), 2);
    expect(C.bisectLeft(7, low: 2), 2);
    expect(C.bisectLeft(8, low: 2), 2);
  });

  test('list.bisectLeft for D lo=2 hi=None', () {
    expect(D.bisectLeft(-2, low: 2), 2);
    expect(D.bisectLeft(-1, low: 2), 2);
    expect(D.bisectLeft(0, low: 2), 2);
    expect(D.bisectLeft(1, low: 2), 2);
    expect(D.bisectLeft(2, low: 2), 2);
    expect(D.bisectLeft(3, low: 2), 2);
    expect(D.bisectLeft(4, low: 2), 2);
    expect(D.bisectLeft(5, low: 2), 2);
    expect(D.bisectLeft(6, low: 2), 3);
    expect(D.bisectLeft(7, low: 2), 3);
    expect(D.bisectLeft(8, low: 2), 3);
  });

  test('list.bisectLeft for E lo=2 hi=None', () {
    expect(E.bisectLeft(-2, low: 2), 2);
    expect(E.bisectLeft(-1, low: 2), 2);
    expect(E.bisectLeft(0, low: 2), 2);
    expect(E.bisectLeft(1, low: 2), 2);
    expect(E.bisectLeft(2, low: 2), 2);
    expect(E.bisectLeft(3, low: 2), 6);
    expect(E.bisectLeft(4, low: 2), 8);
    expect(E.bisectLeft(5, low: 2), 8);
    expect(E.bisectLeft(6, low: 2), 9);
    expect(E.bisectLeft(7, low: 2), 10);
    expect(E.bisectLeft(8, low: 2), 10);
  });

  test('list.bisectLeft for A lo=3 hi=None', () {
    expect(A.bisectLeft(-2, low: 3), 3);
    expect(A.bisectLeft(-1, low: 3), 3);
    expect(A.bisectLeft(0, low: 3), 3);
    expect(A.bisectLeft(1, low: 3), 3);
    expect(A.bisectLeft(2, low: 3), 3);
    expect(A.bisectLeft(3, low: 3), 3);
    expect(A.bisectLeft(4, low: 3), 3);
    expect(A.bisectLeft(5, low: 3), 3);
    expect(A.bisectLeft(6, low: 3), 3);
    expect(A.bisectLeft(7, low: 3), 3);
    expect(A.bisectLeft(8, low: 3), 3);
  });

  test('list.bisectLeft for B lo=3 hi=None', () {
    expect(B.bisectLeft(-2, low: 3), 3);
    expect(B.bisectLeft(-1, low: 3), 3);
    expect(B.bisectLeft(0, low: 3), 3);
    expect(B.bisectLeft(1, low: 3), 3);
    expect(B.bisectLeft(2, low: 3), 3);
    expect(B.bisectLeft(3, low: 3), 3);
    expect(B.bisectLeft(4, low: 3), 3);
    expect(B.bisectLeft(5, low: 3), 3);
    expect(B.bisectLeft(6, low: 3), 3);
    expect(B.bisectLeft(7, low: 3), 3);
    expect(B.bisectLeft(8, low: 3), 3);
  });

  test('list.bisectLeft for C lo=3 hi=None', () {
    expect(C.bisectLeft(-2, low: 3), 3);
    expect(C.bisectLeft(-1, low: 3), 3);
    expect(C.bisectLeft(0, low: 3), 3);
    expect(C.bisectLeft(1, low: 3), 3);
    expect(C.bisectLeft(2, low: 3), 3);
    expect(C.bisectLeft(3, low: 3), 3);
    expect(C.bisectLeft(4, low: 3), 3);
    expect(C.bisectLeft(5, low: 3), 3);
    expect(C.bisectLeft(6, low: 3), 3);
    expect(C.bisectLeft(7, low: 3), 3);
    expect(C.bisectLeft(8, low: 3), 3);
  });

  test('list.bisectLeft for D lo=3 hi=None', () {
    expect(D.bisectLeft(-2, low: 3), 3);
    expect(D.bisectLeft(-1, low: 3), 3);
    expect(D.bisectLeft(0, low: 3), 3);
    expect(D.bisectLeft(1, low: 3), 3);
    expect(D.bisectLeft(2, low: 3), 3);
    expect(D.bisectLeft(3, low: 3), 3);
    expect(D.bisectLeft(4, low: 3), 3);
    expect(D.bisectLeft(5, low: 3), 3);
    expect(D.bisectLeft(6, low: 3), 3);
    expect(D.bisectLeft(7, low: 3), 3);
    expect(D.bisectLeft(8, low: 3), 3);
  });

  test('list.bisectLeft for E lo=3 hi=None', () {
    expect(E.bisectLeft(-2, low: 3), 3);
    expect(E.bisectLeft(-1, low: 3), 3);
    expect(E.bisectLeft(0, low: 3), 3);
    expect(E.bisectLeft(1, low: 3), 3);
    expect(E.bisectLeft(2, low: 3), 3);
    expect(E.bisectLeft(3, low: 3), 6);
    expect(E.bisectLeft(4, low: 3), 8);
    expect(E.bisectLeft(5, low: 3), 8);
    expect(E.bisectLeft(6, low: 3), 9);
    expect(E.bisectLeft(7, low: 3), 10);
    expect(E.bisectLeft(8, low: 3), 10);
  });

  test('list.bisectLeft for A lo=4 hi=None', () {
    expect(A.bisectLeft(-2, low: 4), 4);
    expect(A.bisectLeft(-1, low: 4), 4);
    expect(A.bisectLeft(0, low: 4), 4);
    expect(A.bisectLeft(1, low: 4), 4);
    expect(A.bisectLeft(2, low: 4), 4);
    expect(A.bisectLeft(3, low: 4), 4);
    expect(A.bisectLeft(4, low: 4), 4);
    expect(A.bisectLeft(5, low: 4), 4);
    expect(A.bisectLeft(6, low: 4), 4);
    expect(A.bisectLeft(7, low: 4), 4);
    expect(A.bisectLeft(8, low: 4), 4);
  });

  test('list.bisectLeft for B lo=4 hi=None', () {
    expect(B.bisectLeft(-2, low: 4), 4);
    expect(B.bisectLeft(-1, low: 4), 4);
    expect(B.bisectLeft(0, low: 4), 4);
    expect(B.bisectLeft(1, low: 4), 4);
    expect(B.bisectLeft(2, low: 4), 4);
    expect(B.bisectLeft(3, low: 4), 4);
    expect(B.bisectLeft(4, low: 4), 4);
    expect(B.bisectLeft(5, low: 4), 4);
    expect(B.bisectLeft(6, low: 4), 4);
    expect(B.bisectLeft(7, low: 4), 4);
    expect(B.bisectLeft(8, low: 4), 4);
  });

  test('list.bisectLeft for C lo=4 hi=None', () {
    expect(C.bisectLeft(-2, low: 4), 4);
    expect(C.bisectLeft(-1, low: 4), 4);
    expect(C.bisectLeft(0, low: 4), 4);
    expect(C.bisectLeft(1, low: 4), 4);
    expect(C.bisectLeft(2, low: 4), 4);
    expect(C.bisectLeft(3, low: 4), 4);
    expect(C.bisectLeft(4, low: 4), 4);
    expect(C.bisectLeft(5, low: 4), 4);
    expect(C.bisectLeft(6, low: 4), 4);
    expect(C.bisectLeft(7, low: 4), 4);
    expect(C.bisectLeft(8, low: 4), 4);
  });

  test('list.bisectLeft for D lo=4 hi=None', () {
    expect(D.bisectLeft(-2, low: 4), 4);
    expect(D.bisectLeft(-1, low: 4), 4);
    expect(D.bisectLeft(0, low: 4), 4);
    expect(D.bisectLeft(1, low: 4), 4);
    expect(D.bisectLeft(2, low: 4), 4);
    expect(D.bisectLeft(3, low: 4), 4);
    expect(D.bisectLeft(4, low: 4), 4);
    expect(D.bisectLeft(5, low: 4), 4);
    expect(D.bisectLeft(6, low: 4), 4);
    expect(D.bisectLeft(7, low: 4), 4);
    expect(D.bisectLeft(8, low: 4), 4);
  });

  test('list.bisectLeft for E lo=4 hi=None', () {
    expect(E.bisectLeft(-2, low: 4), 4);
    expect(E.bisectLeft(-1, low: 4), 4);
    expect(E.bisectLeft(0, low: 4), 4);
    expect(E.bisectLeft(1, low: 4), 4);
    expect(E.bisectLeft(2, low: 4), 4);
    expect(E.bisectLeft(3, low: 4), 6);
    expect(E.bisectLeft(4, low: 4), 8);
    expect(E.bisectLeft(5, low: 4), 8);
    expect(E.bisectLeft(6, low: 4), 9);
    expect(E.bisectLeft(7, low: 4), 10);
    expect(E.bisectLeft(8, low: 4), 10);
  });

  test('list.bisectLeft for A lo=5 hi=None', () {
    expect(A.bisectLeft(-2, low: 5), 5);
    expect(A.bisectLeft(-1, low: 5), 5);
    expect(A.bisectLeft(0, low: 5), 5);
    expect(A.bisectLeft(1, low: 5), 5);
    expect(A.bisectLeft(2, low: 5), 5);
    expect(A.bisectLeft(3, low: 5), 5);
    expect(A.bisectLeft(4, low: 5), 5);
    expect(A.bisectLeft(5, low: 5), 5);
    expect(A.bisectLeft(6, low: 5), 5);
    expect(A.bisectLeft(7, low: 5), 5);
    expect(A.bisectLeft(8, low: 5), 5);
  });

  test('list.bisectLeft for B lo=5 hi=None', () {
    expect(B.bisectLeft(-2, low: 5), 5);
    expect(B.bisectLeft(-1, low: 5), 5);
    expect(B.bisectLeft(0, low: 5), 5);
    expect(B.bisectLeft(1, low: 5), 5);
    expect(B.bisectLeft(2, low: 5), 5);
    expect(B.bisectLeft(3, low: 5), 5);
    expect(B.bisectLeft(4, low: 5), 5);
    expect(B.bisectLeft(5, low: 5), 5);
    expect(B.bisectLeft(6, low: 5), 5);
    expect(B.bisectLeft(7, low: 5), 5);
    expect(B.bisectLeft(8, low: 5), 5);
  });

  test('list.bisectLeft for C lo=5 hi=None', () {
    expect(C.bisectLeft(-2, low: 5), 5);
    expect(C.bisectLeft(-1, low: 5), 5);
    expect(C.bisectLeft(0, low: 5), 5);
    expect(C.bisectLeft(1, low: 5), 5);
    expect(C.bisectLeft(2, low: 5), 5);
    expect(C.bisectLeft(3, low: 5), 5);
    expect(C.bisectLeft(4, low: 5), 5);
    expect(C.bisectLeft(5, low: 5), 5);
    expect(C.bisectLeft(6, low: 5), 5);
    expect(C.bisectLeft(7, low: 5), 5);
    expect(C.bisectLeft(8, low: 5), 5);
  });

  test('list.bisectLeft for D lo=5 hi=None', () {
    expect(D.bisectLeft(-2, low: 5), 5);
    expect(D.bisectLeft(-1, low: 5), 5);
    expect(D.bisectLeft(0, low: 5), 5);
    expect(D.bisectLeft(1, low: 5), 5);
    expect(D.bisectLeft(2, low: 5), 5);
    expect(D.bisectLeft(3, low: 5), 5);
    expect(D.bisectLeft(4, low: 5), 5);
    expect(D.bisectLeft(5, low: 5), 5);
    expect(D.bisectLeft(6, low: 5), 5);
    expect(D.bisectLeft(7, low: 5), 5);
    expect(D.bisectLeft(8, low: 5), 5);
  });

  test('list.bisectLeft for E lo=5 hi=None', () {
    expect(E.bisectLeft(-2, low: 5), 5);
    expect(E.bisectLeft(-1, low: 5), 5);
    expect(E.bisectLeft(0, low: 5), 5);
    expect(E.bisectLeft(1, low: 5), 5);
    expect(E.bisectLeft(2, low: 5), 5);
    expect(E.bisectLeft(3, low: 5), 6);
    expect(E.bisectLeft(4, low: 5), 8);
    expect(E.bisectLeft(5, low: 5), 8);
    expect(E.bisectLeft(6, low: 5), 9);
    expect(E.bisectLeft(7, low: 5), 10);
    expect(E.bisectLeft(8, low: 5), 10);
  });

  test('list.bisectLeft for A lo=6 hi=None', () {
    expect(A.bisectLeft(-2, low: 6), 6);
    expect(A.bisectLeft(-1, low: 6), 6);
    expect(A.bisectLeft(0, low: 6), 6);
    expect(A.bisectLeft(1, low: 6), 6);
    expect(A.bisectLeft(2, low: 6), 6);
    expect(A.bisectLeft(3, low: 6), 6);
    expect(A.bisectLeft(4, low: 6), 6);
    expect(A.bisectLeft(5, low: 6), 6);
    expect(A.bisectLeft(6, low: 6), 6);
    expect(A.bisectLeft(7, low: 6), 6);
    expect(A.bisectLeft(8, low: 6), 6);
  });

  test('list.bisectLeft for B lo=6 hi=None', () {
    expect(B.bisectLeft(-2, low: 6), 6);
    expect(B.bisectLeft(-1, low: 6), 6);
    expect(B.bisectLeft(0, low: 6), 6);
    expect(B.bisectLeft(1, low: 6), 6);
    expect(B.bisectLeft(2, low: 6), 6);
    expect(B.bisectLeft(3, low: 6), 6);
    expect(B.bisectLeft(4, low: 6), 6);
    expect(B.bisectLeft(5, low: 6), 6);
    expect(B.bisectLeft(6, low: 6), 6);
    expect(B.bisectLeft(7, low: 6), 6);
    expect(B.bisectLeft(8, low: 6), 6);
  });

  test('list.bisectLeft for C lo=6 hi=None', () {
    expect(C.bisectLeft(-2, low: 6), 6);
    expect(C.bisectLeft(-1, low: 6), 6);
    expect(C.bisectLeft(0, low: 6), 6);
    expect(C.bisectLeft(1, low: 6), 6);
    expect(C.bisectLeft(2, low: 6), 6);
    expect(C.bisectLeft(3, low: 6), 6);
    expect(C.bisectLeft(4, low: 6), 6);
    expect(C.bisectLeft(5, low: 6), 6);
    expect(C.bisectLeft(6, low: 6), 6);
    expect(C.bisectLeft(7, low: 6), 6);
    expect(C.bisectLeft(8, low: 6), 6);
  });

  test('list.bisectLeft for D lo=6 hi=None', () {
    expect(D.bisectLeft(-2, low: 6), 6);
    expect(D.bisectLeft(-1, low: 6), 6);
    expect(D.bisectLeft(0, low: 6), 6);
    expect(D.bisectLeft(1, low: 6), 6);
    expect(D.bisectLeft(2, low: 6), 6);
    expect(D.bisectLeft(3, low: 6), 6);
    expect(D.bisectLeft(4, low: 6), 6);
    expect(D.bisectLeft(5, low: 6), 6);
    expect(D.bisectLeft(6, low: 6), 6);
    expect(D.bisectLeft(7, low: 6), 6);
    expect(D.bisectLeft(8, low: 6), 6);
  });

  test('list.bisectLeft for E lo=6 hi=None', () {
    expect(E.bisectLeft(-2, low: 6), 6);
    expect(E.bisectLeft(-1, low: 6), 6);
    expect(E.bisectLeft(0, low: 6), 6);
    expect(E.bisectLeft(1, low: 6), 6);
    expect(E.bisectLeft(2, low: 6), 6);
    expect(E.bisectLeft(3, low: 6), 6);
    expect(E.bisectLeft(4, low: 6), 8);
    expect(E.bisectLeft(5, low: 6), 8);
    expect(E.bisectLeft(6, low: 6), 9);
    expect(E.bisectLeft(7, low: 6), 10);
    expect(E.bisectLeft(8, low: 6), 10);
  });

  test('list.bisectLeft for A lo=7 hi=None', () {
    expect(A.bisectLeft(-2, low: 7), 7);
    expect(A.bisectLeft(-1, low: 7), 7);
    expect(A.bisectLeft(0, low: 7), 7);
    expect(A.bisectLeft(1, low: 7), 7);
    expect(A.bisectLeft(2, low: 7), 7);
    expect(A.bisectLeft(3, low: 7), 7);
    expect(A.bisectLeft(4, low: 7), 7);
    expect(A.bisectLeft(5, low: 7), 7);
    expect(A.bisectLeft(6, low: 7), 7);
    expect(A.bisectLeft(7, low: 7), 7);
    expect(A.bisectLeft(8, low: 7), 7);
  });

  test('list.bisectLeft for B lo=7 hi=None', () {
    expect(B.bisectLeft(-2, low: 7), 7);
    expect(B.bisectLeft(-1, low: 7), 7);
    expect(B.bisectLeft(0, low: 7), 7);
    expect(B.bisectLeft(1, low: 7), 7);
    expect(B.bisectLeft(2, low: 7), 7);
    expect(B.bisectLeft(3, low: 7), 7);
    expect(B.bisectLeft(4, low: 7), 7);
    expect(B.bisectLeft(5, low: 7), 7);
    expect(B.bisectLeft(6, low: 7), 7);
    expect(B.bisectLeft(7, low: 7), 7);
    expect(B.bisectLeft(8, low: 7), 7);
  });

  test('list.bisectLeft for C lo=7 hi=None', () {
    expect(C.bisectLeft(-2, low: 7), 7);
    expect(C.bisectLeft(-1, low: 7), 7);
    expect(C.bisectLeft(0, low: 7), 7);
    expect(C.bisectLeft(1, low: 7), 7);
    expect(C.bisectLeft(2, low: 7), 7);
    expect(C.bisectLeft(3, low: 7), 7);
    expect(C.bisectLeft(4, low: 7), 7);
    expect(C.bisectLeft(5, low: 7), 7);
    expect(C.bisectLeft(6, low: 7), 7);
    expect(C.bisectLeft(7, low: 7), 7);
    expect(C.bisectLeft(8, low: 7), 7);
  });

  test('list.bisectLeft for D lo=7 hi=None', () {
    expect(D.bisectLeft(-2, low: 7), 7);
    expect(D.bisectLeft(-1, low: 7), 7);
    expect(D.bisectLeft(0, low: 7), 7);
    expect(D.bisectLeft(1, low: 7), 7);
    expect(D.bisectLeft(2, low: 7), 7);
    expect(D.bisectLeft(3, low: 7), 7);
    expect(D.bisectLeft(4, low: 7), 7);
    expect(D.bisectLeft(5, low: 7), 7);
    expect(D.bisectLeft(6, low: 7), 7);
    expect(D.bisectLeft(7, low: 7), 7);
    expect(D.bisectLeft(8, low: 7), 7);
  });

  test('list.bisectLeft for E lo=7 hi=None', () {
    expect(E.bisectLeft(-2, low: 7), 7);
    expect(E.bisectLeft(-1, low: 7), 7);
    expect(E.bisectLeft(0, low: 7), 7);
    expect(E.bisectLeft(1, low: 7), 7);
    expect(E.bisectLeft(2, low: 7), 7);
    expect(E.bisectLeft(3, low: 7), 7);
    expect(E.bisectLeft(4, low: 7), 8);
    expect(E.bisectLeft(5, low: 7), 8);
    expect(E.bisectLeft(6, low: 7), 9);
    expect(E.bisectLeft(7, low: 7), 10);
    expect(E.bisectLeft(8, low: 7), 10);
  });

  test('list.bisectLeft for A lo=8 hi=None', () {
    expect(A.bisectLeft(-2, low: 8), 8);
    expect(A.bisectLeft(-1, low: 8), 8);
    expect(A.bisectLeft(0, low: 8), 8);
    expect(A.bisectLeft(1, low: 8), 8);
    expect(A.bisectLeft(2, low: 8), 8);
    expect(A.bisectLeft(3, low: 8), 8);
    expect(A.bisectLeft(4, low: 8), 8);
    expect(A.bisectLeft(5, low: 8), 8);
    expect(A.bisectLeft(6, low: 8), 8);
    expect(A.bisectLeft(7, low: 8), 8);
    expect(A.bisectLeft(8, low: 8), 8);
  });

  test('list.bisectLeft for B lo=8 hi=None', () {
    expect(B.bisectLeft(-2, low: 8), 8);
    expect(B.bisectLeft(-1, low: 8), 8);
    expect(B.bisectLeft(0, low: 8), 8);
    expect(B.bisectLeft(1, low: 8), 8);
    expect(B.bisectLeft(2, low: 8), 8);
    expect(B.bisectLeft(3, low: 8), 8);
    expect(B.bisectLeft(4, low: 8), 8);
    expect(B.bisectLeft(5, low: 8), 8);
    expect(B.bisectLeft(6, low: 8), 8);
    expect(B.bisectLeft(7, low: 8), 8);
    expect(B.bisectLeft(8, low: 8), 8);
  });

  test('list.bisectLeft for C lo=8 hi=None', () {
    expect(C.bisectLeft(-2, low: 8), 8);
    expect(C.bisectLeft(-1, low: 8), 8);
    expect(C.bisectLeft(0, low: 8), 8);
    expect(C.bisectLeft(1, low: 8), 8);
    expect(C.bisectLeft(2, low: 8), 8);
    expect(C.bisectLeft(3, low: 8), 8);
    expect(C.bisectLeft(4, low: 8), 8);
    expect(C.bisectLeft(5, low: 8), 8);
    expect(C.bisectLeft(6, low: 8), 8);
    expect(C.bisectLeft(7, low: 8), 8);
    expect(C.bisectLeft(8, low: 8), 8);
  });

  test('list.bisectLeft for D lo=8 hi=None', () {
    expect(D.bisectLeft(-2, low: 8), 8);
    expect(D.bisectLeft(-1, low: 8), 8);
    expect(D.bisectLeft(0, low: 8), 8);
    expect(D.bisectLeft(1, low: 8), 8);
    expect(D.bisectLeft(2, low: 8), 8);
    expect(D.bisectLeft(3, low: 8), 8);
    expect(D.bisectLeft(4, low: 8), 8);
    expect(D.bisectLeft(5, low: 8), 8);
    expect(D.bisectLeft(6, low: 8), 8);
    expect(D.bisectLeft(7, low: 8), 8);
    expect(D.bisectLeft(8, low: 8), 8);
  });

  test('list.bisectLeft for E lo=8 hi=None', () {
    expect(E.bisectLeft(-2, low: 8), 8);
    expect(E.bisectLeft(-1, low: 8), 8);
    expect(E.bisectLeft(0, low: 8), 8);
    expect(E.bisectLeft(1, low: 8), 8);
    expect(E.bisectLeft(2, low: 8), 8);
    expect(E.bisectLeft(3, low: 8), 8);
    expect(E.bisectLeft(4, low: 8), 8);
    expect(E.bisectLeft(5, low: 8), 8);
    expect(E.bisectLeft(6, low: 8), 9);
    expect(E.bisectLeft(7, low: 8), 10);
    expect(E.bisectLeft(8, low: 8), 10);
  });

  test('list.bisectLeft for A lo=9 hi=None', () {
    expect(A.bisectLeft(-2, low: 9), 9);
    expect(A.bisectLeft(-1, low: 9), 9);
    expect(A.bisectLeft(0, low: 9), 9);
    expect(A.bisectLeft(1, low: 9), 9);
    expect(A.bisectLeft(2, low: 9), 9);
    expect(A.bisectLeft(3, low: 9), 9);
    expect(A.bisectLeft(4, low: 9), 9);
    expect(A.bisectLeft(5, low: 9), 9);
    expect(A.bisectLeft(6, low: 9), 9);
    expect(A.bisectLeft(7, low: 9), 9);
    expect(A.bisectLeft(8, low: 9), 9);
  });

  test('list.bisectLeft for B lo=9 hi=None', () {
    expect(B.bisectLeft(-2, low: 9), 9);
    expect(B.bisectLeft(-1, low: 9), 9);
    expect(B.bisectLeft(0, low: 9), 9);
    expect(B.bisectLeft(1, low: 9), 9);
    expect(B.bisectLeft(2, low: 9), 9);
    expect(B.bisectLeft(3, low: 9), 9);
    expect(B.bisectLeft(4, low: 9), 9);
    expect(B.bisectLeft(5, low: 9), 9);
    expect(B.bisectLeft(6, low: 9), 9);
    expect(B.bisectLeft(7, low: 9), 9);
    expect(B.bisectLeft(8, low: 9), 9);
  });

  test('list.bisectLeft for C lo=9 hi=None', () {
    expect(C.bisectLeft(-2, low: 9), 9);
    expect(C.bisectLeft(-1, low: 9), 9);
    expect(C.bisectLeft(0, low: 9), 9);
    expect(C.bisectLeft(1, low: 9), 9);
    expect(C.bisectLeft(2, low: 9), 9);
    expect(C.bisectLeft(3, low: 9), 9);
    expect(C.bisectLeft(4, low: 9), 9);
    expect(C.bisectLeft(5, low: 9), 9);
    expect(C.bisectLeft(6, low: 9), 9);
    expect(C.bisectLeft(7, low: 9), 9);
    expect(C.bisectLeft(8, low: 9), 9);
  });

  test('list.bisectLeft for D lo=9 hi=None', () {
    expect(D.bisectLeft(-2, low: 9), 9);
    expect(D.bisectLeft(-1, low: 9), 9);
    expect(D.bisectLeft(0, low: 9), 9);
    expect(D.bisectLeft(1, low: 9), 9);
    expect(D.bisectLeft(2, low: 9), 9);
    expect(D.bisectLeft(3, low: 9), 9);
    expect(D.bisectLeft(4, low: 9), 9);
    expect(D.bisectLeft(5, low: 9), 9);
    expect(D.bisectLeft(6, low: 9), 9);
    expect(D.bisectLeft(7, low: 9), 9);
    expect(D.bisectLeft(8, low: 9), 9);
  });

  test('list.bisectLeft for E lo=9 hi=None', () {
    expect(E.bisectLeft(-2, low: 9), 9);
    expect(E.bisectLeft(-1, low: 9), 9);
    expect(E.bisectLeft(0, low: 9), 9);
    expect(E.bisectLeft(1, low: 9), 9);
    expect(E.bisectLeft(2, low: 9), 9);
    expect(E.bisectLeft(3, low: 9), 9);
    expect(E.bisectLeft(4, low: 9), 9);
    expect(E.bisectLeft(5, low: 9), 9);
    expect(E.bisectLeft(6, low: 9), 9);
    expect(E.bisectLeft(7, low: 9), 10);
    expect(E.bisectLeft(8, low: 9), 10);
  });

  test('list.bisectLeft for A lo=None hi=0', () {
    expect(A.bisectLeft(-2, high: 0), 0);
    expect(A.bisectLeft(-1, high: 0), 0);
    expect(A.bisectLeft(0, high: 0), 0);
    expect(A.bisectLeft(1, high: 0), 0);
    expect(A.bisectLeft(2, high: 0), 0);
    expect(A.bisectLeft(3, high: 0), 0);
    expect(A.bisectLeft(4, high: 0), 0);
    expect(A.bisectLeft(5, high: 0), 0);
    expect(A.bisectLeft(6, high: 0), 0);
    expect(A.bisectLeft(7, high: 0), 0);
    expect(A.bisectLeft(8, high: 0), 0);
  });

  test('list.bisectLeft for B lo=None hi=0', () {
    expect(B.bisectLeft(-2, high: 0), 0);
    expect(B.bisectLeft(-1, high: 0), 0);
    expect(B.bisectLeft(0, high: 0), 0);
    expect(B.bisectLeft(1, high: 0), 0);
    expect(B.bisectLeft(2, high: 0), 0);
    expect(B.bisectLeft(3, high: 0), 0);
    expect(B.bisectLeft(4, high: 0), 0);
    expect(B.bisectLeft(5, high: 0), 0);
    expect(B.bisectLeft(6, high: 0), 0);
    expect(B.bisectLeft(7, high: 0), 0);
    expect(B.bisectLeft(8, high: 0), 0);
  });

  test('list.bisectLeft for C lo=None hi=0', () {
    expect(C.bisectLeft(-2, high: 0), 0);
    expect(C.bisectLeft(-1, high: 0), 0);
    expect(C.bisectLeft(0, high: 0), 0);
    expect(C.bisectLeft(1, high: 0), 0);
    expect(C.bisectLeft(2, high: 0), 0);
    expect(C.bisectLeft(3, high: 0), 0);
    expect(C.bisectLeft(4, high: 0), 0);
    expect(C.bisectLeft(5, high: 0), 0);
    expect(C.bisectLeft(6, high: 0), 0);
    expect(C.bisectLeft(7, high: 0), 0);
    expect(C.bisectLeft(8, high: 0), 0);
  });

  test('list.bisectLeft for D lo=None hi=0', () {
    expect(D.bisectLeft(-2, high: 0), 0);
    expect(D.bisectLeft(-1, high: 0), 0);
    expect(D.bisectLeft(0, high: 0), 0);
    expect(D.bisectLeft(1, high: 0), 0);
    expect(D.bisectLeft(2, high: 0), 0);
    expect(D.bisectLeft(3, high: 0), 0);
    expect(D.bisectLeft(4, high: 0), 0);
    expect(D.bisectLeft(5, high: 0), 0);
    expect(D.bisectLeft(6, high: 0), 0);
    expect(D.bisectLeft(7, high: 0), 0);
    expect(D.bisectLeft(8, high: 0), 0);
  });

  test('list.bisectLeft for E lo=None hi=0', () {
    expect(E.bisectLeft(-2, high: 0), 0);
    expect(E.bisectLeft(-1, high: 0), 0);
    expect(E.bisectLeft(0, high: 0), 0);
    expect(E.bisectLeft(1, high: 0), 0);
    expect(E.bisectLeft(2, high: 0), 0);
    expect(E.bisectLeft(3, high: 0), 0);
    expect(E.bisectLeft(4, high: 0), 0);
    expect(E.bisectLeft(5, high: 0), 0);
    expect(E.bisectLeft(6, high: 0), 0);
    expect(E.bisectLeft(7, high: 0), 0);
    expect(E.bisectLeft(8, high: 0), 0);
  });

  test('list.bisectLeft for A lo=0 hi=0', () {
    expect(A.bisectLeft(-2, low: 0, high: 0), 0);
    expect(A.bisectLeft(-1, low: 0, high: 0), 0);
    expect(A.bisectLeft(0, low: 0, high: 0), 0);
    expect(A.bisectLeft(1, low: 0, high: 0), 0);
    expect(A.bisectLeft(2, low: 0, high: 0), 0);
    expect(A.bisectLeft(3, low: 0, high: 0), 0);
    expect(A.bisectLeft(4, low: 0, high: 0), 0);
    expect(A.bisectLeft(5, low: 0, high: 0), 0);
    expect(A.bisectLeft(6, low: 0, high: 0), 0);
    expect(A.bisectLeft(7, low: 0, high: 0), 0);
    expect(A.bisectLeft(8, low: 0, high: 0), 0);
  });

  test('list.bisectLeft for B lo=0 hi=0', () {
    expect(B.bisectLeft(-2, low: 0, high: 0), 0);
    expect(B.bisectLeft(-1, low: 0, high: 0), 0);
    expect(B.bisectLeft(0, low: 0, high: 0), 0);
    expect(B.bisectLeft(1, low: 0, high: 0), 0);
    expect(B.bisectLeft(2, low: 0, high: 0), 0);
    expect(B.bisectLeft(3, low: 0, high: 0), 0);
    expect(B.bisectLeft(4, low: 0, high: 0), 0);
    expect(B.bisectLeft(5, low: 0, high: 0), 0);
    expect(B.bisectLeft(6, low: 0, high: 0), 0);
    expect(B.bisectLeft(7, low: 0, high: 0), 0);
    expect(B.bisectLeft(8, low: 0, high: 0), 0);
  });

  test('list.bisectLeft for C lo=0 hi=0', () {
    expect(C.bisectLeft(-2, low: 0, high: 0), 0);
    expect(C.bisectLeft(-1, low: 0, high: 0), 0);
    expect(C.bisectLeft(0, low: 0, high: 0), 0);
    expect(C.bisectLeft(1, low: 0, high: 0), 0);
    expect(C.bisectLeft(2, low: 0, high: 0), 0);
    expect(C.bisectLeft(3, low: 0, high: 0), 0);
    expect(C.bisectLeft(4, low: 0, high: 0), 0);
    expect(C.bisectLeft(5, low: 0, high: 0), 0);
    expect(C.bisectLeft(6, low: 0, high: 0), 0);
    expect(C.bisectLeft(7, low: 0, high: 0), 0);
    expect(C.bisectLeft(8, low: 0, high: 0), 0);
  });

  test('list.bisectLeft for D lo=0 hi=0', () {
    expect(D.bisectLeft(-2, low: 0, high: 0), 0);
    expect(D.bisectLeft(-1, low: 0, high: 0), 0);
    expect(D.bisectLeft(0, low: 0, high: 0), 0);
    expect(D.bisectLeft(1, low: 0, high: 0), 0);
    expect(D.bisectLeft(2, low: 0, high: 0), 0);
    expect(D.bisectLeft(3, low: 0, high: 0), 0);
    expect(D.bisectLeft(4, low: 0, high: 0), 0);
    expect(D.bisectLeft(5, low: 0, high: 0), 0);
    expect(D.bisectLeft(6, low: 0, high: 0), 0);
    expect(D.bisectLeft(7, low: 0, high: 0), 0);
    expect(D.bisectLeft(8, low: 0, high: 0), 0);
  });

  test('list.bisectLeft for E lo=0 hi=0', () {
    expect(E.bisectLeft(-2, low: 0, high: 0), 0);
    expect(E.bisectLeft(-1, low: 0, high: 0), 0);
    expect(E.bisectLeft(0, low: 0, high: 0), 0);
    expect(E.bisectLeft(1, low: 0, high: 0), 0);
    expect(E.bisectLeft(2, low: 0, high: 0), 0);
    expect(E.bisectLeft(3, low: 0, high: 0), 0);
    expect(E.bisectLeft(4, low: 0, high: 0), 0);
    expect(E.bisectLeft(5, low: 0, high: 0), 0);
    expect(E.bisectLeft(6, low: 0, high: 0), 0);
    expect(E.bisectLeft(7, low: 0, high: 0), 0);
    expect(E.bisectLeft(8, low: 0, high: 0), 0);
  });

  test('list.bisectLeft for A lo=1 hi=0', () {
    expect(A.bisectLeft(-2, low: 1, high: 0), 1);
    expect(A.bisectLeft(-1, low: 1, high: 0), 1);
    expect(A.bisectLeft(0, low: 1, high: 0), 1);
    expect(A.bisectLeft(1, low: 1, high: 0), 1);
    expect(A.bisectLeft(2, low: 1, high: 0), 1);
    expect(A.bisectLeft(3, low: 1, high: 0), 1);
    expect(A.bisectLeft(4, low: 1, high: 0), 1);
    expect(A.bisectLeft(5, low: 1, high: 0), 1);
    expect(A.bisectLeft(6, low: 1, high: 0), 1);
    expect(A.bisectLeft(7, low: 1, high: 0), 1);
    expect(A.bisectLeft(8, low: 1, high: 0), 1);
  });

  test('list.bisectLeft for B lo=1 hi=0', () {
    expect(B.bisectLeft(-2, low: 1, high: 0), 1);
    expect(B.bisectLeft(-1, low: 1, high: 0), 1);
    expect(B.bisectLeft(0, low: 1, high: 0), 1);
    expect(B.bisectLeft(1, low: 1, high: 0), 1);
    expect(B.bisectLeft(2, low: 1, high: 0), 1);
    expect(B.bisectLeft(3, low: 1, high: 0), 1);
    expect(B.bisectLeft(4, low: 1, high: 0), 1);
    expect(B.bisectLeft(5, low: 1, high: 0), 1);
    expect(B.bisectLeft(6, low: 1, high: 0), 1);
    expect(B.bisectLeft(7, low: 1, high: 0), 1);
    expect(B.bisectLeft(8, low: 1, high: 0), 1);
  });

  test('list.bisectLeft for C lo=1 hi=0', () {
    expect(C.bisectLeft(-2, low: 1, high: 0), 1);
    expect(C.bisectLeft(-1, low: 1, high: 0), 1);
    expect(C.bisectLeft(0, low: 1, high: 0), 1);
    expect(C.bisectLeft(1, low: 1, high: 0), 1);
    expect(C.bisectLeft(2, low: 1, high: 0), 1);
    expect(C.bisectLeft(3, low: 1, high: 0), 1);
    expect(C.bisectLeft(4, low: 1, high: 0), 1);
    expect(C.bisectLeft(5, low: 1, high: 0), 1);
    expect(C.bisectLeft(6, low: 1, high: 0), 1);
    expect(C.bisectLeft(7, low: 1, high: 0), 1);
    expect(C.bisectLeft(8, low: 1, high: 0), 1);
  });

  test('list.bisectLeft for D lo=1 hi=0', () {
    expect(D.bisectLeft(-2, low: 1, high: 0), 1);
    expect(D.bisectLeft(-1, low: 1, high: 0), 1);
    expect(D.bisectLeft(0, low: 1, high: 0), 1);
    expect(D.bisectLeft(1, low: 1, high: 0), 1);
    expect(D.bisectLeft(2, low: 1, high: 0), 1);
    expect(D.bisectLeft(3, low: 1, high: 0), 1);
    expect(D.bisectLeft(4, low: 1, high: 0), 1);
    expect(D.bisectLeft(5, low: 1, high: 0), 1);
    expect(D.bisectLeft(6, low: 1, high: 0), 1);
    expect(D.bisectLeft(7, low: 1, high: 0), 1);
    expect(D.bisectLeft(8, low: 1, high: 0), 1);
  });

  test('list.bisectLeft for E lo=1 hi=0', () {
    expect(E.bisectLeft(-2, low: 1, high: 0), 1);
    expect(E.bisectLeft(-1, low: 1, high: 0), 1);
    expect(E.bisectLeft(0, low: 1, high: 0), 1);
    expect(E.bisectLeft(1, low: 1, high: 0), 1);
    expect(E.bisectLeft(2, low: 1, high: 0), 1);
    expect(E.bisectLeft(3, low: 1, high: 0), 1);
    expect(E.bisectLeft(4, low: 1, high: 0), 1);
    expect(E.bisectLeft(5, low: 1, high: 0), 1);
    expect(E.bisectLeft(6, low: 1, high: 0), 1);
    expect(E.bisectLeft(7, low: 1, high: 0), 1);
    expect(E.bisectLeft(8, low: 1, high: 0), 1);
  });

  test('list.bisectLeft for A lo=2 hi=0', () {
    expect(A.bisectLeft(-2, low: 2, high: 0), 2);
    expect(A.bisectLeft(-1, low: 2, high: 0), 2);
    expect(A.bisectLeft(0, low: 2, high: 0), 2);
    expect(A.bisectLeft(1, low: 2, high: 0), 2);
    expect(A.bisectLeft(2, low: 2, high: 0), 2);
    expect(A.bisectLeft(3, low: 2, high: 0), 2);
    expect(A.bisectLeft(4, low: 2, high: 0), 2);
    expect(A.bisectLeft(5, low: 2, high: 0), 2);
    expect(A.bisectLeft(6, low: 2, high: 0), 2);
    expect(A.bisectLeft(7, low: 2, high: 0), 2);
    expect(A.bisectLeft(8, low: 2, high: 0), 2);
  });

  test('list.bisectLeft for B lo=2 hi=0', () {
    expect(B.bisectLeft(-2, low: 2, high: 0), 2);
    expect(B.bisectLeft(-1, low: 2, high: 0), 2);
    expect(B.bisectLeft(0, low: 2, high: 0), 2);
    expect(B.bisectLeft(1, low: 2, high: 0), 2);
    expect(B.bisectLeft(2, low: 2, high: 0), 2);
    expect(B.bisectLeft(3, low: 2, high: 0), 2);
    expect(B.bisectLeft(4, low: 2, high: 0), 2);
    expect(B.bisectLeft(5, low: 2, high: 0), 2);
    expect(B.bisectLeft(6, low: 2, high: 0), 2);
    expect(B.bisectLeft(7, low: 2, high: 0), 2);
    expect(B.bisectLeft(8, low: 2, high: 0), 2);
  });

  test('list.bisectLeft for C lo=2 hi=0', () {
    expect(C.bisectLeft(-2, low: 2, high: 0), 2);
    expect(C.bisectLeft(-1, low: 2, high: 0), 2);
    expect(C.bisectLeft(0, low: 2, high: 0), 2);
    expect(C.bisectLeft(1, low: 2, high: 0), 2);
    expect(C.bisectLeft(2, low: 2, high: 0), 2);
    expect(C.bisectLeft(3, low: 2, high: 0), 2);
    expect(C.bisectLeft(4, low: 2, high: 0), 2);
    expect(C.bisectLeft(5, low: 2, high: 0), 2);
    expect(C.bisectLeft(6, low: 2, high: 0), 2);
    expect(C.bisectLeft(7, low: 2, high: 0), 2);
    expect(C.bisectLeft(8, low: 2, high: 0), 2);
  });

  test('list.bisectLeft for D lo=2 hi=0', () {
    expect(D.bisectLeft(-2, low: 2, high: 0), 2);
    expect(D.bisectLeft(-1, low: 2, high: 0), 2);
    expect(D.bisectLeft(0, low: 2, high: 0), 2);
    expect(D.bisectLeft(1, low: 2, high: 0), 2);
    expect(D.bisectLeft(2, low: 2, high: 0), 2);
    expect(D.bisectLeft(3, low: 2, high: 0), 2);
    expect(D.bisectLeft(4, low: 2, high: 0), 2);
    expect(D.bisectLeft(5, low: 2, high: 0), 2);
    expect(D.bisectLeft(6, low: 2, high: 0), 2);
    expect(D.bisectLeft(7, low: 2, high: 0), 2);
    expect(D.bisectLeft(8, low: 2, high: 0), 2);
  });

  test('list.bisectLeft for E lo=2 hi=0', () {
    expect(E.bisectLeft(-2, low: 2, high: 0), 2);
    expect(E.bisectLeft(-1, low: 2, high: 0), 2);
    expect(E.bisectLeft(0, low: 2, high: 0), 2);
    expect(E.bisectLeft(1, low: 2, high: 0), 2);
    expect(E.bisectLeft(2, low: 2, high: 0), 2);
    expect(E.bisectLeft(3, low: 2, high: 0), 2);
    expect(E.bisectLeft(4, low: 2, high: 0), 2);
    expect(E.bisectLeft(5, low: 2, high: 0), 2);
    expect(E.bisectLeft(6, low: 2, high: 0), 2);
    expect(E.bisectLeft(7, low: 2, high: 0), 2);
    expect(E.bisectLeft(8, low: 2, high: 0), 2);
  });

  test('list.bisectLeft for A lo=3 hi=0', () {
    expect(A.bisectLeft(-2, low: 3, high: 0), 3);
    expect(A.bisectLeft(-1, low: 3, high: 0), 3);
    expect(A.bisectLeft(0, low: 3, high: 0), 3);
    expect(A.bisectLeft(1, low: 3, high: 0), 3);
    expect(A.bisectLeft(2, low: 3, high: 0), 3);
    expect(A.bisectLeft(3, low: 3, high: 0), 3);
    expect(A.bisectLeft(4, low: 3, high: 0), 3);
    expect(A.bisectLeft(5, low: 3, high: 0), 3);
    expect(A.bisectLeft(6, low: 3, high: 0), 3);
    expect(A.bisectLeft(7, low: 3, high: 0), 3);
    expect(A.bisectLeft(8, low: 3, high: 0), 3);
  });

  test('list.bisectLeft for B lo=3 hi=0', () {
    expect(B.bisectLeft(-2, low: 3, high: 0), 3);
    expect(B.bisectLeft(-1, low: 3, high: 0), 3);
    expect(B.bisectLeft(0, low: 3, high: 0), 3);
    expect(B.bisectLeft(1, low: 3, high: 0), 3);
    expect(B.bisectLeft(2, low: 3, high: 0), 3);
    expect(B.bisectLeft(3, low: 3, high: 0), 3);
    expect(B.bisectLeft(4, low: 3, high: 0), 3);
    expect(B.bisectLeft(5, low: 3, high: 0), 3);
    expect(B.bisectLeft(6, low: 3, high: 0), 3);
    expect(B.bisectLeft(7, low: 3, high: 0), 3);
    expect(B.bisectLeft(8, low: 3, high: 0), 3);
  });

  test('list.bisectLeft for C lo=3 hi=0', () {
    expect(C.bisectLeft(-2, low: 3, high: 0), 3);
    expect(C.bisectLeft(-1, low: 3, high: 0), 3);
    expect(C.bisectLeft(0, low: 3, high: 0), 3);
    expect(C.bisectLeft(1, low: 3, high: 0), 3);
    expect(C.bisectLeft(2, low: 3, high: 0), 3);
    expect(C.bisectLeft(3, low: 3, high: 0), 3);
    expect(C.bisectLeft(4, low: 3, high: 0), 3);
    expect(C.bisectLeft(5, low: 3, high: 0), 3);
    expect(C.bisectLeft(6, low: 3, high: 0), 3);
    expect(C.bisectLeft(7, low: 3, high: 0), 3);
    expect(C.bisectLeft(8, low: 3, high: 0), 3);
  });

  test('list.bisectLeft for D lo=3 hi=0', () {
    expect(D.bisectLeft(-2, low: 3, high: 0), 3);
    expect(D.bisectLeft(-1, low: 3, high: 0), 3);
    expect(D.bisectLeft(0, low: 3, high: 0), 3);
    expect(D.bisectLeft(1, low: 3, high: 0), 3);
    expect(D.bisectLeft(2, low: 3, high: 0), 3);
    expect(D.bisectLeft(3, low: 3, high: 0), 3);
    expect(D.bisectLeft(4, low: 3, high: 0), 3);
    expect(D.bisectLeft(5, low: 3, high: 0), 3);
    expect(D.bisectLeft(6, low: 3, high: 0), 3);
    expect(D.bisectLeft(7, low: 3, high: 0), 3);
    expect(D.bisectLeft(8, low: 3, high: 0), 3);
  });

  test('list.bisectLeft for E lo=3 hi=0', () {
    expect(E.bisectLeft(-2, low: 3, high: 0), 3);
    expect(E.bisectLeft(-1, low: 3, high: 0), 3);
    expect(E.bisectLeft(0, low: 3, high: 0), 3);
    expect(E.bisectLeft(1, low: 3, high: 0), 3);
    expect(E.bisectLeft(2, low: 3, high: 0), 3);
    expect(E.bisectLeft(3, low: 3, high: 0), 3);
    expect(E.bisectLeft(4, low: 3, high: 0), 3);
    expect(E.bisectLeft(5, low: 3, high: 0), 3);
    expect(E.bisectLeft(6, low: 3, high: 0), 3);
    expect(E.bisectLeft(7, low: 3, high: 0), 3);
    expect(E.bisectLeft(8, low: 3, high: 0), 3);
  });

  test('list.bisectLeft for A lo=4 hi=0', () {
    expect(A.bisectLeft(-2, low: 4, high: 0), 4);
    expect(A.bisectLeft(-1, low: 4, high: 0), 4);
    expect(A.bisectLeft(0, low: 4, high: 0), 4);
    expect(A.bisectLeft(1, low: 4, high: 0), 4);
    expect(A.bisectLeft(2, low: 4, high: 0), 4);
    expect(A.bisectLeft(3, low: 4, high: 0), 4);
    expect(A.bisectLeft(4, low: 4, high: 0), 4);
    expect(A.bisectLeft(5, low: 4, high: 0), 4);
    expect(A.bisectLeft(6, low: 4, high: 0), 4);
    expect(A.bisectLeft(7, low: 4, high: 0), 4);
    expect(A.bisectLeft(8, low: 4, high: 0), 4);
  });

  test('list.bisectLeft for B lo=4 hi=0', () {
    expect(B.bisectLeft(-2, low: 4, high: 0), 4);
    expect(B.bisectLeft(-1, low: 4, high: 0), 4);
    expect(B.bisectLeft(0, low: 4, high: 0), 4);
    expect(B.bisectLeft(1, low: 4, high: 0), 4);
    expect(B.bisectLeft(2, low: 4, high: 0), 4);
    expect(B.bisectLeft(3, low: 4, high: 0), 4);
    expect(B.bisectLeft(4, low: 4, high: 0), 4);
    expect(B.bisectLeft(5, low: 4, high: 0), 4);
    expect(B.bisectLeft(6, low: 4, high: 0), 4);
    expect(B.bisectLeft(7, low: 4, high: 0), 4);
    expect(B.bisectLeft(8, low: 4, high: 0), 4);
  });

  test('list.bisectLeft for C lo=4 hi=0', () {
    expect(C.bisectLeft(-2, low: 4, high: 0), 4);
    expect(C.bisectLeft(-1, low: 4, high: 0), 4);
    expect(C.bisectLeft(0, low: 4, high: 0), 4);
    expect(C.bisectLeft(1, low: 4, high: 0), 4);
    expect(C.bisectLeft(2, low: 4, high: 0), 4);
    expect(C.bisectLeft(3, low: 4, high: 0), 4);
    expect(C.bisectLeft(4, low: 4, high: 0), 4);
    expect(C.bisectLeft(5, low: 4, high: 0), 4);
    expect(C.bisectLeft(6, low: 4, high: 0), 4);
    expect(C.bisectLeft(7, low: 4, high: 0), 4);
    expect(C.bisectLeft(8, low: 4, high: 0), 4);
  });

  test('list.bisectLeft for D lo=4 hi=0', () {
    expect(D.bisectLeft(-2, low: 4, high: 0), 4);
    expect(D.bisectLeft(-1, low: 4, high: 0), 4);
    expect(D.bisectLeft(0, low: 4, high: 0), 4);
    expect(D.bisectLeft(1, low: 4, high: 0), 4);
    expect(D.bisectLeft(2, low: 4, high: 0), 4);
    expect(D.bisectLeft(3, low: 4, high: 0), 4);
    expect(D.bisectLeft(4, low: 4, high: 0), 4);
    expect(D.bisectLeft(5, low: 4, high: 0), 4);
    expect(D.bisectLeft(6, low: 4, high: 0), 4);
    expect(D.bisectLeft(7, low: 4, high: 0), 4);
    expect(D.bisectLeft(8, low: 4, high: 0), 4);
  });

  test('list.bisectLeft for E lo=4 hi=0', () {
    expect(E.bisectLeft(-2, low: 4, high: 0), 4);
    expect(E.bisectLeft(-1, low: 4, high: 0), 4);
    expect(E.bisectLeft(0, low: 4, high: 0), 4);
    expect(E.bisectLeft(1, low: 4, high: 0), 4);
    expect(E.bisectLeft(2, low: 4, high: 0), 4);
    expect(E.bisectLeft(3, low: 4, high: 0), 4);
    expect(E.bisectLeft(4, low: 4, high: 0), 4);
    expect(E.bisectLeft(5, low: 4, high: 0), 4);
    expect(E.bisectLeft(6, low: 4, high: 0), 4);
    expect(E.bisectLeft(7, low: 4, high: 0), 4);
    expect(E.bisectLeft(8, low: 4, high: 0), 4);
  });

  test('list.bisectLeft for A lo=5 hi=0', () {
    expect(A.bisectLeft(-2, low: 5, high: 0), 5);
    expect(A.bisectLeft(-1, low: 5, high: 0), 5);
    expect(A.bisectLeft(0, low: 5, high: 0), 5);
    expect(A.bisectLeft(1, low: 5, high: 0), 5);
    expect(A.bisectLeft(2, low: 5, high: 0), 5);
    expect(A.bisectLeft(3, low: 5, high: 0), 5);
    expect(A.bisectLeft(4, low: 5, high: 0), 5);
    expect(A.bisectLeft(5, low: 5, high: 0), 5);
    expect(A.bisectLeft(6, low: 5, high: 0), 5);
    expect(A.bisectLeft(7, low: 5, high: 0), 5);
    expect(A.bisectLeft(8, low: 5, high: 0), 5);
  });

  test('list.bisectLeft for B lo=5 hi=0', () {
    expect(B.bisectLeft(-2, low: 5, high: 0), 5);
    expect(B.bisectLeft(-1, low: 5, high: 0), 5);
    expect(B.bisectLeft(0, low: 5, high: 0), 5);
    expect(B.bisectLeft(1, low: 5, high: 0), 5);
    expect(B.bisectLeft(2, low: 5, high: 0), 5);
    expect(B.bisectLeft(3, low: 5, high: 0), 5);
    expect(B.bisectLeft(4, low: 5, high: 0), 5);
    expect(B.bisectLeft(5, low: 5, high: 0), 5);
    expect(B.bisectLeft(6, low: 5, high: 0), 5);
    expect(B.bisectLeft(7, low: 5, high: 0), 5);
    expect(B.bisectLeft(8, low: 5, high: 0), 5);
  });

  test('list.bisectLeft for C lo=5 hi=0', () {
    expect(C.bisectLeft(-2, low: 5, high: 0), 5);
    expect(C.bisectLeft(-1, low: 5, high: 0), 5);
    expect(C.bisectLeft(0, low: 5, high: 0), 5);
    expect(C.bisectLeft(1, low: 5, high: 0), 5);
    expect(C.bisectLeft(2, low: 5, high: 0), 5);
    expect(C.bisectLeft(3, low: 5, high: 0), 5);
    expect(C.bisectLeft(4, low: 5, high: 0), 5);
    expect(C.bisectLeft(5, low: 5, high: 0), 5);
    expect(C.bisectLeft(6, low: 5, high: 0), 5);
    expect(C.bisectLeft(7, low: 5, high: 0), 5);
    expect(C.bisectLeft(8, low: 5, high: 0), 5);
  });

  test('list.bisectLeft for D lo=5 hi=0', () {
    expect(D.bisectLeft(-2, low: 5, high: 0), 5);
    expect(D.bisectLeft(-1, low: 5, high: 0), 5);
    expect(D.bisectLeft(0, low: 5, high: 0), 5);
    expect(D.bisectLeft(1, low: 5, high: 0), 5);
    expect(D.bisectLeft(2, low: 5, high: 0), 5);
    expect(D.bisectLeft(3, low: 5, high: 0), 5);
    expect(D.bisectLeft(4, low: 5, high: 0), 5);
    expect(D.bisectLeft(5, low: 5, high: 0), 5);
    expect(D.bisectLeft(6, low: 5, high: 0), 5);
    expect(D.bisectLeft(7, low: 5, high: 0), 5);
    expect(D.bisectLeft(8, low: 5, high: 0), 5);
  });

  test('list.bisectLeft for E lo=5 hi=0', () {
    expect(E.bisectLeft(-2, low: 5, high: 0), 5);
    expect(E.bisectLeft(-1, low: 5, high: 0), 5);
    expect(E.bisectLeft(0, low: 5, high: 0), 5);
    expect(E.bisectLeft(1, low: 5, high: 0), 5);
    expect(E.bisectLeft(2, low: 5, high: 0), 5);
    expect(E.bisectLeft(3, low: 5, high: 0), 5);
    expect(E.bisectLeft(4, low: 5, high: 0), 5);
    expect(E.bisectLeft(5, low: 5, high: 0), 5);
    expect(E.bisectLeft(6, low: 5, high: 0), 5);
    expect(E.bisectLeft(7, low: 5, high: 0), 5);
    expect(E.bisectLeft(8, low: 5, high: 0), 5);
  });

  test('list.bisectLeft for A lo=6 hi=0', () {
    expect(A.bisectLeft(-2, low: 6, high: 0), 6);
    expect(A.bisectLeft(-1, low: 6, high: 0), 6);
    expect(A.bisectLeft(0, low: 6, high: 0), 6);
    expect(A.bisectLeft(1, low: 6, high: 0), 6);
    expect(A.bisectLeft(2, low: 6, high: 0), 6);
    expect(A.bisectLeft(3, low: 6, high: 0), 6);
    expect(A.bisectLeft(4, low: 6, high: 0), 6);
    expect(A.bisectLeft(5, low: 6, high: 0), 6);
    expect(A.bisectLeft(6, low: 6, high: 0), 6);
    expect(A.bisectLeft(7, low: 6, high: 0), 6);
    expect(A.bisectLeft(8, low: 6, high: 0), 6);
  });

  test('list.bisectLeft for B lo=6 hi=0', () {
    expect(B.bisectLeft(-2, low: 6, high: 0), 6);
    expect(B.bisectLeft(-1, low: 6, high: 0), 6);
    expect(B.bisectLeft(0, low: 6, high: 0), 6);
    expect(B.bisectLeft(1, low: 6, high: 0), 6);
    expect(B.bisectLeft(2, low: 6, high: 0), 6);
    expect(B.bisectLeft(3, low: 6, high: 0), 6);
    expect(B.bisectLeft(4, low: 6, high: 0), 6);
    expect(B.bisectLeft(5, low: 6, high: 0), 6);
    expect(B.bisectLeft(6, low: 6, high: 0), 6);
    expect(B.bisectLeft(7, low: 6, high: 0), 6);
    expect(B.bisectLeft(8, low: 6, high: 0), 6);
  });

  test('list.bisectLeft for C lo=6 hi=0', () {
    expect(C.bisectLeft(-2, low: 6, high: 0), 6);
    expect(C.bisectLeft(-1, low: 6, high: 0), 6);
    expect(C.bisectLeft(0, low: 6, high: 0), 6);
    expect(C.bisectLeft(1, low: 6, high: 0), 6);
    expect(C.bisectLeft(2, low: 6, high: 0), 6);
    expect(C.bisectLeft(3, low: 6, high: 0), 6);
    expect(C.bisectLeft(4, low: 6, high: 0), 6);
    expect(C.bisectLeft(5, low: 6, high: 0), 6);
    expect(C.bisectLeft(6, low: 6, high: 0), 6);
    expect(C.bisectLeft(7, low: 6, high: 0), 6);
    expect(C.bisectLeft(8, low: 6, high: 0), 6);
  });

  test('list.bisectLeft for D lo=6 hi=0', () {
    expect(D.bisectLeft(-2, low: 6, high: 0), 6);
    expect(D.bisectLeft(-1, low: 6, high: 0), 6);
    expect(D.bisectLeft(0, low: 6, high: 0), 6);
    expect(D.bisectLeft(1, low: 6, high: 0), 6);
    expect(D.bisectLeft(2, low: 6, high: 0), 6);
    expect(D.bisectLeft(3, low: 6, high: 0), 6);
    expect(D.bisectLeft(4, low: 6, high: 0), 6);
    expect(D.bisectLeft(5, low: 6, high: 0), 6);
    expect(D.bisectLeft(6, low: 6, high: 0), 6);
    expect(D.bisectLeft(7, low: 6, high: 0), 6);
    expect(D.bisectLeft(8, low: 6, high: 0), 6);
  });

  test('list.bisectLeft for E lo=6 hi=0', () {
    expect(E.bisectLeft(-2, low: 6, high: 0), 6);
    expect(E.bisectLeft(-1, low: 6, high: 0), 6);
    expect(E.bisectLeft(0, low: 6, high: 0), 6);
    expect(E.bisectLeft(1, low: 6, high: 0), 6);
    expect(E.bisectLeft(2, low: 6, high: 0), 6);
    expect(E.bisectLeft(3, low: 6, high: 0), 6);
    expect(E.bisectLeft(4, low: 6, high: 0), 6);
    expect(E.bisectLeft(5, low: 6, high: 0), 6);
    expect(E.bisectLeft(6, low: 6, high: 0), 6);
    expect(E.bisectLeft(7, low: 6, high: 0), 6);
    expect(E.bisectLeft(8, low: 6, high: 0), 6);
  });

  test('list.bisectLeft for A lo=7 hi=0', () {
    expect(A.bisectLeft(-2, low: 7, high: 0), 7);
    expect(A.bisectLeft(-1, low: 7, high: 0), 7);
    expect(A.bisectLeft(0, low: 7, high: 0), 7);
    expect(A.bisectLeft(1, low: 7, high: 0), 7);
    expect(A.bisectLeft(2, low: 7, high: 0), 7);
    expect(A.bisectLeft(3, low: 7, high: 0), 7);
    expect(A.bisectLeft(4, low: 7, high: 0), 7);
    expect(A.bisectLeft(5, low: 7, high: 0), 7);
    expect(A.bisectLeft(6, low: 7, high: 0), 7);
    expect(A.bisectLeft(7, low: 7, high: 0), 7);
    expect(A.bisectLeft(8, low: 7, high: 0), 7);
  });

  test('list.bisectLeft for B lo=7 hi=0', () {
    expect(B.bisectLeft(-2, low: 7, high: 0), 7);
    expect(B.bisectLeft(-1, low: 7, high: 0), 7);
    expect(B.bisectLeft(0, low: 7, high: 0), 7);
    expect(B.bisectLeft(1, low: 7, high: 0), 7);
    expect(B.bisectLeft(2, low: 7, high: 0), 7);
    expect(B.bisectLeft(3, low: 7, high: 0), 7);
    expect(B.bisectLeft(4, low: 7, high: 0), 7);
    expect(B.bisectLeft(5, low: 7, high: 0), 7);
    expect(B.bisectLeft(6, low: 7, high: 0), 7);
    expect(B.bisectLeft(7, low: 7, high: 0), 7);
    expect(B.bisectLeft(8, low: 7, high: 0), 7);
  });

  test('list.bisectLeft for C lo=7 hi=0', () {
    expect(C.bisectLeft(-2, low: 7, high: 0), 7);
    expect(C.bisectLeft(-1, low: 7, high: 0), 7);
    expect(C.bisectLeft(0, low: 7, high: 0), 7);
    expect(C.bisectLeft(1, low: 7, high: 0), 7);
    expect(C.bisectLeft(2, low: 7, high: 0), 7);
    expect(C.bisectLeft(3, low: 7, high: 0), 7);
    expect(C.bisectLeft(4, low: 7, high: 0), 7);
    expect(C.bisectLeft(5, low: 7, high: 0), 7);
    expect(C.bisectLeft(6, low: 7, high: 0), 7);
    expect(C.bisectLeft(7, low: 7, high: 0), 7);
    expect(C.bisectLeft(8, low: 7, high: 0), 7);
  });

  test('list.bisectLeft for D lo=7 hi=0', () {
    expect(D.bisectLeft(-2, low: 7, high: 0), 7);
    expect(D.bisectLeft(-1, low: 7, high: 0), 7);
    expect(D.bisectLeft(0, low: 7, high: 0), 7);
    expect(D.bisectLeft(1, low: 7, high: 0), 7);
    expect(D.bisectLeft(2, low: 7, high: 0), 7);
    expect(D.bisectLeft(3, low: 7, high: 0), 7);
    expect(D.bisectLeft(4, low: 7, high: 0), 7);
    expect(D.bisectLeft(5, low: 7, high: 0), 7);
    expect(D.bisectLeft(6, low: 7, high: 0), 7);
    expect(D.bisectLeft(7, low: 7, high: 0), 7);
    expect(D.bisectLeft(8, low: 7, high: 0), 7);
  });

  test('list.bisectLeft for E lo=7 hi=0', () {
    expect(E.bisectLeft(-2, low: 7, high: 0), 7);
    expect(E.bisectLeft(-1, low: 7, high: 0), 7);
    expect(E.bisectLeft(0, low: 7, high: 0), 7);
    expect(E.bisectLeft(1, low: 7, high: 0), 7);
    expect(E.bisectLeft(2, low: 7, high: 0), 7);
    expect(E.bisectLeft(3, low: 7, high: 0), 7);
    expect(E.bisectLeft(4, low: 7, high: 0), 7);
    expect(E.bisectLeft(5, low: 7, high: 0), 7);
    expect(E.bisectLeft(6, low: 7, high: 0), 7);
    expect(E.bisectLeft(7, low: 7, high: 0), 7);
    expect(E.bisectLeft(8, low: 7, high: 0), 7);
  });

  test('list.bisectLeft for A lo=8 hi=0', () {
    expect(A.bisectLeft(-2, low: 8, high: 0), 8);
    expect(A.bisectLeft(-1, low: 8, high: 0), 8);
    expect(A.bisectLeft(0, low: 8, high: 0), 8);
    expect(A.bisectLeft(1, low: 8, high: 0), 8);
    expect(A.bisectLeft(2, low: 8, high: 0), 8);
    expect(A.bisectLeft(3, low: 8, high: 0), 8);
    expect(A.bisectLeft(4, low: 8, high: 0), 8);
    expect(A.bisectLeft(5, low: 8, high: 0), 8);
    expect(A.bisectLeft(6, low: 8, high: 0), 8);
    expect(A.bisectLeft(7, low: 8, high: 0), 8);
    expect(A.bisectLeft(8, low: 8, high: 0), 8);
  });

  test('list.bisectLeft for B lo=8 hi=0', () {
    expect(B.bisectLeft(-2, low: 8, high: 0), 8);
    expect(B.bisectLeft(-1, low: 8, high: 0), 8);
    expect(B.bisectLeft(0, low: 8, high: 0), 8);
    expect(B.bisectLeft(1, low: 8, high: 0), 8);
    expect(B.bisectLeft(2, low: 8, high: 0), 8);
    expect(B.bisectLeft(3, low: 8, high: 0), 8);
    expect(B.bisectLeft(4, low: 8, high: 0), 8);
    expect(B.bisectLeft(5, low: 8, high: 0), 8);
    expect(B.bisectLeft(6, low: 8, high: 0), 8);
    expect(B.bisectLeft(7, low: 8, high: 0), 8);
    expect(B.bisectLeft(8, low: 8, high: 0), 8);
  });

  test('list.bisectLeft for C lo=8 hi=0', () {
    expect(C.bisectLeft(-2, low: 8, high: 0), 8);
    expect(C.bisectLeft(-1, low: 8, high: 0), 8);
    expect(C.bisectLeft(0, low: 8, high: 0), 8);
    expect(C.bisectLeft(1, low: 8, high: 0), 8);
    expect(C.bisectLeft(2, low: 8, high: 0), 8);
    expect(C.bisectLeft(3, low: 8, high: 0), 8);
    expect(C.bisectLeft(4, low: 8, high: 0), 8);
    expect(C.bisectLeft(5, low: 8, high: 0), 8);
    expect(C.bisectLeft(6, low: 8, high: 0), 8);
    expect(C.bisectLeft(7, low: 8, high: 0), 8);
    expect(C.bisectLeft(8, low: 8, high: 0), 8);
  });

  test('list.bisectLeft for D lo=8 hi=0', () {
    expect(D.bisectLeft(-2, low: 8, high: 0), 8);
    expect(D.bisectLeft(-1, low: 8, high: 0), 8);
    expect(D.bisectLeft(0, low: 8, high: 0), 8);
    expect(D.bisectLeft(1, low: 8, high: 0), 8);
    expect(D.bisectLeft(2, low: 8, high: 0), 8);
    expect(D.bisectLeft(3, low: 8, high: 0), 8);
    expect(D.bisectLeft(4, low: 8, high: 0), 8);
    expect(D.bisectLeft(5, low: 8, high: 0), 8);
    expect(D.bisectLeft(6, low: 8, high: 0), 8);
    expect(D.bisectLeft(7, low: 8, high: 0), 8);
    expect(D.bisectLeft(8, low: 8, high: 0), 8);
  });

  test('list.bisectLeft for E lo=8 hi=0', () {
    expect(E.bisectLeft(-2, low: 8, high: 0), 8);
    expect(E.bisectLeft(-1, low: 8, high: 0), 8);
    expect(E.bisectLeft(0, low: 8, high: 0), 8);
    expect(E.bisectLeft(1, low: 8, high: 0), 8);
    expect(E.bisectLeft(2, low: 8, high: 0), 8);
    expect(E.bisectLeft(3, low: 8, high: 0), 8);
    expect(E.bisectLeft(4, low: 8, high: 0), 8);
    expect(E.bisectLeft(5, low: 8, high: 0), 8);
    expect(E.bisectLeft(6, low: 8, high: 0), 8);
    expect(E.bisectLeft(7, low: 8, high: 0), 8);
    expect(E.bisectLeft(8, low: 8, high: 0), 8);
  });

  test('list.bisectLeft for A lo=9 hi=0', () {
    expect(A.bisectLeft(-2, low: 9, high: 0), 9);
    expect(A.bisectLeft(-1, low: 9, high: 0), 9);
    expect(A.bisectLeft(0, low: 9, high: 0), 9);
    expect(A.bisectLeft(1, low: 9, high: 0), 9);
    expect(A.bisectLeft(2, low: 9, high: 0), 9);
    expect(A.bisectLeft(3, low: 9, high: 0), 9);
    expect(A.bisectLeft(4, low: 9, high: 0), 9);
    expect(A.bisectLeft(5, low: 9, high: 0), 9);
    expect(A.bisectLeft(6, low: 9, high: 0), 9);
    expect(A.bisectLeft(7, low: 9, high: 0), 9);
    expect(A.bisectLeft(8, low: 9, high: 0), 9);
  });

  test('list.bisectLeft for B lo=9 hi=0', () {
    expect(B.bisectLeft(-2, low: 9, high: 0), 9);
    expect(B.bisectLeft(-1, low: 9, high: 0), 9);
    expect(B.bisectLeft(0, low: 9, high: 0), 9);
    expect(B.bisectLeft(1, low: 9, high: 0), 9);
    expect(B.bisectLeft(2, low: 9, high: 0), 9);
    expect(B.bisectLeft(3, low: 9, high: 0), 9);
    expect(B.bisectLeft(4, low: 9, high: 0), 9);
    expect(B.bisectLeft(5, low: 9, high: 0), 9);
    expect(B.bisectLeft(6, low: 9, high: 0), 9);
    expect(B.bisectLeft(7, low: 9, high: 0), 9);
    expect(B.bisectLeft(8, low: 9, high: 0), 9);
  });

  test('list.bisectLeft for C lo=9 hi=0', () {
    expect(C.bisectLeft(-2, low: 9, high: 0), 9);
    expect(C.bisectLeft(-1, low: 9, high: 0), 9);
    expect(C.bisectLeft(0, low: 9, high: 0), 9);
    expect(C.bisectLeft(1, low: 9, high: 0), 9);
    expect(C.bisectLeft(2, low: 9, high: 0), 9);
    expect(C.bisectLeft(3, low: 9, high: 0), 9);
    expect(C.bisectLeft(4, low: 9, high: 0), 9);
    expect(C.bisectLeft(5, low: 9, high: 0), 9);
    expect(C.bisectLeft(6, low: 9, high: 0), 9);
    expect(C.bisectLeft(7, low: 9, high: 0), 9);
    expect(C.bisectLeft(8, low: 9, high: 0), 9);
  });

  test('list.bisectLeft for D lo=9 hi=0', () {
    expect(D.bisectLeft(-2, low: 9, high: 0), 9);
    expect(D.bisectLeft(-1, low: 9, high: 0), 9);
    expect(D.bisectLeft(0, low: 9, high: 0), 9);
    expect(D.bisectLeft(1, low: 9, high: 0), 9);
    expect(D.bisectLeft(2, low: 9, high: 0), 9);
    expect(D.bisectLeft(3, low: 9, high: 0), 9);
    expect(D.bisectLeft(4, low: 9, high: 0), 9);
    expect(D.bisectLeft(5, low: 9, high: 0), 9);
    expect(D.bisectLeft(6, low: 9, high: 0), 9);
    expect(D.bisectLeft(7, low: 9, high: 0), 9);
    expect(D.bisectLeft(8, low: 9, high: 0), 9);
  });

  test('list.bisectLeft for E lo=9 hi=0', () {
    expect(E.bisectLeft(-2, low: 9, high: 0), 9);
    expect(E.bisectLeft(-1, low: 9, high: 0), 9);
    expect(E.bisectLeft(0, low: 9, high: 0), 9);
    expect(E.bisectLeft(1, low: 9, high: 0), 9);
    expect(E.bisectLeft(2, low: 9, high: 0), 9);
    expect(E.bisectLeft(3, low: 9, high: 0), 9);
    expect(E.bisectLeft(4, low: 9, high: 0), 9);
    expect(E.bisectLeft(5, low: 9, high: 0), 9);
    expect(E.bisectLeft(6, low: 9, high: 0), 9);
    expect(E.bisectLeft(7, low: 9, high: 0), 9);
    expect(E.bisectLeft(8, low: 9, high: 0), 9);
  });

  test('list.bisectLeft for A lo=None hi=1', () {
    expect(() => A.bisectLeft(-2, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 1), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=1', () {
    expect(B.bisectLeft(-2, high: 1), 0);
    expect(B.bisectLeft(-1, high: 1), 0);
    expect(B.bisectLeft(0, high: 1), 0);
    expect(B.bisectLeft(1, high: 1), 0);
    expect(B.bisectLeft(2, high: 1), 0);
    expect(B.bisectLeft(3, high: 1), 0);
    expect(B.bisectLeft(4, high: 1), 0);
    expect(B.bisectLeft(5, high: 1), 1);
    expect(B.bisectLeft(6, high: 1), 1);
    expect(B.bisectLeft(7, high: 1), 1);
    expect(B.bisectLeft(8, high: 1), 1);
  });

  test('list.bisectLeft for C lo=None hi=1', () {
    expect(C.bisectLeft(-2, high: 1), 0);
    expect(C.bisectLeft(-1, high: 1), 0);
    expect(C.bisectLeft(0, high: 1), 0);
    expect(C.bisectLeft(1, high: 1), 0);
    expect(C.bisectLeft(2, high: 1), 0);
    expect(C.bisectLeft(3, high: 1), 0);
    expect(C.bisectLeft(4, high: 1), 0);
    expect(C.bisectLeft(5, high: 1), 1);
    expect(C.bisectLeft(6, high: 1), 1);
    expect(C.bisectLeft(7, high: 1), 1);
    expect(C.bisectLeft(8, high: 1), 1);
  });

  test('list.bisectLeft for D lo=None hi=1', () {
    expect(D.bisectLeft(-2, high: 1), 0);
    expect(D.bisectLeft(-1, high: 1), 0);
    expect(D.bisectLeft(0, high: 1), 0);
    expect(D.bisectLeft(1, high: 1), 0);
    expect(D.bisectLeft(2, high: 1), 0);
    expect(D.bisectLeft(3, high: 1), 0);
    expect(D.bisectLeft(4, high: 1), 1);
    expect(D.bisectLeft(5, high: 1), 1);
    expect(D.bisectLeft(6, high: 1), 1);
    expect(D.bisectLeft(7, high: 1), 1);
    expect(D.bisectLeft(8, high: 1), 1);
  });

  test('list.bisectLeft for E lo=None hi=1', () {
    expect(E.bisectLeft(-2, high: 1), 0);
    expect(E.bisectLeft(-1, high: 1), 0);
    expect(E.bisectLeft(0, high: 1), 0);
    expect(E.bisectLeft(1, high: 1), 1);
    expect(E.bisectLeft(2, high: 1), 1);
    expect(E.bisectLeft(3, high: 1), 1);
    expect(E.bisectLeft(4, high: 1), 1);
    expect(E.bisectLeft(5, high: 1), 1);
    expect(E.bisectLeft(6, high: 1), 1);
    expect(E.bisectLeft(7, high: 1), 1);
    expect(E.bisectLeft(8, high: 1), 1);
  });

  test('list.bisectLeft for A lo=0 hi=1', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 1), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=1', () {
    expect(B.bisectLeft(-2, low: 0, high: 1), 0);
    expect(B.bisectLeft(-1, low: 0, high: 1), 0);
    expect(B.bisectLeft(0, low: 0, high: 1), 0);
    expect(B.bisectLeft(1, low: 0, high: 1), 0);
    expect(B.bisectLeft(2, low: 0, high: 1), 0);
    expect(B.bisectLeft(3, low: 0, high: 1), 0);
    expect(B.bisectLeft(4, low: 0, high: 1), 0);
    expect(B.bisectLeft(5, low: 0, high: 1), 1);
    expect(B.bisectLeft(6, low: 0, high: 1), 1);
    expect(B.bisectLeft(7, low: 0, high: 1), 1);
    expect(B.bisectLeft(8, low: 0, high: 1), 1);
  });

  test('list.bisectLeft for C lo=0 hi=1', () {
    expect(C.bisectLeft(-2, low: 0, high: 1), 0);
    expect(C.bisectLeft(-1, low: 0, high: 1), 0);
    expect(C.bisectLeft(0, low: 0, high: 1), 0);
    expect(C.bisectLeft(1, low: 0, high: 1), 0);
    expect(C.bisectLeft(2, low: 0, high: 1), 0);
    expect(C.bisectLeft(3, low: 0, high: 1), 0);
    expect(C.bisectLeft(4, low: 0, high: 1), 0);
    expect(C.bisectLeft(5, low: 0, high: 1), 1);
    expect(C.bisectLeft(6, low: 0, high: 1), 1);
    expect(C.bisectLeft(7, low: 0, high: 1), 1);
    expect(C.bisectLeft(8, low: 0, high: 1), 1);
  });

  test('list.bisectLeft for D lo=0 hi=1', () {
    expect(D.bisectLeft(-2, low: 0, high: 1), 0);
    expect(D.bisectLeft(-1, low: 0, high: 1), 0);
    expect(D.bisectLeft(0, low: 0, high: 1), 0);
    expect(D.bisectLeft(1, low: 0, high: 1), 0);
    expect(D.bisectLeft(2, low: 0, high: 1), 0);
    expect(D.bisectLeft(3, low: 0, high: 1), 0);
    expect(D.bisectLeft(4, low: 0, high: 1), 1);
    expect(D.bisectLeft(5, low: 0, high: 1), 1);
    expect(D.bisectLeft(6, low: 0, high: 1), 1);
    expect(D.bisectLeft(7, low: 0, high: 1), 1);
    expect(D.bisectLeft(8, low: 0, high: 1), 1);
  });

  test('list.bisectLeft for E lo=0 hi=1', () {
    expect(E.bisectLeft(-2, low: 0, high: 1), 0);
    expect(E.bisectLeft(-1, low: 0, high: 1), 0);
    expect(E.bisectLeft(0, low: 0, high: 1), 0);
    expect(E.bisectLeft(1, low: 0, high: 1), 1);
    expect(E.bisectLeft(2, low: 0, high: 1), 1);
    expect(E.bisectLeft(3, low: 0, high: 1), 1);
    expect(E.bisectLeft(4, low: 0, high: 1), 1);
    expect(E.bisectLeft(5, low: 0, high: 1), 1);
    expect(E.bisectLeft(6, low: 0, high: 1), 1);
    expect(E.bisectLeft(7, low: 0, high: 1), 1);
    expect(E.bisectLeft(8, low: 0, high: 1), 1);
  });

  test('list.bisectLeft for A lo=1 hi=1', () {
    expect(A.bisectLeft(-2, low: 1, high: 1), 1);
    expect(A.bisectLeft(-1, low: 1, high: 1), 1);
    expect(A.bisectLeft(0, low: 1, high: 1), 1);
    expect(A.bisectLeft(1, low: 1, high: 1), 1);
    expect(A.bisectLeft(2, low: 1, high: 1), 1);
    expect(A.bisectLeft(3, low: 1, high: 1), 1);
    expect(A.bisectLeft(4, low: 1, high: 1), 1);
    expect(A.bisectLeft(5, low: 1, high: 1), 1);
    expect(A.bisectLeft(6, low: 1, high: 1), 1);
    expect(A.bisectLeft(7, low: 1, high: 1), 1);
    expect(A.bisectLeft(8, low: 1, high: 1), 1);
  });

  test('list.bisectLeft for B lo=1 hi=1', () {
    expect(B.bisectLeft(-2, low: 1, high: 1), 1);
    expect(B.bisectLeft(-1, low: 1, high: 1), 1);
    expect(B.bisectLeft(0, low: 1, high: 1), 1);
    expect(B.bisectLeft(1, low: 1, high: 1), 1);
    expect(B.bisectLeft(2, low: 1, high: 1), 1);
    expect(B.bisectLeft(3, low: 1, high: 1), 1);
    expect(B.bisectLeft(4, low: 1, high: 1), 1);
    expect(B.bisectLeft(5, low: 1, high: 1), 1);
    expect(B.bisectLeft(6, low: 1, high: 1), 1);
    expect(B.bisectLeft(7, low: 1, high: 1), 1);
    expect(B.bisectLeft(8, low: 1, high: 1), 1);
  });

  test('list.bisectLeft for C lo=1 hi=1', () {
    expect(C.bisectLeft(-2, low: 1, high: 1), 1);
    expect(C.bisectLeft(-1, low: 1, high: 1), 1);
    expect(C.bisectLeft(0, low: 1, high: 1), 1);
    expect(C.bisectLeft(1, low: 1, high: 1), 1);
    expect(C.bisectLeft(2, low: 1, high: 1), 1);
    expect(C.bisectLeft(3, low: 1, high: 1), 1);
    expect(C.bisectLeft(4, low: 1, high: 1), 1);
    expect(C.bisectLeft(5, low: 1, high: 1), 1);
    expect(C.bisectLeft(6, low: 1, high: 1), 1);
    expect(C.bisectLeft(7, low: 1, high: 1), 1);
    expect(C.bisectLeft(8, low: 1, high: 1), 1);
  });

  test('list.bisectLeft for D lo=1 hi=1', () {
    expect(D.bisectLeft(-2, low: 1, high: 1), 1);
    expect(D.bisectLeft(-1, low: 1, high: 1), 1);
    expect(D.bisectLeft(0, low: 1, high: 1), 1);
    expect(D.bisectLeft(1, low: 1, high: 1), 1);
    expect(D.bisectLeft(2, low: 1, high: 1), 1);
    expect(D.bisectLeft(3, low: 1, high: 1), 1);
    expect(D.bisectLeft(4, low: 1, high: 1), 1);
    expect(D.bisectLeft(5, low: 1, high: 1), 1);
    expect(D.bisectLeft(6, low: 1, high: 1), 1);
    expect(D.bisectLeft(7, low: 1, high: 1), 1);
    expect(D.bisectLeft(8, low: 1, high: 1), 1);
  });

  test('list.bisectLeft for E lo=1 hi=1', () {
    expect(E.bisectLeft(-2, low: 1, high: 1), 1);
    expect(E.bisectLeft(-1, low: 1, high: 1), 1);
    expect(E.bisectLeft(0, low: 1, high: 1), 1);
    expect(E.bisectLeft(1, low: 1, high: 1), 1);
    expect(E.bisectLeft(2, low: 1, high: 1), 1);
    expect(E.bisectLeft(3, low: 1, high: 1), 1);
    expect(E.bisectLeft(4, low: 1, high: 1), 1);
    expect(E.bisectLeft(5, low: 1, high: 1), 1);
    expect(E.bisectLeft(6, low: 1, high: 1), 1);
    expect(E.bisectLeft(7, low: 1, high: 1), 1);
    expect(E.bisectLeft(8, low: 1, high: 1), 1);
  });

  test('list.bisectLeft for A lo=2 hi=1', () {
    expect(A.bisectLeft(-2, low: 2, high: 1), 2);
    expect(A.bisectLeft(-1, low: 2, high: 1), 2);
    expect(A.bisectLeft(0, low: 2, high: 1), 2);
    expect(A.bisectLeft(1, low: 2, high: 1), 2);
    expect(A.bisectLeft(2, low: 2, high: 1), 2);
    expect(A.bisectLeft(3, low: 2, high: 1), 2);
    expect(A.bisectLeft(4, low: 2, high: 1), 2);
    expect(A.bisectLeft(5, low: 2, high: 1), 2);
    expect(A.bisectLeft(6, low: 2, high: 1), 2);
    expect(A.bisectLeft(7, low: 2, high: 1), 2);
    expect(A.bisectLeft(8, low: 2, high: 1), 2);
  });

  test('list.bisectLeft for B lo=2 hi=1', () {
    expect(B.bisectLeft(-2, low: 2, high: 1), 2);
    expect(B.bisectLeft(-1, low: 2, high: 1), 2);
    expect(B.bisectLeft(0, low: 2, high: 1), 2);
    expect(B.bisectLeft(1, low: 2, high: 1), 2);
    expect(B.bisectLeft(2, low: 2, high: 1), 2);
    expect(B.bisectLeft(3, low: 2, high: 1), 2);
    expect(B.bisectLeft(4, low: 2, high: 1), 2);
    expect(B.bisectLeft(5, low: 2, high: 1), 2);
    expect(B.bisectLeft(6, low: 2, high: 1), 2);
    expect(B.bisectLeft(7, low: 2, high: 1), 2);
    expect(B.bisectLeft(8, low: 2, high: 1), 2);
  });

  test('list.bisectLeft for C lo=2 hi=1', () {
    expect(C.bisectLeft(-2, low: 2, high: 1), 2);
    expect(C.bisectLeft(-1, low: 2, high: 1), 2);
    expect(C.bisectLeft(0, low: 2, high: 1), 2);
    expect(C.bisectLeft(1, low: 2, high: 1), 2);
    expect(C.bisectLeft(2, low: 2, high: 1), 2);
    expect(C.bisectLeft(3, low: 2, high: 1), 2);
    expect(C.bisectLeft(4, low: 2, high: 1), 2);
    expect(C.bisectLeft(5, low: 2, high: 1), 2);
    expect(C.bisectLeft(6, low: 2, high: 1), 2);
    expect(C.bisectLeft(7, low: 2, high: 1), 2);
    expect(C.bisectLeft(8, low: 2, high: 1), 2);
  });

  test('list.bisectLeft for D lo=2 hi=1', () {
    expect(D.bisectLeft(-2, low: 2, high: 1), 2);
    expect(D.bisectLeft(-1, low: 2, high: 1), 2);
    expect(D.bisectLeft(0, low: 2, high: 1), 2);
    expect(D.bisectLeft(1, low: 2, high: 1), 2);
    expect(D.bisectLeft(2, low: 2, high: 1), 2);
    expect(D.bisectLeft(3, low: 2, high: 1), 2);
    expect(D.bisectLeft(4, low: 2, high: 1), 2);
    expect(D.bisectLeft(5, low: 2, high: 1), 2);
    expect(D.bisectLeft(6, low: 2, high: 1), 2);
    expect(D.bisectLeft(7, low: 2, high: 1), 2);
    expect(D.bisectLeft(8, low: 2, high: 1), 2);
  });

  test('list.bisectLeft for E lo=2 hi=1', () {
    expect(E.bisectLeft(-2, low: 2, high: 1), 2);
    expect(E.bisectLeft(-1, low: 2, high: 1), 2);
    expect(E.bisectLeft(0, low: 2, high: 1), 2);
    expect(E.bisectLeft(1, low: 2, high: 1), 2);
    expect(E.bisectLeft(2, low: 2, high: 1), 2);
    expect(E.bisectLeft(3, low: 2, high: 1), 2);
    expect(E.bisectLeft(4, low: 2, high: 1), 2);
    expect(E.bisectLeft(5, low: 2, high: 1), 2);
    expect(E.bisectLeft(6, low: 2, high: 1), 2);
    expect(E.bisectLeft(7, low: 2, high: 1), 2);
    expect(E.bisectLeft(8, low: 2, high: 1), 2);
  });

  test('list.bisectLeft for A lo=3 hi=1', () {
    expect(A.bisectLeft(-2, low: 3, high: 1), 3);
    expect(A.bisectLeft(-1, low: 3, high: 1), 3);
    expect(A.bisectLeft(0, low: 3, high: 1), 3);
    expect(A.bisectLeft(1, low: 3, high: 1), 3);
    expect(A.bisectLeft(2, low: 3, high: 1), 3);
    expect(A.bisectLeft(3, low: 3, high: 1), 3);
    expect(A.bisectLeft(4, low: 3, high: 1), 3);
    expect(A.bisectLeft(5, low: 3, high: 1), 3);
    expect(A.bisectLeft(6, low: 3, high: 1), 3);
    expect(A.bisectLeft(7, low: 3, high: 1), 3);
    expect(A.bisectLeft(8, low: 3, high: 1), 3);
  });

  test('list.bisectLeft for B lo=3 hi=1', () {
    expect(B.bisectLeft(-2, low: 3, high: 1), 3);
    expect(B.bisectLeft(-1, low: 3, high: 1), 3);
    expect(B.bisectLeft(0, low: 3, high: 1), 3);
    expect(B.bisectLeft(1, low: 3, high: 1), 3);
    expect(B.bisectLeft(2, low: 3, high: 1), 3);
    expect(B.bisectLeft(3, low: 3, high: 1), 3);
    expect(B.bisectLeft(4, low: 3, high: 1), 3);
    expect(B.bisectLeft(5, low: 3, high: 1), 3);
    expect(B.bisectLeft(6, low: 3, high: 1), 3);
    expect(B.bisectLeft(7, low: 3, high: 1), 3);
    expect(B.bisectLeft(8, low: 3, high: 1), 3);
  });

  test('list.bisectLeft for C lo=3 hi=1', () {
    expect(C.bisectLeft(-2, low: 3, high: 1), 3);
    expect(C.bisectLeft(-1, low: 3, high: 1), 3);
    expect(C.bisectLeft(0, low: 3, high: 1), 3);
    expect(C.bisectLeft(1, low: 3, high: 1), 3);
    expect(C.bisectLeft(2, low: 3, high: 1), 3);
    expect(C.bisectLeft(3, low: 3, high: 1), 3);
    expect(C.bisectLeft(4, low: 3, high: 1), 3);
    expect(C.bisectLeft(5, low: 3, high: 1), 3);
    expect(C.bisectLeft(6, low: 3, high: 1), 3);
    expect(C.bisectLeft(7, low: 3, high: 1), 3);
    expect(C.bisectLeft(8, low: 3, high: 1), 3);
  });

  test('list.bisectLeft for D lo=3 hi=1', () {
    expect(D.bisectLeft(-2, low: 3, high: 1), 3);
    expect(D.bisectLeft(-1, low: 3, high: 1), 3);
    expect(D.bisectLeft(0, low: 3, high: 1), 3);
    expect(D.bisectLeft(1, low: 3, high: 1), 3);
    expect(D.bisectLeft(2, low: 3, high: 1), 3);
    expect(D.bisectLeft(3, low: 3, high: 1), 3);
    expect(D.bisectLeft(4, low: 3, high: 1), 3);
    expect(D.bisectLeft(5, low: 3, high: 1), 3);
    expect(D.bisectLeft(6, low: 3, high: 1), 3);
    expect(D.bisectLeft(7, low: 3, high: 1), 3);
    expect(D.bisectLeft(8, low: 3, high: 1), 3);
  });

  test('list.bisectLeft for E lo=3 hi=1', () {
    expect(E.bisectLeft(-2, low: 3, high: 1), 3);
    expect(E.bisectLeft(-1, low: 3, high: 1), 3);
    expect(E.bisectLeft(0, low: 3, high: 1), 3);
    expect(E.bisectLeft(1, low: 3, high: 1), 3);
    expect(E.bisectLeft(2, low: 3, high: 1), 3);
    expect(E.bisectLeft(3, low: 3, high: 1), 3);
    expect(E.bisectLeft(4, low: 3, high: 1), 3);
    expect(E.bisectLeft(5, low: 3, high: 1), 3);
    expect(E.bisectLeft(6, low: 3, high: 1), 3);
    expect(E.bisectLeft(7, low: 3, high: 1), 3);
    expect(E.bisectLeft(8, low: 3, high: 1), 3);
  });

  test('list.bisectLeft for A lo=4 hi=1', () {
    expect(A.bisectLeft(-2, low: 4, high: 1), 4);
    expect(A.bisectLeft(-1, low: 4, high: 1), 4);
    expect(A.bisectLeft(0, low: 4, high: 1), 4);
    expect(A.bisectLeft(1, low: 4, high: 1), 4);
    expect(A.bisectLeft(2, low: 4, high: 1), 4);
    expect(A.bisectLeft(3, low: 4, high: 1), 4);
    expect(A.bisectLeft(4, low: 4, high: 1), 4);
    expect(A.bisectLeft(5, low: 4, high: 1), 4);
    expect(A.bisectLeft(6, low: 4, high: 1), 4);
    expect(A.bisectLeft(7, low: 4, high: 1), 4);
    expect(A.bisectLeft(8, low: 4, high: 1), 4);
  });

  test('list.bisectLeft for B lo=4 hi=1', () {
    expect(B.bisectLeft(-2, low: 4, high: 1), 4);
    expect(B.bisectLeft(-1, low: 4, high: 1), 4);
    expect(B.bisectLeft(0, low: 4, high: 1), 4);
    expect(B.bisectLeft(1, low: 4, high: 1), 4);
    expect(B.bisectLeft(2, low: 4, high: 1), 4);
    expect(B.bisectLeft(3, low: 4, high: 1), 4);
    expect(B.bisectLeft(4, low: 4, high: 1), 4);
    expect(B.bisectLeft(5, low: 4, high: 1), 4);
    expect(B.bisectLeft(6, low: 4, high: 1), 4);
    expect(B.bisectLeft(7, low: 4, high: 1), 4);
    expect(B.bisectLeft(8, low: 4, high: 1), 4);
  });

  test('list.bisectLeft for C lo=4 hi=1', () {
    expect(C.bisectLeft(-2, low: 4, high: 1), 4);
    expect(C.bisectLeft(-1, low: 4, high: 1), 4);
    expect(C.bisectLeft(0, low: 4, high: 1), 4);
    expect(C.bisectLeft(1, low: 4, high: 1), 4);
    expect(C.bisectLeft(2, low: 4, high: 1), 4);
    expect(C.bisectLeft(3, low: 4, high: 1), 4);
    expect(C.bisectLeft(4, low: 4, high: 1), 4);
    expect(C.bisectLeft(5, low: 4, high: 1), 4);
    expect(C.bisectLeft(6, low: 4, high: 1), 4);
    expect(C.bisectLeft(7, low: 4, high: 1), 4);
    expect(C.bisectLeft(8, low: 4, high: 1), 4);
  });

  test('list.bisectLeft for D lo=4 hi=1', () {
    expect(D.bisectLeft(-2, low: 4, high: 1), 4);
    expect(D.bisectLeft(-1, low: 4, high: 1), 4);
    expect(D.bisectLeft(0, low: 4, high: 1), 4);
    expect(D.bisectLeft(1, low: 4, high: 1), 4);
    expect(D.bisectLeft(2, low: 4, high: 1), 4);
    expect(D.bisectLeft(3, low: 4, high: 1), 4);
    expect(D.bisectLeft(4, low: 4, high: 1), 4);
    expect(D.bisectLeft(5, low: 4, high: 1), 4);
    expect(D.bisectLeft(6, low: 4, high: 1), 4);
    expect(D.bisectLeft(7, low: 4, high: 1), 4);
    expect(D.bisectLeft(8, low: 4, high: 1), 4);
  });

  test('list.bisectLeft for E lo=4 hi=1', () {
    expect(E.bisectLeft(-2, low: 4, high: 1), 4);
    expect(E.bisectLeft(-1, low: 4, high: 1), 4);
    expect(E.bisectLeft(0, low: 4, high: 1), 4);
    expect(E.bisectLeft(1, low: 4, high: 1), 4);
    expect(E.bisectLeft(2, low: 4, high: 1), 4);
    expect(E.bisectLeft(3, low: 4, high: 1), 4);
    expect(E.bisectLeft(4, low: 4, high: 1), 4);
    expect(E.bisectLeft(5, low: 4, high: 1), 4);
    expect(E.bisectLeft(6, low: 4, high: 1), 4);
    expect(E.bisectLeft(7, low: 4, high: 1), 4);
    expect(E.bisectLeft(8, low: 4, high: 1), 4);
  });

  test('list.bisectLeft for A lo=5 hi=1', () {
    expect(A.bisectLeft(-2, low: 5, high: 1), 5);
    expect(A.bisectLeft(-1, low: 5, high: 1), 5);
    expect(A.bisectLeft(0, low: 5, high: 1), 5);
    expect(A.bisectLeft(1, low: 5, high: 1), 5);
    expect(A.bisectLeft(2, low: 5, high: 1), 5);
    expect(A.bisectLeft(3, low: 5, high: 1), 5);
    expect(A.bisectLeft(4, low: 5, high: 1), 5);
    expect(A.bisectLeft(5, low: 5, high: 1), 5);
    expect(A.bisectLeft(6, low: 5, high: 1), 5);
    expect(A.bisectLeft(7, low: 5, high: 1), 5);
    expect(A.bisectLeft(8, low: 5, high: 1), 5);
  });

  test('list.bisectLeft for B lo=5 hi=1', () {
    expect(B.bisectLeft(-2, low: 5, high: 1), 5);
    expect(B.bisectLeft(-1, low: 5, high: 1), 5);
    expect(B.bisectLeft(0, low: 5, high: 1), 5);
    expect(B.bisectLeft(1, low: 5, high: 1), 5);
    expect(B.bisectLeft(2, low: 5, high: 1), 5);
    expect(B.bisectLeft(3, low: 5, high: 1), 5);
    expect(B.bisectLeft(4, low: 5, high: 1), 5);
    expect(B.bisectLeft(5, low: 5, high: 1), 5);
    expect(B.bisectLeft(6, low: 5, high: 1), 5);
    expect(B.bisectLeft(7, low: 5, high: 1), 5);
    expect(B.bisectLeft(8, low: 5, high: 1), 5);
  });

  test('list.bisectLeft for C lo=5 hi=1', () {
    expect(C.bisectLeft(-2, low: 5, high: 1), 5);
    expect(C.bisectLeft(-1, low: 5, high: 1), 5);
    expect(C.bisectLeft(0, low: 5, high: 1), 5);
    expect(C.bisectLeft(1, low: 5, high: 1), 5);
    expect(C.bisectLeft(2, low: 5, high: 1), 5);
    expect(C.bisectLeft(3, low: 5, high: 1), 5);
    expect(C.bisectLeft(4, low: 5, high: 1), 5);
    expect(C.bisectLeft(5, low: 5, high: 1), 5);
    expect(C.bisectLeft(6, low: 5, high: 1), 5);
    expect(C.bisectLeft(7, low: 5, high: 1), 5);
    expect(C.bisectLeft(8, low: 5, high: 1), 5);
  });

  test('list.bisectLeft for D lo=5 hi=1', () {
    expect(D.bisectLeft(-2, low: 5, high: 1), 5);
    expect(D.bisectLeft(-1, low: 5, high: 1), 5);
    expect(D.bisectLeft(0, low: 5, high: 1), 5);
    expect(D.bisectLeft(1, low: 5, high: 1), 5);
    expect(D.bisectLeft(2, low: 5, high: 1), 5);
    expect(D.bisectLeft(3, low: 5, high: 1), 5);
    expect(D.bisectLeft(4, low: 5, high: 1), 5);
    expect(D.bisectLeft(5, low: 5, high: 1), 5);
    expect(D.bisectLeft(6, low: 5, high: 1), 5);
    expect(D.bisectLeft(7, low: 5, high: 1), 5);
    expect(D.bisectLeft(8, low: 5, high: 1), 5);
  });

  test('list.bisectLeft for E lo=5 hi=1', () {
    expect(E.bisectLeft(-2, low: 5, high: 1), 5);
    expect(E.bisectLeft(-1, low: 5, high: 1), 5);
    expect(E.bisectLeft(0, low: 5, high: 1), 5);
    expect(E.bisectLeft(1, low: 5, high: 1), 5);
    expect(E.bisectLeft(2, low: 5, high: 1), 5);
    expect(E.bisectLeft(3, low: 5, high: 1), 5);
    expect(E.bisectLeft(4, low: 5, high: 1), 5);
    expect(E.bisectLeft(5, low: 5, high: 1), 5);
    expect(E.bisectLeft(6, low: 5, high: 1), 5);
    expect(E.bisectLeft(7, low: 5, high: 1), 5);
    expect(E.bisectLeft(8, low: 5, high: 1), 5);
  });

  test('list.bisectLeft for A lo=6 hi=1', () {
    expect(A.bisectLeft(-2, low: 6, high: 1), 6);
    expect(A.bisectLeft(-1, low: 6, high: 1), 6);
    expect(A.bisectLeft(0, low: 6, high: 1), 6);
    expect(A.bisectLeft(1, low: 6, high: 1), 6);
    expect(A.bisectLeft(2, low: 6, high: 1), 6);
    expect(A.bisectLeft(3, low: 6, high: 1), 6);
    expect(A.bisectLeft(4, low: 6, high: 1), 6);
    expect(A.bisectLeft(5, low: 6, high: 1), 6);
    expect(A.bisectLeft(6, low: 6, high: 1), 6);
    expect(A.bisectLeft(7, low: 6, high: 1), 6);
    expect(A.bisectLeft(8, low: 6, high: 1), 6);
  });

  test('list.bisectLeft for B lo=6 hi=1', () {
    expect(B.bisectLeft(-2, low: 6, high: 1), 6);
    expect(B.bisectLeft(-1, low: 6, high: 1), 6);
    expect(B.bisectLeft(0, low: 6, high: 1), 6);
    expect(B.bisectLeft(1, low: 6, high: 1), 6);
    expect(B.bisectLeft(2, low: 6, high: 1), 6);
    expect(B.bisectLeft(3, low: 6, high: 1), 6);
    expect(B.bisectLeft(4, low: 6, high: 1), 6);
    expect(B.bisectLeft(5, low: 6, high: 1), 6);
    expect(B.bisectLeft(6, low: 6, high: 1), 6);
    expect(B.bisectLeft(7, low: 6, high: 1), 6);
    expect(B.bisectLeft(8, low: 6, high: 1), 6);
  });

  test('list.bisectLeft for C lo=6 hi=1', () {
    expect(C.bisectLeft(-2, low: 6, high: 1), 6);
    expect(C.bisectLeft(-1, low: 6, high: 1), 6);
    expect(C.bisectLeft(0, low: 6, high: 1), 6);
    expect(C.bisectLeft(1, low: 6, high: 1), 6);
    expect(C.bisectLeft(2, low: 6, high: 1), 6);
    expect(C.bisectLeft(3, low: 6, high: 1), 6);
    expect(C.bisectLeft(4, low: 6, high: 1), 6);
    expect(C.bisectLeft(5, low: 6, high: 1), 6);
    expect(C.bisectLeft(6, low: 6, high: 1), 6);
    expect(C.bisectLeft(7, low: 6, high: 1), 6);
    expect(C.bisectLeft(8, low: 6, high: 1), 6);
  });

  test('list.bisectLeft for D lo=6 hi=1', () {
    expect(D.bisectLeft(-2, low: 6, high: 1), 6);
    expect(D.bisectLeft(-1, low: 6, high: 1), 6);
    expect(D.bisectLeft(0, low: 6, high: 1), 6);
    expect(D.bisectLeft(1, low: 6, high: 1), 6);
    expect(D.bisectLeft(2, low: 6, high: 1), 6);
    expect(D.bisectLeft(3, low: 6, high: 1), 6);
    expect(D.bisectLeft(4, low: 6, high: 1), 6);
    expect(D.bisectLeft(5, low: 6, high: 1), 6);
    expect(D.bisectLeft(6, low: 6, high: 1), 6);
    expect(D.bisectLeft(7, low: 6, high: 1), 6);
    expect(D.bisectLeft(8, low: 6, high: 1), 6);
  });

  test('list.bisectLeft for E lo=6 hi=1', () {
    expect(E.bisectLeft(-2, low: 6, high: 1), 6);
    expect(E.bisectLeft(-1, low: 6, high: 1), 6);
    expect(E.bisectLeft(0, low: 6, high: 1), 6);
    expect(E.bisectLeft(1, low: 6, high: 1), 6);
    expect(E.bisectLeft(2, low: 6, high: 1), 6);
    expect(E.bisectLeft(3, low: 6, high: 1), 6);
    expect(E.bisectLeft(4, low: 6, high: 1), 6);
    expect(E.bisectLeft(5, low: 6, high: 1), 6);
    expect(E.bisectLeft(6, low: 6, high: 1), 6);
    expect(E.bisectLeft(7, low: 6, high: 1), 6);
    expect(E.bisectLeft(8, low: 6, high: 1), 6);
  });

  test('list.bisectLeft for A lo=7 hi=1', () {
    expect(A.bisectLeft(-2, low: 7, high: 1), 7);
    expect(A.bisectLeft(-1, low: 7, high: 1), 7);
    expect(A.bisectLeft(0, low: 7, high: 1), 7);
    expect(A.bisectLeft(1, low: 7, high: 1), 7);
    expect(A.bisectLeft(2, low: 7, high: 1), 7);
    expect(A.bisectLeft(3, low: 7, high: 1), 7);
    expect(A.bisectLeft(4, low: 7, high: 1), 7);
    expect(A.bisectLeft(5, low: 7, high: 1), 7);
    expect(A.bisectLeft(6, low: 7, high: 1), 7);
    expect(A.bisectLeft(7, low: 7, high: 1), 7);
    expect(A.bisectLeft(8, low: 7, high: 1), 7);
  });

  test('list.bisectLeft for B lo=7 hi=1', () {
    expect(B.bisectLeft(-2, low: 7, high: 1), 7);
    expect(B.bisectLeft(-1, low: 7, high: 1), 7);
    expect(B.bisectLeft(0, low: 7, high: 1), 7);
    expect(B.bisectLeft(1, low: 7, high: 1), 7);
    expect(B.bisectLeft(2, low: 7, high: 1), 7);
    expect(B.bisectLeft(3, low: 7, high: 1), 7);
    expect(B.bisectLeft(4, low: 7, high: 1), 7);
    expect(B.bisectLeft(5, low: 7, high: 1), 7);
    expect(B.bisectLeft(6, low: 7, high: 1), 7);
    expect(B.bisectLeft(7, low: 7, high: 1), 7);
    expect(B.bisectLeft(8, low: 7, high: 1), 7);
  });

  test('list.bisectLeft for C lo=7 hi=1', () {
    expect(C.bisectLeft(-2, low: 7, high: 1), 7);
    expect(C.bisectLeft(-1, low: 7, high: 1), 7);
    expect(C.bisectLeft(0, low: 7, high: 1), 7);
    expect(C.bisectLeft(1, low: 7, high: 1), 7);
    expect(C.bisectLeft(2, low: 7, high: 1), 7);
    expect(C.bisectLeft(3, low: 7, high: 1), 7);
    expect(C.bisectLeft(4, low: 7, high: 1), 7);
    expect(C.bisectLeft(5, low: 7, high: 1), 7);
    expect(C.bisectLeft(6, low: 7, high: 1), 7);
    expect(C.bisectLeft(7, low: 7, high: 1), 7);
    expect(C.bisectLeft(8, low: 7, high: 1), 7);
  });

  test('list.bisectLeft for D lo=7 hi=1', () {
    expect(D.bisectLeft(-2, low: 7, high: 1), 7);
    expect(D.bisectLeft(-1, low: 7, high: 1), 7);
    expect(D.bisectLeft(0, low: 7, high: 1), 7);
    expect(D.bisectLeft(1, low: 7, high: 1), 7);
    expect(D.bisectLeft(2, low: 7, high: 1), 7);
    expect(D.bisectLeft(3, low: 7, high: 1), 7);
    expect(D.bisectLeft(4, low: 7, high: 1), 7);
    expect(D.bisectLeft(5, low: 7, high: 1), 7);
    expect(D.bisectLeft(6, low: 7, high: 1), 7);
    expect(D.bisectLeft(7, low: 7, high: 1), 7);
    expect(D.bisectLeft(8, low: 7, high: 1), 7);
  });

  test('list.bisectLeft for E lo=7 hi=1', () {
    expect(E.bisectLeft(-2, low: 7, high: 1), 7);
    expect(E.bisectLeft(-1, low: 7, high: 1), 7);
    expect(E.bisectLeft(0, low: 7, high: 1), 7);
    expect(E.bisectLeft(1, low: 7, high: 1), 7);
    expect(E.bisectLeft(2, low: 7, high: 1), 7);
    expect(E.bisectLeft(3, low: 7, high: 1), 7);
    expect(E.bisectLeft(4, low: 7, high: 1), 7);
    expect(E.bisectLeft(5, low: 7, high: 1), 7);
    expect(E.bisectLeft(6, low: 7, high: 1), 7);
    expect(E.bisectLeft(7, low: 7, high: 1), 7);
    expect(E.bisectLeft(8, low: 7, high: 1), 7);
  });

  test('list.bisectLeft for A lo=8 hi=1', () {
    expect(A.bisectLeft(-2, low: 8, high: 1), 8);
    expect(A.bisectLeft(-1, low: 8, high: 1), 8);
    expect(A.bisectLeft(0, low: 8, high: 1), 8);
    expect(A.bisectLeft(1, low: 8, high: 1), 8);
    expect(A.bisectLeft(2, low: 8, high: 1), 8);
    expect(A.bisectLeft(3, low: 8, high: 1), 8);
    expect(A.bisectLeft(4, low: 8, high: 1), 8);
    expect(A.bisectLeft(5, low: 8, high: 1), 8);
    expect(A.bisectLeft(6, low: 8, high: 1), 8);
    expect(A.bisectLeft(7, low: 8, high: 1), 8);
    expect(A.bisectLeft(8, low: 8, high: 1), 8);
  });

  test('list.bisectLeft for B lo=8 hi=1', () {
    expect(B.bisectLeft(-2, low: 8, high: 1), 8);
    expect(B.bisectLeft(-1, low: 8, high: 1), 8);
    expect(B.bisectLeft(0, low: 8, high: 1), 8);
    expect(B.bisectLeft(1, low: 8, high: 1), 8);
    expect(B.bisectLeft(2, low: 8, high: 1), 8);
    expect(B.bisectLeft(3, low: 8, high: 1), 8);
    expect(B.bisectLeft(4, low: 8, high: 1), 8);
    expect(B.bisectLeft(5, low: 8, high: 1), 8);
    expect(B.bisectLeft(6, low: 8, high: 1), 8);
    expect(B.bisectLeft(7, low: 8, high: 1), 8);
    expect(B.bisectLeft(8, low: 8, high: 1), 8);
  });

  test('list.bisectLeft for C lo=8 hi=1', () {
    expect(C.bisectLeft(-2, low: 8, high: 1), 8);
    expect(C.bisectLeft(-1, low: 8, high: 1), 8);
    expect(C.bisectLeft(0, low: 8, high: 1), 8);
    expect(C.bisectLeft(1, low: 8, high: 1), 8);
    expect(C.bisectLeft(2, low: 8, high: 1), 8);
    expect(C.bisectLeft(3, low: 8, high: 1), 8);
    expect(C.bisectLeft(4, low: 8, high: 1), 8);
    expect(C.bisectLeft(5, low: 8, high: 1), 8);
    expect(C.bisectLeft(6, low: 8, high: 1), 8);
    expect(C.bisectLeft(7, low: 8, high: 1), 8);
    expect(C.bisectLeft(8, low: 8, high: 1), 8);
  });

  test('list.bisectLeft for D lo=8 hi=1', () {
    expect(D.bisectLeft(-2, low: 8, high: 1), 8);
    expect(D.bisectLeft(-1, low: 8, high: 1), 8);
    expect(D.bisectLeft(0, low: 8, high: 1), 8);
    expect(D.bisectLeft(1, low: 8, high: 1), 8);
    expect(D.bisectLeft(2, low: 8, high: 1), 8);
    expect(D.bisectLeft(3, low: 8, high: 1), 8);
    expect(D.bisectLeft(4, low: 8, high: 1), 8);
    expect(D.bisectLeft(5, low: 8, high: 1), 8);
    expect(D.bisectLeft(6, low: 8, high: 1), 8);
    expect(D.bisectLeft(7, low: 8, high: 1), 8);
    expect(D.bisectLeft(8, low: 8, high: 1), 8);
  });

  test('list.bisectLeft for E lo=8 hi=1', () {
    expect(E.bisectLeft(-2, low: 8, high: 1), 8);
    expect(E.bisectLeft(-1, low: 8, high: 1), 8);
    expect(E.bisectLeft(0, low: 8, high: 1), 8);
    expect(E.bisectLeft(1, low: 8, high: 1), 8);
    expect(E.bisectLeft(2, low: 8, high: 1), 8);
    expect(E.bisectLeft(3, low: 8, high: 1), 8);
    expect(E.bisectLeft(4, low: 8, high: 1), 8);
    expect(E.bisectLeft(5, low: 8, high: 1), 8);
    expect(E.bisectLeft(6, low: 8, high: 1), 8);
    expect(E.bisectLeft(7, low: 8, high: 1), 8);
    expect(E.bisectLeft(8, low: 8, high: 1), 8);
  });

  test('list.bisectLeft for A lo=9 hi=1', () {
    expect(A.bisectLeft(-2, low: 9, high: 1), 9);
    expect(A.bisectLeft(-1, low: 9, high: 1), 9);
    expect(A.bisectLeft(0, low: 9, high: 1), 9);
    expect(A.bisectLeft(1, low: 9, high: 1), 9);
    expect(A.bisectLeft(2, low: 9, high: 1), 9);
    expect(A.bisectLeft(3, low: 9, high: 1), 9);
    expect(A.bisectLeft(4, low: 9, high: 1), 9);
    expect(A.bisectLeft(5, low: 9, high: 1), 9);
    expect(A.bisectLeft(6, low: 9, high: 1), 9);
    expect(A.bisectLeft(7, low: 9, high: 1), 9);
    expect(A.bisectLeft(8, low: 9, high: 1), 9);
  });

  test('list.bisectLeft for B lo=9 hi=1', () {
    expect(B.bisectLeft(-2, low: 9, high: 1), 9);
    expect(B.bisectLeft(-1, low: 9, high: 1), 9);
    expect(B.bisectLeft(0, low: 9, high: 1), 9);
    expect(B.bisectLeft(1, low: 9, high: 1), 9);
    expect(B.bisectLeft(2, low: 9, high: 1), 9);
    expect(B.bisectLeft(3, low: 9, high: 1), 9);
    expect(B.bisectLeft(4, low: 9, high: 1), 9);
    expect(B.bisectLeft(5, low: 9, high: 1), 9);
    expect(B.bisectLeft(6, low: 9, high: 1), 9);
    expect(B.bisectLeft(7, low: 9, high: 1), 9);
    expect(B.bisectLeft(8, low: 9, high: 1), 9);
  });

  test('list.bisectLeft for C lo=9 hi=1', () {
    expect(C.bisectLeft(-2, low: 9, high: 1), 9);
    expect(C.bisectLeft(-1, low: 9, high: 1), 9);
    expect(C.bisectLeft(0, low: 9, high: 1), 9);
    expect(C.bisectLeft(1, low: 9, high: 1), 9);
    expect(C.bisectLeft(2, low: 9, high: 1), 9);
    expect(C.bisectLeft(3, low: 9, high: 1), 9);
    expect(C.bisectLeft(4, low: 9, high: 1), 9);
    expect(C.bisectLeft(5, low: 9, high: 1), 9);
    expect(C.bisectLeft(6, low: 9, high: 1), 9);
    expect(C.bisectLeft(7, low: 9, high: 1), 9);
    expect(C.bisectLeft(8, low: 9, high: 1), 9);
  });

  test('list.bisectLeft for D lo=9 hi=1', () {
    expect(D.bisectLeft(-2, low: 9, high: 1), 9);
    expect(D.bisectLeft(-1, low: 9, high: 1), 9);
    expect(D.bisectLeft(0, low: 9, high: 1), 9);
    expect(D.bisectLeft(1, low: 9, high: 1), 9);
    expect(D.bisectLeft(2, low: 9, high: 1), 9);
    expect(D.bisectLeft(3, low: 9, high: 1), 9);
    expect(D.bisectLeft(4, low: 9, high: 1), 9);
    expect(D.bisectLeft(5, low: 9, high: 1), 9);
    expect(D.bisectLeft(6, low: 9, high: 1), 9);
    expect(D.bisectLeft(7, low: 9, high: 1), 9);
    expect(D.bisectLeft(8, low: 9, high: 1), 9);
  });

  test('list.bisectLeft for E lo=9 hi=1', () {
    expect(E.bisectLeft(-2, low: 9, high: 1), 9);
    expect(E.bisectLeft(-1, low: 9, high: 1), 9);
    expect(E.bisectLeft(0, low: 9, high: 1), 9);
    expect(E.bisectLeft(1, low: 9, high: 1), 9);
    expect(E.bisectLeft(2, low: 9, high: 1), 9);
    expect(E.bisectLeft(3, low: 9, high: 1), 9);
    expect(E.bisectLeft(4, low: 9, high: 1), 9);
    expect(E.bisectLeft(5, low: 9, high: 1), 9);
    expect(E.bisectLeft(6, low: 9, high: 1), 9);
    expect(E.bisectLeft(7, low: 9, high: 1), 9);
    expect(E.bisectLeft(8, low: 9, high: 1), 9);
  });

  test('list.bisectLeft for A lo=None hi=2', () {
    expect(() => A.bisectLeft(-2, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 2), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=2', () {
    expect(() => B.bisectLeft(-2, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 2), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=2', () {
    expect(C.bisectLeft(-2, high: 2), 0);
    expect(C.bisectLeft(-1, high: 2), 0);
    expect(C.bisectLeft(0, high: 2), 0);
    expect(C.bisectLeft(1, high: 2), 0);
    expect(C.bisectLeft(2, high: 2), 0);
    expect(C.bisectLeft(3, high: 2), 0);
    expect(C.bisectLeft(4, high: 2), 0);
    expect(C.bisectLeft(5, high: 2), 1);
    expect(C.bisectLeft(6, high: 2), 2);
    expect(C.bisectLeft(7, high: 2), 2);
    expect(C.bisectLeft(8, high: 2), 2);
  });

  test('list.bisectLeft for D lo=None hi=2', () {
    expect(D.bisectLeft(-2, high: 2), 0);
    expect(D.bisectLeft(-1, high: 2), 0);
    expect(D.bisectLeft(0, high: 2), 0);
    expect(D.bisectLeft(1, high: 2), 0);
    expect(D.bisectLeft(2, high: 2), 0);
    expect(D.bisectLeft(3, high: 2), 0);
    expect(D.bisectLeft(4, high: 2), 1);
    expect(D.bisectLeft(5, high: 2), 2);
    expect(D.bisectLeft(6, high: 2), 2);
    expect(D.bisectLeft(7, high: 2), 2);
    expect(D.bisectLeft(8, high: 2), 2);
  });

  test('list.bisectLeft for E lo=None hi=2', () {
    expect(E.bisectLeft(-2, high: 2), 0);
    expect(E.bisectLeft(-1, high: 2), 0);
    expect(E.bisectLeft(0, high: 2), 0);
    expect(E.bisectLeft(1, high: 2), 1);
    expect(E.bisectLeft(2, high: 2), 2);
    expect(E.bisectLeft(3, high: 2), 2);
    expect(E.bisectLeft(4, high: 2), 2);
    expect(E.bisectLeft(5, high: 2), 2);
    expect(E.bisectLeft(6, high: 2), 2);
    expect(E.bisectLeft(7, high: 2), 2);
    expect(E.bisectLeft(8, high: 2), 2);
  });

  test('list.bisectLeft for A lo=0 hi=2', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 2), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=2', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 2), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=2', () {
    expect(C.bisectLeft(-2, low: 0, high: 2), 0);
    expect(C.bisectLeft(-1, low: 0, high: 2), 0);
    expect(C.bisectLeft(0, low: 0, high: 2), 0);
    expect(C.bisectLeft(1, low: 0, high: 2), 0);
    expect(C.bisectLeft(2, low: 0, high: 2), 0);
    expect(C.bisectLeft(3, low: 0, high: 2), 0);
    expect(C.bisectLeft(4, low: 0, high: 2), 0);
    expect(C.bisectLeft(5, low: 0, high: 2), 1);
    expect(C.bisectLeft(6, low: 0, high: 2), 2);
    expect(C.bisectLeft(7, low: 0, high: 2), 2);
    expect(C.bisectLeft(8, low: 0, high: 2), 2);
  });

  test('list.bisectLeft for D lo=0 hi=2', () {
    expect(D.bisectLeft(-2, low: 0, high: 2), 0);
    expect(D.bisectLeft(-1, low: 0, high: 2), 0);
    expect(D.bisectLeft(0, low: 0, high: 2), 0);
    expect(D.bisectLeft(1, low: 0, high: 2), 0);
    expect(D.bisectLeft(2, low: 0, high: 2), 0);
    expect(D.bisectLeft(3, low: 0, high: 2), 0);
    expect(D.bisectLeft(4, low: 0, high: 2), 1);
    expect(D.bisectLeft(5, low: 0, high: 2), 2);
    expect(D.bisectLeft(6, low: 0, high: 2), 2);
    expect(D.bisectLeft(7, low: 0, high: 2), 2);
    expect(D.bisectLeft(8, low: 0, high: 2), 2);
  });

  test('list.bisectLeft for E lo=0 hi=2', () {
    expect(E.bisectLeft(-2, low: 0, high: 2), 0);
    expect(E.bisectLeft(-1, low: 0, high: 2), 0);
    expect(E.bisectLeft(0, low: 0, high: 2), 0);
    expect(E.bisectLeft(1, low: 0, high: 2), 1);
    expect(E.bisectLeft(2, low: 0, high: 2), 2);
    expect(E.bisectLeft(3, low: 0, high: 2), 2);
    expect(E.bisectLeft(4, low: 0, high: 2), 2);
    expect(E.bisectLeft(5, low: 0, high: 2), 2);
    expect(E.bisectLeft(6, low: 0, high: 2), 2);
    expect(E.bisectLeft(7, low: 0, high: 2), 2);
    expect(E.bisectLeft(8, low: 0, high: 2), 2);
  });

  test('list.bisectLeft for A lo=1 hi=2', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 2), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=2', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 2), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=2', () {
    expect(C.bisectLeft(-2, low: 1, high: 2), 1);
    expect(C.bisectLeft(-1, low: 1, high: 2), 1);
    expect(C.bisectLeft(0, low: 1, high: 2), 1);
    expect(C.bisectLeft(1, low: 1, high: 2), 1);
    expect(C.bisectLeft(2, low: 1, high: 2), 1);
    expect(C.bisectLeft(3, low: 1, high: 2), 1);
    expect(C.bisectLeft(4, low: 1, high: 2), 1);
    expect(C.bisectLeft(5, low: 1, high: 2), 1);
    expect(C.bisectLeft(6, low: 1, high: 2), 2);
    expect(C.bisectLeft(7, low: 1, high: 2), 2);
    expect(C.bisectLeft(8, low: 1, high: 2), 2);
  });

  test('list.bisectLeft for D lo=1 hi=2', () {
    expect(D.bisectLeft(-2, low: 1, high: 2), 1);
    expect(D.bisectLeft(-1, low: 1, high: 2), 1);
    expect(D.bisectLeft(0, low: 1, high: 2), 1);
    expect(D.bisectLeft(1, low: 1, high: 2), 1);
    expect(D.bisectLeft(2, low: 1, high: 2), 1);
    expect(D.bisectLeft(3, low: 1, high: 2), 1);
    expect(D.bisectLeft(4, low: 1, high: 2), 1);
    expect(D.bisectLeft(5, low: 1, high: 2), 2);
    expect(D.bisectLeft(6, low: 1, high: 2), 2);
    expect(D.bisectLeft(7, low: 1, high: 2), 2);
    expect(D.bisectLeft(8, low: 1, high: 2), 2);
  });

  test('list.bisectLeft for E lo=1 hi=2', () {
    expect(E.bisectLeft(-2, low: 1, high: 2), 1);
    expect(E.bisectLeft(-1, low: 1, high: 2), 1);
    expect(E.bisectLeft(0, low: 1, high: 2), 1);
    expect(E.bisectLeft(1, low: 1, high: 2), 1);
    expect(E.bisectLeft(2, low: 1, high: 2), 2);
    expect(E.bisectLeft(3, low: 1, high: 2), 2);
    expect(E.bisectLeft(4, low: 1, high: 2), 2);
    expect(E.bisectLeft(5, low: 1, high: 2), 2);
    expect(E.bisectLeft(6, low: 1, high: 2), 2);
    expect(E.bisectLeft(7, low: 1, high: 2), 2);
    expect(E.bisectLeft(8, low: 1, high: 2), 2);
  });

  test('list.bisectLeft for A lo=2 hi=2', () {
    expect(A.bisectLeft(-2, low: 2, high: 2), 2);
    expect(A.bisectLeft(-1, low: 2, high: 2), 2);
    expect(A.bisectLeft(0, low: 2, high: 2), 2);
    expect(A.bisectLeft(1, low: 2, high: 2), 2);
    expect(A.bisectLeft(2, low: 2, high: 2), 2);
    expect(A.bisectLeft(3, low: 2, high: 2), 2);
    expect(A.bisectLeft(4, low: 2, high: 2), 2);
    expect(A.bisectLeft(5, low: 2, high: 2), 2);
    expect(A.bisectLeft(6, low: 2, high: 2), 2);
    expect(A.bisectLeft(7, low: 2, high: 2), 2);
    expect(A.bisectLeft(8, low: 2, high: 2), 2);
  });

  test('list.bisectLeft for B lo=2 hi=2', () {
    expect(B.bisectLeft(-2, low: 2, high: 2), 2);
    expect(B.bisectLeft(-1, low: 2, high: 2), 2);
    expect(B.bisectLeft(0, low: 2, high: 2), 2);
    expect(B.bisectLeft(1, low: 2, high: 2), 2);
    expect(B.bisectLeft(2, low: 2, high: 2), 2);
    expect(B.bisectLeft(3, low: 2, high: 2), 2);
    expect(B.bisectLeft(4, low: 2, high: 2), 2);
    expect(B.bisectLeft(5, low: 2, high: 2), 2);
    expect(B.bisectLeft(6, low: 2, high: 2), 2);
    expect(B.bisectLeft(7, low: 2, high: 2), 2);
    expect(B.bisectLeft(8, low: 2, high: 2), 2);
  });

  test('list.bisectLeft for C lo=2 hi=2', () {
    expect(C.bisectLeft(-2, low: 2, high: 2), 2);
    expect(C.bisectLeft(-1, low: 2, high: 2), 2);
    expect(C.bisectLeft(0, low: 2, high: 2), 2);
    expect(C.bisectLeft(1, low: 2, high: 2), 2);
    expect(C.bisectLeft(2, low: 2, high: 2), 2);
    expect(C.bisectLeft(3, low: 2, high: 2), 2);
    expect(C.bisectLeft(4, low: 2, high: 2), 2);
    expect(C.bisectLeft(5, low: 2, high: 2), 2);
    expect(C.bisectLeft(6, low: 2, high: 2), 2);
    expect(C.bisectLeft(7, low: 2, high: 2), 2);
    expect(C.bisectLeft(8, low: 2, high: 2), 2);
  });

  test('list.bisectLeft for D lo=2 hi=2', () {
    expect(D.bisectLeft(-2, low: 2, high: 2), 2);
    expect(D.bisectLeft(-1, low: 2, high: 2), 2);
    expect(D.bisectLeft(0, low: 2, high: 2), 2);
    expect(D.bisectLeft(1, low: 2, high: 2), 2);
    expect(D.bisectLeft(2, low: 2, high: 2), 2);
    expect(D.bisectLeft(3, low: 2, high: 2), 2);
    expect(D.bisectLeft(4, low: 2, high: 2), 2);
    expect(D.bisectLeft(5, low: 2, high: 2), 2);
    expect(D.bisectLeft(6, low: 2, high: 2), 2);
    expect(D.bisectLeft(7, low: 2, high: 2), 2);
    expect(D.bisectLeft(8, low: 2, high: 2), 2);
  });

  test('list.bisectLeft for E lo=2 hi=2', () {
    expect(E.bisectLeft(-2, low: 2, high: 2), 2);
    expect(E.bisectLeft(-1, low: 2, high: 2), 2);
    expect(E.bisectLeft(0, low: 2, high: 2), 2);
    expect(E.bisectLeft(1, low: 2, high: 2), 2);
    expect(E.bisectLeft(2, low: 2, high: 2), 2);
    expect(E.bisectLeft(3, low: 2, high: 2), 2);
    expect(E.bisectLeft(4, low: 2, high: 2), 2);
    expect(E.bisectLeft(5, low: 2, high: 2), 2);
    expect(E.bisectLeft(6, low: 2, high: 2), 2);
    expect(E.bisectLeft(7, low: 2, high: 2), 2);
    expect(E.bisectLeft(8, low: 2, high: 2), 2);
  });

  test('list.bisectLeft for A lo=3 hi=2', () {
    expect(A.bisectLeft(-2, low: 3, high: 2), 3);
    expect(A.bisectLeft(-1, low: 3, high: 2), 3);
    expect(A.bisectLeft(0, low: 3, high: 2), 3);
    expect(A.bisectLeft(1, low: 3, high: 2), 3);
    expect(A.bisectLeft(2, low: 3, high: 2), 3);
    expect(A.bisectLeft(3, low: 3, high: 2), 3);
    expect(A.bisectLeft(4, low: 3, high: 2), 3);
    expect(A.bisectLeft(5, low: 3, high: 2), 3);
    expect(A.bisectLeft(6, low: 3, high: 2), 3);
    expect(A.bisectLeft(7, low: 3, high: 2), 3);
    expect(A.bisectLeft(8, low: 3, high: 2), 3);
  });

  test('list.bisectLeft for B lo=3 hi=2', () {
    expect(B.bisectLeft(-2, low: 3, high: 2), 3);
    expect(B.bisectLeft(-1, low: 3, high: 2), 3);
    expect(B.bisectLeft(0, low: 3, high: 2), 3);
    expect(B.bisectLeft(1, low: 3, high: 2), 3);
    expect(B.bisectLeft(2, low: 3, high: 2), 3);
    expect(B.bisectLeft(3, low: 3, high: 2), 3);
    expect(B.bisectLeft(4, low: 3, high: 2), 3);
    expect(B.bisectLeft(5, low: 3, high: 2), 3);
    expect(B.bisectLeft(6, low: 3, high: 2), 3);
    expect(B.bisectLeft(7, low: 3, high: 2), 3);
    expect(B.bisectLeft(8, low: 3, high: 2), 3);
  });

  test('list.bisectLeft for C lo=3 hi=2', () {
    expect(C.bisectLeft(-2, low: 3, high: 2), 3);
    expect(C.bisectLeft(-1, low: 3, high: 2), 3);
    expect(C.bisectLeft(0, low: 3, high: 2), 3);
    expect(C.bisectLeft(1, low: 3, high: 2), 3);
    expect(C.bisectLeft(2, low: 3, high: 2), 3);
    expect(C.bisectLeft(3, low: 3, high: 2), 3);
    expect(C.bisectLeft(4, low: 3, high: 2), 3);
    expect(C.bisectLeft(5, low: 3, high: 2), 3);
    expect(C.bisectLeft(6, low: 3, high: 2), 3);
    expect(C.bisectLeft(7, low: 3, high: 2), 3);
    expect(C.bisectLeft(8, low: 3, high: 2), 3);
  });

  test('list.bisectLeft for D lo=3 hi=2', () {
    expect(D.bisectLeft(-2, low: 3, high: 2), 3);
    expect(D.bisectLeft(-1, low: 3, high: 2), 3);
    expect(D.bisectLeft(0, low: 3, high: 2), 3);
    expect(D.bisectLeft(1, low: 3, high: 2), 3);
    expect(D.bisectLeft(2, low: 3, high: 2), 3);
    expect(D.bisectLeft(3, low: 3, high: 2), 3);
    expect(D.bisectLeft(4, low: 3, high: 2), 3);
    expect(D.bisectLeft(5, low: 3, high: 2), 3);
    expect(D.bisectLeft(6, low: 3, high: 2), 3);
    expect(D.bisectLeft(7, low: 3, high: 2), 3);
    expect(D.bisectLeft(8, low: 3, high: 2), 3);
  });

  test('list.bisectLeft for E lo=3 hi=2', () {
    expect(E.bisectLeft(-2, low: 3, high: 2), 3);
    expect(E.bisectLeft(-1, low: 3, high: 2), 3);
    expect(E.bisectLeft(0, low: 3, high: 2), 3);
    expect(E.bisectLeft(1, low: 3, high: 2), 3);
    expect(E.bisectLeft(2, low: 3, high: 2), 3);
    expect(E.bisectLeft(3, low: 3, high: 2), 3);
    expect(E.bisectLeft(4, low: 3, high: 2), 3);
    expect(E.bisectLeft(5, low: 3, high: 2), 3);
    expect(E.bisectLeft(6, low: 3, high: 2), 3);
    expect(E.bisectLeft(7, low: 3, high: 2), 3);
    expect(E.bisectLeft(8, low: 3, high: 2), 3);
  });

  test('list.bisectLeft for A lo=4 hi=2', () {
    expect(A.bisectLeft(-2, low: 4, high: 2), 4);
    expect(A.bisectLeft(-1, low: 4, high: 2), 4);
    expect(A.bisectLeft(0, low: 4, high: 2), 4);
    expect(A.bisectLeft(1, low: 4, high: 2), 4);
    expect(A.bisectLeft(2, low: 4, high: 2), 4);
    expect(A.bisectLeft(3, low: 4, high: 2), 4);
    expect(A.bisectLeft(4, low: 4, high: 2), 4);
    expect(A.bisectLeft(5, low: 4, high: 2), 4);
    expect(A.bisectLeft(6, low: 4, high: 2), 4);
    expect(A.bisectLeft(7, low: 4, high: 2), 4);
    expect(A.bisectLeft(8, low: 4, high: 2), 4);
  });

  test('list.bisectLeft for B lo=4 hi=2', () {
    expect(B.bisectLeft(-2, low: 4, high: 2), 4);
    expect(B.bisectLeft(-1, low: 4, high: 2), 4);
    expect(B.bisectLeft(0, low: 4, high: 2), 4);
    expect(B.bisectLeft(1, low: 4, high: 2), 4);
    expect(B.bisectLeft(2, low: 4, high: 2), 4);
    expect(B.bisectLeft(3, low: 4, high: 2), 4);
    expect(B.bisectLeft(4, low: 4, high: 2), 4);
    expect(B.bisectLeft(5, low: 4, high: 2), 4);
    expect(B.bisectLeft(6, low: 4, high: 2), 4);
    expect(B.bisectLeft(7, low: 4, high: 2), 4);
    expect(B.bisectLeft(8, low: 4, high: 2), 4);
  });

  test('list.bisectLeft for C lo=4 hi=2', () {
    expect(C.bisectLeft(-2, low: 4, high: 2), 4);
    expect(C.bisectLeft(-1, low: 4, high: 2), 4);
    expect(C.bisectLeft(0, low: 4, high: 2), 4);
    expect(C.bisectLeft(1, low: 4, high: 2), 4);
    expect(C.bisectLeft(2, low: 4, high: 2), 4);
    expect(C.bisectLeft(3, low: 4, high: 2), 4);
    expect(C.bisectLeft(4, low: 4, high: 2), 4);
    expect(C.bisectLeft(5, low: 4, high: 2), 4);
    expect(C.bisectLeft(6, low: 4, high: 2), 4);
    expect(C.bisectLeft(7, low: 4, high: 2), 4);
    expect(C.bisectLeft(8, low: 4, high: 2), 4);
  });

  test('list.bisectLeft for D lo=4 hi=2', () {
    expect(D.bisectLeft(-2, low: 4, high: 2), 4);
    expect(D.bisectLeft(-1, low: 4, high: 2), 4);
    expect(D.bisectLeft(0, low: 4, high: 2), 4);
    expect(D.bisectLeft(1, low: 4, high: 2), 4);
    expect(D.bisectLeft(2, low: 4, high: 2), 4);
    expect(D.bisectLeft(3, low: 4, high: 2), 4);
    expect(D.bisectLeft(4, low: 4, high: 2), 4);
    expect(D.bisectLeft(5, low: 4, high: 2), 4);
    expect(D.bisectLeft(6, low: 4, high: 2), 4);
    expect(D.bisectLeft(7, low: 4, high: 2), 4);
    expect(D.bisectLeft(8, low: 4, high: 2), 4);
  });

  test('list.bisectLeft for E lo=4 hi=2', () {
    expect(E.bisectLeft(-2, low: 4, high: 2), 4);
    expect(E.bisectLeft(-1, low: 4, high: 2), 4);
    expect(E.bisectLeft(0, low: 4, high: 2), 4);
    expect(E.bisectLeft(1, low: 4, high: 2), 4);
    expect(E.bisectLeft(2, low: 4, high: 2), 4);
    expect(E.bisectLeft(3, low: 4, high: 2), 4);
    expect(E.bisectLeft(4, low: 4, high: 2), 4);
    expect(E.bisectLeft(5, low: 4, high: 2), 4);
    expect(E.bisectLeft(6, low: 4, high: 2), 4);
    expect(E.bisectLeft(7, low: 4, high: 2), 4);
    expect(E.bisectLeft(8, low: 4, high: 2), 4);
  });

  test('list.bisectLeft for A lo=5 hi=2', () {
    expect(A.bisectLeft(-2, low: 5, high: 2), 5);
    expect(A.bisectLeft(-1, low: 5, high: 2), 5);
    expect(A.bisectLeft(0, low: 5, high: 2), 5);
    expect(A.bisectLeft(1, low: 5, high: 2), 5);
    expect(A.bisectLeft(2, low: 5, high: 2), 5);
    expect(A.bisectLeft(3, low: 5, high: 2), 5);
    expect(A.bisectLeft(4, low: 5, high: 2), 5);
    expect(A.bisectLeft(5, low: 5, high: 2), 5);
    expect(A.bisectLeft(6, low: 5, high: 2), 5);
    expect(A.bisectLeft(7, low: 5, high: 2), 5);
    expect(A.bisectLeft(8, low: 5, high: 2), 5);
  });

  test('list.bisectLeft for B lo=5 hi=2', () {
    expect(B.bisectLeft(-2, low: 5, high: 2), 5);
    expect(B.bisectLeft(-1, low: 5, high: 2), 5);
    expect(B.bisectLeft(0, low: 5, high: 2), 5);
    expect(B.bisectLeft(1, low: 5, high: 2), 5);
    expect(B.bisectLeft(2, low: 5, high: 2), 5);
    expect(B.bisectLeft(3, low: 5, high: 2), 5);
    expect(B.bisectLeft(4, low: 5, high: 2), 5);
    expect(B.bisectLeft(5, low: 5, high: 2), 5);
    expect(B.bisectLeft(6, low: 5, high: 2), 5);
    expect(B.bisectLeft(7, low: 5, high: 2), 5);
    expect(B.bisectLeft(8, low: 5, high: 2), 5);
  });

  test('list.bisectLeft for C lo=5 hi=2', () {
    expect(C.bisectLeft(-2, low: 5, high: 2), 5);
    expect(C.bisectLeft(-1, low: 5, high: 2), 5);
    expect(C.bisectLeft(0, low: 5, high: 2), 5);
    expect(C.bisectLeft(1, low: 5, high: 2), 5);
    expect(C.bisectLeft(2, low: 5, high: 2), 5);
    expect(C.bisectLeft(3, low: 5, high: 2), 5);
    expect(C.bisectLeft(4, low: 5, high: 2), 5);
    expect(C.bisectLeft(5, low: 5, high: 2), 5);
    expect(C.bisectLeft(6, low: 5, high: 2), 5);
    expect(C.bisectLeft(7, low: 5, high: 2), 5);
    expect(C.bisectLeft(8, low: 5, high: 2), 5);
  });

  test('list.bisectLeft for D lo=5 hi=2', () {
    expect(D.bisectLeft(-2, low: 5, high: 2), 5);
    expect(D.bisectLeft(-1, low: 5, high: 2), 5);
    expect(D.bisectLeft(0, low: 5, high: 2), 5);
    expect(D.bisectLeft(1, low: 5, high: 2), 5);
    expect(D.bisectLeft(2, low: 5, high: 2), 5);
    expect(D.bisectLeft(3, low: 5, high: 2), 5);
    expect(D.bisectLeft(4, low: 5, high: 2), 5);
    expect(D.bisectLeft(5, low: 5, high: 2), 5);
    expect(D.bisectLeft(6, low: 5, high: 2), 5);
    expect(D.bisectLeft(7, low: 5, high: 2), 5);
    expect(D.bisectLeft(8, low: 5, high: 2), 5);
  });

  test('list.bisectLeft for E lo=5 hi=2', () {
    expect(E.bisectLeft(-2, low: 5, high: 2), 5);
    expect(E.bisectLeft(-1, low: 5, high: 2), 5);
    expect(E.bisectLeft(0, low: 5, high: 2), 5);
    expect(E.bisectLeft(1, low: 5, high: 2), 5);
    expect(E.bisectLeft(2, low: 5, high: 2), 5);
    expect(E.bisectLeft(3, low: 5, high: 2), 5);
    expect(E.bisectLeft(4, low: 5, high: 2), 5);
    expect(E.bisectLeft(5, low: 5, high: 2), 5);
    expect(E.bisectLeft(6, low: 5, high: 2), 5);
    expect(E.bisectLeft(7, low: 5, high: 2), 5);
    expect(E.bisectLeft(8, low: 5, high: 2), 5);
  });

  test('list.bisectLeft for A lo=6 hi=2', () {
    expect(A.bisectLeft(-2, low: 6, high: 2), 6);
    expect(A.bisectLeft(-1, low: 6, high: 2), 6);
    expect(A.bisectLeft(0, low: 6, high: 2), 6);
    expect(A.bisectLeft(1, low: 6, high: 2), 6);
    expect(A.bisectLeft(2, low: 6, high: 2), 6);
    expect(A.bisectLeft(3, low: 6, high: 2), 6);
    expect(A.bisectLeft(4, low: 6, high: 2), 6);
    expect(A.bisectLeft(5, low: 6, high: 2), 6);
    expect(A.bisectLeft(6, low: 6, high: 2), 6);
    expect(A.bisectLeft(7, low: 6, high: 2), 6);
    expect(A.bisectLeft(8, low: 6, high: 2), 6);
  });

  test('list.bisectLeft for B lo=6 hi=2', () {
    expect(B.bisectLeft(-2, low: 6, high: 2), 6);
    expect(B.bisectLeft(-1, low: 6, high: 2), 6);
    expect(B.bisectLeft(0, low: 6, high: 2), 6);
    expect(B.bisectLeft(1, low: 6, high: 2), 6);
    expect(B.bisectLeft(2, low: 6, high: 2), 6);
    expect(B.bisectLeft(3, low: 6, high: 2), 6);
    expect(B.bisectLeft(4, low: 6, high: 2), 6);
    expect(B.bisectLeft(5, low: 6, high: 2), 6);
    expect(B.bisectLeft(6, low: 6, high: 2), 6);
    expect(B.bisectLeft(7, low: 6, high: 2), 6);
    expect(B.bisectLeft(8, low: 6, high: 2), 6);
  });

  test('list.bisectLeft for C lo=6 hi=2', () {
    expect(C.bisectLeft(-2, low: 6, high: 2), 6);
    expect(C.bisectLeft(-1, low: 6, high: 2), 6);
    expect(C.bisectLeft(0, low: 6, high: 2), 6);
    expect(C.bisectLeft(1, low: 6, high: 2), 6);
    expect(C.bisectLeft(2, low: 6, high: 2), 6);
    expect(C.bisectLeft(3, low: 6, high: 2), 6);
    expect(C.bisectLeft(4, low: 6, high: 2), 6);
    expect(C.bisectLeft(5, low: 6, high: 2), 6);
    expect(C.bisectLeft(6, low: 6, high: 2), 6);
    expect(C.bisectLeft(7, low: 6, high: 2), 6);
    expect(C.bisectLeft(8, low: 6, high: 2), 6);
  });

  test('list.bisectLeft for D lo=6 hi=2', () {
    expect(D.bisectLeft(-2, low: 6, high: 2), 6);
    expect(D.bisectLeft(-1, low: 6, high: 2), 6);
    expect(D.bisectLeft(0, low: 6, high: 2), 6);
    expect(D.bisectLeft(1, low: 6, high: 2), 6);
    expect(D.bisectLeft(2, low: 6, high: 2), 6);
    expect(D.bisectLeft(3, low: 6, high: 2), 6);
    expect(D.bisectLeft(4, low: 6, high: 2), 6);
    expect(D.bisectLeft(5, low: 6, high: 2), 6);
    expect(D.bisectLeft(6, low: 6, high: 2), 6);
    expect(D.bisectLeft(7, low: 6, high: 2), 6);
    expect(D.bisectLeft(8, low: 6, high: 2), 6);
  });

  test('list.bisectLeft for E lo=6 hi=2', () {
    expect(E.bisectLeft(-2, low: 6, high: 2), 6);
    expect(E.bisectLeft(-1, low: 6, high: 2), 6);
    expect(E.bisectLeft(0, low: 6, high: 2), 6);
    expect(E.bisectLeft(1, low: 6, high: 2), 6);
    expect(E.bisectLeft(2, low: 6, high: 2), 6);
    expect(E.bisectLeft(3, low: 6, high: 2), 6);
    expect(E.bisectLeft(4, low: 6, high: 2), 6);
    expect(E.bisectLeft(5, low: 6, high: 2), 6);
    expect(E.bisectLeft(6, low: 6, high: 2), 6);
    expect(E.bisectLeft(7, low: 6, high: 2), 6);
    expect(E.bisectLeft(8, low: 6, high: 2), 6);
  });

  test('list.bisectLeft for A lo=7 hi=2', () {
    expect(A.bisectLeft(-2, low: 7, high: 2), 7);
    expect(A.bisectLeft(-1, low: 7, high: 2), 7);
    expect(A.bisectLeft(0, low: 7, high: 2), 7);
    expect(A.bisectLeft(1, low: 7, high: 2), 7);
    expect(A.bisectLeft(2, low: 7, high: 2), 7);
    expect(A.bisectLeft(3, low: 7, high: 2), 7);
    expect(A.bisectLeft(4, low: 7, high: 2), 7);
    expect(A.bisectLeft(5, low: 7, high: 2), 7);
    expect(A.bisectLeft(6, low: 7, high: 2), 7);
    expect(A.bisectLeft(7, low: 7, high: 2), 7);
    expect(A.bisectLeft(8, low: 7, high: 2), 7);
  });

  test('list.bisectLeft for B lo=7 hi=2', () {
    expect(B.bisectLeft(-2, low: 7, high: 2), 7);
    expect(B.bisectLeft(-1, low: 7, high: 2), 7);
    expect(B.bisectLeft(0, low: 7, high: 2), 7);
    expect(B.bisectLeft(1, low: 7, high: 2), 7);
    expect(B.bisectLeft(2, low: 7, high: 2), 7);
    expect(B.bisectLeft(3, low: 7, high: 2), 7);
    expect(B.bisectLeft(4, low: 7, high: 2), 7);
    expect(B.bisectLeft(5, low: 7, high: 2), 7);
    expect(B.bisectLeft(6, low: 7, high: 2), 7);
    expect(B.bisectLeft(7, low: 7, high: 2), 7);
    expect(B.bisectLeft(8, low: 7, high: 2), 7);
  });

  test('list.bisectLeft for C lo=7 hi=2', () {
    expect(C.bisectLeft(-2, low: 7, high: 2), 7);
    expect(C.bisectLeft(-1, low: 7, high: 2), 7);
    expect(C.bisectLeft(0, low: 7, high: 2), 7);
    expect(C.bisectLeft(1, low: 7, high: 2), 7);
    expect(C.bisectLeft(2, low: 7, high: 2), 7);
    expect(C.bisectLeft(3, low: 7, high: 2), 7);
    expect(C.bisectLeft(4, low: 7, high: 2), 7);
    expect(C.bisectLeft(5, low: 7, high: 2), 7);
    expect(C.bisectLeft(6, low: 7, high: 2), 7);
    expect(C.bisectLeft(7, low: 7, high: 2), 7);
    expect(C.bisectLeft(8, low: 7, high: 2), 7);
  });

  test('list.bisectLeft for D lo=7 hi=2', () {
    expect(D.bisectLeft(-2, low: 7, high: 2), 7);
    expect(D.bisectLeft(-1, low: 7, high: 2), 7);
    expect(D.bisectLeft(0, low: 7, high: 2), 7);
    expect(D.bisectLeft(1, low: 7, high: 2), 7);
    expect(D.bisectLeft(2, low: 7, high: 2), 7);
    expect(D.bisectLeft(3, low: 7, high: 2), 7);
    expect(D.bisectLeft(4, low: 7, high: 2), 7);
    expect(D.bisectLeft(5, low: 7, high: 2), 7);
    expect(D.bisectLeft(6, low: 7, high: 2), 7);
    expect(D.bisectLeft(7, low: 7, high: 2), 7);
    expect(D.bisectLeft(8, low: 7, high: 2), 7);
  });

  test('list.bisectLeft for E lo=7 hi=2', () {
    expect(E.bisectLeft(-2, low: 7, high: 2), 7);
    expect(E.bisectLeft(-1, low: 7, high: 2), 7);
    expect(E.bisectLeft(0, low: 7, high: 2), 7);
    expect(E.bisectLeft(1, low: 7, high: 2), 7);
    expect(E.bisectLeft(2, low: 7, high: 2), 7);
    expect(E.bisectLeft(3, low: 7, high: 2), 7);
    expect(E.bisectLeft(4, low: 7, high: 2), 7);
    expect(E.bisectLeft(5, low: 7, high: 2), 7);
    expect(E.bisectLeft(6, low: 7, high: 2), 7);
    expect(E.bisectLeft(7, low: 7, high: 2), 7);
    expect(E.bisectLeft(8, low: 7, high: 2), 7);
  });

  test('list.bisectLeft for A lo=8 hi=2', () {
    expect(A.bisectLeft(-2, low: 8, high: 2), 8);
    expect(A.bisectLeft(-1, low: 8, high: 2), 8);
    expect(A.bisectLeft(0, low: 8, high: 2), 8);
    expect(A.bisectLeft(1, low: 8, high: 2), 8);
    expect(A.bisectLeft(2, low: 8, high: 2), 8);
    expect(A.bisectLeft(3, low: 8, high: 2), 8);
    expect(A.bisectLeft(4, low: 8, high: 2), 8);
    expect(A.bisectLeft(5, low: 8, high: 2), 8);
    expect(A.bisectLeft(6, low: 8, high: 2), 8);
    expect(A.bisectLeft(7, low: 8, high: 2), 8);
    expect(A.bisectLeft(8, low: 8, high: 2), 8);
  });

  test('list.bisectLeft for B lo=8 hi=2', () {
    expect(B.bisectLeft(-2, low: 8, high: 2), 8);
    expect(B.bisectLeft(-1, low: 8, high: 2), 8);
    expect(B.bisectLeft(0, low: 8, high: 2), 8);
    expect(B.bisectLeft(1, low: 8, high: 2), 8);
    expect(B.bisectLeft(2, low: 8, high: 2), 8);
    expect(B.bisectLeft(3, low: 8, high: 2), 8);
    expect(B.bisectLeft(4, low: 8, high: 2), 8);
    expect(B.bisectLeft(5, low: 8, high: 2), 8);
    expect(B.bisectLeft(6, low: 8, high: 2), 8);
    expect(B.bisectLeft(7, low: 8, high: 2), 8);
    expect(B.bisectLeft(8, low: 8, high: 2), 8);
  });

  test('list.bisectLeft for C lo=8 hi=2', () {
    expect(C.bisectLeft(-2, low: 8, high: 2), 8);
    expect(C.bisectLeft(-1, low: 8, high: 2), 8);
    expect(C.bisectLeft(0, low: 8, high: 2), 8);
    expect(C.bisectLeft(1, low: 8, high: 2), 8);
    expect(C.bisectLeft(2, low: 8, high: 2), 8);
    expect(C.bisectLeft(3, low: 8, high: 2), 8);
    expect(C.bisectLeft(4, low: 8, high: 2), 8);
    expect(C.bisectLeft(5, low: 8, high: 2), 8);
    expect(C.bisectLeft(6, low: 8, high: 2), 8);
    expect(C.bisectLeft(7, low: 8, high: 2), 8);
    expect(C.bisectLeft(8, low: 8, high: 2), 8);
  });

  test('list.bisectLeft for D lo=8 hi=2', () {
    expect(D.bisectLeft(-2, low: 8, high: 2), 8);
    expect(D.bisectLeft(-1, low: 8, high: 2), 8);
    expect(D.bisectLeft(0, low: 8, high: 2), 8);
    expect(D.bisectLeft(1, low: 8, high: 2), 8);
    expect(D.bisectLeft(2, low: 8, high: 2), 8);
    expect(D.bisectLeft(3, low: 8, high: 2), 8);
    expect(D.bisectLeft(4, low: 8, high: 2), 8);
    expect(D.bisectLeft(5, low: 8, high: 2), 8);
    expect(D.bisectLeft(6, low: 8, high: 2), 8);
    expect(D.bisectLeft(7, low: 8, high: 2), 8);
    expect(D.bisectLeft(8, low: 8, high: 2), 8);
  });

  test('list.bisectLeft for E lo=8 hi=2', () {
    expect(E.bisectLeft(-2, low: 8, high: 2), 8);
    expect(E.bisectLeft(-1, low: 8, high: 2), 8);
    expect(E.bisectLeft(0, low: 8, high: 2), 8);
    expect(E.bisectLeft(1, low: 8, high: 2), 8);
    expect(E.bisectLeft(2, low: 8, high: 2), 8);
    expect(E.bisectLeft(3, low: 8, high: 2), 8);
    expect(E.bisectLeft(4, low: 8, high: 2), 8);
    expect(E.bisectLeft(5, low: 8, high: 2), 8);
    expect(E.bisectLeft(6, low: 8, high: 2), 8);
    expect(E.bisectLeft(7, low: 8, high: 2), 8);
    expect(E.bisectLeft(8, low: 8, high: 2), 8);
  });

  test('list.bisectLeft for A lo=9 hi=2', () {
    expect(A.bisectLeft(-2, low: 9, high: 2), 9);
    expect(A.bisectLeft(-1, low: 9, high: 2), 9);
    expect(A.bisectLeft(0, low: 9, high: 2), 9);
    expect(A.bisectLeft(1, low: 9, high: 2), 9);
    expect(A.bisectLeft(2, low: 9, high: 2), 9);
    expect(A.bisectLeft(3, low: 9, high: 2), 9);
    expect(A.bisectLeft(4, low: 9, high: 2), 9);
    expect(A.bisectLeft(5, low: 9, high: 2), 9);
    expect(A.bisectLeft(6, low: 9, high: 2), 9);
    expect(A.bisectLeft(7, low: 9, high: 2), 9);
    expect(A.bisectLeft(8, low: 9, high: 2), 9);
  });

  test('list.bisectLeft for B lo=9 hi=2', () {
    expect(B.bisectLeft(-2, low: 9, high: 2), 9);
    expect(B.bisectLeft(-1, low: 9, high: 2), 9);
    expect(B.bisectLeft(0, low: 9, high: 2), 9);
    expect(B.bisectLeft(1, low: 9, high: 2), 9);
    expect(B.bisectLeft(2, low: 9, high: 2), 9);
    expect(B.bisectLeft(3, low: 9, high: 2), 9);
    expect(B.bisectLeft(4, low: 9, high: 2), 9);
    expect(B.bisectLeft(5, low: 9, high: 2), 9);
    expect(B.bisectLeft(6, low: 9, high: 2), 9);
    expect(B.bisectLeft(7, low: 9, high: 2), 9);
    expect(B.bisectLeft(8, low: 9, high: 2), 9);
  });

  test('list.bisectLeft for C lo=9 hi=2', () {
    expect(C.bisectLeft(-2, low: 9, high: 2), 9);
    expect(C.bisectLeft(-1, low: 9, high: 2), 9);
    expect(C.bisectLeft(0, low: 9, high: 2), 9);
    expect(C.bisectLeft(1, low: 9, high: 2), 9);
    expect(C.bisectLeft(2, low: 9, high: 2), 9);
    expect(C.bisectLeft(3, low: 9, high: 2), 9);
    expect(C.bisectLeft(4, low: 9, high: 2), 9);
    expect(C.bisectLeft(5, low: 9, high: 2), 9);
    expect(C.bisectLeft(6, low: 9, high: 2), 9);
    expect(C.bisectLeft(7, low: 9, high: 2), 9);
    expect(C.bisectLeft(8, low: 9, high: 2), 9);
  });

  test('list.bisectLeft for D lo=9 hi=2', () {
    expect(D.bisectLeft(-2, low: 9, high: 2), 9);
    expect(D.bisectLeft(-1, low: 9, high: 2), 9);
    expect(D.bisectLeft(0, low: 9, high: 2), 9);
    expect(D.bisectLeft(1, low: 9, high: 2), 9);
    expect(D.bisectLeft(2, low: 9, high: 2), 9);
    expect(D.bisectLeft(3, low: 9, high: 2), 9);
    expect(D.bisectLeft(4, low: 9, high: 2), 9);
    expect(D.bisectLeft(5, low: 9, high: 2), 9);
    expect(D.bisectLeft(6, low: 9, high: 2), 9);
    expect(D.bisectLeft(7, low: 9, high: 2), 9);
    expect(D.bisectLeft(8, low: 9, high: 2), 9);
  });

  test('list.bisectLeft for E lo=9 hi=2', () {
    expect(E.bisectLeft(-2, low: 9, high: 2), 9);
    expect(E.bisectLeft(-1, low: 9, high: 2), 9);
    expect(E.bisectLeft(0, low: 9, high: 2), 9);
    expect(E.bisectLeft(1, low: 9, high: 2), 9);
    expect(E.bisectLeft(2, low: 9, high: 2), 9);
    expect(E.bisectLeft(3, low: 9, high: 2), 9);
    expect(E.bisectLeft(4, low: 9, high: 2), 9);
    expect(E.bisectLeft(5, low: 9, high: 2), 9);
    expect(E.bisectLeft(6, low: 9, high: 2), 9);
    expect(E.bisectLeft(7, low: 9, high: 2), 9);
    expect(E.bisectLeft(8, low: 9, high: 2), 9);
  });

  test('list.bisectLeft for A lo=None hi=3', () {
    expect(() => A.bisectLeft(-2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=3', () {
    expect(() => B.bisectLeft(-2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=3', () {
    expect(C.bisectLeft(-2, high: 3), 0);
    expect(C.bisectLeft(-1, high: 3), 0);
    expect(C.bisectLeft(0, high: 3), 0);
    expect(C.bisectLeft(1, high: 3), 0);
    expect(C.bisectLeft(2, high: 3), 0);
    expect(C.bisectLeft(3, high: 3), 0);
    expect(C.bisectLeft(4, high: 3), 0);
    expect(C.bisectLeft(5, high: 3), 1);
    expect(() => C.bisectLeft(6, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(7, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(8, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for D lo=None hi=3', () {
    expect(D.bisectLeft(-2, high: 3), 0);
    expect(D.bisectLeft(-1, high: 3), 0);
    expect(D.bisectLeft(0, high: 3), 0);
    expect(D.bisectLeft(1, high: 3), 0);
    expect(D.bisectLeft(2, high: 3), 0);
    expect(D.bisectLeft(3, high: 3), 0);
    expect(D.bisectLeft(4, high: 3), 1);
    expect(D.bisectLeft(5, high: 3), 2);
    expect(D.bisectLeft(6, high: 3), 3);
    expect(D.bisectLeft(7, high: 3), 3);
    expect(D.bisectLeft(8, high: 3), 3);
  });

  test('list.bisectLeft for E lo=None hi=3', () {
    expect(E.bisectLeft(-2, high: 3), 0);
    expect(E.bisectLeft(-1, high: 3), 0);
    expect(E.bisectLeft(0, high: 3), 0);
    expect(E.bisectLeft(1, high: 3), 1);
    expect(E.bisectLeft(2, high: 3), 2);
    expect(E.bisectLeft(3, high: 3), 3);
    expect(E.bisectLeft(4, high: 3), 3);
    expect(E.bisectLeft(5, high: 3), 3);
    expect(E.bisectLeft(6, high: 3), 3);
    expect(E.bisectLeft(7, high: 3), 3);
    expect(E.bisectLeft(8, high: 3), 3);
  });

  test('list.bisectLeft for A lo=0 hi=3', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=3', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=3', () {
    expect(C.bisectLeft(-2, low: 0, high: 3), 0);
    expect(C.bisectLeft(-1, low: 0, high: 3), 0);
    expect(C.bisectLeft(0, low: 0, high: 3), 0);
    expect(C.bisectLeft(1, low: 0, high: 3), 0);
    expect(C.bisectLeft(2, low: 0, high: 3), 0);
    expect(C.bisectLeft(3, low: 0, high: 3), 0);
    expect(C.bisectLeft(4, low: 0, high: 3), 0);
    expect(C.bisectLeft(5, low: 0, high: 3), 1);
    expect(() => C.bisectLeft(6, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 0, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for D lo=0 hi=3', () {
    expect(D.bisectLeft(-2, low: 0, high: 3), 0);
    expect(D.bisectLeft(-1, low: 0, high: 3), 0);
    expect(D.bisectLeft(0, low: 0, high: 3), 0);
    expect(D.bisectLeft(1, low: 0, high: 3), 0);
    expect(D.bisectLeft(2, low: 0, high: 3), 0);
    expect(D.bisectLeft(3, low: 0, high: 3), 0);
    expect(D.bisectLeft(4, low: 0, high: 3), 1);
    expect(D.bisectLeft(5, low: 0, high: 3), 2);
    expect(D.bisectLeft(6, low: 0, high: 3), 3);
    expect(D.bisectLeft(7, low: 0, high: 3), 3);
    expect(D.bisectLeft(8, low: 0, high: 3), 3);
  });

  test('list.bisectLeft for E lo=0 hi=3', () {
    expect(E.bisectLeft(-2, low: 0, high: 3), 0);
    expect(E.bisectLeft(-1, low: 0, high: 3), 0);
    expect(E.bisectLeft(0, low: 0, high: 3), 0);
    expect(E.bisectLeft(1, low: 0, high: 3), 1);
    expect(E.bisectLeft(2, low: 0, high: 3), 2);
    expect(E.bisectLeft(3, low: 0, high: 3), 3);
    expect(E.bisectLeft(4, low: 0, high: 3), 3);
    expect(E.bisectLeft(5, low: 0, high: 3), 3);
    expect(E.bisectLeft(6, low: 0, high: 3), 3);
    expect(E.bisectLeft(7, low: 0, high: 3), 3);
    expect(E.bisectLeft(8, low: 0, high: 3), 3);
  });

  test('list.bisectLeft for A lo=1 hi=3', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=3', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=3', () {
    expect(() => C.bisectLeft(-2, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 1, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for D lo=1 hi=3', () {
    expect(D.bisectLeft(-2, low: 1, high: 3), 1);
    expect(D.bisectLeft(-1, low: 1, high: 3), 1);
    expect(D.bisectLeft(0, low: 1, high: 3), 1);
    expect(D.bisectLeft(1, low: 1, high: 3), 1);
    expect(D.bisectLeft(2, low: 1, high: 3), 1);
    expect(D.bisectLeft(3, low: 1, high: 3), 1);
    expect(D.bisectLeft(4, low: 1, high: 3), 1);
    expect(D.bisectLeft(5, low: 1, high: 3), 2);
    expect(D.bisectLeft(6, low: 1, high: 3), 3);
    expect(D.bisectLeft(7, low: 1, high: 3), 3);
    expect(D.bisectLeft(8, low: 1, high: 3), 3);
  });

  test('list.bisectLeft for E lo=1 hi=3', () {
    expect(E.bisectLeft(-2, low: 1, high: 3), 1);
    expect(E.bisectLeft(-1, low: 1, high: 3), 1);
    expect(E.bisectLeft(0, low: 1, high: 3), 1);
    expect(E.bisectLeft(1, low: 1, high: 3), 1);
    expect(E.bisectLeft(2, low: 1, high: 3), 2);
    expect(E.bisectLeft(3, low: 1, high: 3), 3);
    expect(E.bisectLeft(4, low: 1, high: 3), 3);
    expect(E.bisectLeft(5, low: 1, high: 3), 3);
    expect(E.bisectLeft(6, low: 1, high: 3), 3);
    expect(E.bisectLeft(7, low: 1, high: 3), 3);
    expect(E.bisectLeft(8, low: 1, high: 3), 3);
  });

  test('list.bisectLeft for A lo=2 hi=3', () {
    expect(() => A.bisectLeft(-2, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 2, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for B lo=2 hi=3', () {
    expect(() => B.bisectLeft(-2, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 2, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for C lo=2 hi=3', () {
    expect(() => C.bisectLeft(-2, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 2, high: 3), throwsRangeError);
  });

  test('list.bisectLeft for D lo=2 hi=3', () {
    expect(D.bisectLeft(-2, low: 2, high: 3), 2);
    expect(D.bisectLeft(-1, low: 2, high: 3), 2);
    expect(D.bisectLeft(0, low: 2, high: 3), 2);
    expect(D.bisectLeft(1, low: 2, high: 3), 2);
    expect(D.bisectLeft(2, low: 2, high: 3), 2);
    expect(D.bisectLeft(3, low: 2, high: 3), 2);
    expect(D.bisectLeft(4, low: 2, high: 3), 2);
    expect(D.bisectLeft(5, low: 2, high: 3), 2);
    expect(D.bisectLeft(6, low: 2, high: 3), 3);
    expect(D.bisectLeft(7, low: 2, high: 3), 3);
    expect(D.bisectLeft(8, low: 2, high: 3), 3);
  });

  test('list.bisectLeft for E lo=2 hi=3', () {
    expect(E.bisectLeft(-2, low: 2, high: 3), 2);
    expect(E.bisectLeft(-1, low: 2, high: 3), 2);
    expect(E.bisectLeft(0, low: 2, high: 3), 2);
    expect(E.bisectLeft(1, low: 2, high: 3), 2);
    expect(E.bisectLeft(2, low: 2, high: 3), 2);
    expect(E.bisectLeft(3, low: 2, high: 3), 3);
    expect(E.bisectLeft(4, low: 2, high: 3), 3);
    expect(E.bisectLeft(5, low: 2, high: 3), 3);
    expect(E.bisectLeft(6, low: 2, high: 3), 3);
    expect(E.bisectLeft(7, low: 2, high: 3), 3);
    expect(E.bisectLeft(8, low: 2, high: 3), 3);
  });

  test('list.bisectLeft for A lo=3 hi=3', () {
    expect(A.bisectLeft(-2, low: 3, high: 3), 3);
    expect(A.bisectLeft(-1, low: 3, high: 3), 3);
    expect(A.bisectLeft(0, low: 3, high: 3), 3);
    expect(A.bisectLeft(1, low: 3, high: 3), 3);
    expect(A.bisectLeft(2, low: 3, high: 3), 3);
    expect(A.bisectLeft(3, low: 3, high: 3), 3);
    expect(A.bisectLeft(4, low: 3, high: 3), 3);
    expect(A.bisectLeft(5, low: 3, high: 3), 3);
    expect(A.bisectLeft(6, low: 3, high: 3), 3);
    expect(A.bisectLeft(7, low: 3, high: 3), 3);
    expect(A.bisectLeft(8, low: 3, high: 3), 3);
  });

  test('list.bisectLeft for B lo=3 hi=3', () {
    expect(B.bisectLeft(-2, low: 3, high: 3), 3);
    expect(B.bisectLeft(-1, low: 3, high: 3), 3);
    expect(B.bisectLeft(0, low: 3, high: 3), 3);
    expect(B.bisectLeft(1, low: 3, high: 3), 3);
    expect(B.bisectLeft(2, low: 3, high: 3), 3);
    expect(B.bisectLeft(3, low: 3, high: 3), 3);
    expect(B.bisectLeft(4, low: 3, high: 3), 3);
    expect(B.bisectLeft(5, low: 3, high: 3), 3);
    expect(B.bisectLeft(6, low: 3, high: 3), 3);
    expect(B.bisectLeft(7, low: 3, high: 3), 3);
    expect(B.bisectLeft(8, low: 3, high: 3), 3);
  });

  test('list.bisectLeft for C lo=3 hi=3', () {
    expect(C.bisectLeft(-2, low: 3, high: 3), 3);
    expect(C.bisectLeft(-1, low: 3, high: 3), 3);
    expect(C.bisectLeft(0, low: 3, high: 3), 3);
    expect(C.bisectLeft(1, low: 3, high: 3), 3);
    expect(C.bisectLeft(2, low: 3, high: 3), 3);
    expect(C.bisectLeft(3, low: 3, high: 3), 3);
    expect(C.bisectLeft(4, low: 3, high: 3), 3);
    expect(C.bisectLeft(5, low: 3, high: 3), 3);
    expect(C.bisectLeft(6, low: 3, high: 3), 3);
    expect(C.bisectLeft(7, low: 3, high: 3), 3);
    expect(C.bisectLeft(8, low: 3, high: 3), 3);
  });

  test('list.bisectLeft for D lo=3 hi=3', () {
    expect(D.bisectLeft(-2, low: 3, high: 3), 3);
    expect(D.bisectLeft(-1, low: 3, high: 3), 3);
    expect(D.bisectLeft(0, low: 3, high: 3), 3);
    expect(D.bisectLeft(1, low: 3, high: 3), 3);
    expect(D.bisectLeft(2, low: 3, high: 3), 3);
    expect(D.bisectLeft(3, low: 3, high: 3), 3);
    expect(D.bisectLeft(4, low: 3, high: 3), 3);
    expect(D.bisectLeft(5, low: 3, high: 3), 3);
    expect(D.bisectLeft(6, low: 3, high: 3), 3);
    expect(D.bisectLeft(7, low: 3, high: 3), 3);
    expect(D.bisectLeft(8, low: 3, high: 3), 3);
  });

  test('list.bisectLeft for E lo=3 hi=3', () {
    expect(E.bisectLeft(-2, low: 3, high: 3), 3);
    expect(E.bisectLeft(-1, low: 3, high: 3), 3);
    expect(E.bisectLeft(0, low: 3, high: 3), 3);
    expect(E.bisectLeft(1, low: 3, high: 3), 3);
    expect(E.bisectLeft(2, low: 3, high: 3), 3);
    expect(E.bisectLeft(3, low: 3, high: 3), 3);
    expect(E.bisectLeft(4, low: 3, high: 3), 3);
    expect(E.bisectLeft(5, low: 3, high: 3), 3);
    expect(E.bisectLeft(6, low: 3, high: 3), 3);
    expect(E.bisectLeft(7, low: 3, high: 3), 3);
    expect(E.bisectLeft(8, low: 3, high: 3), 3);
  });

  test('list.bisectLeft for A lo=4 hi=3', () {
    expect(A.bisectLeft(-2, low: 4, high: 3), 4);
    expect(A.bisectLeft(-1, low: 4, high: 3), 4);
    expect(A.bisectLeft(0, low: 4, high: 3), 4);
    expect(A.bisectLeft(1, low: 4, high: 3), 4);
    expect(A.bisectLeft(2, low: 4, high: 3), 4);
    expect(A.bisectLeft(3, low: 4, high: 3), 4);
    expect(A.bisectLeft(4, low: 4, high: 3), 4);
    expect(A.bisectLeft(5, low: 4, high: 3), 4);
    expect(A.bisectLeft(6, low: 4, high: 3), 4);
    expect(A.bisectLeft(7, low: 4, high: 3), 4);
    expect(A.bisectLeft(8, low: 4, high: 3), 4);
  });

  test('list.bisectLeft for B lo=4 hi=3', () {
    expect(B.bisectLeft(-2, low: 4, high: 3), 4);
    expect(B.bisectLeft(-1, low: 4, high: 3), 4);
    expect(B.bisectLeft(0, low: 4, high: 3), 4);
    expect(B.bisectLeft(1, low: 4, high: 3), 4);
    expect(B.bisectLeft(2, low: 4, high: 3), 4);
    expect(B.bisectLeft(3, low: 4, high: 3), 4);
    expect(B.bisectLeft(4, low: 4, high: 3), 4);
    expect(B.bisectLeft(5, low: 4, high: 3), 4);
    expect(B.bisectLeft(6, low: 4, high: 3), 4);
    expect(B.bisectLeft(7, low: 4, high: 3), 4);
    expect(B.bisectLeft(8, low: 4, high: 3), 4);
  });

  test('list.bisectLeft for C lo=4 hi=3', () {
    expect(C.bisectLeft(-2, low: 4, high: 3), 4);
    expect(C.bisectLeft(-1, low: 4, high: 3), 4);
    expect(C.bisectLeft(0, low: 4, high: 3), 4);
    expect(C.bisectLeft(1, low: 4, high: 3), 4);
    expect(C.bisectLeft(2, low: 4, high: 3), 4);
    expect(C.bisectLeft(3, low: 4, high: 3), 4);
    expect(C.bisectLeft(4, low: 4, high: 3), 4);
    expect(C.bisectLeft(5, low: 4, high: 3), 4);
    expect(C.bisectLeft(6, low: 4, high: 3), 4);
    expect(C.bisectLeft(7, low: 4, high: 3), 4);
    expect(C.bisectLeft(8, low: 4, high: 3), 4);
  });

  test('list.bisectLeft for D lo=4 hi=3', () {
    expect(D.bisectLeft(-2, low: 4, high: 3), 4);
    expect(D.bisectLeft(-1, low: 4, high: 3), 4);
    expect(D.bisectLeft(0, low: 4, high: 3), 4);
    expect(D.bisectLeft(1, low: 4, high: 3), 4);
    expect(D.bisectLeft(2, low: 4, high: 3), 4);
    expect(D.bisectLeft(3, low: 4, high: 3), 4);
    expect(D.bisectLeft(4, low: 4, high: 3), 4);
    expect(D.bisectLeft(5, low: 4, high: 3), 4);
    expect(D.bisectLeft(6, low: 4, high: 3), 4);
    expect(D.bisectLeft(7, low: 4, high: 3), 4);
    expect(D.bisectLeft(8, low: 4, high: 3), 4);
  });

  test('list.bisectLeft for E lo=4 hi=3', () {
    expect(E.bisectLeft(-2, low: 4, high: 3), 4);
    expect(E.bisectLeft(-1, low: 4, high: 3), 4);
    expect(E.bisectLeft(0, low: 4, high: 3), 4);
    expect(E.bisectLeft(1, low: 4, high: 3), 4);
    expect(E.bisectLeft(2, low: 4, high: 3), 4);
    expect(E.bisectLeft(3, low: 4, high: 3), 4);
    expect(E.bisectLeft(4, low: 4, high: 3), 4);
    expect(E.bisectLeft(5, low: 4, high: 3), 4);
    expect(E.bisectLeft(6, low: 4, high: 3), 4);
    expect(E.bisectLeft(7, low: 4, high: 3), 4);
    expect(E.bisectLeft(8, low: 4, high: 3), 4);
  });

  test('list.bisectLeft for A lo=5 hi=3', () {
    expect(A.bisectLeft(-2, low: 5, high: 3), 5);
    expect(A.bisectLeft(-1, low: 5, high: 3), 5);
    expect(A.bisectLeft(0, low: 5, high: 3), 5);
    expect(A.bisectLeft(1, low: 5, high: 3), 5);
    expect(A.bisectLeft(2, low: 5, high: 3), 5);
    expect(A.bisectLeft(3, low: 5, high: 3), 5);
    expect(A.bisectLeft(4, low: 5, high: 3), 5);
    expect(A.bisectLeft(5, low: 5, high: 3), 5);
    expect(A.bisectLeft(6, low: 5, high: 3), 5);
    expect(A.bisectLeft(7, low: 5, high: 3), 5);
    expect(A.bisectLeft(8, low: 5, high: 3), 5);
  });

  test('list.bisectLeft for B lo=5 hi=3', () {
    expect(B.bisectLeft(-2, low: 5, high: 3), 5);
    expect(B.bisectLeft(-1, low: 5, high: 3), 5);
    expect(B.bisectLeft(0, low: 5, high: 3), 5);
    expect(B.bisectLeft(1, low: 5, high: 3), 5);
    expect(B.bisectLeft(2, low: 5, high: 3), 5);
    expect(B.bisectLeft(3, low: 5, high: 3), 5);
    expect(B.bisectLeft(4, low: 5, high: 3), 5);
    expect(B.bisectLeft(5, low: 5, high: 3), 5);
    expect(B.bisectLeft(6, low: 5, high: 3), 5);
    expect(B.bisectLeft(7, low: 5, high: 3), 5);
    expect(B.bisectLeft(8, low: 5, high: 3), 5);
  });

  test('list.bisectLeft for C lo=5 hi=3', () {
    expect(C.bisectLeft(-2, low: 5, high: 3), 5);
    expect(C.bisectLeft(-1, low: 5, high: 3), 5);
    expect(C.bisectLeft(0, low: 5, high: 3), 5);
    expect(C.bisectLeft(1, low: 5, high: 3), 5);
    expect(C.bisectLeft(2, low: 5, high: 3), 5);
    expect(C.bisectLeft(3, low: 5, high: 3), 5);
    expect(C.bisectLeft(4, low: 5, high: 3), 5);
    expect(C.bisectLeft(5, low: 5, high: 3), 5);
    expect(C.bisectLeft(6, low: 5, high: 3), 5);
    expect(C.bisectLeft(7, low: 5, high: 3), 5);
    expect(C.bisectLeft(8, low: 5, high: 3), 5);
  });

  test('list.bisectLeft for D lo=5 hi=3', () {
    expect(D.bisectLeft(-2, low: 5, high: 3), 5);
    expect(D.bisectLeft(-1, low: 5, high: 3), 5);
    expect(D.bisectLeft(0, low: 5, high: 3), 5);
    expect(D.bisectLeft(1, low: 5, high: 3), 5);
    expect(D.bisectLeft(2, low: 5, high: 3), 5);
    expect(D.bisectLeft(3, low: 5, high: 3), 5);
    expect(D.bisectLeft(4, low: 5, high: 3), 5);
    expect(D.bisectLeft(5, low: 5, high: 3), 5);
    expect(D.bisectLeft(6, low: 5, high: 3), 5);
    expect(D.bisectLeft(7, low: 5, high: 3), 5);
    expect(D.bisectLeft(8, low: 5, high: 3), 5);
  });

  test('list.bisectLeft for E lo=5 hi=3', () {
    expect(E.bisectLeft(-2, low: 5, high: 3), 5);
    expect(E.bisectLeft(-1, low: 5, high: 3), 5);
    expect(E.bisectLeft(0, low: 5, high: 3), 5);
    expect(E.bisectLeft(1, low: 5, high: 3), 5);
    expect(E.bisectLeft(2, low: 5, high: 3), 5);
    expect(E.bisectLeft(3, low: 5, high: 3), 5);
    expect(E.bisectLeft(4, low: 5, high: 3), 5);
    expect(E.bisectLeft(5, low: 5, high: 3), 5);
    expect(E.bisectLeft(6, low: 5, high: 3), 5);
    expect(E.bisectLeft(7, low: 5, high: 3), 5);
    expect(E.bisectLeft(8, low: 5, high: 3), 5);
  });

  test('list.bisectLeft for A lo=6 hi=3', () {
    expect(A.bisectLeft(-2, low: 6, high: 3), 6);
    expect(A.bisectLeft(-1, low: 6, high: 3), 6);
    expect(A.bisectLeft(0, low: 6, high: 3), 6);
    expect(A.bisectLeft(1, low: 6, high: 3), 6);
    expect(A.bisectLeft(2, low: 6, high: 3), 6);
    expect(A.bisectLeft(3, low: 6, high: 3), 6);
    expect(A.bisectLeft(4, low: 6, high: 3), 6);
    expect(A.bisectLeft(5, low: 6, high: 3), 6);
    expect(A.bisectLeft(6, low: 6, high: 3), 6);
    expect(A.bisectLeft(7, low: 6, high: 3), 6);
    expect(A.bisectLeft(8, low: 6, high: 3), 6);
  });

  test('list.bisectLeft for B lo=6 hi=3', () {
    expect(B.bisectLeft(-2, low: 6, high: 3), 6);
    expect(B.bisectLeft(-1, low: 6, high: 3), 6);
    expect(B.bisectLeft(0, low: 6, high: 3), 6);
    expect(B.bisectLeft(1, low: 6, high: 3), 6);
    expect(B.bisectLeft(2, low: 6, high: 3), 6);
    expect(B.bisectLeft(3, low: 6, high: 3), 6);
    expect(B.bisectLeft(4, low: 6, high: 3), 6);
    expect(B.bisectLeft(5, low: 6, high: 3), 6);
    expect(B.bisectLeft(6, low: 6, high: 3), 6);
    expect(B.bisectLeft(7, low: 6, high: 3), 6);
    expect(B.bisectLeft(8, low: 6, high: 3), 6);
  });

  test('list.bisectLeft for C lo=6 hi=3', () {
    expect(C.bisectLeft(-2, low: 6, high: 3), 6);
    expect(C.bisectLeft(-1, low: 6, high: 3), 6);
    expect(C.bisectLeft(0, low: 6, high: 3), 6);
    expect(C.bisectLeft(1, low: 6, high: 3), 6);
    expect(C.bisectLeft(2, low: 6, high: 3), 6);
    expect(C.bisectLeft(3, low: 6, high: 3), 6);
    expect(C.bisectLeft(4, low: 6, high: 3), 6);
    expect(C.bisectLeft(5, low: 6, high: 3), 6);
    expect(C.bisectLeft(6, low: 6, high: 3), 6);
    expect(C.bisectLeft(7, low: 6, high: 3), 6);
    expect(C.bisectLeft(8, low: 6, high: 3), 6);
  });

  test('list.bisectLeft for D lo=6 hi=3', () {
    expect(D.bisectLeft(-2, low: 6, high: 3), 6);
    expect(D.bisectLeft(-1, low: 6, high: 3), 6);
    expect(D.bisectLeft(0, low: 6, high: 3), 6);
    expect(D.bisectLeft(1, low: 6, high: 3), 6);
    expect(D.bisectLeft(2, low: 6, high: 3), 6);
    expect(D.bisectLeft(3, low: 6, high: 3), 6);
    expect(D.bisectLeft(4, low: 6, high: 3), 6);
    expect(D.bisectLeft(5, low: 6, high: 3), 6);
    expect(D.bisectLeft(6, low: 6, high: 3), 6);
    expect(D.bisectLeft(7, low: 6, high: 3), 6);
    expect(D.bisectLeft(8, low: 6, high: 3), 6);
  });

  test('list.bisectLeft for E lo=6 hi=3', () {
    expect(E.bisectLeft(-2, low: 6, high: 3), 6);
    expect(E.bisectLeft(-1, low: 6, high: 3), 6);
    expect(E.bisectLeft(0, low: 6, high: 3), 6);
    expect(E.bisectLeft(1, low: 6, high: 3), 6);
    expect(E.bisectLeft(2, low: 6, high: 3), 6);
    expect(E.bisectLeft(3, low: 6, high: 3), 6);
    expect(E.bisectLeft(4, low: 6, high: 3), 6);
    expect(E.bisectLeft(5, low: 6, high: 3), 6);
    expect(E.bisectLeft(6, low: 6, high: 3), 6);
    expect(E.bisectLeft(7, low: 6, high: 3), 6);
    expect(E.bisectLeft(8, low: 6, high: 3), 6);
  });

  test('list.bisectLeft for A lo=7 hi=3', () {
    expect(A.bisectLeft(-2, low: 7, high: 3), 7);
    expect(A.bisectLeft(-1, low: 7, high: 3), 7);
    expect(A.bisectLeft(0, low: 7, high: 3), 7);
    expect(A.bisectLeft(1, low: 7, high: 3), 7);
    expect(A.bisectLeft(2, low: 7, high: 3), 7);
    expect(A.bisectLeft(3, low: 7, high: 3), 7);
    expect(A.bisectLeft(4, low: 7, high: 3), 7);
    expect(A.bisectLeft(5, low: 7, high: 3), 7);
    expect(A.bisectLeft(6, low: 7, high: 3), 7);
    expect(A.bisectLeft(7, low: 7, high: 3), 7);
    expect(A.bisectLeft(8, low: 7, high: 3), 7);
  });

  test('list.bisectLeft for B lo=7 hi=3', () {
    expect(B.bisectLeft(-2, low: 7, high: 3), 7);
    expect(B.bisectLeft(-1, low: 7, high: 3), 7);
    expect(B.bisectLeft(0, low: 7, high: 3), 7);
    expect(B.bisectLeft(1, low: 7, high: 3), 7);
    expect(B.bisectLeft(2, low: 7, high: 3), 7);
    expect(B.bisectLeft(3, low: 7, high: 3), 7);
    expect(B.bisectLeft(4, low: 7, high: 3), 7);
    expect(B.bisectLeft(5, low: 7, high: 3), 7);
    expect(B.bisectLeft(6, low: 7, high: 3), 7);
    expect(B.bisectLeft(7, low: 7, high: 3), 7);
    expect(B.bisectLeft(8, low: 7, high: 3), 7);
  });

  test('list.bisectLeft for C lo=7 hi=3', () {
    expect(C.bisectLeft(-2, low: 7, high: 3), 7);
    expect(C.bisectLeft(-1, low: 7, high: 3), 7);
    expect(C.bisectLeft(0, low: 7, high: 3), 7);
    expect(C.bisectLeft(1, low: 7, high: 3), 7);
    expect(C.bisectLeft(2, low: 7, high: 3), 7);
    expect(C.bisectLeft(3, low: 7, high: 3), 7);
    expect(C.bisectLeft(4, low: 7, high: 3), 7);
    expect(C.bisectLeft(5, low: 7, high: 3), 7);
    expect(C.bisectLeft(6, low: 7, high: 3), 7);
    expect(C.bisectLeft(7, low: 7, high: 3), 7);
    expect(C.bisectLeft(8, low: 7, high: 3), 7);
  });

  test('list.bisectLeft for D lo=7 hi=3', () {
    expect(D.bisectLeft(-2, low: 7, high: 3), 7);
    expect(D.bisectLeft(-1, low: 7, high: 3), 7);
    expect(D.bisectLeft(0, low: 7, high: 3), 7);
    expect(D.bisectLeft(1, low: 7, high: 3), 7);
    expect(D.bisectLeft(2, low: 7, high: 3), 7);
    expect(D.bisectLeft(3, low: 7, high: 3), 7);
    expect(D.bisectLeft(4, low: 7, high: 3), 7);
    expect(D.bisectLeft(5, low: 7, high: 3), 7);
    expect(D.bisectLeft(6, low: 7, high: 3), 7);
    expect(D.bisectLeft(7, low: 7, high: 3), 7);
    expect(D.bisectLeft(8, low: 7, high: 3), 7);
  });

  test('list.bisectLeft for E lo=7 hi=3', () {
    expect(E.bisectLeft(-2, low: 7, high: 3), 7);
    expect(E.bisectLeft(-1, low: 7, high: 3), 7);
    expect(E.bisectLeft(0, low: 7, high: 3), 7);
    expect(E.bisectLeft(1, low: 7, high: 3), 7);
    expect(E.bisectLeft(2, low: 7, high: 3), 7);
    expect(E.bisectLeft(3, low: 7, high: 3), 7);
    expect(E.bisectLeft(4, low: 7, high: 3), 7);
    expect(E.bisectLeft(5, low: 7, high: 3), 7);
    expect(E.bisectLeft(6, low: 7, high: 3), 7);
    expect(E.bisectLeft(7, low: 7, high: 3), 7);
    expect(E.bisectLeft(8, low: 7, high: 3), 7);
  });

  test('list.bisectLeft for A lo=8 hi=3', () {
    expect(A.bisectLeft(-2, low: 8, high: 3), 8);
    expect(A.bisectLeft(-1, low: 8, high: 3), 8);
    expect(A.bisectLeft(0, low: 8, high: 3), 8);
    expect(A.bisectLeft(1, low: 8, high: 3), 8);
    expect(A.bisectLeft(2, low: 8, high: 3), 8);
    expect(A.bisectLeft(3, low: 8, high: 3), 8);
    expect(A.bisectLeft(4, low: 8, high: 3), 8);
    expect(A.bisectLeft(5, low: 8, high: 3), 8);
    expect(A.bisectLeft(6, low: 8, high: 3), 8);
    expect(A.bisectLeft(7, low: 8, high: 3), 8);
    expect(A.bisectLeft(8, low: 8, high: 3), 8);
  });

  test('list.bisectLeft for B lo=8 hi=3', () {
    expect(B.bisectLeft(-2, low: 8, high: 3), 8);
    expect(B.bisectLeft(-1, low: 8, high: 3), 8);
    expect(B.bisectLeft(0, low: 8, high: 3), 8);
    expect(B.bisectLeft(1, low: 8, high: 3), 8);
    expect(B.bisectLeft(2, low: 8, high: 3), 8);
    expect(B.bisectLeft(3, low: 8, high: 3), 8);
    expect(B.bisectLeft(4, low: 8, high: 3), 8);
    expect(B.bisectLeft(5, low: 8, high: 3), 8);
    expect(B.bisectLeft(6, low: 8, high: 3), 8);
    expect(B.bisectLeft(7, low: 8, high: 3), 8);
    expect(B.bisectLeft(8, low: 8, high: 3), 8);
  });

  test('list.bisectLeft for C lo=8 hi=3', () {
    expect(C.bisectLeft(-2, low: 8, high: 3), 8);
    expect(C.bisectLeft(-1, low: 8, high: 3), 8);
    expect(C.bisectLeft(0, low: 8, high: 3), 8);
    expect(C.bisectLeft(1, low: 8, high: 3), 8);
    expect(C.bisectLeft(2, low: 8, high: 3), 8);
    expect(C.bisectLeft(3, low: 8, high: 3), 8);
    expect(C.bisectLeft(4, low: 8, high: 3), 8);
    expect(C.bisectLeft(5, low: 8, high: 3), 8);
    expect(C.bisectLeft(6, low: 8, high: 3), 8);
    expect(C.bisectLeft(7, low: 8, high: 3), 8);
    expect(C.bisectLeft(8, low: 8, high: 3), 8);
  });

  test('list.bisectLeft for D lo=8 hi=3', () {
    expect(D.bisectLeft(-2, low: 8, high: 3), 8);
    expect(D.bisectLeft(-1, low: 8, high: 3), 8);
    expect(D.bisectLeft(0, low: 8, high: 3), 8);
    expect(D.bisectLeft(1, low: 8, high: 3), 8);
    expect(D.bisectLeft(2, low: 8, high: 3), 8);
    expect(D.bisectLeft(3, low: 8, high: 3), 8);
    expect(D.bisectLeft(4, low: 8, high: 3), 8);
    expect(D.bisectLeft(5, low: 8, high: 3), 8);
    expect(D.bisectLeft(6, low: 8, high: 3), 8);
    expect(D.bisectLeft(7, low: 8, high: 3), 8);
    expect(D.bisectLeft(8, low: 8, high: 3), 8);
  });

  test('list.bisectLeft for E lo=8 hi=3', () {
    expect(E.bisectLeft(-2, low: 8, high: 3), 8);
    expect(E.bisectLeft(-1, low: 8, high: 3), 8);
    expect(E.bisectLeft(0, low: 8, high: 3), 8);
    expect(E.bisectLeft(1, low: 8, high: 3), 8);
    expect(E.bisectLeft(2, low: 8, high: 3), 8);
    expect(E.bisectLeft(3, low: 8, high: 3), 8);
    expect(E.bisectLeft(4, low: 8, high: 3), 8);
    expect(E.bisectLeft(5, low: 8, high: 3), 8);
    expect(E.bisectLeft(6, low: 8, high: 3), 8);
    expect(E.bisectLeft(7, low: 8, high: 3), 8);
    expect(E.bisectLeft(8, low: 8, high: 3), 8);
  });

  test('list.bisectLeft for A lo=9 hi=3', () {
    expect(A.bisectLeft(-2, low: 9, high: 3), 9);
    expect(A.bisectLeft(-1, low: 9, high: 3), 9);
    expect(A.bisectLeft(0, low: 9, high: 3), 9);
    expect(A.bisectLeft(1, low: 9, high: 3), 9);
    expect(A.bisectLeft(2, low: 9, high: 3), 9);
    expect(A.bisectLeft(3, low: 9, high: 3), 9);
    expect(A.bisectLeft(4, low: 9, high: 3), 9);
    expect(A.bisectLeft(5, low: 9, high: 3), 9);
    expect(A.bisectLeft(6, low: 9, high: 3), 9);
    expect(A.bisectLeft(7, low: 9, high: 3), 9);
    expect(A.bisectLeft(8, low: 9, high: 3), 9);
  });

  test('list.bisectLeft for B lo=9 hi=3', () {
    expect(B.bisectLeft(-2, low: 9, high: 3), 9);
    expect(B.bisectLeft(-1, low: 9, high: 3), 9);
    expect(B.bisectLeft(0, low: 9, high: 3), 9);
    expect(B.bisectLeft(1, low: 9, high: 3), 9);
    expect(B.bisectLeft(2, low: 9, high: 3), 9);
    expect(B.bisectLeft(3, low: 9, high: 3), 9);
    expect(B.bisectLeft(4, low: 9, high: 3), 9);
    expect(B.bisectLeft(5, low: 9, high: 3), 9);
    expect(B.bisectLeft(6, low: 9, high: 3), 9);
    expect(B.bisectLeft(7, low: 9, high: 3), 9);
    expect(B.bisectLeft(8, low: 9, high: 3), 9);
  });

  test('list.bisectLeft for C lo=9 hi=3', () {
    expect(C.bisectLeft(-2, low: 9, high: 3), 9);
    expect(C.bisectLeft(-1, low: 9, high: 3), 9);
    expect(C.bisectLeft(0, low: 9, high: 3), 9);
    expect(C.bisectLeft(1, low: 9, high: 3), 9);
    expect(C.bisectLeft(2, low: 9, high: 3), 9);
    expect(C.bisectLeft(3, low: 9, high: 3), 9);
    expect(C.bisectLeft(4, low: 9, high: 3), 9);
    expect(C.bisectLeft(5, low: 9, high: 3), 9);
    expect(C.bisectLeft(6, low: 9, high: 3), 9);
    expect(C.bisectLeft(7, low: 9, high: 3), 9);
    expect(C.bisectLeft(8, low: 9, high: 3), 9);
  });

  test('list.bisectLeft for D lo=9 hi=3', () {
    expect(D.bisectLeft(-2, low: 9, high: 3), 9);
    expect(D.bisectLeft(-1, low: 9, high: 3), 9);
    expect(D.bisectLeft(0, low: 9, high: 3), 9);
    expect(D.bisectLeft(1, low: 9, high: 3), 9);
    expect(D.bisectLeft(2, low: 9, high: 3), 9);
    expect(D.bisectLeft(3, low: 9, high: 3), 9);
    expect(D.bisectLeft(4, low: 9, high: 3), 9);
    expect(D.bisectLeft(5, low: 9, high: 3), 9);
    expect(D.bisectLeft(6, low: 9, high: 3), 9);
    expect(D.bisectLeft(7, low: 9, high: 3), 9);
    expect(D.bisectLeft(8, low: 9, high: 3), 9);
  });

  test('list.bisectLeft for E lo=9 hi=3', () {
    expect(E.bisectLeft(-2, low: 9, high: 3), 9);
    expect(E.bisectLeft(-1, low: 9, high: 3), 9);
    expect(E.bisectLeft(0, low: 9, high: 3), 9);
    expect(E.bisectLeft(1, low: 9, high: 3), 9);
    expect(E.bisectLeft(2, low: 9, high: 3), 9);
    expect(E.bisectLeft(3, low: 9, high: 3), 9);
    expect(E.bisectLeft(4, low: 9, high: 3), 9);
    expect(E.bisectLeft(5, low: 9, high: 3), 9);
    expect(E.bisectLeft(6, low: 9, high: 3), 9);
    expect(E.bisectLeft(7, low: 9, high: 3), 9);
    expect(E.bisectLeft(8, low: 9, high: 3), 9);
  });

  test('list.bisectLeft for A lo=None hi=4', () {
    expect(() => A.bisectLeft(-2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=4', () {
    expect(() => B.bisectLeft(-2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=4', () {
    expect(() => C.bisectLeft(-2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(-1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(4, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(5, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(6, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(7, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(8, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for D lo=None hi=4', () {
    expect(D.bisectLeft(-2, high: 4), 0);
    expect(D.bisectLeft(-1, high: 4), 0);
    expect(D.bisectLeft(0, high: 4), 0);
    expect(D.bisectLeft(1, high: 4), 0);
    expect(D.bisectLeft(2, high: 4), 0);
    expect(D.bisectLeft(3, high: 4), 0);
    expect(D.bisectLeft(4, high: 4), 1);
    expect(D.bisectLeft(5, high: 4), 2);
    expect(() => D.bisectLeft(6, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(7, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(8, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for E lo=None hi=4', () {
    expect(E.bisectLeft(-2, high: 4), 0);
    expect(E.bisectLeft(-1, high: 4), 0);
    expect(E.bisectLeft(0, high: 4), 0);
    expect(E.bisectLeft(1, high: 4), 1);
    expect(E.bisectLeft(2, high: 4), 2);
    expect(E.bisectLeft(3, high: 4), 4);
    expect(E.bisectLeft(4, high: 4), 4);
    expect(E.bisectLeft(5, high: 4), 4);
    expect(E.bisectLeft(6, high: 4), 4);
    expect(E.bisectLeft(7, high: 4), 4);
    expect(E.bisectLeft(8, high: 4), 4);
  });

  test('list.bisectLeft for A lo=0 hi=4', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=4', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=4', () {
    expect(() => C.bisectLeft(-2, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for D lo=0 hi=4', () {
    expect(D.bisectLeft(-2, low: 0, high: 4), 0);
    expect(D.bisectLeft(-1, low: 0, high: 4), 0);
    expect(D.bisectLeft(0, low: 0, high: 4), 0);
    expect(D.bisectLeft(1, low: 0, high: 4), 0);
    expect(D.bisectLeft(2, low: 0, high: 4), 0);
    expect(D.bisectLeft(3, low: 0, high: 4), 0);
    expect(D.bisectLeft(4, low: 0, high: 4), 1);
    expect(D.bisectLeft(5, low: 0, high: 4), 2);
    expect(() => D.bisectLeft(6, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for E lo=0 hi=4', () {
    expect(E.bisectLeft(-2, low: 0, high: 4), 0);
    expect(E.bisectLeft(-1, low: 0, high: 4), 0);
    expect(E.bisectLeft(0, low: 0, high: 4), 0);
    expect(E.bisectLeft(1, low: 0, high: 4), 1);
    expect(E.bisectLeft(2, low: 0, high: 4), 2);
    expect(E.bisectLeft(3, low: 0, high: 4), 4);
    expect(E.bisectLeft(4, low: 0, high: 4), 4);
    expect(E.bisectLeft(5, low: 0, high: 4), 4);
    expect(E.bisectLeft(6, low: 0, high: 4), 4);
    expect(E.bisectLeft(7, low: 0, high: 4), 4);
    expect(E.bisectLeft(8, low: 0, high: 4), 4);
  });

  test('list.bisectLeft for A lo=1 hi=4', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=4', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=4', () {
    expect(() => C.bisectLeft(-2, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for D lo=1 hi=4', () {
    expect(D.bisectLeft(-2, low: 1, high: 4), 1);
    expect(D.bisectLeft(-1, low: 1, high: 4), 1);
    expect(D.bisectLeft(0, low: 1, high: 4), 1);
    expect(D.bisectLeft(1, low: 1, high: 4), 1);
    expect(D.bisectLeft(2, low: 1, high: 4), 1);
    expect(D.bisectLeft(3, low: 1, high: 4), 1);
    expect(D.bisectLeft(4, low: 1, high: 4), 1);
    expect(D.bisectLeft(5, low: 1, high: 4), 2);
    expect(() => D.bisectLeft(6, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for E lo=1 hi=4', () {
    expect(E.bisectLeft(-2, low: 1, high: 4), 1);
    expect(E.bisectLeft(-1, low: 1, high: 4), 1);
    expect(E.bisectLeft(0, low: 1, high: 4), 1);
    expect(E.bisectLeft(1, low: 1, high: 4), 1);
    expect(E.bisectLeft(2, low: 1, high: 4), 2);
    expect(E.bisectLeft(3, low: 1, high: 4), 4);
    expect(E.bisectLeft(4, low: 1, high: 4), 4);
    expect(E.bisectLeft(5, low: 1, high: 4), 4);
    expect(E.bisectLeft(6, low: 1, high: 4), 4);
    expect(E.bisectLeft(7, low: 1, high: 4), 4);
    expect(E.bisectLeft(8, low: 1, high: 4), 4);
  });

  test('list.bisectLeft for A lo=2 hi=4', () {
    expect(() => A.bisectLeft(-2, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for B lo=2 hi=4', () {
    expect(() => B.bisectLeft(-2, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for C lo=2 hi=4', () {
    expect(() => C.bisectLeft(-2, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for D lo=2 hi=4', () {
    expect(() => D.bisectLeft(-2, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for E lo=2 hi=4', () {
    expect(E.bisectLeft(-2, low: 2, high: 4), 2);
    expect(E.bisectLeft(-1, low: 2, high: 4), 2);
    expect(E.bisectLeft(0, low: 2, high: 4), 2);
    expect(E.bisectLeft(1, low: 2, high: 4), 2);
    expect(E.bisectLeft(2, low: 2, high: 4), 2);
    expect(E.bisectLeft(3, low: 2, high: 4), 4);
    expect(E.bisectLeft(4, low: 2, high: 4), 4);
    expect(E.bisectLeft(5, low: 2, high: 4), 4);
    expect(E.bisectLeft(6, low: 2, high: 4), 4);
    expect(E.bisectLeft(7, low: 2, high: 4), 4);
    expect(E.bisectLeft(8, low: 2, high: 4), 4);
  });

  test('list.bisectLeft for A lo=3 hi=4', () {
    expect(() => A.bisectLeft(-2, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for B lo=3 hi=4', () {
    expect(() => B.bisectLeft(-2, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for C lo=3 hi=4', () {
    expect(() => C.bisectLeft(-2, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for D lo=3 hi=4', () {
    expect(() => D.bisectLeft(-2, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectLeft for E lo=3 hi=4', () {
    expect(E.bisectLeft(-2, low: 3, high: 4), 3);
    expect(E.bisectLeft(-1, low: 3, high: 4), 3);
    expect(E.bisectLeft(0, low: 3, high: 4), 3);
    expect(E.bisectLeft(1, low: 3, high: 4), 3);
    expect(E.bisectLeft(2, low: 3, high: 4), 3);
    expect(E.bisectLeft(3, low: 3, high: 4), 4);
    expect(E.bisectLeft(4, low: 3, high: 4), 4);
    expect(E.bisectLeft(5, low: 3, high: 4), 4);
    expect(E.bisectLeft(6, low: 3, high: 4), 4);
    expect(E.bisectLeft(7, low: 3, high: 4), 4);
    expect(E.bisectLeft(8, low: 3, high: 4), 4);
  });

  test('list.bisectLeft for A lo=4 hi=4', () {
    expect(A.bisectLeft(-2, low: 4, high: 4), 4);
    expect(A.bisectLeft(-1, low: 4, high: 4), 4);
    expect(A.bisectLeft(0, low: 4, high: 4), 4);
    expect(A.bisectLeft(1, low: 4, high: 4), 4);
    expect(A.bisectLeft(2, low: 4, high: 4), 4);
    expect(A.bisectLeft(3, low: 4, high: 4), 4);
    expect(A.bisectLeft(4, low: 4, high: 4), 4);
    expect(A.bisectLeft(5, low: 4, high: 4), 4);
    expect(A.bisectLeft(6, low: 4, high: 4), 4);
    expect(A.bisectLeft(7, low: 4, high: 4), 4);
    expect(A.bisectLeft(8, low: 4, high: 4), 4);
  });

  test('list.bisectLeft for B lo=4 hi=4', () {
    expect(B.bisectLeft(-2, low: 4, high: 4), 4);
    expect(B.bisectLeft(-1, low: 4, high: 4), 4);
    expect(B.bisectLeft(0, low: 4, high: 4), 4);
    expect(B.bisectLeft(1, low: 4, high: 4), 4);
    expect(B.bisectLeft(2, low: 4, high: 4), 4);
    expect(B.bisectLeft(3, low: 4, high: 4), 4);
    expect(B.bisectLeft(4, low: 4, high: 4), 4);
    expect(B.bisectLeft(5, low: 4, high: 4), 4);
    expect(B.bisectLeft(6, low: 4, high: 4), 4);
    expect(B.bisectLeft(7, low: 4, high: 4), 4);
    expect(B.bisectLeft(8, low: 4, high: 4), 4);
  });

  test('list.bisectLeft for C lo=4 hi=4', () {
    expect(C.bisectLeft(-2, low: 4, high: 4), 4);
    expect(C.bisectLeft(-1, low: 4, high: 4), 4);
    expect(C.bisectLeft(0, low: 4, high: 4), 4);
    expect(C.bisectLeft(1, low: 4, high: 4), 4);
    expect(C.bisectLeft(2, low: 4, high: 4), 4);
    expect(C.bisectLeft(3, low: 4, high: 4), 4);
    expect(C.bisectLeft(4, low: 4, high: 4), 4);
    expect(C.bisectLeft(5, low: 4, high: 4), 4);
    expect(C.bisectLeft(6, low: 4, high: 4), 4);
    expect(C.bisectLeft(7, low: 4, high: 4), 4);
    expect(C.bisectLeft(8, low: 4, high: 4), 4);
  });

  test('list.bisectLeft for D lo=4 hi=4', () {
    expect(D.bisectLeft(-2, low: 4, high: 4), 4);
    expect(D.bisectLeft(-1, low: 4, high: 4), 4);
    expect(D.bisectLeft(0, low: 4, high: 4), 4);
    expect(D.bisectLeft(1, low: 4, high: 4), 4);
    expect(D.bisectLeft(2, low: 4, high: 4), 4);
    expect(D.bisectLeft(3, low: 4, high: 4), 4);
    expect(D.bisectLeft(4, low: 4, high: 4), 4);
    expect(D.bisectLeft(5, low: 4, high: 4), 4);
    expect(D.bisectLeft(6, low: 4, high: 4), 4);
    expect(D.bisectLeft(7, low: 4, high: 4), 4);
    expect(D.bisectLeft(8, low: 4, high: 4), 4);
  });

  test('list.bisectLeft for E lo=4 hi=4', () {
    expect(E.bisectLeft(-2, low: 4, high: 4), 4);
    expect(E.bisectLeft(-1, low: 4, high: 4), 4);
    expect(E.bisectLeft(0, low: 4, high: 4), 4);
    expect(E.bisectLeft(1, low: 4, high: 4), 4);
    expect(E.bisectLeft(2, low: 4, high: 4), 4);
    expect(E.bisectLeft(3, low: 4, high: 4), 4);
    expect(E.bisectLeft(4, low: 4, high: 4), 4);
    expect(E.bisectLeft(5, low: 4, high: 4), 4);
    expect(E.bisectLeft(6, low: 4, high: 4), 4);
    expect(E.bisectLeft(7, low: 4, high: 4), 4);
    expect(E.bisectLeft(8, low: 4, high: 4), 4);
  });

  test('list.bisectLeft for A lo=5 hi=4', () {
    expect(A.bisectLeft(-2, low: 5, high: 4), 5);
    expect(A.bisectLeft(-1, low: 5, high: 4), 5);
    expect(A.bisectLeft(0, low: 5, high: 4), 5);
    expect(A.bisectLeft(1, low: 5, high: 4), 5);
    expect(A.bisectLeft(2, low: 5, high: 4), 5);
    expect(A.bisectLeft(3, low: 5, high: 4), 5);
    expect(A.bisectLeft(4, low: 5, high: 4), 5);
    expect(A.bisectLeft(5, low: 5, high: 4), 5);
    expect(A.bisectLeft(6, low: 5, high: 4), 5);
    expect(A.bisectLeft(7, low: 5, high: 4), 5);
    expect(A.bisectLeft(8, low: 5, high: 4), 5);
  });

  test('list.bisectLeft for B lo=5 hi=4', () {
    expect(B.bisectLeft(-2, low: 5, high: 4), 5);
    expect(B.bisectLeft(-1, low: 5, high: 4), 5);
    expect(B.bisectLeft(0, low: 5, high: 4), 5);
    expect(B.bisectLeft(1, low: 5, high: 4), 5);
    expect(B.bisectLeft(2, low: 5, high: 4), 5);
    expect(B.bisectLeft(3, low: 5, high: 4), 5);
    expect(B.bisectLeft(4, low: 5, high: 4), 5);
    expect(B.bisectLeft(5, low: 5, high: 4), 5);
    expect(B.bisectLeft(6, low: 5, high: 4), 5);
    expect(B.bisectLeft(7, low: 5, high: 4), 5);
    expect(B.bisectLeft(8, low: 5, high: 4), 5);
  });

  test('list.bisectLeft for C lo=5 hi=4', () {
    expect(C.bisectLeft(-2, low: 5, high: 4), 5);
    expect(C.bisectLeft(-1, low: 5, high: 4), 5);
    expect(C.bisectLeft(0, low: 5, high: 4), 5);
    expect(C.bisectLeft(1, low: 5, high: 4), 5);
    expect(C.bisectLeft(2, low: 5, high: 4), 5);
    expect(C.bisectLeft(3, low: 5, high: 4), 5);
    expect(C.bisectLeft(4, low: 5, high: 4), 5);
    expect(C.bisectLeft(5, low: 5, high: 4), 5);
    expect(C.bisectLeft(6, low: 5, high: 4), 5);
    expect(C.bisectLeft(7, low: 5, high: 4), 5);
    expect(C.bisectLeft(8, low: 5, high: 4), 5);
  });

  test('list.bisectLeft for D lo=5 hi=4', () {
    expect(D.bisectLeft(-2, low: 5, high: 4), 5);
    expect(D.bisectLeft(-1, low: 5, high: 4), 5);
    expect(D.bisectLeft(0, low: 5, high: 4), 5);
    expect(D.bisectLeft(1, low: 5, high: 4), 5);
    expect(D.bisectLeft(2, low: 5, high: 4), 5);
    expect(D.bisectLeft(3, low: 5, high: 4), 5);
    expect(D.bisectLeft(4, low: 5, high: 4), 5);
    expect(D.bisectLeft(5, low: 5, high: 4), 5);
    expect(D.bisectLeft(6, low: 5, high: 4), 5);
    expect(D.bisectLeft(7, low: 5, high: 4), 5);
    expect(D.bisectLeft(8, low: 5, high: 4), 5);
  });

  test('list.bisectLeft for E lo=5 hi=4', () {
    expect(E.bisectLeft(-2, low: 5, high: 4), 5);
    expect(E.bisectLeft(-1, low: 5, high: 4), 5);
    expect(E.bisectLeft(0, low: 5, high: 4), 5);
    expect(E.bisectLeft(1, low: 5, high: 4), 5);
    expect(E.bisectLeft(2, low: 5, high: 4), 5);
    expect(E.bisectLeft(3, low: 5, high: 4), 5);
    expect(E.bisectLeft(4, low: 5, high: 4), 5);
    expect(E.bisectLeft(5, low: 5, high: 4), 5);
    expect(E.bisectLeft(6, low: 5, high: 4), 5);
    expect(E.bisectLeft(7, low: 5, high: 4), 5);
    expect(E.bisectLeft(8, low: 5, high: 4), 5);
  });

  test('list.bisectLeft for A lo=6 hi=4', () {
    expect(A.bisectLeft(-2, low: 6, high: 4), 6);
    expect(A.bisectLeft(-1, low: 6, high: 4), 6);
    expect(A.bisectLeft(0, low: 6, high: 4), 6);
    expect(A.bisectLeft(1, low: 6, high: 4), 6);
    expect(A.bisectLeft(2, low: 6, high: 4), 6);
    expect(A.bisectLeft(3, low: 6, high: 4), 6);
    expect(A.bisectLeft(4, low: 6, high: 4), 6);
    expect(A.bisectLeft(5, low: 6, high: 4), 6);
    expect(A.bisectLeft(6, low: 6, high: 4), 6);
    expect(A.bisectLeft(7, low: 6, high: 4), 6);
    expect(A.bisectLeft(8, low: 6, high: 4), 6);
  });

  test('list.bisectLeft for B lo=6 hi=4', () {
    expect(B.bisectLeft(-2, low: 6, high: 4), 6);
    expect(B.bisectLeft(-1, low: 6, high: 4), 6);
    expect(B.bisectLeft(0, low: 6, high: 4), 6);
    expect(B.bisectLeft(1, low: 6, high: 4), 6);
    expect(B.bisectLeft(2, low: 6, high: 4), 6);
    expect(B.bisectLeft(3, low: 6, high: 4), 6);
    expect(B.bisectLeft(4, low: 6, high: 4), 6);
    expect(B.bisectLeft(5, low: 6, high: 4), 6);
    expect(B.bisectLeft(6, low: 6, high: 4), 6);
    expect(B.bisectLeft(7, low: 6, high: 4), 6);
    expect(B.bisectLeft(8, low: 6, high: 4), 6);
  });

  test('list.bisectLeft for C lo=6 hi=4', () {
    expect(C.bisectLeft(-2, low: 6, high: 4), 6);
    expect(C.bisectLeft(-1, low: 6, high: 4), 6);
    expect(C.bisectLeft(0, low: 6, high: 4), 6);
    expect(C.bisectLeft(1, low: 6, high: 4), 6);
    expect(C.bisectLeft(2, low: 6, high: 4), 6);
    expect(C.bisectLeft(3, low: 6, high: 4), 6);
    expect(C.bisectLeft(4, low: 6, high: 4), 6);
    expect(C.bisectLeft(5, low: 6, high: 4), 6);
    expect(C.bisectLeft(6, low: 6, high: 4), 6);
    expect(C.bisectLeft(7, low: 6, high: 4), 6);
    expect(C.bisectLeft(8, low: 6, high: 4), 6);
  });

  test('list.bisectLeft for D lo=6 hi=4', () {
    expect(D.bisectLeft(-2, low: 6, high: 4), 6);
    expect(D.bisectLeft(-1, low: 6, high: 4), 6);
    expect(D.bisectLeft(0, low: 6, high: 4), 6);
    expect(D.bisectLeft(1, low: 6, high: 4), 6);
    expect(D.bisectLeft(2, low: 6, high: 4), 6);
    expect(D.bisectLeft(3, low: 6, high: 4), 6);
    expect(D.bisectLeft(4, low: 6, high: 4), 6);
    expect(D.bisectLeft(5, low: 6, high: 4), 6);
    expect(D.bisectLeft(6, low: 6, high: 4), 6);
    expect(D.bisectLeft(7, low: 6, high: 4), 6);
    expect(D.bisectLeft(8, low: 6, high: 4), 6);
  });

  test('list.bisectLeft for E lo=6 hi=4', () {
    expect(E.bisectLeft(-2, low: 6, high: 4), 6);
    expect(E.bisectLeft(-1, low: 6, high: 4), 6);
    expect(E.bisectLeft(0, low: 6, high: 4), 6);
    expect(E.bisectLeft(1, low: 6, high: 4), 6);
    expect(E.bisectLeft(2, low: 6, high: 4), 6);
    expect(E.bisectLeft(3, low: 6, high: 4), 6);
    expect(E.bisectLeft(4, low: 6, high: 4), 6);
    expect(E.bisectLeft(5, low: 6, high: 4), 6);
    expect(E.bisectLeft(6, low: 6, high: 4), 6);
    expect(E.bisectLeft(7, low: 6, high: 4), 6);
    expect(E.bisectLeft(8, low: 6, high: 4), 6);
  });

  test('list.bisectLeft for A lo=7 hi=4', () {
    expect(A.bisectLeft(-2, low: 7, high: 4), 7);
    expect(A.bisectLeft(-1, low: 7, high: 4), 7);
    expect(A.bisectLeft(0, low: 7, high: 4), 7);
    expect(A.bisectLeft(1, low: 7, high: 4), 7);
    expect(A.bisectLeft(2, low: 7, high: 4), 7);
    expect(A.bisectLeft(3, low: 7, high: 4), 7);
    expect(A.bisectLeft(4, low: 7, high: 4), 7);
    expect(A.bisectLeft(5, low: 7, high: 4), 7);
    expect(A.bisectLeft(6, low: 7, high: 4), 7);
    expect(A.bisectLeft(7, low: 7, high: 4), 7);
    expect(A.bisectLeft(8, low: 7, high: 4), 7);
  });

  test('list.bisectLeft for B lo=7 hi=4', () {
    expect(B.bisectLeft(-2, low: 7, high: 4), 7);
    expect(B.bisectLeft(-1, low: 7, high: 4), 7);
    expect(B.bisectLeft(0, low: 7, high: 4), 7);
    expect(B.bisectLeft(1, low: 7, high: 4), 7);
    expect(B.bisectLeft(2, low: 7, high: 4), 7);
    expect(B.bisectLeft(3, low: 7, high: 4), 7);
    expect(B.bisectLeft(4, low: 7, high: 4), 7);
    expect(B.bisectLeft(5, low: 7, high: 4), 7);
    expect(B.bisectLeft(6, low: 7, high: 4), 7);
    expect(B.bisectLeft(7, low: 7, high: 4), 7);
    expect(B.bisectLeft(8, low: 7, high: 4), 7);
  });

  test('list.bisectLeft for C lo=7 hi=4', () {
    expect(C.bisectLeft(-2, low: 7, high: 4), 7);
    expect(C.bisectLeft(-1, low: 7, high: 4), 7);
    expect(C.bisectLeft(0, low: 7, high: 4), 7);
    expect(C.bisectLeft(1, low: 7, high: 4), 7);
    expect(C.bisectLeft(2, low: 7, high: 4), 7);
    expect(C.bisectLeft(3, low: 7, high: 4), 7);
    expect(C.bisectLeft(4, low: 7, high: 4), 7);
    expect(C.bisectLeft(5, low: 7, high: 4), 7);
    expect(C.bisectLeft(6, low: 7, high: 4), 7);
    expect(C.bisectLeft(7, low: 7, high: 4), 7);
    expect(C.bisectLeft(8, low: 7, high: 4), 7);
  });

  test('list.bisectLeft for D lo=7 hi=4', () {
    expect(D.bisectLeft(-2, low: 7, high: 4), 7);
    expect(D.bisectLeft(-1, low: 7, high: 4), 7);
    expect(D.bisectLeft(0, low: 7, high: 4), 7);
    expect(D.bisectLeft(1, low: 7, high: 4), 7);
    expect(D.bisectLeft(2, low: 7, high: 4), 7);
    expect(D.bisectLeft(3, low: 7, high: 4), 7);
    expect(D.bisectLeft(4, low: 7, high: 4), 7);
    expect(D.bisectLeft(5, low: 7, high: 4), 7);
    expect(D.bisectLeft(6, low: 7, high: 4), 7);
    expect(D.bisectLeft(7, low: 7, high: 4), 7);
    expect(D.bisectLeft(8, low: 7, high: 4), 7);
  });

  test('list.bisectLeft for E lo=7 hi=4', () {
    expect(E.bisectLeft(-2, low: 7, high: 4), 7);
    expect(E.bisectLeft(-1, low: 7, high: 4), 7);
    expect(E.bisectLeft(0, low: 7, high: 4), 7);
    expect(E.bisectLeft(1, low: 7, high: 4), 7);
    expect(E.bisectLeft(2, low: 7, high: 4), 7);
    expect(E.bisectLeft(3, low: 7, high: 4), 7);
    expect(E.bisectLeft(4, low: 7, high: 4), 7);
    expect(E.bisectLeft(5, low: 7, high: 4), 7);
    expect(E.bisectLeft(6, low: 7, high: 4), 7);
    expect(E.bisectLeft(7, low: 7, high: 4), 7);
    expect(E.bisectLeft(8, low: 7, high: 4), 7);
  });

  test('list.bisectLeft for A lo=8 hi=4', () {
    expect(A.bisectLeft(-2, low: 8, high: 4), 8);
    expect(A.bisectLeft(-1, low: 8, high: 4), 8);
    expect(A.bisectLeft(0, low: 8, high: 4), 8);
    expect(A.bisectLeft(1, low: 8, high: 4), 8);
    expect(A.bisectLeft(2, low: 8, high: 4), 8);
    expect(A.bisectLeft(3, low: 8, high: 4), 8);
    expect(A.bisectLeft(4, low: 8, high: 4), 8);
    expect(A.bisectLeft(5, low: 8, high: 4), 8);
    expect(A.bisectLeft(6, low: 8, high: 4), 8);
    expect(A.bisectLeft(7, low: 8, high: 4), 8);
    expect(A.bisectLeft(8, low: 8, high: 4), 8);
  });

  test('list.bisectLeft for B lo=8 hi=4', () {
    expect(B.bisectLeft(-2, low: 8, high: 4), 8);
    expect(B.bisectLeft(-1, low: 8, high: 4), 8);
    expect(B.bisectLeft(0, low: 8, high: 4), 8);
    expect(B.bisectLeft(1, low: 8, high: 4), 8);
    expect(B.bisectLeft(2, low: 8, high: 4), 8);
    expect(B.bisectLeft(3, low: 8, high: 4), 8);
    expect(B.bisectLeft(4, low: 8, high: 4), 8);
    expect(B.bisectLeft(5, low: 8, high: 4), 8);
    expect(B.bisectLeft(6, low: 8, high: 4), 8);
    expect(B.bisectLeft(7, low: 8, high: 4), 8);
    expect(B.bisectLeft(8, low: 8, high: 4), 8);
  });

  test('list.bisectLeft for C lo=8 hi=4', () {
    expect(C.bisectLeft(-2, low: 8, high: 4), 8);
    expect(C.bisectLeft(-1, low: 8, high: 4), 8);
    expect(C.bisectLeft(0, low: 8, high: 4), 8);
    expect(C.bisectLeft(1, low: 8, high: 4), 8);
    expect(C.bisectLeft(2, low: 8, high: 4), 8);
    expect(C.bisectLeft(3, low: 8, high: 4), 8);
    expect(C.bisectLeft(4, low: 8, high: 4), 8);
    expect(C.bisectLeft(5, low: 8, high: 4), 8);
    expect(C.bisectLeft(6, low: 8, high: 4), 8);
    expect(C.bisectLeft(7, low: 8, high: 4), 8);
    expect(C.bisectLeft(8, low: 8, high: 4), 8);
  });

  test('list.bisectLeft for D lo=8 hi=4', () {
    expect(D.bisectLeft(-2, low: 8, high: 4), 8);
    expect(D.bisectLeft(-1, low: 8, high: 4), 8);
    expect(D.bisectLeft(0, low: 8, high: 4), 8);
    expect(D.bisectLeft(1, low: 8, high: 4), 8);
    expect(D.bisectLeft(2, low: 8, high: 4), 8);
    expect(D.bisectLeft(3, low: 8, high: 4), 8);
    expect(D.bisectLeft(4, low: 8, high: 4), 8);
    expect(D.bisectLeft(5, low: 8, high: 4), 8);
    expect(D.bisectLeft(6, low: 8, high: 4), 8);
    expect(D.bisectLeft(7, low: 8, high: 4), 8);
    expect(D.bisectLeft(8, low: 8, high: 4), 8);
  });

  test('list.bisectLeft for E lo=8 hi=4', () {
    expect(E.bisectLeft(-2, low: 8, high: 4), 8);
    expect(E.bisectLeft(-1, low: 8, high: 4), 8);
    expect(E.bisectLeft(0, low: 8, high: 4), 8);
    expect(E.bisectLeft(1, low: 8, high: 4), 8);
    expect(E.bisectLeft(2, low: 8, high: 4), 8);
    expect(E.bisectLeft(3, low: 8, high: 4), 8);
    expect(E.bisectLeft(4, low: 8, high: 4), 8);
    expect(E.bisectLeft(5, low: 8, high: 4), 8);
    expect(E.bisectLeft(6, low: 8, high: 4), 8);
    expect(E.bisectLeft(7, low: 8, high: 4), 8);
    expect(E.bisectLeft(8, low: 8, high: 4), 8);
  });

  test('list.bisectLeft for A lo=9 hi=4', () {
    expect(A.bisectLeft(-2, low: 9, high: 4), 9);
    expect(A.bisectLeft(-1, low: 9, high: 4), 9);
    expect(A.bisectLeft(0, low: 9, high: 4), 9);
    expect(A.bisectLeft(1, low: 9, high: 4), 9);
    expect(A.bisectLeft(2, low: 9, high: 4), 9);
    expect(A.bisectLeft(3, low: 9, high: 4), 9);
    expect(A.bisectLeft(4, low: 9, high: 4), 9);
    expect(A.bisectLeft(5, low: 9, high: 4), 9);
    expect(A.bisectLeft(6, low: 9, high: 4), 9);
    expect(A.bisectLeft(7, low: 9, high: 4), 9);
    expect(A.bisectLeft(8, low: 9, high: 4), 9);
  });

  test('list.bisectLeft for B lo=9 hi=4', () {
    expect(B.bisectLeft(-2, low: 9, high: 4), 9);
    expect(B.bisectLeft(-1, low: 9, high: 4), 9);
    expect(B.bisectLeft(0, low: 9, high: 4), 9);
    expect(B.bisectLeft(1, low: 9, high: 4), 9);
    expect(B.bisectLeft(2, low: 9, high: 4), 9);
    expect(B.bisectLeft(3, low: 9, high: 4), 9);
    expect(B.bisectLeft(4, low: 9, high: 4), 9);
    expect(B.bisectLeft(5, low: 9, high: 4), 9);
    expect(B.bisectLeft(6, low: 9, high: 4), 9);
    expect(B.bisectLeft(7, low: 9, high: 4), 9);
    expect(B.bisectLeft(8, low: 9, high: 4), 9);
  });

  test('list.bisectLeft for C lo=9 hi=4', () {
    expect(C.bisectLeft(-2, low: 9, high: 4), 9);
    expect(C.bisectLeft(-1, low: 9, high: 4), 9);
    expect(C.bisectLeft(0, low: 9, high: 4), 9);
    expect(C.bisectLeft(1, low: 9, high: 4), 9);
    expect(C.bisectLeft(2, low: 9, high: 4), 9);
    expect(C.bisectLeft(3, low: 9, high: 4), 9);
    expect(C.bisectLeft(4, low: 9, high: 4), 9);
    expect(C.bisectLeft(5, low: 9, high: 4), 9);
    expect(C.bisectLeft(6, low: 9, high: 4), 9);
    expect(C.bisectLeft(7, low: 9, high: 4), 9);
    expect(C.bisectLeft(8, low: 9, high: 4), 9);
  });

  test('list.bisectLeft for D lo=9 hi=4', () {
    expect(D.bisectLeft(-2, low: 9, high: 4), 9);
    expect(D.bisectLeft(-1, low: 9, high: 4), 9);
    expect(D.bisectLeft(0, low: 9, high: 4), 9);
    expect(D.bisectLeft(1, low: 9, high: 4), 9);
    expect(D.bisectLeft(2, low: 9, high: 4), 9);
    expect(D.bisectLeft(3, low: 9, high: 4), 9);
    expect(D.bisectLeft(4, low: 9, high: 4), 9);
    expect(D.bisectLeft(5, low: 9, high: 4), 9);
    expect(D.bisectLeft(6, low: 9, high: 4), 9);
    expect(D.bisectLeft(7, low: 9, high: 4), 9);
    expect(D.bisectLeft(8, low: 9, high: 4), 9);
  });

  test('list.bisectLeft for E lo=9 hi=4', () {
    expect(E.bisectLeft(-2, low: 9, high: 4), 9);
    expect(E.bisectLeft(-1, low: 9, high: 4), 9);
    expect(E.bisectLeft(0, low: 9, high: 4), 9);
    expect(E.bisectLeft(1, low: 9, high: 4), 9);
    expect(E.bisectLeft(2, low: 9, high: 4), 9);
    expect(E.bisectLeft(3, low: 9, high: 4), 9);
    expect(E.bisectLeft(4, low: 9, high: 4), 9);
    expect(E.bisectLeft(5, low: 9, high: 4), 9);
    expect(E.bisectLeft(6, low: 9, high: 4), 9);
    expect(E.bisectLeft(7, low: 9, high: 4), 9);
    expect(E.bisectLeft(8, low: 9, high: 4), 9);
  });

  test('list.bisectLeft for A lo=None hi=5', () {
    expect(() => A.bisectLeft(-2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=5', () {
    expect(() => B.bisectLeft(-2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=5', () {
    expect(() => C.bisectLeft(-2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(-1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(5, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(6, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(7, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(8, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for D lo=None hi=5', () {
    expect(D.bisectLeft(-2, high: 5), 0);
    expect(D.bisectLeft(-1, high: 5), 0);
    expect(D.bisectLeft(0, high: 5), 0);
    expect(D.bisectLeft(1, high: 5), 0);
    expect(D.bisectLeft(2, high: 5), 0);
    expect(D.bisectLeft(3, high: 5), 0);
    expect(D.bisectLeft(4, high: 5), 1);
    expect(D.bisectLeft(5, high: 5), 2);
    expect(() => D.bisectLeft(6, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(7, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(8, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for E lo=None hi=5', () {
    expect(E.bisectLeft(-2, high: 5), 0);
    expect(E.bisectLeft(-1, high: 5), 0);
    expect(E.bisectLeft(0, high: 5), 0);
    expect(E.bisectLeft(1, high: 5), 1);
    expect(E.bisectLeft(2, high: 5), 2);
    expect(E.bisectLeft(3, high: 5), 5);
    expect(E.bisectLeft(4, high: 5), 5);
    expect(E.bisectLeft(5, high: 5), 5);
    expect(E.bisectLeft(6, high: 5), 5);
    expect(E.bisectLeft(7, high: 5), 5);
    expect(E.bisectLeft(8, high: 5), 5);
  });

  test('list.bisectLeft for A lo=0 hi=5', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=5', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=5', () {
    expect(() => C.bisectLeft(-2, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for D lo=0 hi=5', () {
    expect(D.bisectLeft(-2, low: 0, high: 5), 0);
    expect(D.bisectLeft(-1, low: 0, high: 5), 0);
    expect(D.bisectLeft(0, low: 0, high: 5), 0);
    expect(D.bisectLeft(1, low: 0, high: 5), 0);
    expect(D.bisectLeft(2, low: 0, high: 5), 0);
    expect(D.bisectLeft(3, low: 0, high: 5), 0);
    expect(D.bisectLeft(4, low: 0, high: 5), 1);
    expect(D.bisectLeft(5, low: 0, high: 5), 2);
    expect(() => D.bisectLeft(6, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for E lo=0 hi=5', () {
    expect(E.bisectLeft(-2, low: 0, high: 5), 0);
    expect(E.bisectLeft(-1, low: 0, high: 5), 0);
    expect(E.bisectLeft(0, low: 0, high: 5), 0);
    expect(E.bisectLeft(1, low: 0, high: 5), 1);
    expect(E.bisectLeft(2, low: 0, high: 5), 2);
    expect(E.bisectLeft(3, low: 0, high: 5), 5);
    expect(E.bisectLeft(4, low: 0, high: 5), 5);
    expect(E.bisectLeft(5, low: 0, high: 5), 5);
    expect(E.bisectLeft(6, low: 0, high: 5), 5);
    expect(E.bisectLeft(7, low: 0, high: 5), 5);
    expect(E.bisectLeft(8, low: 0, high: 5), 5);
  });

  test('list.bisectLeft for A lo=1 hi=5', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=5', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=5', () {
    expect(() => C.bisectLeft(-2, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for D lo=1 hi=5', () {
    expect(() => D.bisectLeft(-2, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for E lo=1 hi=5', () {
    expect(E.bisectLeft(-2, low: 1, high: 5), 1);
    expect(E.bisectLeft(-1, low: 1, high: 5), 1);
    expect(E.bisectLeft(0, low: 1, high: 5), 1);
    expect(E.bisectLeft(1, low: 1, high: 5), 1);
    expect(E.bisectLeft(2, low: 1, high: 5), 2);
    expect(E.bisectLeft(3, low: 1, high: 5), 5);
    expect(E.bisectLeft(4, low: 1, high: 5), 5);
    expect(E.bisectLeft(5, low: 1, high: 5), 5);
    expect(E.bisectLeft(6, low: 1, high: 5), 5);
    expect(E.bisectLeft(7, low: 1, high: 5), 5);
    expect(E.bisectLeft(8, low: 1, high: 5), 5);
  });

  test('list.bisectLeft for A lo=2 hi=5', () {
    expect(() => A.bisectLeft(-2, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for B lo=2 hi=5', () {
    expect(() => B.bisectLeft(-2, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for C lo=2 hi=5', () {
    expect(() => C.bisectLeft(-2, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for D lo=2 hi=5', () {
    expect(() => D.bisectLeft(-2, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for E lo=2 hi=5', () {
    expect(E.bisectLeft(-2, low: 2, high: 5), 2);
    expect(E.bisectLeft(-1, low: 2, high: 5), 2);
    expect(E.bisectLeft(0, low: 2, high: 5), 2);
    expect(E.bisectLeft(1, low: 2, high: 5), 2);
    expect(E.bisectLeft(2, low: 2, high: 5), 2);
    expect(E.bisectLeft(3, low: 2, high: 5), 5);
    expect(E.bisectLeft(4, low: 2, high: 5), 5);
    expect(E.bisectLeft(5, low: 2, high: 5), 5);
    expect(E.bisectLeft(6, low: 2, high: 5), 5);
    expect(E.bisectLeft(7, low: 2, high: 5), 5);
    expect(E.bisectLeft(8, low: 2, high: 5), 5);
  });

  test('list.bisectLeft for A lo=3 hi=5', () {
    expect(() => A.bisectLeft(-2, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for B lo=3 hi=5', () {
    expect(() => B.bisectLeft(-2, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for C lo=3 hi=5', () {
    expect(() => C.bisectLeft(-2, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for D lo=3 hi=5', () {
    expect(() => D.bisectLeft(-2, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for E lo=3 hi=5', () {
    expect(E.bisectLeft(-2, low: 3, high: 5), 3);
    expect(E.bisectLeft(-1, low: 3, high: 5), 3);
    expect(E.bisectLeft(0, low: 3, high: 5), 3);
    expect(E.bisectLeft(1, low: 3, high: 5), 3);
    expect(E.bisectLeft(2, low: 3, high: 5), 3);
    expect(E.bisectLeft(3, low: 3, high: 5), 5);
    expect(E.bisectLeft(4, low: 3, high: 5), 5);
    expect(E.bisectLeft(5, low: 3, high: 5), 5);
    expect(E.bisectLeft(6, low: 3, high: 5), 5);
    expect(E.bisectLeft(7, low: 3, high: 5), 5);
    expect(E.bisectLeft(8, low: 3, high: 5), 5);
  });

  test('list.bisectLeft for A lo=4 hi=5', () {
    expect(() => A.bisectLeft(-2, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for B lo=4 hi=5', () {
    expect(() => B.bisectLeft(-2, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for C lo=4 hi=5', () {
    expect(() => C.bisectLeft(-2, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for D lo=4 hi=5', () {
    expect(() => D.bisectLeft(-2, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectLeft for E lo=4 hi=5', () {
    expect(E.bisectLeft(-2, low: 4, high: 5), 4);
    expect(E.bisectLeft(-1, low: 4, high: 5), 4);
    expect(E.bisectLeft(0, low: 4, high: 5), 4);
    expect(E.bisectLeft(1, low: 4, high: 5), 4);
    expect(E.bisectLeft(2, low: 4, high: 5), 4);
    expect(E.bisectLeft(3, low: 4, high: 5), 5);
    expect(E.bisectLeft(4, low: 4, high: 5), 5);
    expect(E.bisectLeft(5, low: 4, high: 5), 5);
    expect(E.bisectLeft(6, low: 4, high: 5), 5);
    expect(E.bisectLeft(7, low: 4, high: 5), 5);
    expect(E.bisectLeft(8, low: 4, high: 5), 5);
  });

  test('list.bisectLeft for A lo=5 hi=5', () {
    expect(A.bisectLeft(-2, low: 5, high: 5), 5);
    expect(A.bisectLeft(-1, low: 5, high: 5), 5);
    expect(A.bisectLeft(0, low: 5, high: 5), 5);
    expect(A.bisectLeft(1, low: 5, high: 5), 5);
    expect(A.bisectLeft(2, low: 5, high: 5), 5);
    expect(A.bisectLeft(3, low: 5, high: 5), 5);
    expect(A.bisectLeft(4, low: 5, high: 5), 5);
    expect(A.bisectLeft(5, low: 5, high: 5), 5);
    expect(A.bisectLeft(6, low: 5, high: 5), 5);
    expect(A.bisectLeft(7, low: 5, high: 5), 5);
    expect(A.bisectLeft(8, low: 5, high: 5), 5);
  });

  test('list.bisectLeft for B lo=5 hi=5', () {
    expect(B.bisectLeft(-2, low: 5, high: 5), 5);
    expect(B.bisectLeft(-1, low: 5, high: 5), 5);
    expect(B.bisectLeft(0, low: 5, high: 5), 5);
    expect(B.bisectLeft(1, low: 5, high: 5), 5);
    expect(B.bisectLeft(2, low: 5, high: 5), 5);
    expect(B.bisectLeft(3, low: 5, high: 5), 5);
    expect(B.bisectLeft(4, low: 5, high: 5), 5);
    expect(B.bisectLeft(5, low: 5, high: 5), 5);
    expect(B.bisectLeft(6, low: 5, high: 5), 5);
    expect(B.bisectLeft(7, low: 5, high: 5), 5);
    expect(B.bisectLeft(8, low: 5, high: 5), 5);
  });

  test('list.bisectLeft for C lo=5 hi=5', () {
    expect(C.bisectLeft(-2, low: 5, high: 5), 5);
    expect(C.bisectLeft(-1, low: 5, high: 5), 5);
    expect(C.bisectLeft(0, low: 5, high: 5), 5);
    expect(C.bisectLeft(1, low: 5, high: 5), 5);
    expect(C.bisectLeft(2, low: 5, high: 5), 5);
    expect(C.bisectLeft(3, low: 5, high: 5), 5);
    expect(C.bisectLeft(4, low: 5, high: 5), 5);
    expect(C.bisectLeft(5, low: 5, high: 5), 5);
    expect(C.bisectLeft(6, low: 5, high: 5), 5);
    expect(C.bisectLeft(7, low: 5, high: 5), 5);
    expect(C.bisectLeft(8, low: 5, high: 5), 5);
  });

  test('list.bisectLeft for D lo=5 hi=5', () {
    expect(D.bisectLeft(-2, low: 5, high: 5), 5);
    expect(D.bisectLeft(-1, low: 5, high: 5), 5);
    expect(D.bisectLeft(0, low: 5, high: 5), 5);
    expect(D.bisectLeft(1, low: 5, high: 5), 5);
    expect(D.bisectLeft(2, low: 5, high: 5), 5);
    expect(D.bisectLeft(3, low: 5, high: 5), 5);
    expect(D.bisectLeft(4, low: 5, high: 5), 5);
    expect(D.bisectLeft(5, low: 5, high: 5), 5);
    expect(D.bisectLeft(6, low: 5, high: 5), 5);
    expect(D.bisectLeft(7, low: 5, high: 5), 5);
    expect(D.bisectLeft(8, low: 5, high: 5), 5);
  });

  test('list.bisectLeft for E lo=5 hi=5', () {
    expect(E.bisectLeft(-2, low: 5, high: 5), 5);
    expect(E.bisectLeft(-1, low: 5, high: 5), 5);
    expect(E.bisectLeft(0, low: 5, high: 5), 5);
    expect(E.bisectLeft(1, low: 5, high: 5), 5);
    expect(E.bisectLeft(2, low: 5, high: 5), 5);
    expect(E.bisectLeft(3, low: 5, high: 5), 5);
    expect(E.bisectLeft(4, low: 5, high: 5), 5);
    expect(E.bisectLeft(5, low: 5, high: 5), 5);
    expect(E.bisectLeft(6, low: 5, high: 5), 5);
    expect(E.bisectLeft(7, low: 5, high: 5), 5);
    expect(E.bisectLeft(8, low: 5, high: 5), 5);
  });

  test('list.bisectLeft for A lo=6 hi=5', () {
    expect(A.bisectLeft(-2, low: 6, high: 5), 6);
    expect(A.bisectLeft(-1, low: 6, high: 5), 6);
    expect(A.bisectLeft(0, low: 6, high: 5), 6);
    expect(A.bisectLeft(1, low: 6, high: 5), 6);
    expect(A.bisectLeft(2, low: 6, high: 5), 6);
    expect(A.bisectLeft(3, low: 6, high: 5), 6);
    expect(A.bisectLeft(4, low: 6, high: 5), 6);
    expect(A.bisectLeft(5, low: 6, high: 5), 6);
    expect(A.bisectLeft(6, low: 6, high: 5), 6);
    expect(A.bisectLeft(7, low: 6, high: 5), 6);
    expect(A.bisectLeft(8, low: 6, high: 5), 6);
  });

  test('list.bisectLeft for B lo=6 hi=5', () {
    expect(B.bisectLeft(-2, low: 6, high: 5), 6);
    expect(B.bisectLeft(-1, low: 6, high: 5), 6);
    expect(B.bisectLeft(0, low: 6, high: 5), 6);
    expect(B.bisectLeft(1, low: 6, high: 5), 6);
    expect(B.bisectLeft(2, low: 6, high: 5), 6);
    expect(B.bisectLeft(3, low: 6, high: 5), 6);
    expect(B.bisectLeft(4, low: 6, high: 5), 6);
    expect(B.bisectLeft(5, low: 6, high: 5), 6);
    expect(B.bisectLeft(6, low: 6, high: 5), 6);
    expect(B.bisectLeft(7, low: 6, high: 5), 6);
    expect(B.bisectLeft(8, low: 6, high: 5), 6);
  });

  test('list.bisectLeft for C lo=6 hi=5', () {
    expect(C.bisectLeft(-2, low: 6, high: 5), 6);
    expect(C.bisectLeft(-1, low: 6, high: 5), 6);
    expect(C.bisectLeft(0, low: 6, high: 5), 6);
    expect(C.bisectLeft(1, low: 6, high: 5), 6);
    expect(C.bisectLeft(2, low: 6, high: 5), 6);
    expect(C.bisectLeft(3, low: 6, high: 5), 6);
    expect(C.bisectLeft(4, low: 6, high: 5), 6);
    expect(C.bisectLeft(5, low: 6, high: 5), 6);
    expect(C.bisectLeft(6, low: 6, high: 5), 6);
    expect(C.bisectLeft(7, low: 6, high: 5), 6);
    expect(C.bisectLeft(8, low: 6, high: 5), 6);
  });

  test('list.bisectLeft for D lo=6 hi=5', () {
    expect(D.bisectLeft(-2, low: 6, high: 5), 6);
    expect(D.bisectLeft(-1, low: 6, high: 5), 6);
    expect(D.bisectLeft(0, low: 6, high: 5), 6);
    expect(D.bisectLeft(1, low: 6, high: 5), 6);
    expect(D.bisectLeft(2, low: 6, high: 5), 6);
    expect(D.bisectLeft(3, low: 6, high: 5), 6);
    expect(D.bisectLeft(4, low: 6, high: 5), 6);
    expect(D.bisectLeft(5, low: 6, high: 5), 6);
    expect(D.bisectLeft(6, low: 6, high: 5), 6);
    expect(D.bisectLeft(7, low: 6, high: 5), 6);
    expect(D.bisectLeft(8, low: 6, high: 5), 6);
  });

  test('list.bisectLeft for E lo=6 hi=5', () {
    expect(E.bisectLeft(-2, low: 6, high: 5), 6);
    expect(E.bisectLeft(-1, low: 6, high: 5), 6);
    expect(E.bisectLeft(0, low: 6, high: 5), 6);
    expect(E.bisectLeft(1, low: 6, high: 5), 6);
    expect(E.bisectLeft(2, low: 6, high: 5), 6);
    expect(E.bisectLeft(3, low: 6, high: 5), 6);
    expect(E.bisectLeft(4, low: 6, high: 5), 6);
    expect(E.bisectLeft(5, low: 6, high: 5), 6);
    expect(E.bisectLeft(6, low: 6, high: 5), 6);
    expect(E.bisectLeft(7, low: 6, high: 5), 6);
    expect(E.bisectLeft(8, low: 6, high: 5), 6);
  });

  test('list.bisectLeft for A lo=7 hi=5', () {
    expect(A.bisectLeft(-2, low: 7, high: 5), 7);
    expect(A.bisectLeft(-1, low: 7, high: 5), 7);
    expect(A.bisectLeft(0, low: 7, high: 5), 7);
    expect(A.bisectLeft(1, low: 7, high: 5), 7);
    expect(A.bisectLeft(2, low: 7, high: 5), 7);
    expect(A.bisectLeft(3, low: 7, high: 5), 7);
    expect(A.bisectLeft(4, low: 7, high: 5), 7);
    expect(A.bisectLeft(5, low: 7, high: 5), 7);
    expect(A.bisectLeft(6, low: 7, high: 5), 7);
    expect(A.bisectLeft(7, low: 7, high: 5), 7);
    expect(A.bisectLeft(8, low: 7, high: 5), 7);
  });

  test('list.bisectLeft for B lo=7 hi=5', () {
    expect(B.bisectLeft(-2, low: 7, high: 5), 7);
    expect(B.bisectLeft(-1, low: 7, high: 5), 7);
    expect(B.bisectLeft(0, low: 7, high: 5), 7);
    expect(B.bisectLeft(1, low: 7, high: 5), 7);
    expect(B.bisectLeft(2, low: 7, high: 5), 7);
    expect(B.bisectLeft(3, low: 7, high: 5), 7);
    expect(B.bisectLeft(4, low: 7, high: 5), 7);
    expect(B.bisectLeft(5, low: 7, high: 5), 7);
    expect(B.bisectLeft(6, low: 7, high: 5), 7);
    expect(B.bisectLeft(7, low: 7, high: 5), 7);
    expect(B.bisectLeft(8, low: 7, high: 5), 7);
  });

  test('list.bisectLeft for C lo=7 hi=5', () {
    expect(C.bisectLeft(-2, low: 7, high: 5), 7);
    expect(C.bisectLeft(-1, low: 7, high: 5), 7);
    expect(C.bisectLeft(0, low: 7, high: 5), 7);
    expect(C.bisectLeft(1, low: 7, high: 5), 7);
    expect(C.bisectLeft(2, low: 7, high: 5), 7);
    expect(C.bisectLeft(3, low: 7, high: 5), 7);
    expect(C.bisectLeft(4, low: 7, high: 5), 7);
    expect(C.bisectLeft(5, low: 7, high: 5), 7);
    expect(C.bisectLeft(6, low: 7, high: 5), 7);
    expect(C.bisectLeft(7, low: 7, high: 5), 7);
    expect(C.bisectLeft(8, low: 7, high: 5), 7);
  });

  test('list.bisectLeft for D lo=7 hi=5', () {
    expect(D.bisectLeft(-2, low: 7, high: 5), 7);
    expect(D.bisectLeft(-1, low: 7, high: 5), 7);
    expect(D.bisectLeft(0, low: 7, high: 5), 7);
    expect(D.bisectLeft(1, low: 7, high: 5), 7);
    expect(D.bisectLeft(2, low: 7, high: 5), 7);
    expect(D.bisectLeft(3, low: 7, high: 5), 7);
    expect(D.bisectLeft(4, low: 7, high: 5), 7);
    expect(D.bisectLeft(5, low: 7, high: 5), 7);
    expect(D.bisectLeft(6, low: 7, high: 5), 7);
    expect(D.bisectLeft(7, low: 7, high: 5), 7);
    expect(D.bisectLeft(8, low: 7, high: 5), 7);
  });

  test('list.bisectLeft for E lo=7 hi=5', () {
    expect(E.bisectLeft(-2, low: 7, high: 5), 7);
    expect(E.bisectLeft(-1, low: 7, high: 5), 7);
    expect(E.bisectLeft(0, low: 7, high: 5), 7);
    expect(E.bisectLeft(1, low: 7, high: 5), 7);
    expect(E.bisectLeft(2, low: 7, high: 5), 7);
    expect(E.bisectLeft(3, low: 7, high: 5), 7);
    expect(E.bisectLeft(4, low: 7, high: 5), 7);
    expect(E.bisectLeft(5, low: 7, high: 5), 7);
    expect(E.bisectLeft(6, low: 7, high: 5), 7);
    expect(E.bisectLeft(7, low: 7, high: 5), 7);
    expect(E.bisectLeft(8, low: 7, high: 5), 7);
  });

  test('list.bisectLeft for A lo=8 hi=5', () {
    expect(A.bisectLeft(-2, low: 8, high: 5), 8);
    expect(A.bisectLeft(-1, low: 8, high: 5), 8);
    expect(A.bisectLeft(0, low: 8, high: 5), 8);
    expect(A.bisectLeft(1, low: 8, high: 5), 8);
    expect(A.bisectLeft(2, low: 8, high: 5), 8);
    expect(A.bisectLeft(3, low: 8, high: 5), 8);
    expect(A.bisectLeft(4, low: 8, high: 5), 8);
    expect(A.bisectLeft(5, low: 8, high: 5), 8);
    expect(A.bisectLeft(6, low: 8, high: 5), 8);
    expect(A.bisectLeft(7, low: 8, high: 5), 8);
    expect(A.bisectLeft(8, low: 8, high: 5), 8);
  });

  test('list.bisectLeft for B lo=8 hi=5', () {
    expect(B.bisectLeft(-2, low: 8, high: 5), 8);
    expect(B.bisectLeft(-1, low: 8, high: 5), 8);
    expect(B.bisectLeft(0, low: 8, high: 5), 8);
    expect(B.bisectLeft(1, low: 8, high: 5), 8);
    expect(B.bisectLeft(2, low: 8, high: 5), 8);
    expect(B.bisectLeft(3, low: 8, high: 5), 8);
    expect(B.bisectLeft(4, low: 8, high: 5), 8);
    expect(B.bisectLeft(5, low: 8, high: 5), 8);
    expect(B.bisectLeft(6, low: 8, high: 5), 8);
    expect(B.bisectLeft(7, low: 8, high: 5), 8);
    expect(B.bisectLeft(8, low: 8, high: 5), 8);
  });

  test('list.bisectLeft for C lo=8 hi=5', () {
    expect(C.bisectLeft(-2, low: 8, high: 5), 8);
    expect(C.bisectLeft(-1, low: 8, high: 5), 8);
    expect(C.bisectLeft(0, low: 8, high: 5), 8);
    expect(C.bisectLeft(1, low: 8, high: 5), 8);
    expect(C.bisectLeft(2, low: 8, high: 5), 8);
    expect(C.bisectLeft(3, low: 8, high: 5), 8);
    expect(C.bisectLeft(4, low: 8, high: 5), 8);
    expect(C.bisectLeft(5, low: 8, high: 5), 8);
    expect(C.bisectLeft(6, low: 8, high: 5), 8);
    expect(C.bisectLeft(7, low: 8, high: 5), 8);
    expect(C.bisectLeft(8, low: 8, high: 5), 8);
  });

  test('list.bisectLeft for D lo=8 hi=5', () {
    expect(D.bisectLeft(-2, low: 8, high: 5), 8);
    expect(D.bisectLeft(-1, low: 8, high: 5), 8);
    expect(D.bisectLeft(0, low: 8, high: 5), 8);
    expect(D.bisectLeft(1, low: 8, high: 5), 8);
    expect(D.bisectLeft(2, low: 8, high: 5), 8);
    expect(D.bisectLeft(3, low: 8, high: 5), 8);
    expect(D.bisectLeft(4, low: 8, high: 5), 8);
    expect(D.bisectLeft(5, low: 8, high: 5), 8);
    expect(D.bisectLeft(6, low: 8, high: 5), 8);
    expect(D.bisectLeft(7, low: 8, high: 5), 8);
    expect(D.bisectLeft(8, low: 8, high: 5), 8);
  });

  test('list.bisectLeft for E lo=8 hi=5', () {
    expect(E.bisectLeft(-2, low: 8, high: 5), 8);
    expect(E.bisectLeft(-1, low: 8, high: 5), 8);
    expect(E.bisectLeft(0, low: 8, high: 5), 8);
    expect(E.bisectLeft(1, low: 8, high: 5), 8);
    expect(E.bisectLeft(2, low: 8, high: 5), 8);
    expect(E.bisectLeft(3, low: 8, high: 5), 8);
    expect(E.bisectLeft(4, low: 8, high: 5), 8);
    expect(E.bisectLeft(5, low: 8, high: 5), 8);
    expect(E.bisectLeft(6, low: 8, high: 5), 8);
    expect(E.bisectLeft(7, low: 8, high: 5), 8);
    expect(E.bisectLeft(8, low: 8, high: 5), 8);
  });

  test('list.bisectLeft for A lo=9 hi=5', () {
    expect(A.bisectLeft(-2, low: 9, high: 5), 9);
    expect(A.bisectLeft(-1, low: 9, high: 5), 9);
    expect(A.bisectLeft(0, low: 9, high: 5), 9);
    expect(A.bisectLeft(1, low: 9, high: 5), 9);
    expect(A.bisectLeft(2, low: 9, high: 5), 9);
    expect(A.bisectLeft(3, low: 9, high: 5), 9);
    expect(A.bisectLeft(4, low: 9, high: 5), 9);
    expect(A.bisectLeft(5, low: 9, high: 5), 9);
    expect(A.bisectLeft(6, low: 9, high: 5), 9);
    expect(A.bisectLeft(7, low: 9, high: 5), 9);
    expect(A.bisectLeft(8, low: 9, high: 5), 9);
  });

  test('list.bisectLeft for B lo=9 hi=5', () {
    expect(B.bisectLeft(-2, low: 9, high: 5), 9);
    expect(B.bisectLeft(-1, low: 9, high: 5), 9);
    expect(B.bisectLeft(0, low: 9, high: 5), 9);
    expect(B.bisectLeft(1, low: 9, high: 5), 9);
    expect(B.bisectLeft(2, low: 9, high: 5), 9);
    expect(B.bisectLeft(3, low: 9, high: 5), 9);
    expect(B.bisectLeft(4, low: 9, high: 5), 9);
    expect(B.bisectLeft(5, low: 9, high: 5), 9);
    expect(B.bisectLeft(6, low: 9, high: 5), 9);
    expect(B.bisectLeft(7, low: 9, high: 5), 9);
    expect(B.bisectLeft(8, low: 9, high: 5), 9);
  });

  test('list.bisectLeft for C lo=9 hi=5', () {
    expect(C.bisectLeft(-2, low: 9, high: 5), 9);
    expect(C.bisectLeft(-1, low: 9, high: 5), 9);
    expect(C.bisectLeft(0, low: 9, high: 5), 9);
    expect(C.bisectLeft(1, low: 9, high: 5), 9);
    expect(C.bisectLeft(2, low: 9, high: 5), 9);
    expect(C.bisectLeft(3, low: 9, high: 5), 9);
    expect(C.bisectLeft(4, low: 9, high: 5), 9);
    expect(C.bisectLeft(5, low: 9, high: 5), 9);
    expect(C.bisectLeft(6, low: 9, high: 5), 9);
    expect(C.bisectLeft(7, low: 9, high: 5), 9);
    expect(C.bisectLeft(8, low: 9, high: 5), 9);
  });

  test('list.bisectLeft for D lo=9 hi=5', () {
    expect(D.bisectLeft(-2, low: 9, high: 5), 9);
    expect(D.bisectLeft(-1, low: 9, high: 5), 9);
    expect(D.bisectLeft(0, low: 9, high: 5), 9);
    expect(D.bisectLeft(1, low: 9, high: 5), 9);
    expect(D.bisectLeft(2, low: 9, high: 5), 9);
    expect(D.bisectLeft(3, low: 9, high: 5), 9);
    expect(D.bisectLeft(4, low: 9, high: 5), 9);
    expect(D.bisectLeft(5, low: 9, high: 5), 9);
    expect(D.bisectLeft(6, low: 9, high: 5), 9);
    expect(D.bisectLeft(7, low: 9, high: 5), 9);
    expect(D.bisectLeft(8, low: 9, high: 5), 9);
  });

  test('list.bisectLeft for E lo=9 hi=5', () {
    expect(E.bisectLeft(-2, low: 9, high: 5), 9);
    expect(E.bisectLeft(-1, low: 9, high: 5), 9);
    expect(E.bisectLeft(0, low: 9, high: 5), 9);
    expect(E.bisectLeft(1, low: 9, high: 5), 9);
    expect(E.bisectLeft(2, low: 9, high: 5), 9);
    expect(E.bisectLeft(3, low: 9, high: 5), 9);
    expect(E.bisectLeft(4, low: 9, high: 5), 9);
    expect(E.bisectLeft(5, low: 9, high: 5), 9);
    expect(E.bisectLeft(6, low: 9, high: 5), 9);
    expect(E.bisectLeft(7, low: 9, high: 5), 9);
    expect(E.bisectLeft(8, low: 9, high: 5), 9);
  });

  test('list.bisectLeft for A lo=None hi=6', () {
    expect(() => A.bisectLeft(-2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=6', () {
    expect(() => B.bisectLeft(-2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=6', () {
    expect(() => C.bisectLeft(-2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(-1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(6, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(7, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(8, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for D lo=None hi=6', () {
    expect(() => D.bisectLeft(-2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(-1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(6, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(7, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(8, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for E lo=None hi=6', () {
    expect(E.bisectLeft(-2, high: 6), 0);
    expect(E.bisectLeft(-1, high: 6), 0);
    expect(E.bisectLeft(0, high: 6), 0);
    expect(E.bisectLeft(1, high: 6), 1);
    expect(E.bisectLeft(2, high: 6), 2);
    expect(E.bisectLeft(3, high: 6), 6);
    expect(E.bisectLeft(4, high: 6), 6);
    expect(E.bisectLeft(5, high: 6), 6);
    expect(E.bisectLeft(6, high: 6), 6);
    expect(E.bisectLeft(7, high: 6), 6);
    expect(E.bisectLeft(8, high: 6), 6);
  });

  test('list.bisectLeft for A lo=0 hi=6', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=6', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=6', () {
    expect(() => C.bisectLeft(-2, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for D lo=0 hi=6', () {
    expect(() => D.bisectLeft(-2, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for E lo=0 hi=6', () {
    expect(E.bisectLeft(-2, low: 0, high: 6), 0);
    expect(E.bisectLeft(-1, low: 0, high: 6), 0);
    expect(E.bisectLeft(0, low: 0, high: 6), 0);
    expect(E.bisectLeft(1, low: 0, high: 6), 1);
    expect(E.bisectLeft(2, low: 0, high: 6), 2);
    expect(E.bisectLeft(3, low: 0, high: 6), 6);
    expect(E.bisectLeft(4, low: 0, high: 6), 6);
    expect(E.bisectLeft(5, low: 0, high: 6), 6);
    expect(E.bisectLeft(6, low: 0, high: 6), 6);
    expect(E.bisectLeft(7, low: 0, high: 6), 6);
    expect(E.bisectLeft(8, low: 0, high: 6), 6);
  });

  test('list.bisectLeft for A lo=1 hi=6', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=6', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=6', () {
    expect(() => C.bisectLeft(-2, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for D lo=1 hi=6', () {
    expect(() => D.bisectLeft(-2, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for E lo=1 hi=6', () {
    expect(E.bisectLeft(-2, low: 1, high: 6), 1);
    expect(E.bisectLeft(-1, low: 1, high: 6), 1);
    expect(E.bisectLeft(0, low: 1, high: 6), 1);
    expect(E.bisectLeft(1, low: 1, high: 6), 1);
    expect(E.bisectLeft(2, low: 1, high: 6), 2);
    expect(E.bisectLeft(3, low: 1, high: 6), 6);
    expect(E.bisectLeft(4, low: 1, high: 6), 6);
    expect(E.bisectLeft(5, low: 1, high: 6), 6);
    expect(E.bisectLeft(6, low: 1, high: 6), 6);
    expect(E.bisectLeft(7, low: 1, high: 6), 6);
    expect(E.bisectLeft(8, low: 1, high: 6), 6);
  });

  test('list.bisectLeft for A lo=2 hi=6', () {
    expect(() => A.bisectLeft(-2, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for B lo=2 hi=6', () {
    expect(() => B.bisectLeft(-2, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for C lo=2 hi=6', () {
    expect(() => C.bisectLeft(-2, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for D lo=2 hi=6', () {
    expect(() => D.bisectLeft(-2, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for E lo=2 hi=6', () {
    expect(E.bisectLeft(-2, low: 2, high: 6), 2);
    expect(E.bisectLeft(-1, low: 2, high: 6), 2);
    expect(E.bisectLeft(0, low: 2, high: 6), 2);
    expect(E.bisectLeft(1, low: 2, high: 6), 2);
    expect(E.bisectLeft(2, low: 2, high: 6), 2);
    expect(E.bisectLeft(3, low: 2, high: 6), 6);
    expect(E.bisectLeft(4, low: 2, high: 6), 6);
    expect(E.bisectLeft(5, low: 2, high: 6), 6);
    expect(E.bisectLeft(6, low: 2, high: 6), 6);
    expect(E.bisectLeft(7, low: 2, high: 6), 6);
    expect(E.bisectLeft(8, low: 2, high: 6), 6);
  });

  test('list.bisectLeft for A lo=3 hi=6', () {
    expect(() => A.bisectLeft(-2, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for B lo=3 hi=6', () {
    expect(() => B.bisectLeft(-2, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for C lo=3 hi=6', () {
    expect(() => C.bisectLeft(-2, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for D lo=3 hi=6', () {
    expect(() => D.bisectLeft(-2, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for E lo=3 hi=6', () {
    expect(E.bisectLeft(-2, low: 3, high: 6), 3);
    expect(E.bisectLeft(-1, low: 3, high: 6), 3);
    expect(E.bisectLeft(0, low: 3, high: 6), 3);
    expect(E.bisectLeft(1, low: 3, high: 6), 3);
    expect(E.bisectLeft(2, low: 3, high: 6), 3);
    expect(E.bisectLeft(3, low: 3, high: 6), 6);
    expect(E.bisectLeft(4, low: 3, high: 6), 6);
    expect(E.bisectLeft(5, low: 3, high: 6), 6);
    expect(E.bisectLeft(6, low: 3, high: 6), 6);
    expect(E.bisectLeft(7, low: 3, high: 6), 6);
    expect(E.bisectLeft(8, low: 3, high: 6), 6);
  });

  test('list.bisectLeft for A lo=4 hi=6', () {
    expect(() => A.bisectLeft(-2, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for B lo=4 hi=6', () {
    expect(() => B.bisectLeft(-2, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for C lo=4 hi=6', () {
    expect(() => C.bisectLeft(-2, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for D lo=4 hi=6', () {
    expect(() => D.bisectLeft(-2, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for E lo=4 hi=6', () {
    expect(E.bisectLeft(-2, low: 4, high: 6), 4);
    expect(E.bisectLeft(-1, low: 4, high: 6), 4);
    expect(E.bisectLeft(0, low: 4, high: 6), 4);
    expect(E.bisectLeft(1, low: 4, high: 6), 4);
    expect(E.bisectLeft(2, low: 4, high: 6), 4);
    expect(E.bisectLeft(3, low: 4, high: 6), 6);
    expect(E.bisectLeft(4, low: 4, high: 6), 6);
    expect(E.bisectLeft(5, low: 4, high: 6), 6);
    expect(E.bisectLeft(6, low: 4, high: 6), 6);
    expect(E.bisectLeft(7, low: 4, high: 6), 6);
    expect(E.bisectLeft(8, low: 4, high: 6), 6);
  });

  test('list.bisectLeft for A lo=5 hi=6', () {
    expect(() => A.bisectLeft(-2, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for B lo=5 hi=6', () {
    expect(() => B.bisectLeft(-2, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for C lo=5 hi=6', () {
    expect(() => C.bisectLeft(-2, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for D lo=5 hi=6', () {
    expect(() => D.bisectLeft(-2, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectLeft for E lo=5 hi=6', () {
    expect(E.bisectLeft(-2, low: 5, high: 6), 5);
    expect(E.bisectLeft(-1, low: 5, high: 6), 5);
    expect(E.bisectLeft(0, low: 5, high: 6), 5);
    expect(E.bisectLeft(1, low: 5, high: 6), 5);
    expect(E.bisectLeft(2, low: 5, high: 6), 5);
    expect(E.bisectLeft(3, low: 5, high: 6), 6);
    expect(E.bisectLeft(4, low: 5, high: 6), 6);
    expect(E.bisectLeft(5, low: 5, high: 6), 6);
    expect(E.bisectLeft(6, low: 5, high: 6), 6);
    expect(E.bisectLeft(7, low: 5, high: 6), 6);
    expect(E.bisectLeft(8, low: 5, high: 6), 6);
  });

  test('list.bisectLeft for A lo=6 hi=6', () {
    expect(A.bisectLeft(-2, low: 6, high: 6), 6);
    expect(A.bisectLeft(-1, low: 6, high: 6), 6);
    expect(A.bisectLeft(0, low: 6, high: 6), 6);
    expect(A.bisectLeft(1, low: 6, high: 6), 6);
    expect(A.bisectLeft(2, low: 6, high: 6), 6);
    expect(A.bisectLeft(3, low: 6, high: 6), 6);
    expect(A.bisectLeft(4, low: 6, high: 6), 6);
    expect(A.bisectLeft(5, low: 6, high: 6), 6);
    expect(A.bisectLeft(6, low: 6, high: 6), 6);
    expect(A.bisectLeft(7, low: 6, high: 6), 6);
    expect(A.bisectLeft(8, low: 6, high: 6), 6);
  });

  test('list.bisectLeft for B lo=6 hi=6', () {
    expect(B.bisectLeft(-2, low: 6, high: 6), 6);
    expect(B.bisectLeft(-1, low: 6, high: 6), 6);
    expect(B.bisectLeft(0, low: 6, high: 6), 6);
    expect(B.bisectLeft(1, low: 6, high: 6), 6);
    expect(B.bisectLeft(2, low: 6, high: 6), 6);
    expect(B.bisectLeft(3, low: 6, high: 6), 6);
    expect(B.bisectLeft(4, low: 6, high: 6), 6);
    expect(B.bisectLeft(5, low: 6, high: 6), 6);
    expect(B.bisectLeft(6, low: 6, high: 6), 6);
    expect(B.bisectLeft(7, low: 6, high: 6), 6);
    expect(B.bisectLeft(8, low: 6, high: 6), 6);
  });

  test('list.bisectLeft for C lo=6 hi=6', () {
    expect(C.bisectLeft(-2, low: 6, high: 6), 6);
    expect(C.bisectLeft(-1, low: 6, high: 6), 6);
    expect(C.bisectLeft(0, low: 6, high: 6), 6);
    expect(C.bisectLeft(1, low: 6, high: 6), 6);
    expect(C.bisectLeft(2, low: 6, high: 6), 6);
    expect(C.bisectLeft(3, low: 6, high: 6), 6);
    expect(C.bisectLeft(4, low: 6, high: 6), 6);
    expect(C.bisectLeft(5, low: 6, high: 6), 6);
    expect(C.bisectLeft(6, low: 6, high: 6), 6);
    expect(C.bisectLeft(7, low: 6, high: 6), 6);
    expect(C.bisectLeft(8, low: 6, high: 6), 6);
  });

  test('list.bisectLeft for D lo=6 hi=6', () {
    expect(D.bisectLeft(-2, low: 6, high: 6), 6);
    expect(D.bisectLeft(-1, low: 6, high: 6), 6);
    expect(D.bisectLeft(0, low: 6, high: 6), 6);
    expect(D.bisectLeft(1, low: 6, high: 6), 6);
    expect(D.bisectLeft(2, low: 6, high: 6), 6);
    expect(D.bisectLeft(3, low: 6, high: 6), 6);
    expect(D.bisectLeft(4, low: 6, high: 6), 6);
    expect(D.bisectLeft(5, low: 6, high: 6), 6);
    expect(D.bisectLeft(6, low: 6, high: 6), 6);
    expect(D.bisectLeft(7, low: 6, high: 6), 6);
    expect(D.bisectLeft(8, low: 6, high: 6), 6);
  });

  test('list.bisectLeft for E lo=6 hi=6', () {
    expect(E.bisectLeft(-2, low: 6, high: 6), 6);
    expect(E.bisectLeft(-1, low: 6, high: 6), 6);
    expect(E.bisectLeft(0, low: 6, high: 6), 6);
    expect(E.bisectLeft(1, low: 6, high: 6), 6);
    expect(E.bisectLeft(2, low: 6, high: 6), 6);
    expect(E.bisectLeft(3, low: 6, high: 6), 6);
    expect(E.bisectLeft(4, low: 6, high: 6), 6);
    expect(E.bisectLeft(5, low: 6, high: 6), 6);
    expect(E.bisectLeft(6, low: 6, high: 6), 6);
    expect(E.bisectLeft(7, low: 6, high: 6), 6);
    expect(E.bisectLeft(8, low: 6, high: 6), 6);
  });

  test('list.bisectLeft for A lo=7 hi=6', () {
    expect(A.bisectLeft(-2, low: 7, high: 6), 7);
    expect(A.bisectLeft(-1, low: 7, high: 6), 7);
    expect(A.bisectLeft(0, low: 7, high: 6), 7);
    expect(A.bisectLeft(1, low: 7, high: 6), 7);
    expect(A.bisectLeft(2, low: 7, high: 6), 7);
    expect(A.bisectLeft(3, low: 7, high: 6), 7);
    expect(A.bisectLeft(4, low: 7, high: 6), 7);
    expect(A.bisectLeft(5, low: 7, high: 6), 7);
    expect(A.bisectLeft(6, low: 7, high: 6), 7);
    expect(A.bisectLeft(7, low: 7, high: 6), 7);
    expect(A.bisectLeft(8, low: 7, high: 6), 7);
  });

  test('list.bisectLeft for B lo=7 hi=6', () {
    expect(B.bisectLeft(-2, low: 7, high: 6), 7);
    expect(B.bisectLeft(-1, low: 7, high: 6), 7);
    expect(B.bisectLeft(0, low: 7, high: 6), 7);
    expect(B.bisectLeft(1, low: 7, high: 6), 7);
    expect(B.bisectLeft(2, low: 7, high: 6), 7);
    expect(B.bisectLeft(3, low: 7, high: 6), 7);
    expect(B.bisectLeft(4, low: 7, high: 6), 7);
    expect(B.bisectLeft(5, low: 7, high: 6), 7);
    expect(B.bisectLeft(6, low: 7, high: 6), 7);
    expect(B.bisectLeft(7, low: 7, high: 6), 7);
    expect(B.bisectLeft(8, low: 7, high: 6), 7);
  });

  test('list.bisectLeft for C lo=7 hi=6', () {
    expect(C.bisectLeft(-2, low: 7, high: 6), 7);
    expect(C.bisectLeft(-1, low: 7, high: 6), 7);
    expect(C.bisectLeft(0, low: 7, high: 6), 7);
    expect(C.bisectLeft(1, low: 7, high: 6), 7);
    expect(C.bisectLeft(2, low: 7, high: 6), 7);
    expect(C.bisectLeft(3, low: 7, high: 6), 7);
    expect(C.bisectLeft(4, low: 7, high: 6), 7);
    expect(C.bisectLeft(5, low: 7, high: 6), 7);
    expect(C.bisectLeft(6, low: 7, high: 6), 7);
    expect(C.bisectLeft(7, low: 7, high: 6), 7);
    expect(C.bisectLeft(8, low: 7, high: 6), 7);
  });

  test('list.bisectLeft for D lo=7 hi=6', () {
    expect(D.bisectLeft(-2, low: 7, high: 6), 7);
    expect(D.bisectLeft(-1, low: 7, high: 6), 7);
    expect(D.bisectLeft(0, low: 7, high: 6), 7);
    expect(D.bisectLeft(1, low: 7, high: 6), 7);
    expect(D.bisectLeft(2, low: 7, high: 6), 7);
    expect(D.bisectLeft(3, low: 7, high: 6), 7);
    expect(D.bisectLeft(4, low: 7, high: 6), 7);
    expect(D.bisectLeft(5, low: 7, high: 6), 7);
    expect(D.bisectLeft(6, low: 7, high: 6), 7);
    expect(D.bisectLeft(7, low: 7, high: 6), 7);
    expect(D.bisectLeft(8, low: 7, high: 6), 7);
  });

  test('list.bisectLeft for E lo=7 hi=6', () {
    expect(E.bisectLeft(-2, low: 7, high: 6), 7);
    expect(E.bisectLeft(-1, low: 7, high: 6), 7);
    expect(E.bisectLeft(0, low: 7, high: 6), 7);
    expect(E.bisectLeft(1, low: 7, high: 6), 7);
    expect(E.bisectLeft(2, low: 7, high: 6), 7);
    expect(E.bisectLeft(3, low: 7, high: 6), 7);
    expect(E.bisectLeft(4, low: 7, high: 6), 7);
    expect(E.bisectLeft(5, low: 7, high: 6), 7);
    expect(E.bisectLeft(6, low: 7, high: 6), 7);
    expect(E.bisectLeft(7, low: 7, high: 6), 7);
    expect(E.bisectLeft(8, low: 7, high: 6), 7);
  });

  test('list.bisectLeft for A lo=8 hi=6', () {
    expect(A.bisectLeft(-2, low: 8, high: 6), 8);
    expect(A.bisectLeft(-1, low: 8, high: 6), 8);
    expect(A.bisectLeft(0, low: 8, high: 6), 8);
    expect(A.bisectLeft(1, low: 8, high: 6), 8);
    expect(A.bisectLeft(2, low: 8, high: 6), 8);
    expect(A.bisectLeft(3, low: 8, high: 6), 8);
    expect(A.bisectLeft(4, low: 8, high: 6), 8);
    expect(A.bisectLeft(5, low: 8, high: 6), 8);
    expect(A.bisectLeft(6, low: 8, high: 6), 8);
    expect(A.bisectLeft(7, low: 8, high: 6), 8);
    expect(A.bisectLeft(8, low: 8, high: 6), 8);
  });

  test('list.bisectLeft for B lo=8 hi=6', () {
    expect(B.bisectLeft(-2, low: 8, high: 6), 8);
    expect(B.bisectLeft(-1, low: 8, high: 6), 8);
    expect(B.bisectLeft(0, low: 8, high: 6), 8);
    expect(B.bisectLeft(1, low: 8, high: 6), 8);
    expect(B.bisectLeft(2, low: 8, high: 6), 8);
    expect(B.bisectLeft(3, low: 8, high: 6), 8);
    expect(B.bisectLeft(4, low: 8, high: 6), 8);
    expect(B.bisectLeft(5, low: 8, high: 6), 8);
    expect(B.bisectLeft(6, low: 8, high: 6), 8);
    expect(B.bisectLeft(7, low: 8, high: 6), 8);
    expect(B.bisectLeft(8, low: 8, high: 6), 8);
  });

  test('list.bisectLeft for C lo=8 hi=6', () {
    expect(C.bisectLeft(-2, low: 8, high: 6), 8);
    expect(C.bisectLeft(-1, low: 8, high: 6), 8);
    expect(C.bisectLeft(0, low: 8, high: 6), 8);
    expect(C.bisectLeft(1, low: 8, high: 6), 8);
    expect(C.bisectLeft(2, low: 8, high: 6), 8);
    expect(C.bisectLeft(3, low: 8, high: 6), 8);
    expect(C.bisectLeft(4, low: 8, high: 6), 8);
    expect(C.bisectLeft(5, low: 8, high: 6), 8);
    expect(C.bisectLeft(6, low: 8, high: 6), 8);
    expect(C.bisectLeft(7, low: 8, high: 6), 8);
    expect(C.bisectLeft(8, low: 8, high: 6), 8);
  });

  test('list.bisectLeft for D lo=8 hi=6', () {
    expect(D.bisectLeft(-2, low: 8, high: 6), 8);
    expect(D.bisectLeft(-1, low: 8, high: 6), 8);
    expect(D.bisectLeft(0, low: 8, high: 6), 8);
    expect(D.bisectLeft(1, low: 8, high: 6), 8);
    expect(D.bisectLeft(2, low: 8, high: 6), 8);
    expect(D.bisectLeft(3, low: 8, high: 6), 8);
    expect(D.bisectLeft(4, low: 8, high: 6), 8);
    expect(D.bisectLeft(5, low: 8, high: 6), 8);
    expect(D.bisectLeft(6, low: 8, high: 6), 8);
    expect(D.bisectLeft(7, low: 8, high: 6), 8);
    expect(D.bisectLeft(8, low: 8, high: 6), 8);
  });

  test('list.bisectLeft for E lo=8 hi=6', () {
    expect(E.bisectLeft(-2, low: 8, high: 6), 8);
    expect(E.bisectLeft(-1, low: 8, high: 6), 8);
    expect(E.bisectLeft(0, low: 8, high: 6), 8);
    expect(E.bisectLeft(1, low: 8, high: 6), 8);
    expect(E.bisectLeft(2, low: 8, high: 6), 8);
    expect(E.bisectLeft(3, low: 8, high: 6), 8);
    expect(E.bisectLeft(4, low: 8, high: 6), 8);
    expect(E.bisectLeft(5, low: 8, high: 6), 8);
    expect(E.bisectLeft(6, low: 8, high: 6), 8);
    expect(E.bisectLeft(7, low: 8, high: 6), 8);
    expect(E.bisectLeft(8, low: 8, high: 6), 8);
  });

  test('list.bisectLeft for A lo=9 hi=6', () {
    expect(A.bisectLeft(-2, low: 9, high: 6), 9);
    expect(A.bisectLeft(-1, low: 9, high: 6), 9);
    expect(A.bisectLeft(0, low: 9, high: 6), 9);
    expect(A.bisectLeft(1, low: 9, high: 6), 9);
    expect(A.bisectLeft(2, low: 9, high: 6), 9);
    expect(A.bisectLeft(3, low: 9, high: 6), 9);
    expect(A.bisectLeft(4, low: 9, high: 6), 9);
    expect(A.bisectLeft(5, low: 9, high: 6), 9);
    expect(A.bisectLeft(6, low: 9, high: 6), 9);
    expect(A.bisectLeft(7, low: 9, high: 6), 9);
    expect(A.bisectLeft(8, low: 9, high: 6), 9);
  });

  test('list.bisectLeft for B lo=9 hi=6', () {
    expect(B.bisectLeft(-2, low: 9, high: 6), 9);
    expect(B.bisectLeft(-1, low: 9, high: 6), 9);
    expect(B.bisectLeft(0, low: 9, high: 6), 9);
    expect(B.bisectLeft(1, low: 9, high: 6), 9);
    expect(B.bisectLeft(2, low: 9, high: 6), 9);
    expect(B.bisectLeft(3, low: 9, high: 6), 9);
    expect(B.bisectLeft(4, low: 9, high: 6), 9);
    expect(B.bisectLeft(5, low: 9, high: 6), 9);
    expect(B.bisectLeft(6, low: 9, high: 6), 9);
    expect(B.bisectLeft(7, low: 9, high: 6), 9);
    expect(B.bisectLeft(8, low: 9, high: 6), 9);
  });

  test('list.bisectLeft for C lo=9 hi=6', () {
    expect(C.bisectLeft(-2, low: 9, high: 6), 9);
    expect(C.bisectLeft(-1, low: 9, high: 6), 9);
    expect(C.bisectLeft(0, low: 9, high: 6), 9);
    expect(C.bisectLeft(1, low: 9, high: 6), 9);
    expect(C.bisectLeft(2, low: 9, high: 6), 9);
    expect(C.bisectLeft(3, low: 9, high: 6), 9);
    expect(C.bisectLeft(4, low: 9, high: 6), 9);
    expect(C.bisectLeft(5, low: 9, high: 6), 9);
    expect(C.bisectLeft(6, low: 9, high: 6), 9);
    expect(C.bisectLeft(7, low: 9, high: 6), 9);
    expect(C.bisectLeft(8, low: 9, high: 6), 9);
  });

  test('list.bisectLeft for D lo=9 hi=6', () {
    expect(D.bisectLeft(-2, low: 9, high: 6), 9);
    expect(D.bisectLeft(-1, low: 9, high: 6), 9);
    expect(D.bisectLeft(0, low: 9, high: 6), 9);
    expect(D.bisectLeft(1, low: 9, high: 6), 9);
    expect(D.bisectLeft(2, low: 9, high: 6), 9);
    expect(D.bisectLeft(3, low: 9, high: 6), 9);
    expect(D.bisectLeft(4, low: 9, high: 6), 9);
    expect(D.bisectLeft(5, low: 9, high: 6), 9);
    expect(D.bisectLeft(6, low: 9, high: 6), 9);
    expect(D.bisectLeft(7, low: 9, high: 6), 9);
    expect(D.bisectLeft(8, low: 9, high: 6), 9);
  });

  test('list.bisectLeft for E lo=9 hi=6', () {
    expect(E.bisectLeft(-2, low: 9, high: 6), 9);
    expect(E.bisectLeft(-1, low: 9, high: 6), 9);
    expect(E.bisectLeft(0, low: 9, high: 6), 9);
    expect(E.bisectLeft(1, low: 9, high: 6), 9);
    expect(E.bisectLeft(2, low: 9, high: 6), 9);
    expect(E.bisectLeft(3, low: 9, high: 6), 9);
    expect(E.bisectLeft(4, low: 9, high: 6), 9);
    expect(E.bisectLeft(5, low: 9, high: 6), 9);
    expect(E.bisectLeft(6, low: 9, high: 6), 9);
    expect(E.bisectLeft(7, low: 9, high: 6), 9);
    expect(E.bisectLeft(8, low: 9, high: 6), 9);
  });

  test('list.bisectLeft for A lo=None hi=7', () {
    expect(() => A.bisectLeft(-2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=7', () {
    expect(() => B.bisectLeft(-2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=7', () {
    expect(() => C.bisectLeft(-2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=None hi=7', () {
    expect(() => D.bisectLeft(-2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=None hi=7', () {
    expect(E.bisectLeft(-2, high: 7), 0);
    expect(E.bisectLeft(-1, high: 7), 0);
    expect(E.bisectLeft(0, high: 7), 0);
    expect(E.bisectLeft(1, high: 7), 1);
    expect(E.bisectLeft(2, high: 7), 2);
    expect(E.bisectLeft(3, high: 7), 6);
    expect(E.bisectLeft(4, high: 7), 7);
    expect(E.bisectLeft(5, high: 7), 7);
    expect(E.bisectLeft(6, high: 7), 7);
    expect(E.bisectLeft(7, high: 7), 7);
    expect(E.bisectLeft(8, high: 7), 7);
  });

  test('list.bisectLeft for A lo=0 hi=7', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=7', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=7', () {
    expect(() => C.bisectLeft(-2, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=0 hi=7', () {
    expect(() => D.bisectLeft(-2, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=0 hi=7', () {
    expect(E.bisectLeft(-2, low: 0, high: 7), 0);
    expect(E.bisectLeft(-1, low: 0, high: 7), 0);
    expect(E.bisectLeft(0, low: 0, high: 7), 0);
    expect(E.bisectLeft(1, low: 0, high: 7), 1);
    expect(E.bisectLeft(2, low: 0, high: 7), 2);
    expect(E.bisectLeft(3, low: 0, high: 7), 6);
    expect(E.bisectLeft(4, low: 0, high: 7), 7);
    expect(E.bisectLeft(5, low: 0, high: 7), 7);
    expect(E.bisectLeft(6, low: 0, high: 7), 7);
    expect(E.bisectLeft(7, low: 0, high: 7), 7);
    expect(E.bisectLeft(8, low: 0, high: 7), 7);
  });

  test('list.bisectLeft for A lo=1 hi=7', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=7', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=7', () {
    expect(() => C.bisectLeft(-2, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=1 hi=7', () {
    expect(() => D.bisectLeft(-2, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=1 hi=7', () {
    expect(E.bisectLeft(-2, low: 1, high: 7), 1);
    expect(E.bisectLeft(-1, low: 1, high: 7), 1);
    expect(E.bisectLeft(0, low: 1, high: 7), 1);
    expect(E.bisectLeft(1, low: 1, high: 7), 1);
    expect(E.bisectLeft(2, low: 1, high: 7), 2);
    expect(E.bisectLeft(3, low: 1, high: 7), 6);
    expect(E.bisectLeft(4, low: 1, high: 7), 7);
    expect(E.bisectLeft(5, low: 1, high: 7), 7);
    expect(E.bisectLeft(6, low: 1, high: 7), 7);
    expect(E.bisectLeft(7, low: 1, high: 7), 7);
    expect(E.bisectLeft(8, low: 1, high: 7), 7);
  });

  test('list.bisectLeft for A lo=2 hi=7', () {
    expect(() => A.bisectLeft(-2, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=2 hi=7', () {
    expect(() => B.bisectLeft(-2, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=2 hi=7', () {
    expect(() => C.bisectLeft(-2, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=2 hi=7', () {
    expect(() => D.bisectLeft(-2, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=2 hi=7', () {
    expect(E.bisectLeft(-2, low: 2, high: 7), 2);
    expect(E.bisectLeft(-1, low: 2, high: 7), 2);
    expect(E.bisectLeft(0, low: 2, high: 7), 2);
    expect(E.bisectLeft(1, low: 2, high: 7), 2);
    expect(E.bisectLeft(2, low: 2, high: 7), 2);
    expect(E.bisectLeft(3, low: 2, high: 7), 6);
    expect(E.bisectLeft(4, low: 2, high: 7), 7);
    expect(E.bisectLeft(5, low: 2, high: 7), 7);
    expect(E.bisectLeft(6, low: 2, high: 7), 7);
    expect(E.bisectLeft(7, low: 2, high: 7), 7);
    expect(E.bisectLeft(8, low: 2, high: 7), 7);
  });

  test('list.bisectLeft for A lo=3 hi=7', () {
    expect(() => A.bisectLeft(-2, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=3 hi=7', () {
    expect(() => B.bisectLeft(-2, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=3 hi=7', () {
    expect(() => C.bisectLeft(-2, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=3 hi=7', () {
    expect(() => D.bisectLeft(-2, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=3 hi=7', () {
    expect(E.bisectLeft(-2, low: 3, high: 7), 3);
    expect(E.bisectLeft(-1, low: 3, high: 7), 3);
    expect(E.bisectLeft(0, low: 3, high: 7), 3);
    expect(E.bisectLeft(1, low: 3, high: 7), 3);
    expect(E.bisectLeft(2, low: 3, high: 7), 3);
    expect(E.bisectLeft(3, low: 3, high: 7), 6);
    expect(E.bisectLeft(4, low: 3, high: 7), 7);
    expect(E.bisectLeft(5, low: 3, high: 7), 7);
    expect(E.bisectLeft(6, low: 3, high: 7), 7);
    expect(E.bisectLeft(7, low: 3, high: 7), 7);
    expect(E.bisectLeft(8, low: 3, high: 7), 7);
  });

  test('list.bisectLeft for A lo=4 hi=7', () {
    expect(() => A.bisectLeft(-2, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=4 hi=7', () {
    expect(() => B.bisectLeft(-2, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=4 hi=7', () {
    expect(() => C.bisectLeft(-2, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=4 hi=7', () {
    expect(() => D.bisectLeft(-2, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=4 hi=7', () {
    expect(E.bisectLeft(-2, low: 4, high: 7), 4);
    expect(E.bisectLeft(-1, low: 4, high: 7), 4);
    expect(E.bisectLeft(0, low: 4, high: 7), 4);
    expect(E.bisectLeft(1, low: 4, high: 7), 4);
    expect(E.bisectLeft(2, low: 4, high: 7), 4);
    expect(E.bisectLeft(3, low: 4, high: 7), 6);
    expect(E.bisectLeft(4, low: 4, high: 7), 7);
    expect(E.bisectLeft(5, low: 4, high: 7), 7);
    expect(E.bisectLeft(6, low: 4, high: 7), 7);
    expect(E.bisectLeft(7, low: 4, high: 7), 7);
    expect(E.bisectLeft(8, low: 4, high: 7), 7);
  });

  test('list.bisectLeft for A lo=5 hi=7', () {
    expect(() => A.bisectLeft(-2, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=5 hi=7', () {
    expect(() => B.bisectLeft(-2, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=5 hi=7', () {
    expect(() => C.bisectLeft(-2, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=5 hi=7', () {
    expect(() => D.bisectLeft(-2, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=5 hi=7', () {
    expect(E.bisectLeft(-2, low: 5, high: 7), 5);
    expect(E.bisectLeft(-1, low: 5, high: 7), 5);
    expect(E.bisectLeft(0, low: 5, high: 7), 5);
    expect(E.bisectLeft(1, low: 5, high: 7), 5);
    expect(E.bisectLeft(2, low: 5, high: 7), 5);
    expect(E.bisectLeft(3, low: 5, high: 7), 6);
    expect(E.bisectLeft(4, low: 5, high: 7), 7);
    expect(E.bisectLeft(5, low: 5, high: 7), 7);
    expect(E.bisectLeft(6, low: 5, high: 7), 7);
    expect(E.bisectLeft(7, low: 5, high: 7), 7);
    expect(E.bisectLeft(8, low: 5, high: 7), 7);
  });

  test('list.bisectLeft for A lo=6 hi=7', () {
    expect(() => A.bisectLeft(-2, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for B lo=6 hi=7', () {
    expect(() => B.bisectLeft(-2, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for C lo=6 hi=7', () {
    expect(() => C.bisectLeft(-2, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for D lo=6 hi=7', () {
    expect(() => D.bisectLeft(-2, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectLeft for E lo=6 hi=7', () {
    expect(E.bisectLeft(-2, low: 6, high: 7), 6);
    expect(E.bisectLeft(-1, low: 6, high: 7), 6);
    expect(E.bisectLeft(0, low: 6, high: 7), 6);
    expect(E.bisectLeft(1, low: 6, high: 7), 6);
    expect(E.bisectLeft(2, low: 6, high: 7), 6);
    expect(E.bisectLeft(3, low: 6, high: 7), 6);
    expect(E.bisectLeft(4, low: 6, high: 7), 7);
    expect(E.bisectLeft(5, low: 6, high: 7), 7);
    expect(E.bisectLeft(6, low: 6, high: 7), 7);
    expect(E.bisectLeft(7, low: 6, high: 7), 7);
    expect(E.bisectLeft(8, low: 6, high: 7), 7);
  });

  test('list.bisectLeft for A lo=7 hi=7', () {
    expect(A.bisectLeft(-2, low: 7, high: 7), 7);
    expect(A.bisectLeft(-1, low: 7, high: 7), 7);
    expect(A.bisectLeft(0, low: 7, high: 7), 7);
    expect(A.bisectLeft(1, low: 7, high: 7), 7);
    expect(A.bisectLeft(2, low: 7, high: 7), 7);
    expect(A.bisectLeft(3, low: 7, high: 7), 7);
    expect(A.bisectLeft(4, low: 7, high: 7), 7);
    expect(A.bisectLeft(5, low: 7, high: 7), 7);
    expect(A.bisectLeft(6, low: 7, high: 7), 7);
    expect(A.bisectLeft(7, low: 7, high: 7), 7);
    expect(A.bisectLeft(8, low: 7, high: 7), 7);
  });

  test('list.bisectLeft for B lo=7 hi=7', () {
    expect(B.bisectLeft(-2, low: 7, high: 7), 7);
    expect(B.bisectLeft(-1, low: 7, high: 7), 7);
    expect(B.bisectLeft(0, low: 7, high: 7), 7);
    expect(B.bisectLeft(1, low: 7, high: 7), 7);
    expect(B.bisectLeft(2, low: 7, high: 7), 7);
    expect(B.bisectLeft(3, low: 7, high: 7), 7);
    expect(B.bisectLeft(4, low: 7, high: 7), 7);
    expect(B.bisectLeft(5, low: 7, high: 7), 7);
    expect(B.bisectLeft(6, low: 7, high: 7), 7);
    expect(B.bisectLeft(7, low: 7, high: 7), 7);
    expect(B.bisectLeft(8, low: 7, high: 7), 7);
  });

  test('list.bisectLeft for C lo=7 hi=7', () {
    expect(C.bisectLeft(-2, low: 7, high: 7), 7);
    expect(C.bisectLeft(-1, low: 7, high: 7), 7);
    expect(C.bisectLeft(0, low: 7, high: 7), 7);
    expect(C.bisectLeft(1, low: 7, high: 7), 7);
    expect(C.bisectLeft(2, low: 7, high: 7), 7);
    expect(C.bisectLeft(3, low: 7, high: 7), 7);
    expect(C.bisectLeft(4, low: 7, high: 7), 7);
    expect(C.bisectLeft(5, low: 7, high: 7), 7);
    expect(C.bisectLeft(6, low: 7, high: 7), 7);
    expect(C.bisectLeft(7, low: 7, high: 7), 7);
    expect(C.bisectLeft(8, low: 7, high: 7), 7);
  });

  test('list.bisectLeft for D lo=7 hi=7', () {
    expect(D.bisectLeft(-2, low: 7, high: 7), 7);
    expect(D.bisectLeft(-1, low: 7, high: 7), 7);
    expect(D.bisectLeft(0, low: 7, high: 7), 7);
    expect(D.bisectLeft(1, low: 7, high: 7), 7);
    expect(D.bisectLeft(2, low: 7, high: 7), 7);
    expect(D.bisectLeft(3, low: 7, high: 7), 7);
    expect(D.bisectLeft(4, low: 7, high: 7), 7);
    expect(D.bisectLeft(5, low: 7, high: 7), 7);
    expect(D.bisectLeft(6, low: 7, high: 7), 7);
    expect(D.bisectLeft(7, low: 7, high: 7), 7);
    expect(D.bisectLeft(8, low: 7, high: 7), 7);
  });

  test('list.bisectLeft for E lo=7 hi=7', () {
    expect(E.bisectLeft(-2, low: 7, high: 7), 7);
    expect(E.bisectLeft(-1, low: 7, high: 7), 7);
    expect(E.bisectLeft(0, low: 7, high: 7), 7);
    expect(E.bisectLeft(1, low: 7, high: 7), 7);
    expect(E.bisectLeft(2, low: 7, high: 7), 7);
    expect(E.bisectLeft(3, low: 7, high: 7), 7);
    expect(E.bisectLeft(4, low: 7, high: 7), 7);
    expect(E.bisectLeft(5, low: 7, high: 7), 7);
    expect(E.bisectLeft(6, low: 7, high: 7), 7);
    expect(E.bisectLeft(7, low: 7, high: 7), 7);
    expect(E.bisectLeft(8, low: 7, high: 7), 7);
  });

  test('list.bisectLeft for A lo=8 hi=7', () {
    expect(A.bisectLeft(-2, low: 8, high: 7), 8);
    expect(A.bisectLeft(-1, low: 8, high: 7), 8);
    expect(A.bisectLeft(0, low: 8, high: 7), 8);
    expect(A.bisectLeft(1, low: 8, high: 7), 8);
    expect(A.bisectLeft(2, low: 8, high: 7), 8);
    expect(A.bisectLeft(3, low: 8, high: 7), 8);
    expect(A.bisectLeft(4, low: 8, high: 7), 8);
    expect(A.bisectLeft(5, low: 8, high: 7), 8);
    expect(A.bisectLeft(6, low: 8, high: 7), 8);
    expect(A.bisectLeft(7, low: 8, high: 7), 8);
    expect(A.bisectLeft(8, low: 8, high: 7), 8);
  });

  test('list.bisectLeft for B lo=8 hi=7', () {
    expect(B.bisectLeft(-2, low: 8, high: 7), 8);
    expect(B.bisectLeft(-1, low: 8, high: 7), 8);
    expect(B.bisectLeft(0, low: 8, high: 7), 8);
    expect(B.bisectLeft(1, low: 8, high: 7), 8);
    expect(B.bisectLeft(2, low: 8, high: 7), 8);
    expect(B.bisectLeft(3, low: 8, high: 7), 8);
    expect(B.bisectLeft(4, low: 8, high: 7), 8);
    expect(B.bisectLeft(5, low: 8, high: 7), 8);
    expect(B.bisectLeft(6, low: 8, high: 7), 8);
    expect(B.bisectLeft(7, low: 8, high: 7), 8);
    expect(B.bisectLeft(8, low: 8, high: 7), 8);
  });

  test('list.bisectLeft for C lo=8 hi=7', () {
    expect(C.bisectLeft(-2, low: 8, high: 7), 8);
    expect(C.bisectLeft(-1, low: 8, high: 7), 8);
    expect(C.bisectLeft(0, low: 8, high: 7), 8);
    expect(C.bisectLeft(1, low: 8, high: 7), 8);
    expect(C.bisectLeft(2, low: 8, high: 7), 8);
    expect(C.bisectLeft(3, low: 8, high: 7), 8);
    expect(C.bisectLeft(4, low: 8, high: 7), 8);
    expect(C.bisectLeft(5, low: 8, high: 7), 8);
    expect(C.bisectLeft(6, low: 8, high: 7), 8);
    expect(C.bisectLeft(7, low: 8, high: 7), 8);
    expect(C.bisectLeft(8, low: 8, high: 7), 8);
  });

  test('list.bisectLeft for D lo=8 hi=7', () {
    expect(D.bisectLeft(-2, low: 8, high: 7), 8);
    expect(D.bisectLeft(-1, low: 8, high: 7), 8);
    expect(D.bisectLeft(0, low: 8, high: 7), 8);
    expect(D.bisectLeft(1, low: 8, high: 7), 8);
    expect(D.bisectLeft(2, low: 8, high: 7), 8);
    expect(D.bisectLeft(3, low: 8, high: 7), 8);
    expect(D.bisectLeft(4, low: 8, high: 7), 8);
    expect(D.bisectLeft(5, low: 8, high: 7), 8);
    expect(D.bisectLeft(6, low: 8, high: 7), 8);
    expect(D.bisectLeft(7, low: 8, high: 7), 8);
    expect(D.bisectLeft(8, low: 8, high: 7), 8);
  });

  test('list.bisectLeft for E lo=8 hi=7', () {
    expect(E.bisectLeft(-2, low: 8, high: 7), 8);
    expect(E.bisectLeft(-1, low: 8, high: 7), 8);
    expect(E.bisectLeft(0, low: 8, high: 7), 8);
    expect(E.bisectLeft(1, low: 8, high: 7), 8);
    expect(E.bisectLeft(2, low: 8, high: 7), 8);
    expect(E.bisectLeft(3, low: 8, high: 7), 8);
    expect(E.bisectLeft(4, low: 8, high: 7), 8);
    expect(E.bisectLeft(5, low: 8, high: 7), 8);
    expect(E.bisectLeft(6, low: 8, high: 7), 8);
    expect(E.bisectLeft(7, low: 8, high: 7), 8);
    expect(E.bisectLeft(8, low: 8, high: 7), 8);
  });

  test('list.bisectLeft for A lo=9 hi=7', () {
    expect(A.bisectLeft(-2, low: 9, high: 7), 9);
    expect(A.bisectLeft(-1, low: 9, high: 7), 9);
    expect(A.bisectLeft(0, low: 9, high: 7), 9);
    expect(A.bisectLeft(1, low: 9, high: 7), 9);
    expect(A.bisectLeft(2, low: 9, high: 7), 9);
    expect(A.bisectLeft(3, low: 9, high: 7), 9);
    expect(A.bisectLeft(4, low: 9, high: 7), 9);
    expect(A.bisectLeft(5, low: 9, high: 7), 9);
    expect(A.bisectLeft(6, low: 9, high: 7), 9);
    expect(A.bisectLeft(7, low: 9, high: 7), 9);
    expect(A.bisectLeft(8, low: 9, high: 7), 9);
  });

  test('list.bisectLeft for B lo=9 hi=7', () {
    expect(B.bisectLeft(-2, low: 9, high: 7), 9);
    expect(B.bisectLeft(-1, low: 9, high: 7), 9);
    expect(B.bisectLeft(0, low: 9, high: 7), 9);
    expect(B.bisectLeft(1, low: 9, high: 7), 9);
    expect(B.bisectLeft(2, low: 9, high: 7), 9);
    expect(B.bisectLeft(3, low: 9, high: 7), 9);
    expect(B.bisectLeft(4, low: 9, high: 7), 9);
    expect(B.bisectLeft(5, low: 9, high: 7), 9);
    expect(B.bisectLeft(6, low: 9, high: 7), 9);
    expect(B.bisectLeft(7, low: 9, high: 7), 9);
    expect(B.bisectLeft(8, low: 9, high: 7), 9);
  });

  test('list.bisectLeft for C lo=9 hi=7', () {
    expect(C.bisectLeft(-2, low: 9, high: 7), 9);
    expect(C.bisectLeft(-1, low: 9, high: 7), 9);
    expect(C.bisectLeft(0, low: 9, high: 7), 9);
    expect(C.bisectLeft(1, low: 9, high: 7), 9);
    expect(C.bisectLeft(2, low: 9, high: 7), 9);
    expect(C.bisectLeft(3, low: 9, high: 7), 9);
    expect(C.bisectLeft(4, low: 9, high: 7), 9);
    expect(C.bisectLeft(5, low: 9, high: 7), 9);
    expect(C.bisectLeft(6, low: 9, high: 7), 9);
    expect(C.bisectLeft(7, low: 9, high: 7), 9);
    expect(C.bisectLeft(8, low: 9, high: 7), 9);
  });

  test('list.bisectLeft for D lo=9 hi=7', () {
    expect(D.bisectLeft(-2, low: 9, high: 7), 9);
    expect(D.bisectLeft(-1, low: 9, high: 7), 9);
    expect(D.bisectLeft(0, low: 9, high: 7), 9);
    expect(D.bisectLeft(1, low: 9, high: 7), 9);
    expect(D.bisectLeft(2, low: 9, high: 7), 9);
    expect(D.bisectLeft(3, low: 9, high: 7), 9);
    expect(D.bisectLeft(4, low: 9, high: 7), 9);
    expect(D.bisectLeft(5, low: 9, high: 7), 9);
    expect(D.bisectLeft(6, low: 9, high: 7), 9);
    expect(D.bisectLeft(7, low: 9, high: 7), 9);
    expect(D.bisectLeft(8, low: 9, high: 7), 9);
  });

  test('list.bisectLeft for E lo=9 hi=7', () {
    expect(E.bisectLeft(-2, low: 9, high: 7), 9);
    expect(E.bisectLeft(-1, low: 9, high: 7), 9);
    expect(E.bisectLeft(0, low: 9, high: 7), 9);
    expect(E.bisectLeft(1, low: 9, high: 7), 9);
    expect(E.bisectLeft(2, low: 9, high: 7), 9);
    expect(E.bisectLeft(3, low: 9, high: 7), 9);
    expect(E.bisectLeft(4, low: 9, high: 7), 9);
    expect(E.bisectLeft(5, low: 9, high: 7), 9);
    expect(E.bisectLeft(6, low: 9, high: 7), 9);
    expect(E.bisectLeft(7, low: 9, high: 7), 9);
    expect(E.bisectLeft(8, low: 9, high: 7), 9);
  });

  test('list.bisectLeft for A lo=None hi=8', () {
    expect(() => A.bisectLeft(-2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=8', () {
    expect(() => B.bisectLeft(-2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=8', () {
    expect(() => C.bisectLeft(-2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=None hi=8', () {
    expect(() => D.bisectLeft(-2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=None hi=8', () {
    expect(E.bisectLeft(-2, high: 8), 0);
    expect(E.bisectLeft(-1, high: 8), 0);
    expect(E.bisectLeft(0, high: 8), 0);
    expect(E.bisectLeft(1, high: 8), 1);
    expect(E.bisectLeft(2, high: 8), 2);
    expect(E.bisectLeft(3, high: 8), 6);
    expect(E.bisectLeft(4, high: 8), 8);
    expect(E.bisectLeft(5, high: 8), 8);
    expect(E.bisectLeft(6, high: 8), 8);
    expect(E.bisectLeft(7, high: 8), 8);
    expect(E.bisectLeft(8, high: 8), 8);
  });

  test('list.bisectLeft for A lo=0 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=0 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=0 hi=8', () {
    expect(E.bisectLeft(-2, low: 0, high: 8), 0);
    expect(E.bisectLeft(-1, low: 0, high: 8), 0);
    expect(E.bisectLeft(0, low: 0, high: 8), 0);
    expect(E.bisectLeft(1, low: 0, high: 8), 1);
    expect(E.bisectLeft(2, low: 0, high: 8), 2);
    expect(E.bisectLeft(3, low: 0, high: 8), 6);
    expect(E.bisectLeft(4, low: 0, high: 8), 8);
    expect(E.bisectLeft(5, low: 0, high: 8), 8);
    expect(E.bisectLeft(6, low: 0, high: 8), 8);
    expect(E.bisectLeft(7, low: 0, high: 8), 8);
    expect(E.bisectLeft(8, low: 0, high: 8), 8);
  });

  test('list.bisectLeft for A lo=1 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=1 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=1 hi=8', () {
    expect(E.bisectLeft(-2, low: 1, high: 8), 1);
    expect(E.bisectLeft(-1, low: 1, high: 8), 1);
    expect(E.bisectLeft(0, low: 1, high: 8), 1);
    expect(E.bisectLeft(1, low: 1, high: 8), 1);
    expect(E.bisectLeft(2, low: 1, high: 8), 2);
    expect(E.bisectLeft(3, low: 1, high: 8), 6);
    expect(E.bisectLeft(4, low: 1, high: 8), 8);
    expect(E.bisectLeft(5, low: 1, high: 8), 8);
    expect(E.bisectLeft(6, low: 1, high: 8), 8);
    expect(E.bisectLeft(7, low: 1, high: 8), 8);
    expect(E.bisectLeft(8, low: 1, high: 8), 8);
  });

  test('list.bisectLeft for A lo=2 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=2 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=2 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=2 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=2 hi=8', () {
    expect(E.bisectLeft(-2, low: 2, high: 8), 2);
    expect(E.bisectLeft(-1, low: 2, high: 8), 2);
    expect(E.bisectLeft(0, low: 2, high: 8), 2);
    expect(E.bisectLeft(1, low: 2, high: 8), 2);
    expect(E.bisectLeft(2, low: 2, high: 8), 2);
    expect(E.bisectLeft(3, low: 2, high: 8), 6);
    expect(E.bisectLeft(4, low: 2, high: 8), 8);
    expect(E.bisectLeft(5, low: 2, high: 8), 8);
    expect(E.bisectLeft(6, low: 2, high: 8), 8);
    expect(E.bisectLeft(7, low: 2, high: 8), 8);
    expect(E.bisectLeft(8, low: 2, high: 8), 8);
  });

  test('list.bisectLeft for A lo=3 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=3 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=3 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=3 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=3 hi=8', () {
    expect(E.bisectLeft(-2, low: 3, high: 8), 3);
    expect(E.bisectLeft(-1, low: 3, high: 8), 3);
    expect(E.bisectLeft(0, low: 3, high: 8), 3);
    expect(E.bisectLeft(1, low: 3, high: 8), 3);
    expect(E.bisectLeft(2, low: 3, high: 8), 3);
    expect(E.bisectLeft(3, low: 3, high: 8), 6);
    expect(E.bisectLeft(4, low: 3, high: 8), 8);
    expect(E.bisectLeft(5, low: 3, high: 8), 8);
    expect(E.bisectLeft(6, low: 3, high: 8), 8);
    expect(E.bisectLeft(7, low: 3, high: 8), 8);
    expect(E.bisectLeft(8, low: 3, high: 8), 8);
  });

  test('list.bisectLeft for A lo=4 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=4 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=4 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=4 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=4 hi=8', () {
    expect(E.bisectLeft(-2, low: 4, high: 8), 4);
    expect(E.bisectLeft(-1, low: 4, high: 8), 4);
    expect(E.bisectLeft(0, low: 4, high: 8), 4);
    expect(E.bisectLeft(1, low: 4, high: 8), 4);
    expect(E.bisectLeft(2, low: 4, high: 8), 4);
    expect(E.bisectLeft(3, low: 4, high: 8), 6);
    expect(E.bisectLeft(4, low: 4, high: 8), 8);
    expect(E.bisectLeft(5, low: 4, high: 8), 8);
    expect(E.bisectLeft(6, low: 4, high: 8), 8);
    expect(E.bisectLeft(7, low: 4, high: 8), 8);
    expect(E.bisectLeft(8, low: 4, high: 8), 8);
  });

  test('list.bisectLeft for A lo=5 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=5 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=5 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=5 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=5 hi=8', () {
    expect(E.bisectLeft(-2, low: 5, high: 8), 5);
    expect(E.bisectLeft(-1, low: 5, high: 8), 5);
    expect(E.bisectLeft(0, low: 5, high: 8), 5);
    expect(E.bisectLeft(1, low: 5, high: 8), 5);
    expect(E.bisectLeft(2, low: 5, high: 8), 5);
    expect(E.bisectLeft(3, low: 5, high: 8), 6);
    expect(E.bisectLeft(4, low: 5, high: 8), 8);
    expect(E.bisectLeft(5, low: 5, high: 8), 8);
    expect(E.bisectLeft(6, low: 5, high: 8), 8);
    expect(E.bisectLeft(7, low: 5, high: 8), 8);
    expect(E.bisectLeft(8, low: 5, high: 8), 8);
  });

  test('list.bisectLeft for A lo=6 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=6 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=6 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=6 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=6 hi=8', () {
    expect(E.bisectLeft(-2, low: 6, high: 8), 6);
    expect(E.bisectLeft(-1, low: 6, high: 8), 6);
    expect(E.bisectLeft(0, low: 6, high: 8), 6);
    expect(E.bisectLeft(1, low: 6, high: 8), 6);
    expect(E.bisectLeft(2, low: 6, high: 8), 6);
    expect(E.bisectLeft(3, low: 6, high: 8), 6);
    expect(E.bisectLeft(4, low: 6, high: 8), 8);
    expect(E.bisectLeft(5, low: 6, high: 8), 8);
    expect(E.bisectLeft(6, low: 6, high: 8), 8);
    expect(E.bisectLeft(7, low: 6, high: 8), 8);
    expect(E.bisectLeft(8, low: 6, high: 8), 8);
  });

  test('list.bisectLeft for A lo=7 hi=8', () {
    expect(() => A.bisectLeft(-2, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for B lo=7 hi=8', () {
    expect(() => B.bisectLeft(-2, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for C lo=7 hi=8', () {
    expect(() => C.bisectLeft(-2, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for D lo=7 hi=8', () {
    expect(() => D.bisectLeft(-2, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectLeft for E lo=7 hi=8', () {
    expect(E.bisectLeft(-2, low: 7, high: 8), 7);
    expect(E.bisectLeft(-1, low: 7, high: 8), 7);
    expect(E.bisectLeft(0, low: 7, high: 8), 7);
    expect(E.bisectLeft(1, low: 7, high: 8), 7);
    expect(E.bisectLeft(2, low: 7, high: 8), 7);
    expect(E.bisectLeft(3, low: 7, high: 8), 7);
    expect(E.bisectLeft(4, low: 7, high: 8), 8);
    expect(E.bisectLeft(5, low: 7, high: 8), 8);
    expect(E.bisectLeft(6, low: 7, high: 8), 8);
    expect(E.bisectLeft(7, low: 7, high: 8), 8);
    expect(E.bisectLeft(8, low: 7, high: 8), 8);
  });

  test('list.bisectLeft for A lo=8 hi=8', () {
    expect(A.bisectLeft(-2, low: 8, high: 8), 8);
    expect(A.bisectLeft(-1, low: 8, high: 8), 8);
    expect(A.bisectLeft(0, low: 8, high: 8), 8);
    expect(A.bisectLeft(1, low: 8, high: 8), 8);
    expect(A.bisectLeft(2, low: 8, high: 8), 8);
    expect(A.bisectLeft(3, low: 8, high: 8), 8);
    expect(A.bisectLeft(4, low: 8, high: 8), 8);
    expect(A.bisectLeft(5, low: 8, high: 8), 8);
    expect(A.bisectLeft(6, low: 8, high: 8), 8);
    expect(A.bisectLeft(7, low: 8, high: 8), 8);
    expect(A.bisectLeft(8, low: 8, high: 8), 8);
  });

  test('list.bisectLeft for B lo=8 hi=8', () {
    expect(B.bisectLeft(-2, low: 8, high: 8), 8);
    expect(B.bisectLeft(-1, low: 8, high: 8), 8);
    expect(B.bisectLeft(0, low: 8, high: 8), 8);
    expect(B.bisectLeft(1, low: 8, high: 8), 8);
    expect(B.bisectLeft(2, low: 8, high: 8), 8);
    expect(B.bisectLeft(3, low: 8, high: 8), 8);
    expect(B.bisectLeft(4, low: 8, high: 8), 8);
    expect(B.bisectLeft(5, low: 8, high: 8), 8);
    expect(B.bisectLeft(6, low: 8, high: 8), 8);
    expect(B.bisectLeft(7, low: 8, high: 8), 8);
    expect(B.bisectLeft(8, low: 8, high: 8), 8);
  });

  test('list.bisectLeft for C lo=8 hi=8', () {
    expect(C.bisectLeft(-2, low: 8, high: 8), 8);
    expect(C.bisectLeft(-1, low: 8, high: 8), 8);
    expect(C.bisectLeft(0, low: 8, high: 8), 8);
    expect(C.bisectLeft(1, low: 8, high: 8), 8);
    expect(C.bisectLeft(2, low: 8, high: 8), 8);
    expect(C.bisectLeft(3, low: 8, high: 8), 8);
    expect(C.bisectLeft(4, low: 8, high: 8), 8);
    expect(C.bisectLeft(5, low: 8, high: 8), 8);
    expect(C.bisectLeft(6, low: 8, high: 8), 8);
    expect(C.bisectLeft(7, low: 8, high: 8), 8);
    expect(C.bisectLeft(8, low: 8, high: 8), 8);
  });

  test('list.bisectLeft for D lo=8 hi=8', () {
    expect(D.bisectLeft(-2, low: 8, high: 8), 8);
    expect(D.bisectLeft(-1, low: 8, high: 8), 8);
    expect(D.bisectLeft(0, low: 8, high: 8), 8);
    expect(D.bisectLeft(1, low: 8, high: 8), 8);
    expect(D.bisectLeft(2, low: 8, high: 8), 8);
    expect(D.bisectLeft(3, low: 8, high: 8), 8);
    expect(D.bisectLeft(4, low: 8, high: 8), 8);
    expect(D.bisectLeft(5, low: 8, high: 8), 8);
    expect(D.bisectLeft(6, low: 8, high: 8), 8);
    expect(D.bisectLeft(7, low: 8, high: 8), 8);
    expect(D.bisectLeft(8, low: 8, high: 8), 8);
  });

  test('list.bisectLeft for E lo=8 hi=8', () {
    expect(E.bisectLeft(-2, low: 8, high: 8), 8);
    expect(E.bisectLeft(-1, low: 8, high: 8), 8);
    expect(E.bisectLeft(0, low: 8, high: 8), 8);
    expect(E.bisectLeft(1, low: 8, high: 8), 8);
    expect(E.bisectLeft(2, low: 8, high: 8), 8);
    expect(E.bisectLeft(3, low: 8, high: 8), 8);
    expect(E.bisectLeft(4, low: 8, high: 8), 8);
    expect(E.bisectLeft(5, low: 8, high: 8), 8);
    expect(E.bisectLeft(6, low: 8, high: 8), 8);
    expect(E.bisectLeft(7, low: 8, high: 8), 8);
    expect(E.bisectLeft(8, low: 8, high: 8), 8);
  });

  test('list.bisectLeft for A lo=9 hi=8', () {
    expect(A.bisectLeft(-2, low: 9, high: 8), 9);
    expect(A.bisectLeft(-1, low: 9, high: 8), 9);
    expect(A.bisectLeft(0, low: 9, high: 8), 9);
    expect(A.bisectLeft(1, low: 9, high: 8), 9);
    expect(A.bisectLeft(2, low: 9, high: 8), 9);
    expect(A.bisectLeft(3, low: 9, high: 8), 9);
    expect(A.bisectLeft(4, low: 9, high: 8), 9);
    expect(A.bisectLeft(5, low: 9, high: 8), 9);
    expect(A.bisectLeft(6, low: 9, high: 8), 9);
    expect(A.bisectLeft(7, low: 9, high: 8), 9);
    expect(A.bisectLeft(8, low: 9, high: 8), 9);
  });

  test('list.bisectLeft for B lo=9 hi=8', () {
    expect(B.bisectLeft(-2, low: 9, high: 8), 9);
    expect(B.bisectLeft(-1, low: 9, high: 8), 9);
    expect(B.bisectLeft(0, low: 9, high: 8), 9);
    expect(B.bisectLeft(1, low: 9, high: 8), 9);
    expect(B.bisectLeft(2, low: 9, high: 8), 9);
    expect(B.bisectLeft(3, low: 9, high: 8), 9);
    expect(B.bisectLeft(4, low: 9, high: 8), 9);
    expect(B.bisectLeft(5, low: 9, high: 8), 9);
    expect(B.bisectLeft(6, low: 9, high: 8), 9);
    expect(B.bisectLeft(7, low: 9, high: 8), 9);
    expect(B.bisectLeft(8, low: 9, high: 8), 9);
  });

  test('list.bisectLeft for C lo=9 hi=8', () {
    expect(C.bisectLeft(-2, low: 9, high: 8), 9);
    expect(C.bisectLeft(-1, low: 9, high: 8), 9);
    expect(C.bisectLeft(0, low: 9, high: 8), 9);
    expect(C.bisectLeft(1, low: 9, high: 8), 9);
    expect(C.bisectLeft(2, low: 9, high: 8), 9);
    expect(C.bisectLeft(3, low: 9, high: 8), 9);
    expect(C.bisectLeft(4, low: 9, high: 8), 9);
    expect(C.bisectLeft(5, low: 9, high: 8), 9);
    expect(C.bisectLeft(6, low: 9, high: 8), 9);
    expect(C.bisectLeft(7, low: 9, high: 8), 9);
    expect(C.bisectLeft(8, low: 9, high: 8), 9);
  });

  test('list.bisectLeft for D lo=9 hi=8', () {
    expect(D.bisectLeft(-2, low: 9, high: 8), 9);
    expect(D.bisectLeft(-1, low: 9, high: 8), 9);
    expect(D.bisectLeft(0, low: 9, high: 8), 9);
    expect(D.bisectLeft(1, low: 9, high: 8), 9);
    expect(D.bisectLeft(2, low: 9, high: 8), 9);
    expect(D.bisectLeft(3, low: 9, high: 8), 9);
    expect(D.bisectLeft(4, low: 9, high: 8), 9);
    expect(D.bisectLeft(5, low: 9, high: 8), 9);
    expect(D.bisectLeft(6, low: 9, high: 8), 9);
    expect(D.bisectLeft(7, low: 9, high: 8), 9);
    expect(D.bisectLeft(8, low: 9, high: 8), 9);
  });

  test('list.bisectLeft for E lo=9 hi=8', () {
    expect(E.bisectLeft(-2, low: 9, high: 8), 9);
    expect(E.bisectLeft(-1, low: 9, high: 8), 9);
    expect(E.bisectLeft(0, low: 9, high: 8), 9);
    expect(E.bisectLeft(1, low: 9, high: 8), 9);
    expect(E.bisectLeft(2, low: 9, high: 8), 9);
    expect(E.bisectLeft(3, low: 9, high: 8), 9);
    expect(E.bisectLeft(4, low: 9, high: 8), 9);
    expect(E.bisectLeft(5, low: 9, high: 8), 9);
    expect(E.bisectLeft(6, low: 9, high: 8), 9);
    expect(E.bisectLeft(7, low: 9, high: 8), 9);
    expect(E.bisectLeft(8, low: 9, high: 8), 9);
  });

  test('list.bisectLeft for A lo=None hi=9', () {
    expect(() => A.bisectLeft(-2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=None hi=9', () {
    expect(() => B.bisectLeft(-2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=None hi=9', () {
    expect(() => C.bisectLeft(-2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=None hi=9', () {
    expect(() => D.bisectLeft(-2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=None hi=9', () {
    expect(E.bisectLeft(-2, high: 9), 0);
    expect(E.bisectLeft(-1, high: 9), 0);
    expect(E.bisectLeft(0, high: 9), 0);
    expect(E.bisectLeft(1, high: 9), 1);
    expect(E.bisectLeft(2, high: 9), 2);
    expect(E.bisectLeft(3, high: 9), 6);
    expect(E.bisectLeft(4, high: 9), 8);
    expect(E.bisectLeft(5, high: 9), 8);
    expect(E.bisectLeft(6, high: 9), 9);
    expect(E.bisectLeft(7, high: 9), 9);
    expect(E.bisectLeft(8, high: 9), 9);
  });

  test('list.bisectLeft for A lo=0 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=0 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=0 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=0 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=0 hi=9', () {
    expect(E.bisectLeft(-2, low: 0, high: 9), 0);
    expect(E.bisectLeft(-1, low: 0, high: 9), 0);
    expect(E.bisectLeft(0, low: 0, high: 9), 0);
    expect(E.bisectLeft(1, low: 0, high: 9), 1);
    expect(E.bisectLeft(2, low: 0, high: 9), 2);
    expect(E.bisectLeft(3, low: 0, high: 9), 6);
    expect(E.bisectLeft(4, low: 0, high: 9), 8);
    expect(E.bisectLeft(5, low: 0, high: 9), 8);
    expect(E.bisectLeft(6, low: 0, high: 9), 9);
    expect(E.bisectLeft(7, low: 0, high: 9), 9);
    expect(E.bisectLeft(8, low: 0, high: 9), 9);
  });

  test('list.bisectLeft for A lo=1 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=1 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=1 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=1 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=1 hi=9', () {
    expect(E.bisectLeft(-2, low: 1, high: 9), 1);
    expect(E.bisectLeft(-1, low: 1, high: 9), 1);
    expect(E.bisectLeft(0, low: 1, high: 9), 1);
    expect(E.bisectLeft(1, low: 1, high: 9), 1);
    expect(E.bisectLeft(2, low: 1, high: 9), 2);
    expect(E.bisectLeft(3, low: 1, high: 9), 6);
    expect(E.bisectLeft(4, low: 1, high: 9), 8);
    expect(E.bisectLeft(5, low: 1, high: 9), 8);
    expect(E.bisectLeft(6, low: 1, high: 9), 9);
    expect(E.bisectLeft(7, low: 1, high: 9), 9);
    expect(E.bisectLeft(8, low: 1, high: 9), 9);
  });

  test('list.bisectLeft for A lo=2 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=2 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=2 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=2 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=2 hi=9', () {
    expect(E.bisectLeft(-2, low: 2, high: 9), 2);
    expect(E.bisectLeft(-1, low: 2, high: 9), 2);
    expect(E.bisectLeft(0, low: 2, high: 9), 2);
    expect(E.bisectLeft(1, low: 2, high: 9), 2);
    expect(E.bisectLeft(2, low: 2, high: 9), 2);
    expect(E.bisectLeft(3, low: 2, high: 9), 6);
    expect(E.bisectLeft(4, low: 2, high: 9), 8);
    expect(E.bisectLeft(5, low: 2, high: 9), 8);
    expect(E.bisectLeft(6, low: 2, high: 9), 9);
    expect(E.bisectLeft(7, low: 2, high: 9), 9);
    expect(E.bisectLeft(8, low: 2, high: 9), 9);
  });

  test('list.bisectLeft for A lo=3 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=3 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=3 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=3 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=3 hi=9', () {
    expect(E.bisectLeft(-2, low: 3, high: 9), 3);
    expect(E.bisectLeft(-1, low: 3, high: 9), 3);
    expect(E.bisectLeft(0, low: 3, high: 9), 3);
    expect(E.bisectLeft(1, low: 3, high: 9), 3);
    expect(E.bisectLeft(2, low: 3, high: 9), 3);
    expect(E.bisectLeft(3, low: 3, high: 9), 6);
    expect(E.bisectLeft(4, low: 3, high: 9), 8);
    expect(E.bisectLeft(5, low: 3, high: 9), 8);
    expect(E.bisectLeft(6, low: 3, high: 9), 9);
    expect(E.bisectLeft(7, low: 3, high: 9), 9);
    expect(E.bisectLeft(8, low: 3, high: 9), 9);
  });

  test('list.bisectLeft for A lo=4 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=4 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=4 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=4 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=4 hi=9', () {
    expect(E.bisectLeft(-2, low: 4, high: 9), 4);
    expect(E.bisectLeft(-1, low: 4, high: 9), 4);
    expect(E.bisectLeft(0, low: 4, high: 9), 4);
    expect(E.bisectLeft(1, low: 4, high: 9), 4);
    expect(E.bisectLeft(2, low: 4, high: 9), 4);
    expect(E.bisectLeft(3, low: 4, high: 9), 6);
    expect(E.bisectLeft(4, low: 4, high: 9), 8);
    expect(E.bisectLeft(5, low: 4, high: 9), 8);
    expect(E.bisectLeft(6, low: 4, high: 9), 9);
    expect(E.bisectLeft(7, low: 4, high: 9), 9);
    expect(E.bisectLeft(8, low: 4, high: 9), 9);
  });

  test('list.bisectLeft for A lo=5 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=5 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=5 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=5 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=5 hi=9', () {
    expect(E.bisectLeft(-2, low: 5, high: 9), 5);
    expect(E.bisectLeft(-1, low: 5, high: 9), 5);
    expect(E.bisectLeft(0, low: 5, high: 9), 5);
    expect(E.bisectLeft(1, low: 5, high: 9), 5);
    expect(E.bisectLeft(2, low: 5, high: 9), 5);
    expect(E.bisectLeft(3, low: 5, high: 9), 6);
    expect(E.bisectLeft(4, low: 5, high: 9), 8);
    expect(E.bisectLeft(5, low: 5, high: 9), 8);
    expect(E.bisectLeft(6, low: 5, high: 9), 9);
    expect(E.bisectLeft(7, low: 5, high: 9), 9);
    expect(E.bisectLeft(8, low: 5, high: 9), 9);
  });

  test('list.bisectLeft for A lo=6 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=6 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=6 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=6 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=6 hi=9', () {
    expect(E.bisectLeft(-2, low: 6, high: 9), 6);
    expect(E.bisectLeft(-1, low: 6, high: 9), 6);
    expect(E.bisectLeft(0, low: 6, high: 9), 6);
    expect(E.bisectLeft(1, low: 6, high: 9), 6);
    expect(E.bisectLeft(2, low: 6, high: 9), 6);
    expect(E.bisectLeft(3, low: 6, high: 9), 6);
    expect(E.bisectLeft(4, low: 6, high: 9), 8);
    expect(E.bisectLeft(5, low: 6, high: 9), 8);
    expect(E.bisectLeft(6, low: 6, high: 9), 9);
    expect(E.bisectLeft(7, low: 6, high: 9), 9);
    expect(E.bisectLeft(8, low: 6, high: 9), 9);
  });

  test('list.bisectLeft for A lo=7 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=7 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=7 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=7 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=7 hi=9', () {
    expect(E.bisectLeft(-2, low: 7, high: 9), 7);
    expect(E.bisectLeft(-1, low: 7, high: 9), 7);
    expect(E.bisectLeft(0, low: 7, high: 9), 7);
    expect(E.bisectLeft(1, low: 7, high: 9), 7);
    expect(E.bisectLeft(2, low: 7, high: 9), 7);
    expect(E.bisectLeft(3, low: 7, high: 9), 7);
    expect(E.bisectLeft(4, low: 7, high: 9), 8);
    expect(E.bisectLeft(5, low: 7, high: 9), 8);
    expect(E.bisectLeft(6, low: 7, high: 9), 9);
    expect(E.bisectLeft(7, low: 7, high: 9), 9);
    expect(E.bisectLeft(8, low: 7, high: 9), 9);
  });

  test('list.bisectLeft for A lo=8 hi=9', () {
    expect(() => A.bisectLeft(-2, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(-1, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(0, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(1, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(2, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(3, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(4, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(5, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(6, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(7, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectLeft(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for B lo=8 hi=9', () {
    expect(() => B.bisectLeft(-2, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(-1, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(0, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(1, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(2, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(3, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(4, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(5, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(6, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(7, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectLeft(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for C lo=8 hi=9', () {
    expect(() => C.bisectLeft(-2, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(-1, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(0, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(1, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(2, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(3, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(4, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(5, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(6, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(7, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectLeft(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for D lo=8 hi=9', () {
    expect(() => D.bisectLeft(-2, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(-1, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(0, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(1, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(2, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(3, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(4, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(5, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(6, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(7, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectLeft(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectLeft for E lo=8 hi=9', () {
    expect(E.bisectLeft(-2, low: 8, high: 9), 8);
    expect(E.bisectLeft(-1, low: 8, high: 9), 8);
    expect(E.bisectLeft(0, low: 8, high: 9), 8);
    expect(E.bisectLeft(1, low: 8, high: 9), 8);
    expect(E.bisectLeft(2, low: 8, high: 9), 8);
    expect(E.bisectLeft(3, low: 8, high: 9), 8);
    expect(E.bisectLeft(4, low: 8, high: 9), 8);
    expect(E.bisectLeft(5, low: 8, high: 9), 8);
    expect(E.bisectLeft(6, low: 8, high: 9), 9);
    expect(E.bisectLeft(7, low: 8, high: 9), 9);
    expect(E.bisectLeft(8, low: 8, high: 9), 9);
  });

  test('list.bisectLeft for A lo=9 hi=9', () {
    expect(A.bisectLeft(-2, low: 9, high: 9), 9);
    expect(A.bisectLeft(-1, low: 9, high: 9), 9);
    expect(A.bisectLeft(0, low: 9, high: 9), 9);
    expect(A.bisectLeft(1, low: 9, high: 9), 9);
    expect(A.bisectLeft(2, low: 9, high: 9), 9);
    expect(A.bisectLeft(3, low: 9, high: 9), 9);
    expect(A.bisectLeft(4, low: 9, high: 9), 9);
    expect(A.bisectLeft(5, low: 9, high: 9), 9);
    expect(A.bisectLeft(6, low: 9, high: 9), 9);
    expect(A.bisectLeft(7, low: 9, high: 9), 9);
    expect(A.bisectLeft(8, low: 9, high: 9), 9);
  });

  test('list.bisectLeft for B lo=9 hi=9', () {
    expect(B.bisectLeft(-2, low: 9, high: 9), 9);
    expect(B.bisectLeft(-1, low: 9, high: 9), 9);
    expect(B.bisectLeft(0, low: 9, high: 9), 9);
    expect(B.bisectLeft(1, low: 9, high: 9), 9);
    expect(B.bisectLeft(2, low: 9, high: 9), 9);
    expect(B.bisectLeft(3, low: 9, high: 9), 9);
    expect(B.bisectLeft(4, low: 9, high: 9), 9);
    expect(B.bisectLeft(5, low: 9, high: 9), 9);
    expect(B.bisectLeft(6, low: 9, high: 9), 9);
    expect(B.bisectLeft(7, low: 9, high: 9), 9);
    expect(B.bisectLeft(8, low: 9, high: 9), 9);
  });

  test('list.bisectLeft for C lo=9 hi=9', () {
    expect(C.bisectLeft(-2, low: 9, high: 9), 9);
    expect(C.bisectLeft(-1, low: 9, high: 9), 9);
    expect(C.bisectLeft(0, low: 9, high: 9), 9);
    expect(C.bisectLeft(1, low: 9, high: 9), 9);
    expect(C.bisectLeft(2, low: 9, high: 9), 9);
    expect(C.bisectLeft(3, low: 9, high: 9), 9);
    expect(C.bisectLeft(4, low: 9, high: 9), 9);
    expect(C.bisectLeft(5, low: 9, high: 9), 9);
    expect(C.bisectLeft(6, low: 9, high: 9), 9);
    expect(C.bisectLeft(7, low: 9, high: 9), 9);
    expect(C.bisectLeft(8, low: 9, high: 9), 9);
  });

  test('list.bisectLeft for D lo=9 hi=9', () {
    expect(D.bisectLeft(-2, low: 9, high: 9), 9);
    expect(D.bisectLeft(-1, low: 9, high: 9), 9);
    expect(D.bisectLeft(0, low: 9, high: 9), 9);
    expect(D.bisectLeft(1, low: 9, high: 9), 9);
    expect(D.bisectLeft(2, low: 9, high: 9), 9);
    expect(D.bisectLeft(3, low: 9, high: 9), 9);
    expect(D.bisectLeft(4, low: 9, high: 9), 9);
    expect(D.bisectLeft(5, low: 9, high: 9), 9);
    expect(D.bisectLeft(6, low: 9, high: 9), 9);
    expect(D.bisectLeft(7, low: 9, high: 9), 9);
    expect(D.bisectLeft(8, low: 9, high: 9), 9);
  });

  test('list.bisectLeft for E lo=9 hi=9', () {
    expect(E.bisectLeft(-2, low: 9, high: 9), 9);
    expect(E.bisectLeft(-1, low: 9, high: 9), 9);
    expect(E.bisectLeft(0, low: 9, high: 9), 9);
    expect(E.bisectLeft(1, low: 9, high: 9), 9);
    expect(E.bisectLeft(2, low: 9, high: 9), 9);
    expect(E.bisectLeft(3, low: 9, high: 9), 9);
    expect(E.bisectLeft(4, low: 9, high: 9), 9);
    expect(E.bisectLeft(5, low: 9, high: 9), 9);
    expect(E.bisectLeft(6, low: 9, high: 9), 9);
    expect(E.bisectLeft(7, low: 9, high: 9), 9);
    expect(E.bisectLeft(8, low: 9, high: 9), 9);
  });

  test('bisect_right for A lo=None hi=None', () {
    expect(bisect_right(A, -2), 0);
    expect(bisect_right(A, -1), 0);
    expect(bisect_right(A, 0), 0);
    expect(bisect_right(A, 1), 0);
    expect(bisect_right(A, 2), 0);
    expect(bisect_right(A, 3), 0);
    expect(bisect_right(A, 4), 0);
    expect(bisect_right(A, 5), 0);
    expect(bisect_right(A, 6), 0);
    expect(bisect_right(A, 7), 0);
    expect(bisect_right(A, 8), 0);
  });

  test('bisect_right for B lo=None hi=None', () {
    expect(bisect_right(B, -2), 0);
    expect(bisect_right(B, -1), 0);
    expect(bisect_right(B, 0), 0);
    expect(bisect_right(B, 1), 0);
    expect(bisect_right(B, 2), 0);
    expect(bisect_right(B, 3), 0);
    expect(bisect_right(B, 4), 1);
    expect(bisect_right(B, 5), 1);
    expect(bisect_right(B, 6), 1);
    expect(bisect_right(B, 7), 1);
    expect(bisect_right(B, 8), 1);
  });

  test('bisect_right for C lo=None hi=None', () {
    expect(bisect_right(C, -2), 0);
    expect(bisect_right(C, -1), 0);
    expect(bisect_right(C, 0), 0);
    expect(bisect_right(C, 1), 0);
    expect(bisect_right(C, 2), 0);
    expect(bisect_right(C, 3), 0);
    expect(bisect_right(C, 4), 1);
    expect(bisect_right(C, 5), 2);
    expect(bisect_right(C, 6), 2);
    expect(bisect_right(C, 7), 2);
    expect(bisect_right(C, 8), 2);
  });

  test('bisect_right for D lo=None hi=None', () {
    expect(bisect_right(D, -2), 0);
    expect(bisect_right(D, -1), 0);
    expect(bisect_right(D, 0), 0);
    expect(bisect_right(D, 1), 0);
    expect(bisect_right(D, 2), 0);
    expect(bisect_right(D, 3), 1);
    expect(bisect_right(D, 4), 2);
    expect(bisect_right(D, 5), 3);
    expect(bisect_right(D, 6), 3);
    expect(bisect_right(D, 7), 3);
    expect(bisect_right(D, 8), 3);
  });

  test('bisect_right for E lo=None hi=None', () {
    expect(bisect_right(E, -2), 0);
    expect(bisect_right(E, -1), 0);
    expect(bisect_right(E, 0), 1);
    expect(bisect_right(E, 1), 2);
    expect(bisect_right(E, 2), 6);
    expect(bisect_right(E, 3), 8);
    expect(bisect_right(E, 4), 8);
    expect(bisect_right(E, 5), 9);
    expect(bisect_right(E, 6), 10);
    expect(bisect_right(E, 7), 10);
    expect(bisect_right(E, 8), 10);
  });

  test('bisect_right for A lo=0 hi=None', () {
    expect(bisect_right(A, -2, lo: 0), 0);
    expect(bisect_right(A, -1, lo: 0), 0);
    expect(bisect_right(A, 0, lo: 0), 0);
    expect(bisect_right(A, 1, lo: 0), 0);
    expect(bisect_right(A, 2, lo: 0), 0);
    expect(bisect_right(A, 3, lo: 0), 0);
    expect(bisect_right(A, 4, lo: 0), 0);
    expect(bisect_right(A, 5, lo: 0), 0);
    expect(bisect_right(A, 6, lo: 0), 0);
    expect(bisect_right(A, 7, lo: 0), 0);
    expect(bisect_right(A, 8, lo: 0), 0);
  });

  test('bisect_right for B lo=0 hi=None', () {
    expect(bisect_right(B, -2, lo: 0), 0);
    expect(bisect_right(B, -1, lo: 0), 0);
    expect(bisect_right(B, 0, lo: 0), 0);
    expect(bisect_right(B, 1, lo: 0), 0);
    expect(bisect_right(B, 2, lo: 0), 0);
    expect(bisect_right(B, 3, lo: 0), 0);
    expect(bisect_right(B, 4, lo: 0), 1);
    expect(bisect_right(B, 5, lo: 0), 1);
    expect(bisect_right(B, 6, lo: 0), 1);
    expect(bisect_right(B, 7, lo: 0), 1);
    expect(bisect_right(B, 8, lo: 0), 1);
  });

  test('bisect_right for C lo=0 hi=None', () {
    expect(bisect_right(C, -2, lo: 0), 0);
    expect(bisect_right(C, -1, lo: 0), 0);
    expect(bisect_right(C, 0, lo: 0), 0);
    expect(bisect_right(C, 1, lo: 0), 0);
    expect(bisect_right(C, 2, lo: 0), 0);
    expect(bisect_right(C, 3, lo: 0), 0);
    expect(bisect_right(C, 4, lo: 0), 1);
    expect(bisect_right(C, 5, lo: 0), 2);
    expect(bisect_right(C, 6, lo: 0), 2);
    expect(bisect_right(C, 7, lo: 0), 2);
    expect(bisect_right(C, 8, lo: 0), 2);
  });

  test('bisect_right for D lo=0 hi=None', () {
    expect(bisect_right(D, -2, lo: 0), 0);
    expect(bisect_right(D, -1, lo: 0), 0);
    expect(bisect_right(D, 0, lo: 0), 0);
    expect(bisect_right(D, 1, lo: 0), 0);
    expect(bisect_right(D, 2, lo: 0), 0);
    expect(bisect_right(D, 3, lo: 0), 1);
    expect(bisect_right(D, 4, lo: 0), 2);
    expect(bisect_right(D, 5, lo: 0), 3);
    expect(bisect_right(D, 6, lo: 0), 3);
    expect(bisect_right(D, 7, lo: 0), 3);
    expect(bisect_right(D, 8, lo: 0), 3);
  });

  test('bisect_right for E lo=0 hi=None', () {
    expect(bisect_right(E, -2, lo: 0), 0);
    expect(bisect_right(E, -1, lo: 0), 0);
    expect(bisect_right(E, 0, lo: 0), 1);
    expect(bisect_right(E, 1, lo: 0), 2);
    expect(bisect_right(E, 2, lo: 0), 6);
    expect(bisect_right(E, 3, lo: 0), 8);
    expect(bisect_right(E, 4, lo: 0), 8);
    expect(bisect_right(E, 5, lo: 0), 9);
    expect(bisect_right(E, 6, lo: 0), 10);
    expect(bisect_right(E, 7, lo: 0), 10);
    expect(bisect_right(E, 8, lo: 0), 10);
  });

  test('bisect_right for A lo=1 hi=None', () {
    expect(bisect_right(A, -2, lo: 1), 1);
    expect(bisect_right(A, -1, lo: 1), 1);
    expect(bisect_right(A, 0, lo: 1), 1);
    expect(bisect_right(A, 1, lo: 1), 1);
    expect(bisect_right(A, 2, lo: 1), 1);
    expect(bisect_right(A, 3, lo: 1), 1);
    expect(bisect_right(A, 4, lo: 1), 1);
    expect(bisect_right(A, 5, lo: 1), 1);
    expect(bisect_right(A, 6, lo: 1), 1);
    expect(bisect_right(A, 7, lo: 1), 1);
    expect(bisect_right(A, 8, lo: 1), 1);
  });

  test('bisect_right for B lo=1 hi=None', () {
    expect(bisect_right(B, -2, lo: 1), 1);
    expect(bisect_right(B, -1, lo: 1), 1);
    expect(bisect_right(B, 0, lo: 1), 1);
    expect(bisect_right(B, 1, lo: 1), 1);
    expect(bisect_right(B, 2, lo: 1), 1);
    expect(bisect_right(B, 3, lo: 1), 1);
    expect(bisect_right(B, 4, lo: 1), 1);
    expect(bisect_right(B, 5, lo: 1), 1);
    expect(bisect_right(B, 6, lo: 1), 1);
    expect(bisect_right(B, 7, lo: 1), 1);
    expect(bisect_right(B, 8, lo: 1), 1);
  });

  test('bisect_right for C lo=1 hi=None', () {
    expect(bisect_right(C, -2, lo: 1), 1);
    expect(bisect_right(C, -1, lo: 1), 1);
    expect(bisect_right(C, 0, lo: 1), 1);
    expect(bisect_right(C, 1, lo: 1), 1);
    expect(bisect_right(C, 2, lo: 1), 1);
    expect(bisect_right(C, 3, lo: 1), 1);
    expect(bisect_right(C, 4, lo: 1), 1);
    expect(bisect_right(C, 5, lo: 1), 2);
    expect(bisect_right(C, 6, lo: 1), 2);
    expect(bisect_right(C, 7, lo: 1), 2);
    expect(bisect_right(C, 8, lo: 1), 2);
  });

  test('bisect_right for D lo=1 hi=None', () {
    expect(bisect_right(D, -2, lo: 1), 1);
    expect(bisect_right(D, -1, lo: 1), 1);
    expect(bisect_right(D, 0, lo: 1), 1);
    expect(bisect_right(D, 1, lo: 1), 1);
    expect(bisect_right(D, 2, lo: 1), 1);
    expect(bisect_right(D, 3, lo: 1), 1);
    expect(bisect_right(D, 4, lo: 1), 2);
    expect(bisect_right(D, 5, lo: 1), 3);
    expect(bisect_right(D, 6, lo: 1), 3);
    expect(bisect_right(D, 7, lo: 1), 3);
    expect(bisect_right(D, 8, lo: 1), 3);
  });

  test('bisect_right for E lo=1 hi=None', () {
    expect(bisect_right(E, -2, lo: 1), 1);
    expect(bisect_right(E, -1, lo: 1), 1);
    expect(bisect_right(E, 0, lo: 1), 1);
    expect(bisect_right(E, 1, lo: 1), 2);
    expect(bisect_right(E, 2, lo: 1), 6);
    expect(bisect_right(E, 3, lo: 1), 8);
    expect(bisect_right(E, 4, lo: 1), 8);
    expect(bisect_right(E, 5, lo: 1), 9);
    expect(bisect_right(E, 6, lo: 1), 10);
    expect(bisect_right(E, 7, lo: 1), 10);
    expect(bisect_right(E, 8, lo: 1), 10);
  });

  test('bisect_right for A lo=2 hi=None', () {
    expect(bisect_right(A, -2, lo: 2), 2);
    expect(bisect_right(A, -1, lo: 2), 2);
    expect(bisect_right(A, 0, lo: 2), 2);
    expect(bisect_right(A, 1, lo: 2), 2);
    expect(bisect_right(A, 2, lo: 2), 2);
    expect(bisect_right(A, 3, lo: 2), 2);
    expect(bisect_right(A, 4, lo: 2), 2);
    expect(bisect_right(A, 5, lo: 2), 2);
    expect(bisect_right(A, 6, lo: 2), 2);
    expect(bisect_right(A, 7, lo: 2), 2);
    expect(bisect_right(A, 8, lo: 2), 2);
  });

  test('bisect_right for B lo=2 hi=None', () {
    expect(bisect_right(B, -2, lo: 2), 2);
    expect(bisect_right(B, -1, lo: 2), 2);
    expect(bisect_right(B, 0, lo: 2), 2);
    expect(bisect_right(B, 1, lo: 2), 2);
    expect(bisect_right(B, 2, lo: 2), 2);
    expect(bisect_right(B, 3, lo: 2), 2);
    expect(bisect_right(B, 4, lo: 2), 2);
    expect(bisect_right(B, 5, lo: 2), 2);
    expect(bisect_right(B, 6, lo: 2), 2);
    expect(bisect_right(B, 7, lo: 2), 2);
    expect(bisect_right(B, 8, lo: 2), 2);
  });

  test('bisect_right for C lo=2 hi=None', () {
    expect(bisect_right(C, -2, lo: 2), 2);
    expect(bisect_right(C, -1, lo: 2), 2);
    expect(bisect_right(C, 0, lo: 2), 2);
    expect(bisect_right(C, 1, lo: 2), 2);
    expect(bisect_right(C, 2, lo: 2), 2);
    expect(bisect_right(C, 3, lo: 2), 2);
    expect(bisect_right(C, 4, lo: 2), 2);
    expect(bisect_right(C, 5, lo: 2), 2);
    expect(bisect_right(C, 6, lo: 2), 2);
    expect(bisect_right(C, 7, lo: 2), 2);
    expect(bisect_right(C, 8, lo: 2), 2);
  });

  test('bisect_right for D lo=2 hi=None', () {
    expect(bisect_right(D, -2, lo: 2), 2);
    expect(bisect_right(D, -1, lo: 2), 2);
    expect(bisect_right(D, 0, lo: 2), 2);
    expect(bisect_right(D, 1, lo: 2), 2);
    expect(bisect_right(D, 2, lo: 2), 2);
    expect(bisect_right(D, 3, lo: 2), 2);
    expect(bisect_right(D, 4, lo: 2), 2);
    expect(bisect_right(D, 5, lo: 2), 3);
    expect(bisect_right(D, 6, lo: 2), 3);
    expect(bisect_right(D, 7, lo: 2), 3);
    expect(bisect_right(D, 8, lo: 2), 3);
  });

  test('bisect_right for E lo=2 hi=None', () {
    expect(bisect_right(E, -2, lo: 2), 2);
    expect(bisect_right(E, -1, lo: 2), 2);
    expect(bisect_right(E, 0, lo: 2), 2);
    expect(bisect_right(E, 1, lo: 2), 2);
    expect(bisect_right(E, 2, lo: 2), 6);
    expect(bisect_right(E, 3, lo: 2), 8);
    expect(bisect_right(E, 4, lo: 2), 8);
    expect(bisect_right(E, 5, lo: 2), 9);
    expect(bisect_right(E, 6, lo: 2), 10);
    expect(bisect_right(E, 7, lo: 2), 10);
    expect(bisect_right(E, 8, lo: 2), 10);
  });

  test('bisect_right for A lo=3 hi=None', () {
    expect(bisect_right(A, -2, lo: 3), 3);
    expect(bisect_right(A, -1, lo: 3), 3);
    expect(bisect_right(A, 0, lo: 3), 3);
    expect(bisect_right(A, 1, lo: 3), 3);
    expect(bisect_right(A, 2, lo: 3), 3);
    expect(bisect_right(A, 3, lo: 3), 3);
    expect(bisect_right(A, 4, lo: 3), 3);
    expect(bisect_right(A, 5, lo: 3), 3);
    expect(bisect_right(A, 6, lo: 3), 3);
    expect(bisect_right(A, 7, lo: 3), 3);
    expect(bisect_right(A, 8, lo: 3), 3);
  });

  test('bisect_right for B lo=3 hi=None', () {
    expect(bisect_right(B, -2, lo: 3), 3);
    expect(bisect_right(B, -1, lo: 3), 3);
    expect(bisect_right(B, 0, lo: 3), 3);
    expect(bisect_right(B, 1, lo: 3), 3);
    expect(bisect_right(B, 2, lo: 3), 3);
    expect(bisect_right(B, 3, lo: 3), 3);
    expect(bisect_right(B, 4, lo: 3), 3);
    expect(bisect_right(B, 5, lo: 3), 3);
    expect(bisect_right(B, 6, lo: 3), 3);
    expect(bisect_right(B, 7, lo: 3), 3);
    expect(bisect_right(B, 8, lo: 3), 3);
  });

  test('bisect_right for C lo=3 hi=None', () {
    expect(bisect_right(C, -2, lo: 3), 3);
    expect(bisect_right(C, -1, lo: 3), 3);
    expect(bisect_right(C, 0, lo: 3), 3);
    expect(bisect_right(C, 1, lo: 3), 3);
    expect(bisect_right(C, 2, lo: 3), 3);
    expect(bisect_right(C, 3, lo: 3), 3);
    expect(bisect_right(C, 4, lo: 3), 3);
    expect(bisect_right(C, 5, lo: 3), 3);
    expect(bisect_right(C, 6, lo: 3), 3);
    expect(bisect_right(C, 7, lo: 3), 3);
    expect(bisect_right(C, 8, lo: 3), 3);
  });

  test('bisect_right for D lo=3 hi=None', () {
    expect(bisect_right(D, -2, lo: 3), 3);
    expect(bisect_right(D, -1, lo: 3), 3);
    expect(bisect_right(D, 0, lo: 3), 3);
    expect(bisect_right(D, 1, lo: 3), 3);
    expect(bisect_right(D, 2, lo: 3), 3);
    expect(bisect_right(D, 3, lo: 3), 3);
    expect(bisect_right(D, 4, lo: 3), 3);
    expect(bisect_right(D, 5, lo: 3), 3);
    expect(bisect_right(D, 6, lo: 3), 3);
    expect(bisect_right(D, 7, lo: 3), 3);
    expect(bisect_right(D, 8, lo: 3), 3);
  });

  test('bisect_right for E lo=3 hi=None', () {
    expect(bisect_right(E, -2, lo: 3), 3);
    expect(bisect_right(E, -1, lo: 3), 3);
    expect(bisect_right(E, 0, lo: 3), 3);
    expect(bisect_right(E, 1, lo: 3), 3);
    expect(bisect_right(E, 2, lo: 3), 6);
    expect(bisect_right(E, 3, lo: 3), 8);
    expect(bisect_right(E, 4, lo: 3), 8);
    expect(bisect_right(E, 5, lo: 3), 9);
    expect(bisect_right(E, 6, lo: 3), 10);
    expect(bisect_right(E, 7, lo: 3), 10);
    expect(bisect_right(E, 8, lo: 3), 10);
  });

  test('bisect_right for A lo=4 hi=None', () {
    expect(bisect_right(A, -2, lo: 4), 4);
    expect(bisect_right(A, -1, lo: 4), 4);
    expect(bisect_right(A, 0, lo: 4), 4);
    expect(bisect_right(A, 1, lo: 4), 4);
    expect(bisect_right(A, 2, lo: 4), 4);
    expect(bisect_right(A, 3, lo: 4), 4);
    expect(bisect_right(A, 4, lo: 4), 4);
    expect(bisect_right(A, 5, lo: 4), 4);
    expect(bisect_right(A, 6, lo: 4), 4);
    expect(bisect_right(A, 7, lo: 4), 4);
    expect(bisect_right(A, 8, lo: 4), 4);
  });

  test('bisect_right for B lo=4 hi=None', () {
    expect(bisect_right(B, -2, lo: 4), 4);
    expect(bisect_right(B, -1, lo: 4), 4);
    expect(bisect_right(B, 0, lo: 4), 4);
    expect(bisect_right(B, 1, lo: 4), 4);
    expect(bisect_right(B, 2, lo: 4), 4);
    expect(bisect_right(B, 3, lo: 4), 4);
    expect(bisect_right(B, 4, lo: 4), 4);
    expect(bisect_right(B, 5, lo: 4), 4);
    expect(bisect_right(B, 6, lo: 4), 4);
    expect(bisect_right(B, 7, lo: 4), 4);
    expect(bisect_right(B, 8, lo: 4), 4);
  });

  test('bisect_right for C lo=4 hi=None', () {
    expect(bisect_right(C, -2, lo: 4), 4);
    expect(bisect_right(C, -1, lo: 4), 4);
    expect(bisect_right(C, 0, lo: 4), 4);
    expect(bisect_right(C, 1, lo: 4), 4);
    expect(bisect_right(C, 2, lo: 4), 4);
    expect(bisect_right(C, 3, lo: 4), 4);
    expect(bisect_right(C, 4, lo: 4), 4);
    expect(bisect_right(C, 5, lo: 4), 4);
    expect(bisect_right(C, 6, lo: 4), 4);
    expect(bisect_right(C, 7, lo: 4), 4);
    expect(bisect_right(C, 8, lo: 4), 4);
  });

  test('bisect_right for D lo=4 hi=None', () {
    expect(bisect_right(D, -2, lo: 4), 4);
    expect(bisect_right(D, -1, lo: 4), 4);
    expect(bisect_right(D, 0, lo: 4), 4);
    expect(bisect_right(D, 1, lo: 4), 4);
    expect(bisect_right(D, 2, lo: 4), 4);
    expect(bisect_right(D, 3, lo: 4), 4);
    expect(bisect_right(D, 4, lo: 4), 4);
    expect(bisect_right(D, 5, lo: 4), 4);
    expect(bisect_right(D, 6, lo: 4), 4);
    expect(bisect_right(D, 7, lo: 4), 4);
    expect(bisect_right(D, 8, lo: 4), 4);
  });

  test('bisect_right for E lo=4 hi=None', () {
    expect(bisect_right(E, -2, lo: 4), 4);
    expect(bisect_right(E, -1, lo: 4), 4);
    expect(bisect_right(E, 0, lo: 4), 4);
    expect(bisect_right(E, 1, lo: 4), 4);
    expect(bisect_right(E, 2, lo: 4), 6);
    expect(bisect_right(E, 3, lo: 4), 8);
    expect(bisect_right(E, 4, lo: 4), 8);
    expect(bisect_right(E, 5, lo: 4), 9);
    expect(bisect_right(E, 6, lo: 4), 10);
    expect(bisect_right(E, 7, lo: 4), 10);
    expect(bisect_right(E, 8, lo: 4), 10);
  });

  test('bisect_right for A lo=5 hi=None', () {
    expect(bisect_right(A, -2, lo: 5), 5);
    expect(bisect_right(A, -1, lo: 5), 5);
    expect(bisect_right(A, 0, lo: 5), 5);
    expect(bisect_right(A, 1, lo: 5), 5);
    expect(bisect_right(A, 2, lo: 5), 5);
    expect(bisect_right(A, 3, lo: 5), 5);
    expect(bisect_right(A, 4, lo: 5), 5);
    expect(bisect_right(A, 5, lo: 5), 5);
    expect(bisect_right(A, 6, lo: 5), 5);
    expect(bisect_right(A, 7, lo: 5), 5);
    expect(bisect_right(A, 8, lo: 5), 5);
  });

  test('bisect_right for B lo=5 hi=None', () {
    expect(bisect_right(B, -2, lo: 5), 5);
    expect(bisect_right(B, -1, lo: 5), 5);
    expect(bisect_right(B, 0, lo: 5), 5);
    expect(bisect_right(B, 1, lo: 5), 5);
    expect(bisect_right(B, 2, lo: 5), 5);
    expect(bisect_right(B, 3, lo: 5), 5);
    expect(bisect_right(B, 4, lo: 5), 5);
    expect(bisect_right(B, 5, lo: 5), 5);
    expect(bisect_right(B, 6, lo: 5), 5);
    expect(bisect_right(B, 7, lo: 5), 5);
    expect(bisect_right(B, 8, lo: 5), 5);
  });

  test('bisect_right for C lo=5 hi=None', () {
    expect(bisect_right(C, -2, lo: 5), 5);
    expect(bisect_right(C, -1, lo: 5), 5);
    expect(bisect_right(C, 0, lo: 5), 5);
    expect(bisect_right(C, 1, lo: 5), 5);
    expect(bisect_right(C, 2, lo: 5), 5);
    expect(bisect_right(C, 3, lo: 5), 5);
    expect(bisect_right(C, 4, lo: 5), 5);
    expect(bisect_right(C, 5, lo: 5), 5);
    expect(bisect_right(C, 6, lo: 5), 5);
    expect(bisect_right(C, 7, lo: 5), 5);
    expect(bisect_right(C, 8, lo: 5), 5);
  });

  test('bisect_right for D lo=5 hi=None', () {
    expect(bisect_right(D, -2, lo: 5), 5);
    expect(bisect_right(D, -1, lo: 5), 5);
    expect(bisect_right(D, 0, lo: 5), 5);
    expect(bisect_right(D, 1, lo: 5), 5);
    expect(bisect_right(D, 2, lo: 5), 5);
    expect(bisect_right(D, 3, lo: 5), 5);
    expect(bisect_right(D, 4, lo: 5), 5);
    expect(bisect_right(D, 5, lo: 5), 5);
    expect(bisect_right(D, 6, lo: 5), 5);
    expect(bisect_right(D, 7, lo: 5), 5);
    expect(bisect_right(D, 8, lo: 5), 5);
  });

  test('bisect_right for E lo=5 hi=None', () {
    expect(bisect_right(E, -2, lo: 5), 5);
    expect(bisect_right(E, -1, lo: 5), 5);
    expect(bisect_right(E, 0, lo: 5), 5);
    expect(bisect_right(E, 1, lo: 5), 5);
    expect(bisect_right(E, 2, lo: 5), 6);
    expect(bisect_right(E, 3, lo: 5), 8);
    expect(bisect_right(E, 4, lo: 5), 8);
    expect(bisect_right(E, 5, lo: 5), 9);
    expect(bisect_right(E, 6, lo: 5), 10);
    expect(bisect_right(E, 7, lo: 5), 10);
    expect(bisect_right(E, 8, lo: 5), 10);
  });

  test('bisect_right for A lo=6 hi=None', () {
    expect(bisect_right(A, -2, lo: 6), 6);
    expect(bisect_right(A, -1, lo: 6), 6);
    expect(bisect_right(A, 0, lo: 6), 6);
    expect(bisect_right(A, 1, lo: 6), 6);
    expect(bisect_right(A, 2, lo: 6), 6);
    expect(bisect_right(A, 3, lo: 6), 6);
    expect(bisect_right(A, 4, lo: 6), 6);
    expect(bisect_right(A, 5, lo: 6), 6);
    expect(bisect_right(A, 6, lo: 6), 6);
    expect(bisect_right(A, 7, lo: 6), 6);
    expect(bisect_right(A, 8, lo: 6), 6);
  });

  test('bisect_right for B lo=6 hi=None', () {
    expect(bisect_right(B, -2, lo: 6), 6);
    expect(bisect_right(B, -1, lo: 6), 6);
    expect(bisect_right(B, 0, lo: 6), 6);
    expect(bisect_right(B, 1, lo: 6), 6);
    expect(bisect_right(B, 2, lo: 6), 6);
    expect(bisect_right(B, 3, lo: 6), 6);
    expect(bisect_right(B, 4, lo: 6), 6);
    expect(bisect_right(B, 5, lo: 6), 6);
    expect(bisect_right(B, 6, lo: 6), 6);
    expect(bisect_right(B, 7, lo: 6), 6);
    expect(bisect_right(B, 8, lo: 6), 6);
  });

  test('bisect_right for C lo=6 hi=None', () {
    expect(bisect_right(C, -2, lo: 6), 6);
    expect(bisect_right(C, -1, lo: 6), 6);
    expect(bisect_right(C, 0, lo: 6), 6);
    expect(bisect_right(C, 1, lo: 6), 6);
    expect(bisect_right(C, 2, lo: 6), 6);
    expect(bisect_right(C, 3, lo: 6), 6);
    expect(bisect_right(C, 4, lo: 6), 6);
    expect(bisect_right(C, 5, lo: 6), 6);
    expect(bisect_right(C, 6, lo: 6), 6);
    expect(bisect_right(C, 7, lo: 6), 6);
    expect(bisect_right(C, 8, lo: 6), 6);
  });

  test('bisect_right for D lo=6 hi=None', () {
    expect(bisect_right(D, -2, lo: 6), 6);
    expect(bisect_right(D, -1, lo: 6), 6);
    expect(bisect_right(D, 0, lo: 6), 6);
    expect(bisect_right(D, 1, lo: 6), 6);
    expect(bisect_right(D, 2, lo: 6), 6);
    expect(bisect_right(D, 3, lo: 6), 6);
    expect(bisect_right(D, 4, lo: 6), 6);
    expect(bisect_right(D, 5, lo: 6), 6);
    expect(bisect_right(D, 6, lo: 6), 6);
    expect(bisect_right(D, 7, lo: 6), 6);
    expect(bisect_right(D, 8, lo: 6), 6);
  });

  test('bisect_right for E lo=6 hi=None', () {
    expect(bisect_right(E, -2, lo: 6), 6);
    expect(bisect_right(E, -1, lo: 6), 6);
    expect(bisect_right(E, 0, lo: 6), 6);
    expect(bisect_right(E, 1, lo: 6), 6);
    expect(bisect_right(E, 2, lo: 6), 6);
    expect(bisect_right(E, 3, lo: 6), 8);
    expect(bisect_right(E, 4, lo: 6), 8);
    expect(bisect_right(E, 5, lo: 6), 9);
    expect(bisect_right(E, 6, lo: 6), 10);
    expect(bisect_right(E, 7, lo: 6), 10);
    expect(bisect_right(E, 8, lo: 6), 10);
  });

  test('bisect_right for A lo=7 hi=None', () {
    expect(bisect_right(A, -2, lo: 7), 7);
    expect(bisect_right(A, -1, lo: 7), 7);
    expect(bisect_right(A, 0, lo: 7), 7);
    expect(bisect_right(A, 1, lo: 7), 7);
    expect(bisect_right(A, 2, lo: 7), 7);
    expect(bisect_right(A, 3, lo: 7), 7);
    expect(bisect_right(A, 4, lo: 7), 7);
    expect(bisect_right(A, 5, lo: 7), 7);
    expect(bisect_right(A, 6, lo: 7), 7);
    expect(bisect_right(A, 7, lo: 7), 7);
    expect(bisect_right(A, 8, lo: 7), 7);
  });

  test('bisect_right for B lo=7 hi=None', () {
    expect(bisect_right(B, -2, lo: 7), 7);
    expect(bisect_right(B, -1, lo: 7), 7);
    expect(bisect_right(B, 0, lo: 7), 7);
    expect(bisect_right(B, 1, lo: 7), 7);
    expect(bisect_right(B, 2, lo: 7), 7);
    expect(bisect_right(B, 3, lo: 7), 7);
    expect(bisect_right(B, 4, lo: 7), 7);
    expect(bisect_right(B, 5, lo: 7), 7);
    expect(bisect_right(B, 6, lo: 7), 7);
    expect(bisect_right(B, 7, lo: 7), 7);
    expect(bisect_right(B, 8, lo: 7), 7);
  });

  test('bisect_right for C lo=7 hi=None', () {
    expect(bisect_right(C, -2, lo: 7), 7);
    expect(bisect_right(C, -1, lo: 7), 7);
    expect(bisect_right(C, 0, lo: 7), 7);
    expect(bisect_right(C, 1, lo: 7), 7);
    expect(bisect_right(C, 2, lo: 7), 7);
    expect(bisect_right(C, 3, lo: 7), 7);
    expect(bisect_right(C, 4, lo: 7), 7);
    expect(bisect_right(C, 5, lo: 7), 7);
    expect(bisect_right(C, 6, lo: 7), 7);
    expect(bisect_right(C, 7, lo: 7), 7);
    expect(bisect_right(C, 8, lo: 7), 7);
  });

  test('bisect_right for D lo=7 hi=None', () {
    expect(bisect_right(D, -2, lo: 7), 7);
    expect(bisect_right(D, -1, lo: 7), 7);
    expect(bisect_right(D, 0, lo: 7), 7);
    expect(bisect_right(D, 1, lo: 7), 7);
    expect(bisect_right(D, 2, lo: 7), 7);
    expect(bisect_right(D, 3, lo: 7), 7);
    expect(bisect_right(D, 4, lo: 7), 7);
    expect(bisect_right(D, 5, lo: 7), 7);
    expect(bisect_right(D, 6, lo: 7), 7);
    expect(bisect_right(D, 7, lo: 7), 7);
    expect(bisect_right(D, 8, lo: 7), 7);
  });

  test('bisect_right for E lo=7 hi=None', () {
    expect(bisect_right(E, -2, lo: 7), 7);
    expect(bisect_right(E, -1, lo: 7), 7);
    expect(bisect_right(E, 0, lo: 7), 7);
    expect(bisect_right(E, 1, lo: 7), 7);
    expect(bisect_right(E, 2, lo: 7), 7);
    expect(bisect_right(E, 3, lo: 7), 8);
    expect(bisect_right(E, 4, lo: 7), 8);
    expect(bisect_right(E, 5, lo: 7), 9);
    expect(bisect_right(E, 6, lo: 7), 10);
    expect(bisect_right(E, 7, lo: 7), 10);
    expect(bisect_right(E, 8, lo: 7), 10);
  });

  test('bisect_right for A lo=8 hi=None', () {
    expect(bisect_right(A, -2, lo: 8), 8);
    expect(bisect_right(A, -1, lo: 8), 8);
    expect(bisect_right(A, 0, lo: 8), 8);
    expect(bisect_right(A, 1, lo: 8), 8);
    expect(bisect_right(A, 2, lo: 8), 8);
    expect(bisect_right(A, 3, lo: 8), 8);
    expect(bisect_right(A, 4, lo: 8), 8);
    expect(bisect_right(A, 5, lo: 8), 8);
    expect(bisect_right(A, 6, lo: 8), 8);
    expect(bisect_right(A, 7, lo: 8), 8);
    expect(bisect_right(A, 8, lo: 8), 8);
  });

  test('bisect_right for B lo=8 hi=None', () {
    expect(bisect_right(B, -2, lo: 8), 8);
    expect(bisect_right(B, -1, lo: 8), 8);
    expect(bisect_right(B, 0, lo: 8), 8);
    expect(bisect_right(B, 1, lo: 8), 8);
    expect(bisect_right(B, 2, lo: 8), 8);
    expect(bisect_right(B, 3, lo: 8), 8);
    expect(bisect_right(B, 4, lo: 8), 8);
    expect(bisect_right(B, 5, lo: 8), 8);
    expect(bisect_right(B, 6, lo: 8), 8);
    expect(bisect_right(B, 7, lo: 8), 8);
    expect(bisect_right(B, 8, lo: 8), 8);
  });

  test('bisect_right for C lo=8 hi=None', () {
    expect(bisect_right(C, -2, lo: 8), 8);
    expect(bisect_right(C, -1, lo: 8), 8);
    expect(bisect_right(C, 0, lo: 8), 8);
    expect(bisect_right(C, 1, lo: 8), 8);
    expect(bisect_right(C, 2, lo: 8), 8);
    expect(bisect_right(C, 3, lo: 8), 8);
    expect(bisect_right(C, 4, lo: 8), 8);
    expect(bisect_right(C, 5, lo: 8), 8);
    expect(bisect_right(C, 6, lo: 8), 8);
    expect(bisect_right(C, 7, lo: 8), 8);
    expect(bisect_right(C, 8, lo: 8), 8);
  });

  test('bisect_right for D lo=8 hi=None', () {
    expect(bisect_right(D, -2, lo: 8), 8);
    expect(bisect_right(D, -1, lo: 8), 8);
    expect(bisect_right(D, 0, lo: 8), 8);
    expect(bisect_right(D, 1, lo: 8), 8);
    expect(bisect_right(D, 2, lo: 8), 8);
    expect(bisect_right(D, 3, lo: 8), 8);
    expect(bisect_right(D, 4, lo: 8), 8);
    expect(bisect_right(D, 5, lo: 8), 8);
    expect(bisect_right(D, 6, lo: 8), 8);
    expect(bisect_right(D, 7, lo: 8), 8);
    expect(bisect_right(D, 8, lo: 8), 8);
  });

  test('bisect_right for E lo=8 hi=None', () {
    expect(bisect_right(E, -2, lo: 8), 8);
    expect(bisect_right(E, -1, lo: 8), 8);
    expect(bisect_right(E, 0, lo: 8), 8);
    expect(bisect_right(E, 1, lo: 8), 8);
    expect(bisect_right(E, 2, lo: 8), 8);
    expect(bisect_right(E, 3, lo: 8), 8);
    expect(bisect_right(E, 4, lo: 8), 8);
    expect(bisect_right(E, 5, lo: 8), 9);
    expect(bisect_right(E, 6, lo: 8), 10);
    expect(bisect_right(E, 7, lo: 8), 10);
    expect(bisect_right(E, 8, lo: 8), 10);
  });

  test('bisect_right for A lo=9 hi=None', () {
    expect(bisect_right(A, -2, lo: 9), 9);
    expect(bisect_right(A, -1, lo: 9), 9);
    expect(bisect_right(A, 0, lo: 9), 9);
    expect(bisect_right(A, 1, lo: 9), 9);
    expect(bisect_right(A, 2, lo: 9), 9);
    expect(bisect_right(A, 3, lo: 9), 9);
    expect(bisect_right(A, 4, lo: 9), 9);
    expect(bisect_right(A, 5, lo: 9), 9);
    expect(bisect_right(A, 6, lo: 9), 9);
    expect(bisect_right(A, 7, lo: 9), 9);
    expect(bisect_right(A, 8, lo: 9), 9);
  });

  test('bisect_right for B lo=9 hi=None', () {
    expect(bisect_right(B, -2, lo: 9), 9);
    expect(bisect_right(B, -1, lo: 9), 9);
    expect(bisect_right(B, 0, lo: 9), 9);
    expect(bisect_right(B, 1, lo: 9), 9);
    expect(bisect_right(B, 2, lo: 9), 9);
    expect(bisect_right(B, 3, lo: 9), 9);
    expect(bisect_right(B, 4, lo: 9), 9);
    expect(bisect_right(B, 5, lo: 9), 9);
    expect(bisect_right(B, 6, lo: 9), 9);
    expect(bisect_right(B, 7, lo: 9), 9);
    expect(bisect_right(B, 8, lo: 9), 9);
  });

  test('bisect_right for C lo=9 hi=None', () {
    expect(bisect_right(C, -2, lo: 9), 9);
    expect(bisect_right(C, -1, lo: 9), 9);
    expect(bisect_right(C, 0, lo: 9), 9);
    expect(bisect_right(C, 1, lo: 9), 9);
    expect(bisect_right(C, 2, lo: 9), 9);
    expect(bisect_right(C, 3, lo: 9), 9);
    expect(bisect_right(C, 4, lo: 9), 9);
    expect(bisect_right(C, 5, lo: 9), 9);
    expect(bisect_right(C, 6, lo: 9), 9);
    expect(bisect_right(C, 7, lo: 9), 9);
    expect(bisect_right(C, 8, lo: 9), 9);
  });

  test('bisect_right for D lo=9 hi=None', () {
    expect(bisect_right(D, -2, lo: 9), 9);
    expect(bisect_right(D, -1, lo: 9), 9);
    expect(bisect_right(D, 0, lo: 9), 9);
    expect(bisect_right(D, 1, lo: 9), 9);
    expect(bisect_right(D, 2, lo: 9), 9);
    expect(bisect_right(D, 3, lo: 9), 9);
    expect(bisect_right(D, 4, lo: 9), 9);
    expect(bisect_right(D, 5, lo: 9), 9);
    expect(bisect_right(D, 6, lo: 9), 9);
    expect(bisect_right(D, 7, lo: 9), 9);
    expect(bisect_right(D, 8, lo: 9), 9);
  });

  test('bisect_right for E lo=9 hi=None', () {
    expect(bisect_right(E, -2, lo: 9), 9);
    expect(bisect_right(E, -1, lo: 9), 9);
    expect(bisect_right(E, 0, lo: 9), 9);
    expect(bisect_right(E, 1, lo: 9), 9);
    expect(bisect_right(E, 2, lo: 9), 9);
    expect(bisect_right(E, 3, lo: 9), 9);
    expect(bisect_right(E, 4, lo: 9), 9);
    expect(bisect_right(E, 5, lo: 9), 9);
    expect(bisect_right(E, 6, lo: 9), 10);
    expect(bisect_right(E, 7, lo: 9), 10);
    expect(bisect_right(E, 8, lo: 9), 10);
  });

  test('bisect_right for A lo=None hi=0', () {
    expect(bisect_right(A, -2, hi: 0), 0);
    expect(bisect_right(A, -1, hi: 0), 0);
    expect(bisect_right(A, 0, hi: 0), 0);
    expect(bisect_right(A, 1, hi: 0), 0);
    expect(bisect_right(A, 2, hi: 0), 0);
    expect(bisect_right(A, 3, hi: 0), 0);
    expect(bisect_right(A, 4, hi: 0), 0);
    expect(bisect_right(A, 5, hi: 0), 0);
    expect(bisect_right(A, 6, hi: 0), 0);
    expect(bisect_right(A, 7, hi: 0), 0);
    expect(bisect_right(A, 8, hi: 0), 0);
  });

  test('bisect_right for B lo=None hi=0', () {
    expect(bisect_right(B, -2, hi: 0), 0);
    expect(bisect_right(B, -1, hi: 0), 0);
    expect(bisect_right(B, 0, hi: 0), 0);
    expect(bisect_right(B, 1, hi: 0), 0);
    expect(bisect_right(B, 2, hi: 0), 0);
    expect(bisect_right(B, 3, hi: 0), 0);
    expect(bisect_right(B, 4, hi: 0), 0);
    expect(bisect_right(B, 5, hi: 0), 0);
    expect(bisect_right(B, 6, hi: 0), 0);
    expect(bisect_right(B, 7, hi: 0), 0);
    expect(bisect_right(B, 8, hi: 0), 0);
  });

  test('bisect_right for C lo=None hi=0', () {
    expect(bisect_right(C, -2, hi: 0), 0);
    expect(bisect_right(C, -1, hi: 0), 0);
    expect(bisect_right(C, 0, hi: 0), 0);
    expect(bisect_right(C, 1, hi: 0), 0);
    expect(bisect_right(C, 2, hi: 0), 0);
    expect(bisect_right(C, 3, hi: 0), 0);
    expect(bisect_right(C, 4, hi: 0), 0);
    expect(bisect_right(C, 5, hi: 0), 0);
    expect(bisect_right(C, 6, hi: 0), 0);
    expect(bisect_right(C, 7, hi: 0), 0);
    expect(bisect_right(C, 8, hi: 0), 0);
  });

  test('bisect_right for D lo=None hi=0', () {
    expect(bisect_right(D, -2, hi: 0), 0);
    expect(bisect_right(D, -1, hi: 0), 0);
    expect(bisect_right(D, 0, hi: 0), 0);
    expect(bisect_right(D, 1, hi: 0), 0);
    expect(bisect_right(D, 2, hi: 0), 0);
    expect(bisect_right(D, 3, hi: 0), 0);
    expect(bisect_right(D, 4, hi: 0), 0);
    expect(bisect_right(D, 5, hi: 0), 0);
    expect(bisect_right(D, 6, hi: 0), 0);
    expect(bisect_right(D, 7, hi: 0), 0);
    expect(bisect_right(D, 8, hi: 0), 0);
  });

  test('bisect_right for E lo=None hi=0', () {
    expect(bisect_right(E, -2, hi: 0), 0);
    expect(bisect_right(E, -1, hi: 0), 0);
    expect(bisect_right(E, 0, hi: 0), 0);
    expect(bisect_right(E, 1, hi: 0), 0);
    expect(bisect_right(E, 2, hi: 0), 0);
    expect(bisect_right(E, 3, hi: 0), 0);
    expect(bisect_right(E, 4, hi: 0), 0);
    expect(bisect_right(E, 5, hi: 0), 0);
    expect(bisect_right(E, 6, hi: 0), 0);
    expect(bisect_right(E, 7, hi: 0), 0);
    expect(bisect_right(E, 8, hi: 0), 0);
  });

  test('bisect_right for A lo=0 hi=0', () {
    expect(bisect_right(A, -2, lo: 0, hi: 0), 0);
    expect(bisect_right(A, -1, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 0, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 1, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 2, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 3, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 4, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 5, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 6, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 7, lo: 0, hi: 0), 0);
    expect(bisect_right(A, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_right for B lo=0 hi=0', () {
    expect(bisect_right(B, -2, lo: 0, hi: 0), 0);
    expect(bisect_right(B, -1, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 0, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 1, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 2, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 3, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 4, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 5, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 6, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 7, lo: 0, hi: 0), 0);
    expect(bisect_right(B, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_right for C lo=0 hi=0', () {
    expect(bisect_right(C, -2, lo: 0, hi: 0), 0);
    expect(bisect_right(C, -1, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 0, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 1, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 2, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 3, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 4, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 5, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 6, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 7, lo: 0, hi: 0), 0);
    expect(bisect_right(C, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_right for D lo=0 hi=0', () {
    expect(bisect_right(D, -2, lo: 0, hi: 0), 0);
    expect(bisect_right(D, -1, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 0, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 1, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 2, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 3, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 4, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 5, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 6, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 7, lo: 0, hi: 0), 0);
    expect(bisect_right(D, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_right for E lo=0 hi=0', () {
    expect(bisect_right(E, -2, lo: 0, hi: 0), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 1, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 2, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 3, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 4, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 5, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 6, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 7, lo: 0, hi: 0), 0);
    expect(bisect_right(E, 8, lo: 0, hi: 0), 0);
  });

  test('bisect_right for A lo=1 hi=0', () {
    expect(bisect_right(A, -2, lo: 1, hi: 0), 1);
    expect(bisect_right(A, -1, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 0, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 1, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 2, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 3, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 4, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 5, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 6, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 7, lo: 1, hi: 0), 1);
    expect(bisect_right(A, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_right for B lo=1 hi=0', () {
    expect(bisect_right(B, -2, lo: 1, hi: 0), 1);
    expect(bisect_right(B, -1, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 0, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 1, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 2, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 3, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 4, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 5, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 6, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 7, lo: 1, hi: 0), 1);
    expect(bisect_right(B, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_right for C lo=1 hi=0', () {
    expect(bisect_right(C, -2, lo: 1, hi: 0), 1);
    expect(bisect_right(C, -1, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 0, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 1, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 2, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 3, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 4, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 5, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 6, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 7, lo: 1, hi: 0), 1);
    expect(bisect_right(C, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_right for D lo=1 hi=0', () {
    expect(bisect_right(D, -2, lo: 1, hi: 0), 1);
    expect(bisect_right(D, -1, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 0, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 1, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 2, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 3, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 4, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 5, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 6, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 7, lo: 1, hi: 0), 1);
    expect(bisect_right(D, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_right for E lo=1 hi=0', () {
    expect(bisect_right(E, -2, lo: 1, hi: 0), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 2, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 3, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 4, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 5, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 6, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 7, lo: 1, hi: 0), 1);
    expect(bisect_right(E, 8, lo: 1, hi: 0), 1);
  });

  test('bisect_right for A lo=2 hi=0', () {
    expect(bisect_right(A, -2, lo: 2, hi: 0), 2);
    expect(bisect_right(A, -1, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 0, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 1, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 2, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 3, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 4, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 5, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 6, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 7, lo: 2, hi: 0), 2);
    expect(bisect_right(A, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_right for B lo=2 hi=0', () {
    expect(bisect_right(B, -2, lo: 2, hi: 0), 2);
    expect(bisect_right(B, -1, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 0, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 1, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 2, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 3, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 4, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 5, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 6, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 7, lo: 2, hi: 0), 2);
    expect(bisect_right(B, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_right for C lo=2 hi=0', () {
    expect(bisect_right(C, -2, lo: 2, hi: 0), 2);
    expect(bisect_right(C, -1, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 0, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 1, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 2, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 3, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 4, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 5, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 6, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 7, lo: 2, hi: 0), 2);
    expect(bisect_right(C, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_right for D lo=2 hi=0', () {
    expect(bisect_right(D, -2, lo: 2, hi: 0), 2);
    expect(bisect_right(D, -1, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 0, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 1, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 2, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 3, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 4, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 5, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 6, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 7, lo: 2, hi: 0), 2);
    expect(bisect_right(D, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_right for E lo=2 hi=0', () {
    expect(bisect_right(E, -2, lo: 2, hi: 0), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 3, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 4, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 5, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 6, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 7, lo: 2, hi: 0), 2);
    expect(bisect_right(E, 8, lo: 2, hi: 0), 2);
  });

  test('bisect_right for A lo=3 hi=0', () {
    expect(bisect_right(A, -2, lo: 3, hi: 0), 3);
    expect(bisect_right(A, -1, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 0, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 1, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 2, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 3, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 4, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 5, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 6, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 7, lo: 3, hi: 0), 3);
    expect(bisect_right(A, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_right for B lo=3 hi=0', () {
    expect(bisect_right(B, -2, lo: 3, hi: 0), 3);
    expect(bisect_right(B, -1, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 0, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 1, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 2, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 3, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 4, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 5, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 6, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 7, lo: 3, hi: 0), 3);
    expect(bisect_right(B, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_right for C lo=3 hi=0', () {
    expect(bisect_right(C, -2, lo: 3, hi: 0), 3);
    expect(bisect_right(C, -1, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 0, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 1, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 2, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 3, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 4, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 5, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 6, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 7, lo: 3, hi: 0), 3);
    expect(bisect_right(C, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_right for D lo=3 hi=0', () {
    expect(bisect_right(D, -2, lo: 3, hi: 0), 3);
    expect(bisect_right(D, -1, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 0, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 1, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 2, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 3, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 4, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 5, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 6, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 7, lo: 3, hi: 0), 3);
    expect(bisect_right(D, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_right for E lo=3 hi=0', () {
    expect(bisect_right(E, -2, lo: 3, hi: 0), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 3, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 4, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 5, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 6, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 7, lo: 3, hi: 0), 3);
    expect(bisect_right(E, 8, lo: 3, hi: 0), 3);
  });

  test('bisect_right for A lo=4 hi=0', () {
    expect(bisect_right(A, -2, lo: 4, hi: 0), 4);
    expect(bisect_right(A, -1, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 0, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 1, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 2, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 3, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 4, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 5, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 6, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 7, lo: 4, hi: 0), 4);
    expect(bisect_right(A, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_right for B lo=4 hi=0', () {
    expect(bisect_right(B, -2, lo: 4, hi: 0), 4);
    expect(bisect_right(B, -1, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 0, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 1, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 2, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 3, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 4, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 5, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 6, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 7, lo: 4, hi: 0), 4);
    expect(bisect_right(B, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_right for C lo=4 hi=0', () {
    expect(bisect_right(C, -2, lo: 4, hi: 0), 4);
    expect(bisect_right(C, -1, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 0, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 1, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 2, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 3, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 4, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 5, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 6, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 7, lo: 4, hi: 0), 4);
    expect(bisect_right(C, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_right for D lo=4 hi=0', () {
    expect(bisect_right(D, -2, lo: 4, hi: 0), 4);
    expect(bisect_right(D, -1, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 0, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 1, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 2, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 3, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 4, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 5, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 6, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 7, lo: 4, hi: 0), 4);
    expect(bisect_right(D, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_right for E lo=4 hi=0', () {
    expect(bisect_right(E, -2, lo: 4, hi: 0), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 3, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 4, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 5, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 6, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 7, lo: 4, hi: 0), 4);
    expect(bisect_right(E, 8, lo: 4, hi: 0), 4);
  });

  test('bisect_right for A lo=5 hi=0', () {
    expect(bisect_right(A, -2, lo: 5, hi: 0), 5);
    expect(bisect_right(A, -1, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 0, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 1, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 2, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 3, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 4, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 5, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 6, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 7, lo: 5, hi: 0), 5);
    expect(bisect_right(A, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_right for B lo=5 hi=0', () {
    expect(bisect_right(B, -2, lo: 5, hi: 0), 5);
    expect(bisect_right(B, -1, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 0, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 1, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 2, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 3, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 4, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 5, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 6, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 7, lo: 5, hi: 0), 5);
    expect(bisect_right(B, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_right for C lo=5 hi=0', () {
    expect(bisect_right(C, -2, lo: 5, hi: 0), 5);
    expect(bisect_right(C, -1, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 0, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 1, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 2, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 3, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 4, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 5, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 6, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 7, lo: 5, hi: 0), 5);
    expect(bisect_right(C, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_right for D lo=5 hi=0', () {
    expect(bisect_right(D, -2, lo: 5, hi: 0), 5);
    expect(bisect_right(D, -1, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 0, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 1, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 2, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 3, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 4, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 5, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 6, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 7, lo: 5, hi: 0), 5);
    expect(bisect_right(D, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_right for E lo=5 hi=0', () {
    expect(bisect_right(E, -2, lo: 5, hi: 0), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 3, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 4, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 5, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 6, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 7, lo: 5, hi: 0), 5);
    expect(bisect_right(E, 8, lo: 5, hi: 0), 5);
  });

  test('bisect_right for A lo=6 hi=0', () {
    expect(bisect_right(A, -2, lo: 6, hi: 0), 6);
    expect(bisect_right(A, -1, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 0, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 1, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 2, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 3, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 4, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 5, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 6, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 7, lo: 6, hi: 0), 6);
    expect(bisect_right(A, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_right for B lo=6 hi=0', () {
    expect(bisect_right(B, -2, lo: 6, hi: 0), 6);
    expect(bisect_right(B, -1, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 0, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 1, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 2, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 3, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 4, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 5, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 6, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 7, lo: 6, hi: 0), 6);
    expect(bisect_right(B, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_right for C lo=6 hi=0', () {
    expect(bisect_right(C, -2, lo: 6, hi: 0), 6);
    expect(bisect_right(C, -1, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 0, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 1, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 2, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 3, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 4, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 5, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 6, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 7, lo: 6, hi: 0), 6);
    expect(bisect_right(C, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_right for D lo=6 hi=0', () {
    expect(bisect_right(D, -2, lo: 6, hi: 0), 6);
    expect(bisect_right(D, -1, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 0, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 1, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 2, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 3, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 4, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 5, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 6, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 7, lo: 6, hi: 0), 6);
    expect(bisect_right(D, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_right for E lo=6 hi=0', () {
    expect(bisect_right(E, -2, lo: 6, hi: 0), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 4, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 5, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 6, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 7, lo: 6, hi: 0), 6);
    expect(bisect_right(E, 8, lo: 6, hi: 0), 6);
  });

  test('bisect_right for A lo=7 hi=0', () {
    expect(bisect_right(A, -2, lo: 7, hi: 0), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 0), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_right for B lo=7 hi=0', () {
    expect(bisect_right(B, -2, lo: 7, hi: 0), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 0), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_right for C lo=7 hi=0', () {
    expect(bisect_right(C, -2, lo: 7, hi: 0), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 0), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_right for D lo=7 hi=0', () {
    expect(bisect_right(D, -2, lo: 7, hi: 0), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 0), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_right for E lo=7 hi=0', () {
    expect(bisect_right(E, -2, lo: 7, hi: 0), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 0), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 0), 7);
  });

  test('bisect_right for A lo=8 hi=0', () {
    expect(bisect_right(A, -2, lo: 8, hi: 0), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 0), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_right for B lo=8 hi=0', () {
    expect(bisect_right(B, -2, lo: 8, hi: 0), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 0), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_right for C lo=8 hi=0', () {
    expect(bisect_right(C, -2, lo: 8, hi: 0), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 0), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_right for D lo=8 hi=0', () {
    expect(bisect_right(D, -2, lo: 8, hi: 0), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 0), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_right for E lo=8 hi=0', () {
    expect(bisect_right(E, -2, lo: 8, hi: 0), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 0), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 0), 8);
  });

  test('bisect_right for A lo=9 hi=0', () {
    expect(bisect_right(A, -2, lo: 9, hi: 0), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 0), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_right for B lo=9 hi=0', () {
    expect(bisect_right(B, -2, lo: 9, hi: 0), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 0), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_right for C lo=9 hi=0', () {
    expect(bisect_right(C, -2, lo: 9, hi: 0), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 0), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_right for D lo=9 hi=0', () {
    expect(bisect_right(D, -2, lo: 9, hi: 0), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 0), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_right for E lo=9 hi=0', () {
    expect(bisect_right(E, -2, lo: 9, hi: 0), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 0), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 0), 9);
  });

  test('bisect_right for A lo=None hi=1', () {
    expect(() => bisect_right(A, -2, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 1), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=1', () {
    expect(bisect_right(B, -2, hi: 1), 0);
    expect(bisect_right(B, -1, hi: 1), 0);
    expect(bisect_right(B, 0, hi: 1), 0);
    expect(bisect_right(B, 1, hi: 1), 0);
    expect(bisect_right(B, 2, hi: 1), 0);
    expect(bisect_right(B, 3, hi: 1), 0);
    expect(bisect_right(B, 4, hi: 1), 1);
    expect(bisect_right(B, 5, hi: 1), 1);
    expect(bisect_right(B, 6, hi: 1), 1);
    expect(bisect_right(B, 7, hi: 1), 1);
    expect(bisect_right(B, 8, hi: 1), 1);
  });

  test('bisect_right for C lo=None hi=1', () {
    expect(bisect_right(C, -2, hi: 1), 0);
    expect(bisect_right(C, -1, hi: 1), 0);
    expect(bisect_right(C, 0, hi: 1), 0);
    expect(bisect_right(C, 1, hi: 1), 0);
    expect(bisect_right(C, 2, hi: 1), 0);
    expect(bisect_right(C, 3, hi: 1), 0);
    expect(bisect_right(C, 4, hi: 1), 1);
    expect(bisect_right(C, 5, hi: 1), 1);
    expect(bisect_right(C, 6, hi: 1), 1);
    expect(bisect_right(C, 7, hi: 1), 1);
    expect(bisect_right(C, 8, hi: 1), 1);
  });

  test('bisect_right for D lo=None hi=1', () {
    expect(bisect_right(D, -2, hi: 1), 0);
    expect(bisect_right(D, -1, hi: 1), 0);
    expect(bisect_right(D, 0, hi: 1), 0);
    expect(bisect_right(D, 1, hi: 1), 0);
    expect(bisect_right(D, 2, hi: 1), 0);
    expect(bisect_right(D, 3, hi: 1), 1);
    expect(bisect_right(D, 4, hi: 1), 1);
    expect(bisect_right(D, 5, hi: 1), 1);
    expect(bisect_right(D, 6, hi: 1), 1);
    expect(bisect_right(D, 7, hi: 1), 1);
    expect(bisect_right(D, 8, hi: 1), 1);
  });

  test('bisect_right for E lo=None hi=1', () {
    expect(bisect_right(E, -2, hi: 1), 0);
    expect(bisect_right(E, -1, hi: 1), 0);
    expect(bisect_right(E, 0, hi: 1), 1);
    expect(bisect_right(E, 1, hi: 1), 1);
    expect(bisect_right(E, 2, hi: 1), 1);
    expect(bisect_right(E, 3, hi: 1), 1);
    expect(bisect_right(E, 4, hi: 1), 1);
    expect(bisect_right(E, 5, hi: 1), 1);
    expect(bisect_right(E, 6, hi: 1), 1);
    expect(bisect_right(E, 7, hi: 1), 1);
    expect(bisect_right(E, 8, hi: 1), 1);
  });

  test('bisect_right for A lo=0 hi=1', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 1), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=1', () {
    expect(bisect_right(B, -2, lo: 0, hi: 1), 0);
    expect(bisect_right(B, -1, lo: 0, hi: 1), 0);
    expect(bisect_right(B, 0, lo: 0, hi: 1), 0);
    expect(bisect_right(B, 1, lo: 0, hi: 1), 0);
    expect(bisect_right(B, 2, lo: 0, hi: 1), 0);
    expect(bisect_right(B, 3, lo: 0, hi: 1), 0);
    expect(bisect_right(B, 4, lo: 0, hi: 1), 1);
    expect(bisect_right(B, 5, lo: 0, hi: 1), 1);
    expect(bisect_right(B, 6, lo: 0, hi: 1), 1);
    expect(bisect_right(B, 7, lo: 0, hi: 1), 1);
    expect(bisect_right(B, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_right for C lo=0 hi=1', () {
    expect(bisect_right(C, -2, lo: 0, hi: 1), 0);
    expect(bisect_right(C, -1, lo: 0, hi: 1), 0);
    expect(bisect_right(C, 0, lo: 0, hi: 1), 0);
    expect(bisect_right(C, 1, lo: 0, hi: 1), 0);
    expect(bisect_right(C, 2, lo: 0, hi: 1), 0);
    expect(bisect_right(C, 3, lo: 0, hi: 1), 0);
    expect(bisect_right(C, 4, lo: 0, hi: 1), 1);
    expect(bisect_right(C, 5, lo: 0, hi: 1), 1);
    expect(bisect_right(C, 6, lo: 0, hi: 1), 1);
    expect(bisect_right(C, 7, lo: 0, hi: 1), 1);
    expect(bisect_right(C, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_right for D lo=0 hi=1', () {
    expect(bisect_right(D, -2, lo: 0, hi: 1), 0);
    expect(bisect_right(D, -1, lo: 0, hi: 1), 0);
    expect(bisect_right(D, 0, lo: 0, hi: 1), 0);
    expect(bisect_right(D, 1, lo: 0, hi: 1), 0);
    expect(bisect_right(D, 2, lo: 0, hi: 1), 0);
    expect(bisect_right(D, 3, lo: 0, hi: 1), 1);
    expect(bisect_right(D, 4, lo: 0, hi: 1), 1);
    expect(bisect_right(D, 5, lo: 0, hi: 1), 1);
    expect(bisect_right(D, 6, lo: 0, hi: 1), 1);
    expect(bisect_right(D, 7, lo: 0, hi: 1), 1);
    expect(bisect_right(D, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_right for E lo=0 hi=1', () {
    expect(bisect_right(E, -2, lo: 0, hi: 1), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 1), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 2, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 3, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 4, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 5, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 6, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 7, lo: 0, hi: 1), 1);
    expect(bisect_right(E, 8, lo: 0, hi: 1), 1);
  });

  test('bisect_right for A lo=1 hi=1', () {
    expect(bisect_right(A, -2, lo: 1, hi: 1), 1);
    expect(bisect_right(A, -1, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 0, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 1, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 2, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 3, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 4, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 5, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 6, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 7, lo: 1, hi: 1), 1);
    expect(bisect_right(A, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_right for B lo=1 hi=1', () {
    expect(bisect_right(B, -2, lo: 1, hi: 1), 1);
    expect(bisect_right(B, -1, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 0, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 1, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 2, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 3, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 4, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 5, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 6, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 7, lo: 1, hi: 1), 1);
    expect(bisect_right(B, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_right for C lo=1 hi=1', () {
    expect(bisect_right(C, -2, lo: 1, hi: 1), 1);
    expect(bisect_right(C, -1, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 0, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 1, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 2, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 3, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 4, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 5, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 6, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 7, lo: 1, hi: 1), 1);
    expect(bisect_right(C, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_right for D lo=1 hi=1', () {
    expect(bisect_right(D, -2, lo: 1, hi: 1), 1);
    expect(bisect_right(D, -1, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 0, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 1, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 2, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 3, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 4, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 5, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 6, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 7, lo: 1, hi: 1), 1);
    expect(bisect_right(D, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_right for E lo=1 hi=1', () {
    expect(bisect_right(E, -2, lo: 1, hi: 1), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 2, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 3, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 4, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 5, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 6, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 7, lo: 1, hi: 1), 1);
    expect(bisect_right(E, 8, lo: 1, hi: 1), 1);
  });

  test('bisect_right for A lo=2 hi=1', () {
    expect(bisect_right(A, -2, lo: 2, hi: 1), 2);
    expect(bisect_right(A, -1, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 0, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 1, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 2, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 3, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 4, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 5, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 6, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 7, lo: 2, hi: 1), 2);
    expect(bisect_right(A, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_right for B lo=2 hi=1', () {
    expect(bisect_right(B, -2, lo: 2, hi: 1), 2);
    expect(bisect_right(B, -1, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 0, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 1, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 2, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 3, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 4, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 5, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 6, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 7, lo: 2, hi: 1), 2);
    expect(bisect_right(B, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_right for C lo=2 hi=1', () {
    expect(bisect_right(C, -2, lo: 2, hi: 1), 2);
    expect(bisect_right(C, -1, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 0, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 1, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 2, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 3, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 4, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 5, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 6, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 7, lo: 2, hi: 1), 2);
    expect(bisect_right(C, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_right for D lo=2 hi=1', () {
    expect(bisect_right(D, -2, lo: 2, hi: 1), 2);
    expect(bisect_right(D, -1, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 0, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 1, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 2, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 3, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 4, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 5, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 6, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 7, lo: 2, hi: 1), 2);
    expect(bisect_right(D, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_right for E lo=2 hi=1', () {
    expect(bisect_right(E, -2, lo: 2, hi: 1), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 3, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 4, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 5, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 6, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 7, lo: 2, hi: 1), 2);
    expect(bisect_right(E, 8, lo: 2, hi: 1), 2);
  });

  test('bisect_right for A lo=3 hi=1', () {
    expect(bisect_right(A, -2, lo: 3, hi: 1), 3);
    expect(bisect_right(A, -1, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 0, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 1, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 2, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 3, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 4, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 5, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 6, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 7, lo: 3, hi: 1), 3);
    expect(bisect_right(A, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_right for B lo=3 hi=1', () {
    expect(bisect_right(B, -2, lo: 3, hi: 1), 3);
    expect(bisect_right(B, -1, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 0, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 1, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 2, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 3, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 4, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 5, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 6, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 7, lo: 3, hi: 1), 3);
    expect(bisect_right(B, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_right for C lo=3 hi=1', () {
    expect(bisect_right(C, -2, lo: 3, hi: 1), 3);
    expect(bisect_right(C, -1, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 0, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 1, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 2, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 3, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 4, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 5, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 6, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 7, lo: 3, hi: 1), 3);
    expect(bisect_right(C, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_right for D lo=3 hi=1', () {
    expect(bisect_right(D, -2, lo: 3, hi: 1), 3);
    expect(bisect_right(D, -1, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 0, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 1, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 2, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 3, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 4, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 5, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 6, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 7, lo: 3, hi: 1), 3);
    expect(bisect_right(D, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_right for E lo=3 hi=1', () {
    expect(bisect_right(E, -2, lo: 3, hi: 1), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 3, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 4, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 5, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 6, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 7, lo: 3, hi: 1), 3);
    expect(bisect_right(E, 8, lo: 3, hi: 1), 3);
  });

  test('bisect_right for A lo=4 hi=1', () {
    expect(bisect_right(A, -2, lo: 4, hi: 1), 4);
    expect(bisect_right(A, -1, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 0, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 1, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 2, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 3, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 4, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 5, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 6, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 7, lo: 4, hi: 1), 4);
    expect(bisect_right(A, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_right for B lo=4 hi=1', () {
    expect(bisect_right(B, -2, lo: 4, hi: 1), 4);
    expect(bisect_right(B, -1, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 0, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 1, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 2, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 3, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 4, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 5, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 6, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 7, lo: 4, hi: 1), 4);
    expect(bisect_right(B, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_right for C lo=4 hi=1', () {
    expect(bisect_right(C, -2, lo: 4, hi: 1), 4);
    expect(bisect_right(C, -1, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 0, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 1, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 2, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 3, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 4, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 5, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 6, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 7, lo: 4, hi: 1), 4);
    expect(bisect_right(C, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_right for D lo=4 hi=1', () {
    expect(bisect_right(D, -2, lo: 4, hi: 1), 4);
    expect(bisect_right(D, -1, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 0, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 1, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 2, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 3, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 4, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 5, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 6, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 7, lo: 4, hi: 1), 4);
    expect(bisect_right(D, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_right for E lo=4 hi=1', () {
    expect(bisect_right(E, -2, lo: 4, hi: 1), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 3, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 4, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 5, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 6, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 7, lo: 4, hi: 1), 4);
    expect(bisect_right(E, 8, lo: 4, hi: 1), 4);
  });

  test('bisect_right for A lo=5 hi=1', () {
    expect(bisect_right(A, -2, lo: 5, hi: 1), 5);
    expect(bisect_right(A, -1, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 0, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 1, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 2, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 3, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 4, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 5, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 6, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 7, lo: 5, hi: 1), 5);
    expect(bisect_right(A, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_right for B lo=5 hi=1', () {
    expect(bisect_right(B, -2, lo: 5, hi: 1), 5);
    expect(bisect_right(B, -1, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 0, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 1, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 2, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 3, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 4, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 5, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 6, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 7, lo: 5, hi: 1), 5);
    expect(bisect_right(B, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_right for C lo=5 hi=1', () {
    expect(bisect_right(C, -2, lo: 5, hi: 1), 5);
    expect(bisect_right(C, -1, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 0, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 1, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 2, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 3, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 4, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 5, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 6, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 7, lo: 5, hi: 1), 5);
    expect(bisect_right(C, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_right for D lo=5 hi=1', () {
    expect(bisect_right(D, -2, lo: 5, hi: 1), 5);
    expect(bisect_right(D, -1, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 0, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 1, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 2, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 3, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 4, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 5, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 6, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 7, lo: 5, hi: 1), 5);
    expect(bisect_right(D, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_right for E lo=5 hi=1', () {
    expect(bisect_right(E, -2, lo: 5, hi: 1), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 3, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 4, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 5, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 6, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 7, lo: 5, hi: 1), 5);
    expect(bisect_right(E, 8, lo: 5, hi: 1), 5);
  });

  test('bisect_right for A lo=6 hi=1', () {
    expect(bisect_right(A, -2, lo: 6, hi: 1), 6);
    expect(bisect_right(A, -1, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 0, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 1, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 2, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 3, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 4, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 5, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 6, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 7, lo: 6, hi: 1), 6);
    expect(bisect_right(A, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_right for B lo=6 hi=1', () {
    expect(bisect_right(B, -2, lo: 6, hi: 1), 6);
    expect(bisect_right(B, -1, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 0, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 1, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 2, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 3, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 4, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 5, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 6, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 7, lo: 6, hi: 1), 6);
    expect(bisect_right(B, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_right for C lo=6 hi=1', () {
    expect(bisect_right(C, -2, lo: 6, hi: 1), 6);
    expect(bisect_right(C, -1, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 0, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 1, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 2, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 3, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 4, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 5, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 6, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 7, lo: 6, hi: 1), 6);
    expect(bisect_right(C, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_right for D lo=6 hi=1', () {
    expect(bisect_right(D, -2, lo: 6, hi: 1), 6);
    expect(bisect_right(D, -1, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 0, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 1, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 2, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 3, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 4, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 5, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 6, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 7, lo: 6, hi: 1), 6);
    expect(bisect_right(D, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_right for E lo=6 hi=1', () {
    expect(bisect_right(E, -2, lo: 6, hi: 1), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 4, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 5, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 6, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 7, lo: 6, hi: 1), 6);
    expect(bisect_right(E, 8, lo: 6, hi: 1), 6);
  });

  test('bisect_right for A lo=7 hi=1', () {
    expect(bisect_right(A, -2, lo: 7, hi: 1), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 1), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_right for B lo=7 hi=1', () {
    expect(bisect_right(B, -2, lo: 7, hi: 1), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 1), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_right for C lo=7 hi=1', () {
    expect(bisect_right(C, -2, lo: 7, hi: 1), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 1), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_right for D lo=7 hi=1', () {
    expect(bisect_right(D, -2, lo: 7, hi: 1), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 1), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_right for E lo=7 hi=1', () {
    expect(bisect_right(E, -2, lo: 7, hi: 1), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 1), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 1), 7);
  });

  test('bisect_right for A lo=8 hi=1', () {
    expect(bisect_right(A, -2, lo: 8, hi: 1), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 1), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_right for B lo=8 hi=1', () {
    expect(bisect_right(B, -2, lo: 8, hi: 1), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 1), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_right for C lo=8 hi=1', () {
    expect(bisect_right(C, -2, lo: 8, hi: 1), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 1), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_right for D lo=8 hi=1', () {
    expect(bisect_right(D, -2, lo: 8, hi: 1), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 1), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_right for E lo=8 hi=1', () {
    expect(bisect_right(E, -2, lo: 8, hi: 1), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 1), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 1), 8);
  });

  test('bisect_right for A lo=9 hi=1', () {
    expect(bisect_right(A, -2, lo: 9, hi: 1), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 1), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_right for B lo=9 hi=1', () {
    expect(bisect_right(B, -2, lo: 9, hi: 1), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 1), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_right for C lo=9 hi=1', () {
    expect(bisect_right(C, -2, lo: 9, hi: 1), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 1), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_right for D lo=9 hi=1', () {
    expect(bisect_right(D, -2, lo: 9, hi: 1), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 1), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_right for E lo=9 hi=1', () {
    expect(bisect_right(E, -2, lo: 9, hi: 1), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 1), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 1), 9);
  });

  test('bisect_right for A lo=None hi=2', () {
    expect(() => bisect_right(A, -2, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 2), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=2', () {
    expect(() => bisect_right(B, -2, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 2), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=2', () {
    expect(bisect_right(C, -2, hi: 2), 0);
    expect(bisect_right(C, -1, hi: 2), 0);
    expect(bisect_right(C, 0, hi: 2), 0);
    expect(bisect_right(C, 1, hi: 2), 0);
    expect(bisect_right(C, 2, hi: 2), 0);
    expect(bisect_right(C, 3, hi: 2), 0);
    expect(bisect_right(C, 4, hi: 2), 1);
    expect(bisect_right(C, 5, hi: 2), 2);
    expect(bisect_right(C, 6, hi: 2), 2);
    expect(bisect_right(C, 7, hi: 2), 2);
    expect(bisect_right(C, 8, hi: 2), 2);
  });

  test('bisect_right for D lo=None hi=2', () {
    expect(bisect_right(D, -2, hi: 2), 0);
    expect(bisect_right(D, -1, hi: 2), 0);
    expect(bisect_right(D, 0, hi: 2), 0);
    expect(bisect_right(D, 1, hi: 2), 0);
    expect(bisect_right(D, 2, hi: 2), 0);
    expect(bisect_right(D, 3, hi: 2), 1);
    expect(bisect_right(D, 4, hi: 2), 2);
    expect(bisect_right(D, 5, hi: 2), 2);
    expect(bisect_right(D, 6, hi: 2), 2);
    expect(bisect_right(D, 7, hi: 2), 2);
    expect(bisect_right(D, 8, hi: 2), 2);
  });

  test('bisect_right for E lo=None hi=2', () {
    expect(bisect_right(E, -2, hi: 2), 0);
    expect(bisect_right(E, -1, hi: 2), 0);
    expect(bisect_right(E, 0, hi: 2), 1);
    expect(bisect_right(E, 1, hi: 2), 2);
    expect(bisect_right(E, 2, hi: 2), 2);
    expect(bisect_right(E, 3, hi: 2), 2);
    expect(bisect_right(E, 4, hi: 2), 2);
    expect(bisect_right(E, 5, hi: 2), 2);
    expect(bisect_right(E, 6, hi: 2), 2);
    expect(bisect_right(E, 7, hi: 2), 2);
    expect(bisect_right(E, 8, hi: 2), 2);
  });

  test('bisect_right for A lo=0 hi=2', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=2', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=2', () {
    expect(bisect_right(C, -2, lo: 0, hi: 2), 0);
    expect(bisect_right(C, -1, lo: 0, hi: 2), 0);
    expect(bisect_right(C, 0, lo: 0, hi: 2), 0);
    expect(bisect_right(C, 1, lo: 0, hi: 2), 0);
    expect(bisect_right(C, 2, lo: 0, hi: 2), 0);
    expect(bisect_right(C, 3, lo: 0, hi: 2), 0);
    expect(bisect_right(C, 4, lo: 0, hi: 2), 1);
    expect(bisect_right(C, 5, lo: 0, hi: 2), 2);
    expect(bisect_right(C, 6, lo: 0, hi: 2), 2);
    expect(bisect_right(C, 7, lo: 0, hi: 2), 2);
    expect(bisect_right(C, 8, lo: 0, hi: 2), 2);
  });

  test('bisect_right for D lo=0 hi=2', () {
    expect(bisect_right(D, -2, lo: 0, hi: 2), 0);
    expect(bisect_right(D, -1, lo: 0, hi: 2), 0);
    expect(bisect_right(D, 0, lo: 0, hi: 2), 0);
    expect(bisect_right(D, 1, lo: 0, hi: 2), 0);
    expect(bisect_right(D, 2, lo: 0, hi: 2), 0);
    expect(bisect_right(D, 3, lo: 0, hi: 2), 1);
    expect(bisect_right(D, 4, lo: 0, hi: 2), 2);
    expect(bisect_right(D, 5, lo: 0, hi: 2), 2);
    expect(bisect_right(D, 6, lo: 0, hi: 2), 2);
    expect(bisect_right(D, 7, lo: 0, hi: 2), 2);
    expect(bisect_right(D, 8, lo: 0, hi: 2), 2);
  });

  test('bisect_right for E lo=0 hi=2', () {
    expect(bisect_right(E, -2, lo: 0, hi: 2), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 2), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 2), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 2), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 2), 2);
    expect(bisect_right(E, 3, lo: 0, hi: 2), 2);
    expect(bisect_right(E, 4, lo: 0, hi: 2), 2);
    expect(bisect_right(E, 5, lo: 0, hi: 2), 2);
    expect(bisect_right(E, 6, lo: 0, hi: 2), 2);
    expect(bisect_right(E, 7, lo: 0, hi: 2), 2);
    expect(bisect_right(E, 8, lo: 0, hi: 2), 2);
  });

  test('bisect_right for A lo=1 hi=2', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=2', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=2', () {
    expect(bisect_right(C, -2, lo: 1, hi: 2), 1);
    expect(bisect_right(C, -1, lo: 1, hi: 2), 1);
    expect(bisect_right(C, 0, lo: 1, hi: 2), 1);
    expect(bisect_right(C, 1, lo: 1, hi: 2), 1);
    expect(bisect_right(C, 2, lo: 1, hi: 2), 1);
    expect(bisect_right(C, 3, lo: 1, hi: 2), 1);
    expect(bisect_right(C, 4, lo: 1, hi: 2), 1);
    expect(bisect_right(C, 5, lo: 1, hi: 2), 2);
    expect(bisect_right(C, 6, lo: 1, hi: 2), 2);
    expect(bisect_right(C, 7, lo: 1, hi: 2), 2);
    expect(bisect_right(C, 8, lo: 1, hi: 2), 2);
  });

  test('bisect_right for D lo=1 hi=2', () {
    expect(bisect_right(D, -2, lo: 1, hi: 2), 1);
    expect(bisect_right(D, -1, lo: 1, hi: 2), 1);
    expect(bisect_right(D, 0, lo: 1, hi: 2), 1);
    expect(bisect_right(D, 1, lo: 1, hi: 2), 1);
    expect(bisect_right(D, 2, lo: 1, hi: 2), 1);
    expect(bisect_right(D, 3, lo: 1, hi: 2), 1);
    expect(bisect_right(D, 4, lo: 1, hi: 2), 2);
    expect(bisect_right(D, 5, lo: 1, hi: 2), 2);
    expect(bisect_right(D, 6, lo: 1, hi: 2), 2);
    expect(bisect_right(D, 7, lo: 1, hi: 2), 2);
    expect(bisect_right(D, 8, lo: 1, hi: 2), 2);
  });

  test('bisect_right for E lo=1 hi=2', () {
    expect(bisect_right(E, -2, lo: 1, hi: 2), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 2), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 2), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 2), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 2), 2);
    expect(bisect_right(E, 3, lo: 1, hi: 2), 2);
    expect(bisect_right(E, 4, lo: 1, hi: 2), 2);
    expect(bisect_right(E, 5, lo: 1, hi: 2), 2);
    expect(bisect_right(E, 6, lo: 1, hi: 2), 2);
    expect(bisect_right(E, 7, lo: 1, hi: 2), 2);
    expect(bisect_right(E, 8, lo: 1, hi: 2), 2);
  });

  test('bisect_right for A lo=2 hi=2', () {
    expect(bisect_right(A, -2, lo: 2, hi: 2), 2);
    expect(bisect_right(A, -1, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 0, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 1, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 2, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 3, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 4, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 5, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 6, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 7, lo: 2, hi: 2), 2);
    expect(bisect_right(A, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_right for B lo=2 hi=2', () {
    expect(bisect_right(B, -2, lo: 2, hi: 2), 2);
    expect(bisect_right(B, -1, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 0, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 1, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 2, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 3, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 4, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 5, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 6, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 7, lo: 2, hi: 2), 2);
    expect(bisect_right(B, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_right for C lo=2 hi=2', () {
    expect(bisect_right(C, -2, lo: 2, hi: 2), 2);
    expect(bisect_right(C, -1, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 0, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 1, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 2, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 3, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 4, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 5, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 6, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 7, lo: 2, hi: 2), 2);
    expect(bisect_right(C, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_right for D lo=2 hi=2', () {
    expect(bisect_right(D, -2, lo: 2, hi: 2), 2);
    expect(bisect_right(D, -1, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 0, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 1, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 2, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 3, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 4, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 5, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 6, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 7, lo: 2, hi: 2), 2);
    expect(bisect_right(D, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_right for E lo=2 hi=2', () {
    expect(bisect_right(E, -2, lo: 2, hi: 2), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 3, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 4, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 5, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 6, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 7, lo: 2, hi: 2), 2);
    expect(bisect_right(E, 8, lo: 2, hi: 2), 2);
  });

  test('bisect_right for A lo=3 hi=2', () {
    expect(bisect_right(A, -2, lo: 3, hi: 2), 3);
    expect(bisect_right(A, -1, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 0, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 1, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 2, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 3, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 4, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 5, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 6, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 7, lo: 3, hi: 2), 3);
    expect(bisect_right(A, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_right for B lo=3 hi=2', () {
    expect(bisect_right(B, -2, lo: 3, hi: 2), 3);
    expect(bisect_right(B, -1, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 0, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 1, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 2, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 3, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 4, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 5, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 6, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 7, lo: 3, hi: 2), 3);
    expect(bisect_right(B, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_right for C lo=3 hi=2', () {
    expect(bisect_right(C, -2, lo: 3, hi: 2), 3);
    expect(bisect_right(C, -1, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 0, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 1, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 2, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 3, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 4, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 5, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 6, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 7, lo: 3, hi: 2), 3);
    expect(bisect_right(C, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_right for D lo=3 hi=2', () {
    expect(bisect_right(D, -2, lo: 3, hi: 2), 3);
    expect(bisect_right(D, -1, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 0, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 1, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 2, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 3, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 4, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 5, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 6, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 7, lo: 3, hi: 2), 3);
    expect(bisect_right(D, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_right for E lo=3 hi=2', () {
    expect(bisect_right(E, -2, lo: 3, hi: 2), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 3, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 4, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 5, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 6, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 7, lo: 3, hi: 2), 3);
    expect(bisect_right(E, 8, lo: 3, hi: 2), 3);
  });

  test('bisect_right for A lo=4 hi=2', () {
    expect(bisect_right(A, -2, lo: 4, hi: 2), 4);
    expect(bisect_right(A, -1, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 0, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 1, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 2, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 3, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 4, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 5, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 6, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 7, lo: 4, hi: 2), 4);
    expect(bisect_right(A, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_right for B lo=4 hi=2', () {
    expect(bisect_right(B, -2, lo: 4, hi: 2), 4);
    expect(bisect_right(B, -1, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 0, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 1, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 2, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 3, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 4, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 5, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 6, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 7, lo: 4, hi: 2), 4);
    expect(bisect_right(B, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_right for C lo=4 hi=2', () {
    expect(bisect_right(C, -2, lo: 4, hi: 2), 4);
    expect(bisect_right(C, -1, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 0, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 1, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 2, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 3, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 4, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 5, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 6, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 7, lo: 4, hi: 2), 4);
    expect(bisect_right(C, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_right for D lo=4 hi=2', () {
    expect(bisect_right(D, -2, lo: 4, hi: 2), 4);
    expect(bisect_right(D, -1, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 0, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 1, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 2, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 3, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 4, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 5, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 6, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 7, lo: 4, hi: 2), 4);
    expect(bisect_right(D, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_right for E lo=4 hi=2', () {
    expect(bisect_right(E, -2, lo: 4, hi: 2), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 3, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 4, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 5, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 6, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 7, lo: 4, hi: 2), 4);
    expect(bisect_right(E, 8, lo: 4, hi: 2), 4);
  });

  test('bisect_right for A lo=5 hi=2', () {
    expect(bisect_right(A, -2, lo: 5, hi: 2), 5);
    expect(bisect_right(A, -1, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 0, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 1, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 2, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 3, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 4, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 5, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 6, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 7, lo: 5, hi: 2), 5);
    expect(bisect_right(A, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_right for B lo=5 hi=2', () {
    expect(bisect_right(B, -2, lo: 5, hi: 2), 5);
    expect(bisect_right(B, -1, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 0, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 1, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 2, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 3, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 4, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 5, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 6, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 7, lo: 5, hi: 2), 5);
    expect(bisect_right(B, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_right for C lo=5 hi=2', () {
    expect(bisect_right(C, -2, lo: 5, hi: 2), 5);
    expect(bisect_right(C, -1, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 0, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 1, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 2, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 3, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 4, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 5, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 6, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 7, lo: 5, hi: 2), 5);
    expect(bisect_right(C, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_right for D lo=5 hi=2', () {
    expect(bisect_right(D, -2, lo: 5, hi: 2), 5);
    expect(bisect_right(D, -1, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 0, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 1, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 2, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 3, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 4, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 5, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 6, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 7, lo: 5, hi: 2), 5);
    expect(bisect_right(D, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_right for E lo=5 hi=2', () {
    expect(bisect_right(E, -2, lo: 5, hi: 2), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 3, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 4, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 5, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 6, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 7, lo: 5, hi: 2), 5);
    expect(bisect_right(E, 8, lo: 5, hi: 2), 5);
  });

  test('bisect_right for A lo=6 hi=2', () {
    expect(bisect_right(A, -2, lo: 6, hi: 2), 6);
    expect(bisect_right(A, -1, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 0, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 1, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 2, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 3, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 4, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 5, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 6, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 7, lo: 6, hi: 2), 6);
    expect(bisect_right(A, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_right for B lo=6 hi=2', () {
    expect(bisect_right(B, -2, lo: 6, hi: 2), 6);
    expect(bisect_right(B, -1, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 0, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 1, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 2, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 3, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 4, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 5, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 6, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 7, lo: 6, hi: 2), 6);
    expect(bisect_right(B, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_right for C lo=6 hi=2', () {
    expect(bisect_right(C, -2, lo: 6, hi: 2), 6);
    expect(bisect_right(C, -1, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 0, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 1, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 2, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 3, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 4, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 5, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 6, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 7, lo: 6, hi: 2), 6);
    expect(bisect_right(C, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_right for D lo=6 hi=2', () {
    expect(bisect_right(D, -2, lo: 6, hi: 2), 6);
    expect(bisect_right(D, -1, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 0, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 1, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 2, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 3, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 4, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 5, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 6, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 7, lo: 6, hi: 2), 6);
    expect(bisect_right(D, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_right for E lo=6 hi=2', () {
    expect(bisect_right(E, -2, lo: 6, hi: 2), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 4, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 5, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 6, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 7, lo: 6, hi: 2), 6);
    expect(bisect_right(E, 8, lo: 6, hi: 2), 6);
  });

  test('bisect_right for A lo=7 hi=2', () {
    expect(bisect_right(A, -2, lo: 7, hi: 2), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 2), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_right for B lo=7 hi=2', () {
    expect(bisect_right(B, -2, lo: 7, hi: 2), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 2), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_right for C lo=7 hi=2', () {
    expect(bisect_right(C, -2, lo: 7, hi: 2), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 2), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_right for D lo=7 hi=2', () {
    expect(bisect_right(D, -2, lo: 7, hi: 2), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 2), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_right for E lo=7 hi=2', () {
    expect(bisect_right(E, -2, lo: 7, hi: 2), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 2), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 2), 7);
  });

  test('bisect_right for A lo=8 hi=2', () {
    expect(bisect_right(A, -2, lo: 8, hi: 2), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 2), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_right for B lo=8 hi=2', () {
    expect(bisect_right(B, -2, lo: 8, hi: 2), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 2), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_right for C lo=8 hi=2', () {
    expect(bisect_right(C, -2, lo: 8, hi: 2), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 2), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_right for D lo=8 hi=2', () {
    expect(bisect_right(D, -2, lo: 8, hi: 2), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 2), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_right for E lo=8 hi=2', () {
    expect(bisect_right(E, -2, lo: 8, hi: 2), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 2), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 2), 8);
  });

  test('bisect_right for A lo=9 hi=2', () {
    expect(bisect_right(A, -2, lo: 9, hi: 2), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 2), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_right for B lo=9 hi=2', () {
    expect(bisect_right(B, -2, lo: 9, hi: 2), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 2), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_right for C lo=9 hi=2', () {
    expect(bisect_right(C, -2, lo: 9, hi: 2), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 2), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_right for D lo=9 hi=2', () {
    expect(bisect_right(D, -2, lo: 9, hi: 2), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 2), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_right for E lo=9 hi=2', () {
    expect(bisect_right(E, -2, lo: 9, hi: 2), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 2), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 2), 9);
  });

  test('bisect_right for A lo=None hi=3', () {
    expect(() => bisect_right(A, -2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 3), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=3', () {
    expect(() => bisect_right(B, -2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 3), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=3', () {
    expect(bisect_right(C, -2, hi: 3), 0);
    expect(bisect_right(C, -1, hi: 3), 0);
    expect(bisect_right(C, 0, hi: 3), 0);
    expect(bisect_right(C, 1, hi: 3), 0);
    expect(bisect_right(C, 2, hi: 3), 0);
    expect(bisect_right(C, 3, hi: 3), 0);
    expect(bisect_right(C, 4, hi: 3), 1);
    expect(() => bisect_right(C, 5, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 6, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 7, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 8, hi: 3), throwsRangeError);
  });

  test('bisect_right for D lo=None hi=3', () {
    expect(bisect_right(D, -2, hi: 3), 0);
    expect(bisect_right(D, -1, hi: 3), 0);
    expect(bisect_right(D, 0, hi: 3), 0);
    expect(bisect_right(D, 1, hi: 3), 0);
    expect(bisect_right(D, 2, hi: 3), 0);
    expect(bisect_right(D, 3, hi: 3), 1);
    expect(bisect_right(D, 4, hi: 3), 2);
    expect(bisect_right(D, 5, hi: 3), 3);
    expect(bisect_right(D, 6, hi: 3), 3);
    expect(bisect_right(D, 7, hi: 3), 3);
    expect(bisect_right(D, 8, hi: 3), 3);
  });

  test('bisect_right for E lo=None hi=3', () {
    expect(bisect_right(E, -2, hi: 3), 0);
    expect(bisect_right(E, -1, hi: 3), 0);
    expect(bisect_right(E, 0, hi: 3), 1);
    expect(bisect_right(E, 1, hi: 3), 2);
    expect(bisect_right(E, 2, hi: 3), 3);
    expect(bisect_right(E, 3, hi: 3), 3);
    expect(bisect_right(E, 4, hi: 3), 3);
    expect(bisect_right(E, 5, hi: 3), 3);
    expect(bisect_right(E, 6, hi: 3), 3);
    expect(bisect_right(E, 7, hi: 3), 3);
    expect(bisect_right(E, 8, hi: 3), 3);
  });

  test('bisect_right for A lo=0 hi=3', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=3', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=3', () {
    expect(bisect_right(C, -2, lo: 0, hi: 3), 0);
    expect(bisect_right(C, -1, lo: 0, hi: 3), 0);
    expect(bisect_right(C, 0, lo: 0, hi: 3), 0);
    expect(bisect_right(C, 1, lo: 0, hi: 3), 0);
    expect(bisect_right(C, 2, lo: 0, hi: 3), 0);
    expect(bisect_right(C, 3, lo: 0, hi: 3), 0);
    expect(bisect_right(C, 4, lo: 0, hi: 3), 1);
    expect(() => bisect_right(C, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect_right for D lo=0 hi=3', () {
    expect(bisect_right(D, -2, lo: 0, hi: 3), 0);
    expect(bisect_right(D, -1, lo: 0, hi: 3), 0);
    expect(bisect_right(D, 0, lo: 0, hi: 3), 0);
    expect(bisect_right(D, 1, lo: 0, hi: 3), 0);
    expect(bisect_right(D, 2, lo: 0, hi: 3), 0);
    expect(bisect_right(D, 3, lo: 0, hi: 3), 1);
    expect(bisect_right(D, 4, lo: 0, hi: 3), 2);
    expect(bisect_right(D, 5, lo: 0, hi: 3), 3);
    expect(bisect_right(D, 6, lo: 0, hi: 3), 3);
    expect(bisect_right(D, 7, lo: 0, hi: 3), 3);
    expect(bisect_right(D, 8, lo: 0, hi: 3), 3);
  });

  test('bisect_right for E lo=0 hi=3', () {
    expect(bisect_right(E, -2, lo: 0, hi: 3), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 3), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 3), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 3), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 3), 3);
    expect(bisect_right(E, 3, lo: 0, hi: 3), 3);
    expect(bisect_right(E, 4, lo: 0, hi: 3), 3);
    expect(bisect_right(E, 5, lo: 0, hi: 3), 3);
    expect(bisect_right(E, 6, lo: 0, hi: 3), 3);
    expect(bisect_right(E, 7, lo: 0, hi: 3), 3);
    expect(bisect_right(E, 8, lo: 0, hi: 3), 3);
  });

  test('bisect_right for A lo=1 hi=3', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=3', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=3', () {
    expect(() => bisect_right(C, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect_right for D lo=1 hi=3', () {
    expect(bisect_right(D, -2, lo: 1, hi: 3), 1);
    expect(bisect_right(D, -1, lo: 1, hi: 3), 1);
    expect(bisect_right(D, 0, lo: 1, hi: 3), 1);
    expect(bisect_right(D, 1, lo: 1, hi: 3), 1);
    expect(bisect_right(D, 2, lo: 1, hi: 3), 1);
    expect(bisect_right(D, 3, lo: 1, hi: 3), 1);
    expect(bisect_right(D, 4, lo: 1, hi: 3), 2);
    expect(bisect_right(D, 5, lo: 1, hi: 3), 3);
    expect(bisect_right(D, 6, lo: 1, hi: 3), 3);
    expect(bisect_right(D, 7, lo: 1, hi: 3), 3);
    expect(bisect_right(D, 8, lo: 1, hi: 3), 3);
  });

  test('bisect_right for E lo=1 hi=3', () {
    expect(bisect_right(E, -2, lo: 1, hi: 3), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 3), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 3), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 3), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 3), 3);
    expect(bisect_right(E, 3, lo: 1, hi: 3), 3);
    expect(bisect_right(E, 4, lo: 1, hi: 3), 3);
    expect(bisect_right(E, 5, lo: 1, hi: 3), 3);
    expect(bisect_right(E, 6, lo: 1, hi: 3), 3);
    expect(bisect_right(E, 7, lo: 1, hi: 3), 3);
    expect(bisect_right(E, 8, lo: 1, hi: 3), 3);
  });

  test('bisect_right for A lo=2 hi=3', () {
    expect(() => bisect_right(A, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect_right for B lo=2 hi=3', () {
    expect(() => bisect_right(B, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect_right for C lo=2 hi=3', () {
    expect(() => bisect_right(C, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect_right for D lo=2 hi=3', () {
    expect(bisect_right(D, -2, lo: 2, hi: 3), 2);
    expect(bisect_right(D, -1, lo: 2, hi: 3), 2);
    expect(bisect_right(D, 0, lo: 2, hi: 3), 2);
    expect(bisect_right(D, 1, lo: 2, hi: 3), 2);
    expect(bisect_right(D, 2, lo: 2, hi: 3), 2);
    expect(bisect_right(D, 3, lo: 2, hi: 3), 2);
    expect(bisect_right(D, 4, lo: 2, hi: 3), 2);
    expect(bisect_right(D, 5, lo: 2, hi: 3), 3);
    expect(bisect_right(D, 6, lo: 2, hi: 3), 3);
    expect(bisect_right(D, 7, lo: 2, hi: 3), 3);
    expect(bisect_right(D, 8, lo: 2, hi: 3), 3);
  });

  test('bisect_right for E lo=2 hi=3', () {
    expect(bisect_right(E, -2, lo: 2, hi: 3), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 3), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 3), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 3), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 3), 3);
    expect(bisect_right(E, 3, lo: 2, hi: 3), 3);
    expect(bisect_right(E, 4, lo: 2, hi: 3), 3);
    expect(bisect_right(E, 5, lo: 2, hi: 3), 3);
    expect(bisect_right(E, 6, lo: 2, hi: 3), 3);
    expect(bisect_right(E, 7, lo: 2, hi: 3), 3);
    expect(bisect_right(E, 8, lo: 2, hi: 3), 3);
  });

  test('bisect_right for A lo=3 hi=3', () {
    expect(bisect_right(A, -2, lo: 3, hi: 3), 3);
    expect(bisect_right(A, -1, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 0, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 1, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 2, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 3, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 4, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 5, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 6, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 7, lo: 3, hi: 3), 3);
    expect(bisect_right(A, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_right for B lo=3 hi=3', () {
    expect(bisect_right(B, -2, lo: 3, hi: 3), 3);
    expect(bisect_right(B, -1, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 0, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 1, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 2, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 3, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 4, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 5, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 6, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 7, lo: 3, hi: 3), 3);
    expect(bisect_right(B, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_right for C lo=3 hi=3', () {
    expect(bisect_right(C, -2, lo: 3, hi: 3), 3);
    expect(bisect_right(C, -1, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 0, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 1, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 2, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 3, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 4, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 5, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 6, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 7, lo: 3, hi: 3), 3);
    expect(bisect_right(C, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_right for D lo=3 hi=3', () {
    expect(bisect_right(D, -2, lo: 3, hi: 3), 3);
    expect(bisect_right(D, -1, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 0, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 1, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 2, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 3, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 4, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 5, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 6, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 7, lo: 3, hi: 3), 3);
    expect(bisect_right(D, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_right for E lo=3 hi=3', () {
    expect(bisect_right(E, -2, lo: 3, hi: 3), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 3, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 4, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 5, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 6, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 7, lo: 3, hi: 3), 3);
    expect(bisect_right(E, 8, lo: 3, hi: 3), 3);
  });

  test('bisect_right for A lo=4 hi=3', () {
    expect(bisect_right(A, -2, lo: 4, hi: 3), 4);
    expect(bisect_right(A, -1, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 0, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 1, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 2, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 3, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 4, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 5, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 6, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 7, lo: 4, hi: 3), 4);
    expect(bisect_right(A, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_right for B lo=4 hi=3', () {
    expect(bisect_right(B, -2, lo: 4, hi: 3), 4);
    expect(bisect_right(B, -1, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 0, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 1, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 2, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 3, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 4, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 5, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 6, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 7, lo: 4, hi: 3), 4);
    expect(bisect_right(B, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_right for C lo=4 hi=3', () {
    expect(bisect_right(C, -2, lo: 4, hi: 3), 4);
    expect(bisect_right(C, -1, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 0, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 1, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 2, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 3, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 4, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 5, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 6, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 7, lo: 4, hi: 3), 4);
    expect(bisect_right(C, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_right for D lo=4 hi=3', () {
    expect(bisect_right(D, -2, lo: 4, hi: 3), 4);
    expect(bisect_right(D, -1, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 0, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 1, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 2, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 3, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 4, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 5, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 6, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 7, lo: 4, hi: 3), 4);
    expect(bisect_right(D, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_right for E lo=4 hi=3', () {
    expect(bisect_right(E, -2, lo: 4, hi: 3), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 3, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 4, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 5, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 6, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 7, lo: 4, hi: 3), 4);
    expect(bisect_right(E, 8, lo: 4, hi: 3), 4);
  });

  test('bisect_right for A lo=5 hi=3', () {
    expect(bisect_right(A, -2, lo: 5, hi: 3), 5);
    expect(bisect_right(A, -1, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 0, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 1, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 2, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 3, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 4, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 5, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 6, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 7, lo: 5, hi: 3), 5);
    expect(bisect_right(A, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_right for B lo=5 hi=3', () {
    expect(bisect_right(B, -2, lo: 5, hi: 3), 5);
    expect(bisect_right(B, -1, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 0, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 1, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 2, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 3, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 4, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 5, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 6, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 7, lo: 5, hi: 3), 5);
    expect(bisect_right(B, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_right for C lo=5 hi=3', () {
    expect(bisect_right(C, -2, lo: 5, hi: 3), 5);
    expect(bisect_right(C, -1, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 0, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 1, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 2, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 3, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 4, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 5, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 6, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 7, lo: 5, hi: 3), 5);
    expect(bisect_right(C, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_right for D lo=5 hi=3', () {
    expect(bisect_right(D, -2, lo: 5, hi: 3), 5);
    expect(bisect_right(D, -1, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 0, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 1, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 2, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 3, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 4, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 5, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 6, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 7, lo: 5, hi: 3), 5);
    expect(bisect_right(D, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_right for E lo=5 hi=3', () {
    expect(bisect_right(E, -2, lo: 5, hi: 3), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 3, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 4, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 5, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 6, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 7, lo: 5, hi: 3), 5);
    expect(bisect_right(E, 8, lo: 5, hi: 3), 5);
  });

  test('bisect_right for A lo=6 hi=3', () {
    expect(bisect_right(A, -2, lo: 6, hi: 3), 6);
    expect(bisect_right(A, -1, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 0, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 1, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 2, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 3, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 4, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 5, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 6, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 7, lo: 6, hi: 3), 6);
    expect(bisect_right(A, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_right for B lo=6 hi=3', () {
    expect(bisect_right(B, -2, lo: 6, hi: 3), 6);
    expect(bisect_right(B, -1, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 0, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 1, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 2, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 3, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 4, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 5, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 6, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 7, lo: 6, hi: 3), 6);
    expect(bisect_right(B, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_right for C lo=6 hi=3', () {
    expect(bisect_right(C, -2, lo: 6, hi: 3), 6);
    expect(bisect_right(C, -1, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 0, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 1, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 2, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 3, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 4, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 5, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 6, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 7, lo: 6, hi: 3), 6);
    expect(bisect_right(C, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_right for D lo=6 hi=3', () {
    expect(bisect_right(D, -2, lo: 6, hi: 3), 6);
    expect(bisect_right(D, -1, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 0, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 1, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 2, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 3, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 4, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 5, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 6, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 7, lo: 6, hi: 3), 6);
    expect(bisect_right(D, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_right for E lo=6 hi=3', () {
    expect(bisect_right(E, -2, lo: 6, hi: 3), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 4, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 5, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 6, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 7, lo: 6, hi: 3), 6);
    expect(bisect_right(E, 8, lo: 6, hi: 3), 6);
  });

  test('bisect_right for A lo=7 hi=3', () {
    expect(bisect_right(A, -2, lo: 7, hi: 3), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 3), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_right for B lo=7 hi=3', () {
    expect(bisect_right(B, -2, lo: 7, hi: 3), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 3), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_right for C lo=7 hi=3', () {
    expect(bisect_right(C, -2, lo: 7, hi: 3), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 3), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_right for D lo=7 hi=3', () {
    expect(bisect_right(D, -2, lo: 7, hi: 3), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 3), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_right for E lo=7 hi=3', () {
    expect(bisect_right(E, -2, lo: 7, hi: 3), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 3), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 3), 7);
  });

  test('bisect_right for A lo=8 hi=3', () {
    expect(bisect_right(A, -2, lo: 8, hi: 3), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 3), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_right for B lo=8 hi=3', () {
    expect(bisect_right(B, -2, lo: 8, hi: 3), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 3), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_right for C lo=8 hi=3', () {
    expect(bisect_right(C, -2, lo: 8, hi: 3), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 3), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_right for D lo=8 hi=3', () {
    expect(bisect_right(D, -2, lo: 8, hi: 3), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 3), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_right for E lo=8 hi=3', () {
    expect(bisect_right(E, -2, lo: 8, hi: 3), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 3), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 3), 8);
  });

  test('bisect_right for A lo=9 hi=3', () {
    expect(bisect_right(A, -2, lo: 9, hi: 3), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 3), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_right for B lo=9 hi=3', () {
    expect(bisect_right(B, -2, lo: 9, hi: 3), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 3), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_right for C lo=9 hi=3', () {
    expect(bisect_right(C, -2, lo: 9, hi: 3), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 3), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_right for D lo=9 hi=3', () {
    expect(bisect_right(D, -2, lo: 9, hi: 3), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 3), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_right for E lo=9 hi=3', () {
    expect(bisect_right(E, -2, lo: 9, hi: 3), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 3), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 3), 9);
  });

  test('bisect_right for A lo=None hi=4', () {
    expect(() => bisect_right(A, -2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 4), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=4', () {
    expect(() => bisect_right(B, -2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 4), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=4', () {
    expect(() => bisect_right(C, -2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, -1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 4, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 5, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 6, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 7, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 8, hi: 4), throwsRangeError);
  });

  test('bisect_right for D lo=None hi=4', () {
    expect(bisect_right(D, -2, hi: 4), 0);
    expect(bisect_right(D, -1, hi: 4), 0);
    expect(bisect_right(D, 0, hi: 4), 0);
    expect(bisect_right(D, 1, hi: 4), 0);
    expect(bisect_right(D, 2, hi: 4), 0);
    expect(bisect_right(D, 3, hi: 4), 1);
    expect(bisect_right(D, 4, hi: 4), 2);
    expect(() => bisect_right(D, 5, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 6, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 7, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 8, hi: 4), throwsRangeError);
  });

  test('bisect_right for E lo=None hi=4', () {
    expect(bisect_right(E, -2, hi: 4), 0);
    expect(bisect_right(E, -1, hi: 4), 0);
    expect(bisect_right(E, 0, hi: 4), 1);
    expect(bisect_right(E, 1, hi: 4), 2);
    expect(bisect_right(E, 2, hi: 4), 4);
    expect(bisect_right(E, 3, hi: 4), 4);
    expect(bisect_right(E, 4, hi: 4), 4);
    expect(bisect_right(E, 5, hi: 4), 4);
    expect(bisect_right(E, 6, hi: 4), 4);
    expect(bisect_right(E, 7, hi: 4), 4);
    expect(bisect_right(E, 8, hi: 4), 4);
  });

  test('bisect_right for A lo=0 hi=4', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=4', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=4', () {
    expect(() => bisect_right(C, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_right for D lo=0 hi=4', () {
    expect(bisect_right(D, -2, lo: 0, hi: 4), 0);
    expect(bisect_right(D, -1, lo: 0, hi: 4), 0);
    expect(bisect_right(D, 0, lo: 0, hi: 4), 0);
    expect(bisect_right(D, 1, lo: 0, hi: 4), 0);
    expect(bisect_right(D, 2, lo: 0, hi: 4), 0);
    expect(bisect_right(D, 3, lo: 0, hi: 4), 1);
    expect(bisect_right(D, 4, lo: 0, hi: 4), 2);
    expect(() => bisect_right(D, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect_right for E lo=0 hi=4', () {
    expect(bisect_right(E, -2, lo: 0, hi: 4), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 4), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 4), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 4), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 4), 4);
    expect(bisect_right(E, 3, lo: 0, hi: 4), 4);
    expect(bisect_right(E, 4, lo: 0, hi: 4), 4);
    expect(bisect_right(E, 5, lo: 0, hi: 4), 4);
    expect(bisect_right(E, 6, lo: 0, hi: 4), 4);
    expect(bisect_right(E, 7, lo: 0, hi: 4), 4);
    expect(bisect_right(E, 8, lo: 0, hi: 4), 4);
  });

  test('bisect_right for A lo=1 hi=4', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=4', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=4', () {
    expect(() => bisect_right(C, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_right for D lo=1 hi=4', () {
    expect(bisect_right(D, -2, lo: 1, hi: 4), 1);
    expect(bisect_right(D, -1, lo: 1, hi: 4), 1);
    expect(bisect_right(D, 0, lo: 1, hi: 4), 1);
    expect(bisect_right(D, 1, lo: 1, hi: 4), 1);
    expect(bisect_right(D, 2, lo: 1, hi: 4), 1);
    expect(bisect_right(D, 3, lo: 1, hi: 4), 1);
    expect(bisect_right(D, 4, lo: 1, hi: 4), 2);
    expect(() => bisect_right(D, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect_right for E lo=1 hi=4', () {
    expect(bisect_right(E, -2, lo: 1, hi: 4), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 4), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 4), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 4), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 4), 4);
    expect(bisect_right(E, 3, lo: 1, hi: 4), 4);
    expect(bisect_right(E, 4, lo: 1, hi: 4), 4);
    expect(bisect_right(E, 5, lo: 1, hi: 4), 4);
    expect(bisect_right(E, 6, lo: 1, hi: 4), 4);
    expect(bisect_right(E, 7, lo: 1, hi: 4), 4);
    expect(bisect_right(E, 8, lo: 1, hi: 4), 4);
  });

  test('bisect_right for A lo=2 hi=4', () {
    expect(() => bisect_right(A, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_right for B lo=2 hi=4', () {
    expect(() => bisect_right(B, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_right for C lo=2 hi=4', () {
    expect(() => bisect_right(C, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_right for D lo=2 hi=4', () {
    expect(() => bisect_right(D, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect_right for E lo=2 hi=4', () {
    expect(bisect_right(E, -2, lo: 2, hi: 4), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 4), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 4), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 4), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 4), 4);
    expect(bisect_right(E, 3, lo: 2, hi: 4), 4);
    expect(bisect_right(E, 4, lo: 2, hi: 4), 4);
    expect(bisect_right(E, 5, lo: 2, hi: 4), 4);
    expect(bisect_right(E, 6, lo: 2, hi: 4), 4);
    expect(bisect_right(E, 7, lo: 2, hi: 4), 4);
    expect(bisect_right(E, 8, lo: 2, hi: 4), 4);
  });

  test('bisect_right for A lo=3 hi=4', () {
    expect(() => bisect_right(A, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_right for B lo=3 hi=4', () {
    expect(() => bisect_right(B, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_right for C lo=3 hi=4', () {
    expect(() => bisect_right(C, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_right for D lo=3 hi=4', () {
    expect(() => bisect_right(D, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect_right for E lo=3 hi=4', () {
    expect(bisect_right(E, -2, lo: 3, hi: 4), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 4), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 4), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 4), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 4), 4);
    expect(bisect_right(E, 3, lo: 3, hi: 4), 4);
    expect(bisect_right(E, 4, lo: 3, hi: 4), 4);
    expect(bisect_right(E, 5, lo: 3, hi: 4), 4);
    expect(bisect_right(E, 6, lo: 3, hi: 4), 4);
    expect(bisect_right(E, 7, lo: 3, hi: 4), 4);
    expect(bisect_right(E, 8, lo: 3, hi: 4), 4);
  });

  test('bisect_right for A lo=4 hi=4', () {
    expect(bisect_right(A, -2, lo: 4, hi: 4), 4);
    expect(bisect_right(A, -1, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 0, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 1, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 2, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 3, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 4, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 5, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 6, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 7, lo: 4, hi: 4), 4);
    expect(bisect_right(A, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_right for B lo=4 hi=4', () {
    expect(bisect_right(B, -2, lo: 4, hi: 4), 4);
    expect(bisect_right(B, -1, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 0, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 1, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 2, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 3, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 4, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 5, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 6, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 7, lo: 4, hi: 4), 4);
    expect(bisect_right(B, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_right for C lo=4 hi=4', () {
    expect(bisect_right(C, -2, lo: 4, hi: 4), 4);
    expect(bisect_right(C, -1, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 0, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 1, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 2, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 3, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 4, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 5, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 6, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 7, lo: 4, hi: 4), 4);
    expect(bisect_right(C, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_right for D lo=4 hi=4', () {
    expect(bisect_right(D, -2, lo: 4, hi: 4), 4);
    expect(bisect_right(D, -1, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 0, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 1, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 2, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 3, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 4, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 5, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 6, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 7, lo: 4, hi: 4), 4);
    expect(bisect_right(D, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_right for E lo=4 hi=4', () {
    expect(bisect_right(E, -2, lo: 4, hi: 4), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 3, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 4, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 5, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 6, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 7, lo: 4, hi: 4), 4);
    expect(bisect_right(E, 8, lo: 4, hi: 4), 4);
  });

  test('bisect_right for A lo=5 hi=4', () {
    expect(bisect_right(A, -2, lo: 5, hi: 4), 5);
    expect(bisect_right(A, -1, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 0, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 1, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 2, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 3, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 4, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 5, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 6, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 7, lo: 5, hi: 4), 5);
    expect(bisect_right(A, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_right for B lo=5 hi=4', () {
    expect(bisect_right(B, -2, lo: 5, hi: 4), 5);
    expect(bisect_right(B, -1, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 0, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 1, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 2, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 3, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 4, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 5, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 6, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 7, lo: 5, hi: 4), 5);
    expect(bisect_right(B, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_right for C lo=5 hi=4', () {
    expect(bisect_right(C, -2, lo: 5, hi: 4), 5);
    expect(bisect_right(C, -1, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 0, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 1, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 2, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 3, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 4, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 5, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 6, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 7, lo: 5, hi: 4), 5);
    expect(bisect_right(C, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_right for D lo=5 hi=4', () {
    expect(bisect_right(D, -2, lo: 5, hi: 4), 5);
    expect(bisect_right(D, -1, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 0, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 1, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 2, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 3, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 4, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 5, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 6, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 7, lo: 5, hi: 4), 5);
    expect(bisect_right(D, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_right for E lo=5 hi=4', () {
    expect(bisect_right(E, -2, lo: 5, hi: 4), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 3, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 4, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 5, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 6, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 7, lo: 5, hi: 4), 5);
    expect(bisect_right(E, 8, lo: 5, hi: 4), 5);
  });

  test('bisect_right for A lo=6 hi=4', () {
    expect(bisect_right(A, -2, lo: 6, hi: 4), 6);
    expect(bisect_right(A, -1, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 0, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 1, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 2, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 3, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 4, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 5, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 6, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 7, lo: 6, hi: 4), 6);
    expect(bisect_right(A, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_right for B lo=6 hi=4', () {
    expect(bisect_right(B, -2, lo: 6, hi: 4), 6);
    expect(bisect_right(B, -1, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 0, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 1, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 2, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 3, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 4, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 5, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 6, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 7, lo: 6, hi: 4), 6);
    expect(bisect_right(B, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_right for C lo=6 hi=4', () {
    expect(bisect_right(C, -2, lo: 6, hi: 4), 6);
    expect(bisect_right(C, -1, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 0, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 1, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 2, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 3, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 4, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 5, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 6, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 7, lo: 6, hi: 4), 6);
    expect(bisect_right(C, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_right for D lo=6 hi=4', () {
    expect(bisect_right(D, -2, lo: 6, hi: 4), 6);
    expect(bisect_right(D, -1, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 0, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 1, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 2, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 3, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 4, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 5, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 6, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 7, lo: 6, hi: 4), 6);
    expect(bisect_right(D, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_right for E lo=6 hi=4', () {
    expect(bisect_right(E, -2, lo: 6, hi: 4), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 4, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 5, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 6, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 7, lo: 6, hi: 4), 6);
    expect(bisect_right(E, 8, lo: 6, hi: 4), 6);
  });

  test('bisect_right for A lo=7 hi=4', () {
    expect(bisect_right(A, -2, lo: 7, hi: 4), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 4), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_right for B lo=7 hi=4', () {
    expect(bisect_right(B, -2, lo: 7, hi: 4), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 4), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_right for C lo=7 hi=4', () {
    expect(bisect_right(C, -2, lo: 7, hi: 4), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 4), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_right for D lo=7 hi=4', () {
    expect(bisect_right(D, -2, lo: 7, hi: 4), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 4), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_right for E lo=7 hi=4', () {
    expect(bisect_right(E, -2, lo: 7, hi: 4), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 4), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 4), 7);
  });

  test('bisect_right for A lo=8 hi=4', () {
    expect(bisect_right(A, -2, lo: 8, hi: 4), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 4), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_right for B lo=8 hi=4', () {
    expect(bisect_right(B, -2, lo: 8, hi: 4), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 4), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_right for C lo=8 hi=4', () {
    expect(bisect_right(C, -2, lo: 8, hi: 4), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 4), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_right for D lo=8 hi=4', () {
    expect(bisect_right(D, -2, lo: 8, hi: 4), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 4), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_right for E lo=8 hi=4', () {
    expect(bisect_right(E, -2, lo: 8, hi: 4), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 4), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 4), 8);
  });

  test('bisect_right for A lo=9 hi=4', () {
    expect(bisect_right(A, -2, lo: 9, hi: 4), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 4), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_right for B lo=9 hi=4', () {
    expect(bisect_right(B, -2, lo: 9, hi: 4), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 4), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_right for C lo=9 hi=4', () {
    expect(bisect_right(C, -2, lo: 9, hi: 4), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 4), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_right for D lo=9 hi=4', () {
    expect(bisect_right(D, -2, lo: 9, hi: 4), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 4), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_right for E lo=9 hi=4', () {
    expect(bisect_right(E, -2, lo: 9, hi: 4), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 4), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 4), 9);
  });

  test('bisect_right for A lo=None hi=5', () {
    expect(() => bisect_right(A, -2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 5), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=5', () {
    expect(() => bisect_right(B, -2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 5), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=5', () {
    expect(() => bisect_right(C, -2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, -1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 5, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 6, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 7, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 8, hi: 5), throwsRangeError);
  });

  test('bisect_right for D lo=None hi=5', () {
    expect(bisect_right(D, -2, hi: 5), 0);
    expect(bisect_right(D, -1, hi: 5), 0);
    expect(bisect_right(D, 0, hi: 5), 0);
    expect(bisect_right(D, 1, hi: 5), 0);
    expect(bisect_right(D, 2, hi: 5), 0);
    expect(bisect_right(D, 3, hi: 5), 1);
    expect(bisect_right(D, 4, hi: 5), 2);
    expect(() => bisect_right(D, 5, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 6, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 7, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 8, hi: 5), throwsRangeError);
  });

  test('bisect_right for E lo=None hi=5', () {
    expect(bisect_right(E, -2, hi: 5), 0);
    expect(bisect_right(E, -1, hi: 5), 0);
    expect(bisect_right(E, 0, hi: 5), 1);
    expect(bisect_right(E, 1, hi: 5), 2);
    expect(bisect_right(E, 2, hi: 5), 5);
    expect(bisect_right(E, 3, hi: 5), 5);
    expect(bisect_right(E, 4, hi: 5), 5);
    expect(bisect_right(E, 5, hi: 5), 5);
    expect(bisect_right(E, 6, hi: 5), 5);
    expect(bisect_right(E, 7, hi: 5), 5);
    expect(bisect_right(E, 8, hi: 5), 5);
  });

  test('bisect_right for A lo=0 hi=5', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=5', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=5', () {
    expect(() => bisect_right(C, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_right for D lo=0 hi=5', () {
    expect(bisect_right(D, -2, lo: 0, hi: 5), 0);
    expect(bisect_right(D, -1, lo: 0, hi: 5), 0);
    expect(bisect_right(D, 0, lo: 0, hi: 5), 0);
    expect(bisect_right(D, 1, lo: 0, hi: 5), 0);
    expect(bisect_right(D, 2, lo: 0, hi: 5), 0);
    expect(bisect_right(D, 3, lo: 0, hi: 5), 1);
    expect(bisect_right(D, 4, lo: 0, hi: 5), 2);
    expect(() => bisect_right(D, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect_right for E lo=0 hi=5', () {
    expect(bisect_right(E, -2, lo: 0, hi: 5), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 5), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 5), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 5), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 5), 5);
    expect(bisect_right(E, 3, lo: 0, hi: 5), 5);
    expect(bisect_right(E, 4, lo: 0, hi: 5), 5);
    expect(bisect_right(E, 5, lo: 0, hi: 5), 5);
    expect(bisect_right(E, 6, lo: 0, hi: 5), 5);
    expect(bisect_right(E, 7, lo: 0, hi: 5), 5);
    expect(bisect_right(E, 8, lo: 0, hi: 5), 5);
  });

  test('bisect_right for A lo=1 hi=5', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=5', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=5', () {
    expect(() => bisect_right(C, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_right for D lo=1 hi=5', () {
    expect(() => bisect_right(D, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect_right for E lo=1 hi=5', () {
    expect(bisect_right(E, -2, lo: 1, hi: 5), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 5), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 5), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 5), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 5), 5);
    expect(bisect_right(E, 3, lo: 1, hi: 5), 5);
    expect(bisect_right(E, 4, lo: 1, hi: 5), 5);
    expect(bisect_right(E, 5, lo: 1, hi: 5), 5);
    expect(bisect_right(E, 6, lo: 1, hi: 5), 5);
    expect(bisect_right(E, 7, lo: 1, hi: 5), 5);
    expect(bisect_right(E, 8, lo: 1, hi: 5), 5);
  });

  test('bisect_right for A lo=2 hi=5', () {
    expect(() => bisect_right(A, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_right for B lo=2 hi=5', () {
    expect(() => bisect_right(B, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_right for C lo=2 hi=5', () {
    expect(() => bisect_right(C, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_right for D lo=2 hi=5', () {
    expect(() => bisect_right(D, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect_right for E lo=2 hi=5', () {
    expect(bisect_right(E, -2, lo: 2, hi: 5), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 5), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 5), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 5), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 5), 5);
    expect(bisect_right(E, 3, lo: 2, hi: 5), 5);
    expect(bisect_right(E, 4, lo: 2, hi: 5), 5);
    expect(bisect_right(E, 5, lo: 2, hi: 5), 5);
    expect(bisect_right(E, 6, lo: 2, hi: 5), 5);
    expect(bisect_right(E, 7, lo: 2, hi: 5), 5);
    expect(bisect_right(E, 8, lo: 2, hi: 5), 5);
  });

  test('bisect_right for A lo=3 hi=5', () {
    expect(() => bisect_right(A, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_right for B lo=3 hi=5', () {
    expect(() => bisect_right(B, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_right for C lo=3 hi=5', () {
    expect(() => bisect_right(C, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_right for D lo=3 hi=5', () {
    expect(() => bisect_right(D, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect_right for E lo=3 hi=5', () {
    expect(bisect_right(E, -2, lo: 3, hi: 5), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 5), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 5), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 5), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 5), 5);
    expect(bisect_right(E, 3, lo: 3, hi: 5), 5);
    expect(bisect_right(E, 4, lo: 3, hi: 5), 5);
    expect(bisect_right(E, 5, lo: 3, hi: 5), 5);
    expect(bisect_right(E, 6, lo: 3, hi: 5), 5);
    expect(bisect_right(E, 7, lo: 3, hi: 5), 5);
    expect(bisect_right(E, 8, lo: 3, hi: 5), 5);
  });

  test('bisect_right for A lo=4 hi=5', () {
    expect(() => bisect_right(A, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_right for B lo=4 hi=5', () {
    expect(() => bisect_right(B, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_right for C lo=4 hi=5', () {
    expect(() => bisect_right(C, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_right for D lo=4 hi=5', () {
    expect(() => bisect_right(D, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect_right for E lo=4 hi=5', () {
    expect(bisect_right(E, -2, lo: 4, hi: 5), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 5), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 5), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 5), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 5), 5);
    expect(bisect_right(E, 3, lo: 4, hi: 5), 5);
    expect(bisect_right(E, 4, lo: 4, hi: 5), 5);
    expect(bisect_right(E, 5, lo: 4, hi: 5), 5);
    expect(bisect_right(E, 6, lo: 4, hi: 5), 5);
    expect(bisect_right(E, 7, lo: 4, hi: 5), 5);
    expect(bisect_right(E, 8, lo: 4, hi: 5), 5);
  });

  test('bisect_right for A lo=5 hi=5', () {
    expect(bisect_right(A, -2, lo: 5, hi: 5), 5);
    expect(bisect_right(A, -1, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 0, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 1, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 2, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 3, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 4, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 5, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 6, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 7, lo: 5, hi: 5), 5);
    expect(bisect_right(A, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_right for B lo=5 hi=5', () {
    expect(bisect_right(B, -2, lo: 5, hi: 5), 5);
    expect(bisect_right(B, -1, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 0, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 1, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 2, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 3, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 4, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 5, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 6, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 7, lo: 5, hi: 5), 5);
    expect(bisect_right(B, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_right for C lo=5 hi=5', () {
    expect(bisect_right(C, -2, lo: 5, hi: 5), 5);
    expect(bisect_right(C, -1, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 0, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 1, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 2, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 3, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 4, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 5, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 6, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 7, lo: 5, hi: 5), 5);
    expect(bisect_right(C, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_right for D lo=5 hi=5', () {
    expect(bisect_right(D, -2, lo: 5, hi: 5), 5);
    expect(bisect_right(D, -1, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 0, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 1, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 2, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 3, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 4, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 5, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 6, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 7, lo: 5, hi: 5), 5);
    expect(bisect_right(D, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_right for E lo=5 hi=5', () {
    expect(bisect_right(E, -2, lo: 5, hi: 5), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 3, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 4, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 5, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 6, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 7, lo: 5, hi: 5), 5);
    expect(bisect_right(E, 8, lo: 5, hi: 5), 5);
  });

  test('bisect_right for A lo=6 hi=5', () {
    expect(bisect_right(A, -2, lo: 6, hi: 5), 6);
    expect(bisect_right(A, -1, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 0, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 1, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 2, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 3, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 4, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 5, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 6, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 7, lo: 6, hi: 5), 6);
    expect(bisect_right(A, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_right for B lo=6 hi=5', () {
    expect(bisect_right(B, -2, lo: 6, hi: 5), 6);
    expect(bisect_right(B, -1, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 0, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 1, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 2, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 3, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 4, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 5, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 6, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 7, lo: 6, hi: 5), 6);
    expect(bisect_right(B, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_right for C lo=6 hi=5', () {
    expect(bisect_right(C, -2, lo: 6, hi: 5), 6);
    expect(bisect_right(C, -1, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 0, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 1, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 2, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 3, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 4, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 5, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 6, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 7, lo: 6, hi: 5), 6);
    expect(bisect_right(C, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_right for D lo=6 hi=5', () {
    expect(bisect_right(D, -2, lo: 6, hi: 5), 6);
    expect(bisect_right(D, -1, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 0, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 1, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 2, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 3, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 4, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 5, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 6, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 7, lo: 6, hi: 5), 6);
    expect(bisect_right(D, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_right for E lo=6 hi=5', () {
    expect(bisect_right(E, -2, lo: 6, hi: 5), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 4, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 5, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 6, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 7, lo: 6, hi: 5), 6);
    expect(bisect_right(E, 8, lo: 6, hi: 5), 6);
  });

  test('bisect_right for A lo=7 hi=5', () {
    expect(bisect_right(A, -2, lo: 7, hi: 5), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 5), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_right for B lo=7 hi=5', () {
    expect(bisect_right(B, -2, lo: 7, hi: 5), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 5), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_right for C lo=7 hi=5', () {
    expect(bisect_right(C, -2, lo: 7, hi: 5), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 5), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_right for D lo=7 hi=5', () {
    expect(bisect_right(D, -2, lo: 7, hi: 5), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 5), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_right for E lo=7 hi=5', () {
    expect(bisect_right(E, -2, lo: 7, hi: 5), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 5), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 5), 7);
  });

  test('bisect_right for A lo=8 hi=5', () {
    expect(bisect_right(A, -2, lo: 8, hi: 5), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 5), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_right for B lo=8 hi=5', () {
    expect(bisect_right(B, -2, lo: 8, hi: 5), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 5), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_right for C lo=8 hi=5', () {
    expect(bisect_right(C, -2, lo: 8, hi: 5), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 5), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_right for D lo=8 hi=5', () {
    expect(bisect_right(D, -2, lo: 8, hi: 5), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 5), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_right for E lo=8 hi=5', () {
    expect(bisect_right(E, -2, lo: 8, hi: 5), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 5), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 5), 8);
  });

  test('bisect_right for A lo=9 hi=5', () {
    expect(bisect_right(A, -2, lo: 9, hi: 5), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 5), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_right for B lo=9 hi=5', () {
    expect(bisect_right(B, -2, lo: 9, hi: 5), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 5), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_right for C lo=9 hi=5', () {
    expect(bisect_right(C, -2, lo: 9, hi: 5), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 5), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_right for D lo=9 hi=5', () {
    expect(bisect_right(D, -2, lo: 9, hi: 5), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 5), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_right for E lo=9 hi=5', () {
    expect(bisect_right(E, -2, lo: 9, hi: 5), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 5), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 5), 9);
  });

  test('bisect_right for A lo=None hi=6', () {
    expect(() => bisect_right(A, -2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 6), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=6', () {
    expect(() => bisect_right(B, -2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 6), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=6', () {
    expect(() => bisect_right(C, -2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, -1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 6, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 7, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 8, hi: 6), throwsRangeError);
  });

  test('bisect_right for D lo=None hi=6', () {
    expect(() => bisect_right(D, -2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, -1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 6, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 7, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 8, hi: 6), throwsRangeError);
  });

  test('bisect_right for E lo=None hi=6', () {
    expect(bisect_right(E, -2, hi: 6), 0);
    expect(bisect_right(E, -1, hi: 6), 0);
    expect(bisect_right(E, 0, hi: 6), 1);
    expect(bisect_right(E, 1, hi: 6), 2);
    expect(bisect_right(E, 2, hi: 6), 6);
    expect(bisect_right(E, 3, hi: 6), 6);
    expect(bisect_right(E, 4, hi: 6), 6);
    expect(bisect_right(E, 5, hi: 6), 6);
    expect(bisect_right(E, 6, hi: 6), 6);
    expect(bisect_right(E, 7, hi: 6), 6);
    expect(bisect_right(E, 8, hi: 6), 6);
  });

  test('bisect_right for A lo=0 hi=6', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=6', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=6', () {
    expect(() => bisect_right(C, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_right for D lo=0 hi=6', () {
    expect(() => bisect_right(D, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect_right for E lo=0 hi=6', () {
    expect(bisect_right(E, -2, lo: 0, hi: 6), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 6), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 6), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 6), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 6), 6);
    expect(bisect_right(E, 3, lo: 0, hi: 6), 6);
    expect(bisect_right(E, 4, lo: 0, hi: 6), 6);
    expect(bisect_right(E, 5, lo: 0, hi: 6), 6);
    expect(bisect_right(E, 6, lo: 0, hi: 6), 6);
    expect(bisect_right(E, 7, lo: 0, hi: 6), 6);
    expect(bisect_right(E, 8, lo: 0, hi: 6), 6);
  });

  test('bisect_right for A lo=1 hi=6', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=6', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=6', () {
    expect(() => bisect_right(C, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_right for D lo=1 hi=6', () {
    expect(() => bisect_right(D, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect_right for E lo=1 hi=6', () {
    expect(bisect_right(E, -2, lo: 1, hi: 6), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 6), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 6), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 6), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 6), 6);
    expect(bisect_right(E, 3, lo: 1, hi: 6), 6);
    expect(bisect_right(E, 4, lo: 1, hi: 6), 6);
    expect(bisect_right(E, 5, lo: 1, hi: 6), 6);
    expect(bisect_right(E, 6, lo: 1, hi: 6), 6);
    expect(bisect_right(E, 7, lo: 1, hi: 6), 6);
    expect(bisect_right(E, 8, lo: 1, hi: 6), 6);
  });

  test('bisect_right for A lo=2 hi=6', () {
    expect(() => bisect_right(A, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_right for B lo=2 hi=6', () {
    expect(() => bisect_right(B, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_right for C lo=2 hi=6', () {
    expect(() => bisect_right(C, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_right for D lo=2 hi=6', () {
    expect(() => bisect_right(D, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect_right for E lo=2 hi=6', () {
    expect(bisect_right(E, -2, lo: 2, hi: 6), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 6), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 6), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 6), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 6), 6);
    expect(bisect_right(E, 3, lo: 2, hi: 6), 6);
    expect(bisect_right(E, 4, lo: 2, hi: 6), 6);
    expect(bisect_right(E, 5, lo: 2, hi: 6), 6);
    expect(bisect_right(E, 6, lo: 2, hi: 6), 6);
    expect(bisect_right(E, 7, lo: 2, hi: 6), 6);
    expect(bisect_right(E, 8, lo: 2, hi: 6), 6);
  });

  test('bisect_right for A lo=3 hi=6', () {
    expect(() => bisect_right(A, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_right for B lo=3 hi=6', () {
    expect(() => bisect_right(B, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_right for C lo=3 hi=6', () {
    expect(() => bisect_right(C, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_right for D lo=3 hi=6', () {
    expect(() => bisect_right(D, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect_right for E lo=3 hi=6', () {
    expect(bisect_right(E, -2, lo: 3, hi: 6), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 6), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 6), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 6), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 6), 6);
    expect(bisect_right(E, 3, lo: 3, hi: 6), 6);
    expect(bisect_right(E, 4, lo: 3, hi: 6), 6);
    expect(bisect_right(E, 5, lo: 3, hi: 6), 6);
    expect(bisect_right(E, 6, lo: 3, hi: 6), 6);
    expect(bisect_right(E, 7, lo: 3, hi: 6), 6);
    expect(bisect_right(E, 8, lo: 3, hi: 6), 6);
  });

  test('bisect_right for A lo=4 hi=6', () {
    expect(() => bisect_right(A, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_right for B lo=4 hi=6', () {
    expect(() => bisect_right(B, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_right for C lo=4 hi=6', () {
    expect(() => bisect_right(C, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_right for D lo=4 hi=6', () {
    expect(() => bisect_right(D, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect_right for E lo=4 hi=6', () {
    expect(bisect_right(E, -2, lo: 4, hi: 6), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 6), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 6), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 6), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 6), 6);
    expect(bisect_right(E, 3, lo: 4, hi: 6), 6);
    expect(bisect_right(E, 4, lo: 4, hi: 6), 6);
    expect(bisect_right(E, 5, lo: 4, hi: 6), 6);
    expect(bisect_right(E, 6, lo: 4, hi: 6), 6);
    expect(bisect_right(E, 7, lo: 4, hi: 6), 6);
    expect(bisect_right(E, 8, lo: 4, hi: 6), 6);
  });

  test('bisect_right for A lo=5 hi=6', () {
    expect(() => bisect_right(A, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_right for B lo=5 hi=6', () {
    expect(() => bisect_right(B, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_right for C lo=5 hi=6', () {
    expect(() => bisect_right(C, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_right for D lo=5 hi=6', () {
    expect(() => bisect_right(D, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect_right for E lo=5 hi=6', () {
    expect(bisect_right(E, -2, lo: 5, hi: 6), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 6), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 6), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 6), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 6), 6);
    expect(bisect_right(E, 3, lo: 5, hi: 6), 6);
    expect(bisect_right(E, 4, lo: 5, hi: 6), 6);
    expect(bisect_right(E, 5, lo: 5, hi: 6), 6);
    expect(bisect_right(E, 6, lo: 5, hi: 6), 6);
    expect(bisect_right(E, 7, lo: 5, hi: 6), 6);
    expect(bisect_right(E, 8, lo: 5, hi: 6), 6);
  });

  test('bisect_right for A lo=6 hi=6', () {
    expect(bisect_right(A, -2, lo: 6, hi: 6), 6);
    expect(bisect_right(A, -1, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 0, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 1, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 2, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 3, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 4, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 5, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 6, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 7, lo: 6, hi: 6), 6);
    expect(bisect_right(A, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_right for B lo=6 hi=6', () {
    expect(bisect_right(B, -2, lo: 6, hi: 6), 6);
    expect(bisect_right(B, -1, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 0, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 1, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 2, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 3, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 4, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 5, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 6, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 7, lo: 6, hi: 6), 6);
    expect(bisect_right(B, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_right for C lo=6 hi=6', () {
    expect(bisect_right(C, -2, lo: 6, hi: 6), 6);
    expect(bisect_right(C, -1, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 0, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 1, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 2, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 3, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 4, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 5, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 6, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 7, lo: 6, hi: 6), 6);
    expect(bisect_right(C, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_right for D lo=6 hi=6', () {
    expect(bisect_right(D, -2, lo: 6, hi: 6), 6);
    expect(bisect_right(D, -1, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 0, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 1, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 2, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 3, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 4, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 5, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 6, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 7, lo: 6, hi: 6), 6);
    expect(bisect_right(D, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_right for E lo=6 hi=6', () {
    expect(bisect_right(E, -2, lo: 6, hi: 6), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 4, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 5, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 6, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 7, lo: 6, hi: 6), 6);
    expect(bisect_right(E, 8, lo: 6, hi: 6), 6);
  });

  test('bisect_right for A lo=7 hi=6', () {
    expect(bisect_right(A, -2, lo: 7, hi: 6), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 6), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_right for B lo=7 hi=6', () {
    expect(bisect_right(B, -2, lo: 7, hi: 6), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 6), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_right for C lo=7 hi=6', () {
    expect(bisect_right(C, -2, lo: 7, hi: 6), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 6), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_right for D lo=7 hi=6', () {
    expect(bisect_right(D, -2, lo: 7, hi: 6), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 6), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_right for E lo=7 hi=6', () {
    expect(bisect_right(E, -2, lo: 7, hi: 6), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 6), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 6), 7);
  });

  test('bisect_right for A lo=8 hi=6', () {
    expect(bisect_right(A, -2, lo: 8, hi: 6), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 6), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_right for B lo=8 hi=6', () {
    expect(bisect_right(B, -2, lo: 8, hi: 6), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 6), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_right for C lo=8 hi=6', () {
    expect(bisect_right(C, -2, lo: 8, hi: 6), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 6), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_right for D lo=8 hi=6', () {
    expect(bisect_right(D, -2, lo: 8, hi: 6), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 6), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_right for E lo=8 hi=6', () {
    expect(bisect_right(E, -2, lo: 8, hi: 6), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 6), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 6), 8);
  });

  test('bisect_right for A lo=9 hi=6', () {
    expect(bisect_right(A, -2, lo: 9, hi: 6), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 6), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_right for B lo=9 hi=6', () {
    expect(bisect_right(B, -2, lo: 9, hi: 6), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 6), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_right for C lo=9 hi=6', () {
    expect(bisect_right(C, -2, lo: 9, hi: 6), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 6), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_right for D lo=9 hi=6', () {
    expect(bisect_right(D, -2, lo: 9, hi: 6), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 6), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_right for E lo=9 hi=6', () {
    expect(bisect_right(E, -2, lo: 9, hi: 6), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 6), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 6), 9);
  });

  test('bisect_right for A lo=None hi=7', () {
    expect(() => bisect_right(A, -2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=7', () {
    expect(() => bisect_right(B, -2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=7', () {
    expect(() => bisect_right(C, -2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=None hi=7', () {
    expect(() => bisect_right(D, -2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=None hi=7', () {
    expect(bisect_right(E, -2, hi: 7), 0);
    expect(bisect_right(E, -1, hi: 7), 0);
    expect(bisect_right(E, 0, hi: 7), 1);
    expect(bisect_right(E, 1, hi: 7), 2);
    expect(bisect_right(E, 2, hi: 7), 6);
    expect(bisect_right(E, 3, hi: 7), 7);
    expect(bisect_right(E, 4, hi: 7), 7);
    expect(bisect_right(E, 5, hi: 7), 7);
    expect(bisect_right(E, 6, hi: 7), 7);
    expect(bisect_right(E, 7, hi: 7), 7);
    expect(bisect_right(E, 8, hi: 7), 7);
  });

  test('bisect_right for A lo=0 hi=7', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=7', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=7', () {
    expect(() => bisect_right(C, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=0 hi=7', () {
    expect(() => bisect_right(D, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=0 hi=7', () {
    expect(bisect_right(E, -2, lo: 0, hi: 7), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 7), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 7), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 7), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 7), 6);
    expect(bisect_right(E, 3, lo: 0, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 0, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 0, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 0, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 0, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 0, hi: 7), 7);
  });

  test('bisect_right for A lo=1 hi=7', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=7', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=7', () {
    expect(() => bisect_right(C, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=1 hi=7', () {
    expect(() => bisect_right(D, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=1 hi=7', () {
    expect(bisect_right(E, -2, lo: 1, hi: 7), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 7), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 7), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 7), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 7), 6);
    expect(bisect_right(E, 3, lo: 1, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 1, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 1, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 1, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 1, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 1, hi: 7), 7);
  });

  test('bisect_right for A lo=2 hi=7', () {
    expect(() => bisect_right(A, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=2 hi=7', () {
    expect(() => bisect_right(B, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=2 hi=7', () {
    expect(() => bisect_right(C, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=2 hi=7', () {
    expect(() => bisect_right(D, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=2 hi=7', () {
    expect(bisect_right(E, -2, lo: 2, hi: 7), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 7), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 7), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 7), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 7), 6);
    expect(bisect_right(E, 3, lo: 2, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 2, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 2, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 2, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 2, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 2, hi: 7), 7);
  });

  test('bisect_right for A lo=3 hi=7', () {
    expect(() => bisect_right(A, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=3 hi=7', () {
    expect(() => bisect_right(B, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=3 hi=7', () {
    expect(() => bisect_right(C, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=3 hi=7', () {
    expect(() => bisect_right(D, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=3 hi=7', () {
    expect(bisect_right(E, -2, lo: 3, hi: 7), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 7), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 7), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 7), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 7), 6);
    expect(bisect_right(E, 3, lo: 3, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 3, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 3, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 3, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 3, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 3, hi: 7), 7);
  });

  test('bisect_right for A lo=4 hi=7', () {
    expect(() => bisect_right(A, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=4 hi=7', () {
    expect(() => bisect_right(B, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=4 hi=7', () {
    expect(() => bisect_right(C, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=4 hi=7', () {
    expect(() => bisect_right(D, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=4 hi=7', () {
    expect(bisect_right(E, -2, lo: 4, hi: 7), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 7), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 7), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 7), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 7), 6);
    expect(bisect_right(E, 3, lo: 4, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 4, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 4, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 4, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 4, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 4, hi: 7), 7);
  });

  test('bisect_right for A lo=5 hi=7', () {
    expect(() => bisect_right(A, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=5 hi=7', () {
    expect(() => bisect_right(B, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=5 hi=7', () {
    expect(() => bisect_right(C, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=5 hi=7', () {
    expect(() => bisect_right(D, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=5 hi=7', () {
    expect(bisect_right(E, -2, lo: 5, hi: 7), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 7), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 7), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 7), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 7), 6);
    expect(bisect_right(E, 3, lo: 5, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 5, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 5, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 5, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 5, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 5, hi: 7), 7);
  });

  test('bisect_right for A lo=6 hi=7', () {
    expect(() => bisect_right(A, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_right for B lo=6 hi=7', () {
    expect(() => bisect_right(B, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_right for C lo=6 hi=7', () {
    expect(() => bisect_right(C, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_right for D lo=6 hi=7', () {
    expect(() => bisect_right(D, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect_right for E lo=6 hi=7', () {
    expect(bisect_right(E, -2, lo: 6, hi: 7), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 7), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 7), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 7), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 7), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 6, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 6, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 6, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 6, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 6, hi: 7), 7);
  });

  test('bisect_right for A lo=7 hi=7', () {
    expect(bisect_right(A, -2, lo: 7, hi: 7), 7);
    expect(bisect_right(A, -1, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 0, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 1, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 2, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 3, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 4, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 5, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 6, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 7, lo: 7, hi: 7), 7);
    expect(bisect_right(A, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_right for B lo=7 hi=7', () {
    expect(bisect_right(B, -2, lo: 7, hi: 7), 7);
    expect(bisect_right(B, -1, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 0, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 1, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 2, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 3, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 4, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 5, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 6, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 7, lo: 7, hi: 7), 7);
    expect(bisect_right(B, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_right for C lo=7 hi=7', () {
    expect(bisect_right(C, -2, lo: 7, hi: 7), 7);
    expect(bisect_right(C, -1, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 0, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 1, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 2, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 3, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 4, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 5, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 6, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 7, lo: 7, hi: 7), 7);
    expect(bisect_right(C, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_right for D lo=7 hi=7', () {
    expect(bisect_right(D, -2, lo: 7, hi: 7), 7);
    expect(bisect_right(D, -1, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 0, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 1, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 2, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 3, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 4, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 5, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 6, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 7, lo: 7, hi: 7), 7);
    expect(bisect_right(D, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_right for E lo=7 hi=7', () {
    expect(bisect_right(E, -2, lo: 7, hi: 7), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 4, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 5, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 6, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 7, lo: 7, hi: 7), 7);
    expect(bisect_right(E, 8, lo: 7, hi: 7), 7);
  });

  test('bisect_right for A lo=8 hi=7', () {
    expect(bisect_right(A, -2, lo: 8, hi: 7), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 7), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_right for B lo=8 hi=7', () {
    expect(bisect_right(B, -2, lo: 8, hi: 7), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 7), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_right for C lo=8 hi=7', () {
    expect(bisect_right(C, -2, lo: 8, hi: 7), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 7), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_right for D lo=8 hi=7', () {
    expect(bisect_right(D, -2, lo: 8, hi: 7), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 7), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_right for E lo=8 hi=7', () {
    expect(bisect_right(E, -2, lo: 8, hi: 7), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 7), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 7), 8);
  });

  test('bisect_right for A lo=9 hi=7', () {
    expect(bisect_right(A, -2, lo: 9, hi: 7), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 7), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_right for B lo=9 hi=7', () {
    expect(bisect_right(B, -2, lo: 9, hi: 7), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 7), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_right for C lo=9 hi=7', () {
    expect(bisect_right(C, -2, lo: 9, hi: 7), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 7), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_right for D lo=9 hi=7', () {
    expect(bisect_right(D, -2, lo: 9, hi: 7), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 7), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_right for E lo=9 hi=7', () {
    expect(bisect_right(E, -2, lo: 9, hi: 7), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 7), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 7), 9);
  });

  test('bisect_right for A lo=None hi=8', () {
    expect(() => bisect_right(A, -2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=8', () {
    expect(() => bisect_right(B, -2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=8', () {
    expect(() => bisect_right(C, -2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=None hi=8', () {
    expect(() => bisect_right(D, -2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=None hi=8', () {
    expect(bisect_right(E, -2, hi: 8), 0);
    expect(bisect_right(E, -1, hi: 8), 0);
    expect(bisect_right(E, 0, hi: 8), 1);
    expect(bisect_right(E, 1, hi: 8), 2);
    expect(bisect_right(E, 2, hi: 8), 6);
    expect(bisect_right(E, 3, hi: 8), 8);
    expect(bisect_right(E, 4, hi: 8), 8);
    expect(bisect_right(E, 5, hi: 8), 8);
    expect(bisect_right(E, 6, hi: 8), 8);
    expect(bisect_right(E, 7, hi: 8), 8);
    expect(bisect_right(E, 8, hi: 8), 8);
  });

  test('bisect_right for A lo=0 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=0 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=0 hi=8', () {
    expect(bisect_right(E, -2, lo: 0, hi: 8), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 8), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 8), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 8), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 8), 6);
    expect(bisect_right(E, 3, lo: 0, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 0, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 0, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 0, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 0, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 0, hi: 8), 8);
  });

  test('bisect_right for A lo=1 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=1 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=1 hi=8', () {
    expect(bisect_right(E, -2, lo: 1, hi: 8), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 8), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 8), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 8), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 8), 6);
    expect(bisect_right(E, 3, lo: 1, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 1, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 1, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 1, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 1, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 1, hi: 8), 8);
  });

  test('bisect_right for A lo=2 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=2 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=2 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=2 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=2 hi=8', () {
    expect(bisect_right(E, -2, lo: 2, hi: 8), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 8), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 8), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 8), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 8), 6);
    expect(bisect_right(E, 3, lo: 2, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 2, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 2, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 2, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 2, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 2, hi: 8), 8);
  });

  test('bisect_right for A lo=3 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=3 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=3 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=3 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=3 hi=8', () {
    expect(bisect_right(E, -2, lo: 3, hi: 8), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 8), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 8), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 8), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 8), 6);
    expect(bisect_right(E, 3, lo: 3, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 3, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 3, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 3, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 3, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 3, hi: 8), 8);
  });

  test('bisect_right for A lo=4 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=4 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=4 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=4 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=4 hi=8', () {
    expect(bisect_right(E, -2, lo: 4, hi: 8), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 8), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 8), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 8), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 8), 6);
    expect(bisect_right(E, 3, lo: 4, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 4, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 4, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 4, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 4, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 4, hi: 8), 8);
  });

  test('bisect_right for A lo=5 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=5 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=5 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=5 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=5 hi=8', () {
    expect(bisect_right(E, -2, lo: 5, hi: 8), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 8), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 8), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 8), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 8), 6);
    expect(bisect_right(E, 3, lo: 5, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 5, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 5, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 5, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 5, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 5, hi: 8), 8);
  });

  test('bisect_right for A lo=6 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=6 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=6 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=6 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=6 hi=8', () {
    expect(bisect_right(E, -2, lo: 6, hi: 8), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 8), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 8), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 8), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 8), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 6, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 6, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 6, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 6, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 6, hi: 8), 8);
  });

  test('bisect_right for A lo=7 hi=8', () {
    expect(() => bisect_right(A, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_right for B lo=7 hi=8', () {
    expect(() => bisect_right(B, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_right for C lo=7 hi=8', () {
    expect(() => bisect_right(C, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_right for D lo=7 hi=8', () {
    expect(() => bisect_right(D, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect_right for E lo=7 hi=8', () {
    expect(bisect_right(E, -2, lo: 7, hi: 8), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 8), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 8), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 8), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 8), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 7, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 7, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 7, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 7, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 7, hi: 8), 8);
  });

  test('bisect_right for A lo=8 hi=8', () {
    expect(bisect_right(A, -2, lo: 8, hi: 8), 8);
    expect(bisect_right(A, -1, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 0, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 1, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 2, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 3, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 4, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 5, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 6, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 7, lo: 8, hi: 8), 8);
    expect(bisect_right(A, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_right for B lo=8 hi=8', () {
    expect(bisect_right(B, -2, lo: 8, hi: 8), 8);
    expect(bisect_right(B, -1, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 0, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 1, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 2, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 3, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 4, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 5, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 6, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 7, lo: 8, hi: 8), 8);
    expect(bisect_right(B, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_right for C lo=8 hi=8', () {
    expect(bisect_right(C, -2, lo: 8, hi: 8), 8);
    expect(bisect_right(C, -1, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 0, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 1, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 2, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 3, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 4, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 5, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 6, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 7, lo: 8, hi: 8), 8);
    expect(bisect_right(C, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_right for D lo=8 hi=8', () {
    expect(bisect_right(D, -2, lo: 8, hi: 8), 8);
    expect(bisect_right(D, -1, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 0, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 1, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 2, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 3, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 4, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 5, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 6, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 7, lo: 8, hi: 8), 8);
    expect(bisect_right(D, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_right for E lo=8 hi=8', () {
    expect(bisect_right(E, -2, lo: 8, hi: 8), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 6, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 7, lo: 8, hi: 8), 8);
    expect(bisect_right(E, 8, lo: 8, hi: 8), 8);
  });

  test('bisect_right for A lo=9 hi=8', () {
    expect(bisect_right(A, -2, lo: 9, hi: 8), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 8), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_right for B lo=9 hi=8', () {
    expect(bisect_right(B, -2, lo: 9, hi: 8), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 8), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_right for C lo=9 hi=8', () {
    expect(bisect_right(C, -2, lo: 9, hi: 8), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 8), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_right for D lo=9 hi=8', () {
    expect(bisect_right(D, -2, lo: 9, hi: 8), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 8), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_right for E lo=9 hi=8', () {
    expect(bisect_right(E, -2, lo: 9, hi: 8), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 8), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 8), 9);
  });

  test('bisect_right for A lo=None hi=9', () {
    expect(() => bisect_right(A, -2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=None hi=9', () {
    expect(() => bisect_right(B, -2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=None hi=9', () {
    expect(() => bisect_right(C, -2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=None hi=9', () {
    expect(() => bisect_right(D, -2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=None hi=9', () {
    expect(bisect_right(E, -2, hi: 9), 0);
    expect(bisect_right(E, -1, hi: 9), 0);
    expect(bisect_right(E, 0, hi: 9), 1);
    expect(bisect_right(E, 1, hi: 9), 2);
    expect(bisect_right(E, 2, hi: 9), 6);
    expect(bisect_right(E, 3, hi: 9), 8);
    expect(bisect_right(E, 4, hi: 9), 8);
    expect(bisect_right(E, 5, hi: 9), 9);
    expect(bisect_right(E, 6, hi: 9), 9);
    expect(bisect_right(E, 7, hi: 9), 9);
    expect(bisect_right(E, 8, hi: 9), 9);
  });

  test('bisect_right for A lo=0 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=0 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=0 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=0 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=0 hi=9', () {
    expect(bisect_right(E, -2, lo: 0, hi: 9), 0);
    expect(bisect_right(E, -1, lo: 0, hi: 9), 0);
    expect(bisect_right(E, 0, lo: 0, hi: 9), 1);
    expect(bisect_right(E, 1, lo: 0, hi: 9), 2);
    expect(bisect_right(E, 2, lo: 0, hi: 9), 6);
    expect(bisect_right(E, 3, lo: 0, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 0, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 0, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 0, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 0, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 0, hi: 9), 9);
  });

  test('bisect_right for A lo=1 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=1 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=1 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=1 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=1 hi=9', () {
    expect(bisect_right(E, -2, lo: 1, hi: 9), 1);
    expect(bisect_right(E, -1, lo: 1, hi: 9), 1);
    expect(bisect_right(E, 0, lo: 1, hi: 9), 1);
    expect(bisect_right(E, 1, lo: 1, hi: 9), 2);
    expect(bisect_right(E, 2, lo: 1, hi: 9), 6);
    expect(bisect_right(E, 3, lo: 1, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 1, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 1, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 1, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 1, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 1, hi: 9), 9);
  });

  test('bisect_right for A lo=2 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=2 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=2 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=2 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=2 hi=9', () {
    expect(bisect_right(E, -2, lo: 2, hi: 9), 2);
    expect(bisect_right(E, -1, lo: 2, hi: 9), 2);
    expect(bisect_right(E, 0, lo: 2, hi: 9), 2);
    expect(bisect_right(E, 1, lo: 2, hi: 9), 2);
    expect(bisect_right(E, 2, lo: 2, hi: 9), 6);
    expect(bisect_right(E, 3, lo: 2, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 2, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 2, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 2, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 2, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 2, hi: 9), 9);
  });

  test('bisect_right for A lo=3 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=3 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=3 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=3 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=3 hi=9', () {
    expect(bisect_right(E, -2, lo: 3, hi: 9), 3);
    expect(bisect_right(E, -1, lo: 3, hi: 9), 3);
    expect(bisect_right(E, 0, lo: 3, hi: 9), 3);
    expect(bisect_right(E, 1, lo: 3, hi: 9), 3);
    expect(bisect_right(E, 2, lo: 3, hi: 9), 6);
    expect(bisect_right(E, 3, lo: 3, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 3, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 3, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 3, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 3, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 3, hi: 9), 9);
  });

  test('bisect_right for A lo=4 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=4 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=4 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=4 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=4 hi=9', () {
    expect(bisect_right(E, -2, lo: 4, hi: 9), 4);
    expect(bisect_right(E, -1, lo: 4, hi: 9), 4);
    expect(bisect_right(E, 0, lo: 4, hi: 9), 4);
    expect(bisect_right(E, 1, lo: 4, hi: 9), 4);
    expect(bisect_right(E, 2, lo: 4, hi: 9), 6);
    expect(bisect_right(E, 3, lo: 4, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 4, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 4, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 4, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 4, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 4, hi: 9), 9);
  });

  test('bisect_right for A lo=5 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=5 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=5 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=5 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=5 hi=9', () {
    expect(bisect_right(E, -2, lo: 5, hi: 9), 5);
    expect(bisect_right(E, -1, lo: 5, hi: 9), 5);
    expect(bisect_right(E, 0, lo: 5, hi: 9), 5);
    expect(bisect_right(E, 1, lo: 5, hi: 9), 5);
    expect(bisect_right(E, 2, lo: 5, hi: 9), 6);
    expect(bisect_right(E, 3, lo: 5, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 5, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 5, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 5, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 5, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 5, hi: 9), 9);
  });

  test('bisect_right for A lo=6 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=6 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=6 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=6 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=6 hi=9', () {
    expect(bisect_right(E, -2, lo: 6, hi: 9), 6);
    expect(bisect_right(E, -1, lo: 6, hi: 9), 6);
    expect(bisect_right(E, 0, lo: 6, hi: 9), 6);
    expect(bisect_right(E, 1, lo: 6, hi: 9), 6);
    expect(bisect_right(E, 2, lo: 6, hi: 9), 6);
    expect(bisect_right(E, 3, lo: 6, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 6, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 6, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 6, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 6, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 6, hi: 9), 9);
  });

  test('bisect_right for A lo=7 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=7 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=7 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=7 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=7 hi=9', () {
    expect(bisect_right(E, -2, lo: 7, hi: 9), 7);
    expect(bisect_right(E, -1, lo: 7, hi: 9), 7);
    expect(bisect_right(E, 0, lo: 7, hi: 9), 7);
    expect(bisect_right(E, 1, lo: 7, hi: 9), 7);
    expect(bisect_right(E, 2, lo: 7, hi: 9), 7);
    expect(bisect_right(E, 3, lo: 7, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 7, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 7, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 7, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 7, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 7, hi: 9), 9);
  });

  test('bisect_right for A lo=8 hi=9', () {
    expect(() => bisect_right(A, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(A, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for B lo=8 hi=9', () {
    expect(() => bisect_right(B, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(B, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for C lo=8 hi=9', () {
    expect(() => bisect_right(C, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(C, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for D lo=8 hi=9', () {
    expect(() => bisect_right(D, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect_right(D, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect_right for E lo=8 hi=9', () {
    expect(bisect_right(E, -2, lo: 8, hi: 9), 8);
    expect(bisect_right(E, -1, lo: 8, hi: 9), 8);
    expect(bisect_right(E, 0, lo: 8, hi: 9), 8);
    expect(bisect_right(E, 1, lo: 8, hi: 9), 8);
    expect(bisect_right(E, 2, lo: 8, hi: 9), 8);
    expect(bisect_right(E, 3, lo: 8, hi: 9), 8);
    expect(bisect_right(E, 4, lo: 8, hi: 9), 8);
    expect(bisect_right(E, 5, lo: 8, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 8, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 8, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 8, hi: 9), 9);
  });

  test('bisect_right for A lo=9 hi=9', () {
    expect(bisect_right(A, -2, lo: 9, hi: 9), 9);
    expect(bisect_right(A, -1, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 0, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 1, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 2, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 3, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 4, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 5, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 6, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 7, lo: 9, hi: 9), 9);
    expect(bisect_right(A, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_right for B lo=9 hi=9', () {
    expect(bisect_right(B, -2, lo: 9, hi: 9), 9);
    expect(bisect_right(B, -1, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 0, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 1, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 2, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 3, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 4, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 5, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 6, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 7, lo: 9, hi: 9), 9);
    expect(bisect_right(B, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_right for C lo=9 hi=9', () {
    expect(bisect_right(C, -2, lo: 9, hi: 9), 9);
    expect(bisect_right(C, -1, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 0, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 1, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 2, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 3, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 4, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 5, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 6, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 7, lo: 9, hi: 9), 9);
    expect(bisect_right(C, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_right for D lo=9 hi=9', () {
    expect(bisect_right(D, -2, lo: 9, hi: 9), 9);
    expect(bisect_right(D, -1, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 0, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 1, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 2, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 3, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 4, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 5, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 6, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 7, lo: 9, hi: 9), 9);
    expect(bisect_right(D, 8, lo: 9, hi: 9), 9);
  });

  test('bisect_right for E lo=9 hi=9', () {
    expect(bisect_right(E, -2, lo: 9, hi: 9), 9);
    expect(bisect_right(E, -1, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 0, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 1, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 2, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 3, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 4, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 5, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 6, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 7, lo: 9, hi: 9), 9);
    expect(bisect_right(E, 8, lo: 9, hi: 9), 9);
  });

  test('list.bisectRight for A lo=None hi=None', () {
    expect(A.bisectRight(-2), 0);
    expect(A.bisectRight(-1), 0);
    expect(A.bisectRight(0), 0);
    expect(A.bisectRight(1), 0);
    expect(A.bisectRight(2), 0);
    expect(A.bisectRight(3), 0);
    expect(A.bisectRight(4), 0);
    expect(A.bisectRight(5), 0);
    expect(A.bisectRight(6), 0);
    expect(A.bisectRight(7), 0);
    expect(A.bisectRight(8), 0);
  });

  test('list.bisectRight for B lo=None hi=None', () {
    expect(B.bisectRight(-2), 0);
    expect(B.bisectRight(-1), 0);
    expect(B.bisectRight(0), 0);
    expect(B.bisectRight(1), 0);
    expect(B.bisectRight(2), 0);
    expect(B.bisectRight(3), 0);
    expect(B.bisectRight(4), 1);
    expect(B.bisectRight(5), 1);
    expect(B.bisectRight(6), 1);
    expect(B.bisectRight(7), 1);
    expect(B.bisectRight(8), 1);
  });

  test('list.bisectRight for C lo=None hi=None', () {
    expect(C.bisectRight(-2), 0);
    expect(C.bisectRight(-1), 0);
    expect(C.bisectRight(0), 0);
    expect(C.bisectRight(1), 0);
    expect(C.bisectRight(2), 0);
    expect(C.bisectRight(3), 0);
    expect(C.bisectRight(4), 1);
    expect(C.bisectRight(5), 2);
    expect(C.bisectRight(6), 2);
    expect(C.bisectRight(7), 2);
    expect(C.bisectRight(8), 2);
  });

  test('list.bisectRight for D lo=None hi=None', () {
    expect(D.bisectRight(-2), 0);
    expect(D.bisectRight(-1), 0);
    expect(D.bisectRight(0), 0);
    expect(D.bisectRight(1), 0);
    expect(D.bisectRight(2), 0);
    expect(D.bisectRight(3), 1);
    expect(D.bisectRight(4), 2);
    expect(D.bisectRight(5), 3);
    expect(D.bisectRight(6), 3);
    expect(D.bisectRight(7), 3);
    expect(D.bisectRight(8), 3);
  });

  test('list.bisectRight for E lo=None hi=None', () {
    expect(E.bisectRight(-2), 0);
    expect(E.bisectRight(-1), 0);
    expect(E.bisectRight(0), 1);
    expect(E.bisectRight(1), 2);
    expect(E.bisectRight(2), 6);
    expect(E.bisectRight(3), 8);
    expect(E.bisectRight(4), 8);
    expect(E.bisectRight(5), 9);
    expect(E.bisectRight(6), 10);
    expect(E.bisectRight(7), 10);
    expect(E.bisectRight(8), 10);
  });

  test('list.bisectRight for A lo=0 hi=None', () {
    expect(A.bisectRight(-2, low: 0), 0);
    expect(A.bisectRight(-1, low: 0), 0);
    expect(A.bisectRight(0, low: 0), 0);
    expect(A.bisectRight(1, low: 0), 0);
    expect(A.bisectRight(2, low: 0), 0);
    expect(A.bisectRight(3, low: 0), 0);
    expect(A.bisectRight(4, low: 0), 0);
    expect(A.bisectRight(5, low: 0), 0);
    expect(A.bisectRight(6, low: 0), 0);
    expect(A.bisectRight(7, low: 0), 0);
    expect(A.bisectRight(8, low: 0), 0);
  });

  test('list.bisectRight for B lo=0 hi=None', () {
    expect(B.bisectRight(-2, low: 0), 0);
    expect(B.bisectRight(-1, low: 0), 0);
    expect(B.bisectRight(0, low: 0), 0);
    expect(B.bisectRight(1, low: 0), 0);
    expect(B.bisectRight(2, low: 0), 0);
    expect(B.bisectRight(3, low: 0), 0);
    expect(B.bisectRight(4, low: 0), 1);
    expect(B.bisectRight(5, low: 0), 1);
    expect(B.bisectRight(6, low: 0), 1);
    expect(B.bisectRight(7, low: 0), 1);
    expect(B.bisectRight(8, low: 0), 1);
  });

  test('list.bisectRight for C lo=0 hi=None', () {
    expect(C.bisectRight(-2, low: 0), 0);
    expect(C.bisectRight(-1, low: 0), 0);
    expect(C.bisectRight(0, low: 0), 0);
    expect(C.bisectRight(1, low: 0), 0);
    expect(C.bisectRight(2, low: 0), 0);
    expect(C.bisectRight(3, low: 0), 0);
    expect(C.bisectRight(4, low: 0), 1);
    expect(C.bisectRight(5, low: 0), 2);
    expect(C.bisectRight(6, low: 0), 2);
    expect(C.bisectRight(7, low: 0), 2);
    expect(C.bisectRight(8, low: 0), 2);
  });

  test('list.bisectRight for D lo=0 hi=None', () {
    expect(D.bisectRight(-2, low: 0), 0);
    expect(D.bisectRight(-1, low: 0), 0);
    expect(D.bisectRight(0, low: 0), 0);
    expect(D.bisectRight(1, low: 0), 0);
    expect(D.bisectRight(2, low: 0), 0);
    expect(D.bisectRight(3, low: 0), 1);
    expect(D.bisectRight(4, low: 0), 2);
    expect(D.bisectRight(5, low: 0), 3);
    expect(D.bisectRight(6, low: 0), 3);
    expect(D.bisectRight(7, low: 0), 3);
    expect(D.bisectRight(8, low: 0), 3);
  });

  test('list.bisectRight for E lo=0 hi=None', () {
    expect(E.bisectRight(-2, low: 0), 0);
    expect(E.bisectRight(-1, low: 0), 0);
    expect(E.bisectRight(0, low: 0), 1);
    expect(E.bisectRight(1, low: 0), 2);
    expect(E.bisectRight(2, low: 0), 6);
    expect(E.bisectRight(3, low: 0), 8);
    expect(E.bisectRight(4, low: 0), 8);
    expect(E.bisectRight(5, low: 0), 9);
    expect(E.bisectRight(6, low: 0), 10);
    expect(E.bisectRight(7, low: 0), 10);
    expect(E.bisectRight(8, low: 0), 10);
  });

  test('list.bisectRight for A lo=1 hi=None', () {
    expect(A.bisectRight(-2, low: 1), 1);
    expect(A.bisectRight(-1, low: 1), 1);
    expect(A.bisectRight(0, low: 1), 1);
    expect(A.bisectRight(1, low: 1), 1);
    expect(A.bisectRight(2, low: 1), 1);
    expect(A.bisectRight(3, low: 1), 1);
    expect(A.bisectRight(4, low: 1), 1);
    expect(A.bisectRight(5, low: 1), 1);
    expect(A.bisectRight(6, low: 1), 1);
    expect(A.bisectRight(7, low: 1), 1);
    expect(A.bisectRight(8, low: 1), 1);
  });

  test('list.bisectRight for B lo=1 hi=None', () {
    expect(B.bisectRight(-2, low: 1), 1);
    expect(B.bisectRight(-1, low: 1), 1);
    expect(B.bisectRight(0, low: 1), 1);
    expect(B.bisectRight(1, low: 1), 1);
    expect(B.bisectRight(2, low: 1), 1);
    expect(B.bisectRight(3, low: 1), 1);
    expect(B.bisectRight(4, low: 1), 1);
    expect(B.bisectRight(5, low: 1), 1);
    expect(B.bisectRight(6, low: 1), 1);
    expect(B.bisectRight(7, low: 1), 1);
    expect(B.bisectRight(8, low: 1), 1);
  });

  test('list.bisectRight for C lo=1 hi=None', () {
    expect(C.bisectRight(-2, low: 1), 1);
    expect(C.bisectRight(-1, low: 1), 1);
    expect(C.bisectRight(0, low: 1), 1);
    expect(C.bisectRight(1, low: 1), 1);
    expect(C.bisectRight(2, low: 1), 1);
    expect(C.bisectRight(3, low: 1), 1);
    expect(C.bisectRight(4, low: 1), 1);
    expect(C.bisectRight(5, low: 1), 2);
    expect(C.bisectRight(6, low: 1), 2);
    expect(C.bisectRight(7, low: 1), 2);
    expect(C.bisectRight(8, low: 1), 2);
  });

  test('list.bisectRight for D lo=1 hi=None', () {
    expect(D.bisectRight(-2, low: 1), 1);
    expect(D.bisectRight(-1, low: 1), 1);
    expect(D.bisectRight(0, low: 1), 1);
    expect(D.bisectRight(1, low: 1), 1);
    expect(D.bisectRight(2, low: 1), 1);
    expect(D.bisectRight(3, low: 1), 1);
    expect(D.bisectRight(4, low: 1), 2);
    expect(D.bisectRight(5, low: 1), 3);
    expect(D.bisectRight(6, low: 1), 3);
    expect(D.bisectRight(7, low: 1), 3);
    expect(D.bisectRight(8, low: 1), 3);
  });

  test('list.bisectRight for E lo=1 hi=None', () {
    expect(E.bisectRight(-2, low: 1), 1);
    expect(E.bisectRight(-1, low: 1), 1);
    expect(E.bisectRight(0, low: 1), 1);
    expect(E.bisectRight(1, low: 1), 2);
    expect(E.bisectRight(2, low: 1), 6);
    expect(E.bisectRight(3, low: 1), 8);
    expect(E.bisectRight(4, low: 1), 8);
    expect(E.bisectRight(5, low: 1), 9);
    expect(E.bisectRight(6, low: 1), 10);
    expect(E.bisectRight(7, low: 1), 10);
    expect(E.bisectRight(8, low: 1), 10);
  });

  test('list.bisectRight for A lo=2 hi=None', () {
    expect(A.bisectRight(-2, low: 2), 2);
    expect(A.bisectRight(-1, low: 2), 2);
    expect(A.bisectRight(0, low: 2), 2);
    expect(A.bisectRight(1, low: 2), 2);
    expect(A.bisectRight(2, low: 2), 2);
    expect(A.bisectRight(3, low: 2), 2);
    expect(A.bisectRight(4, low: 2), 2);
    expect(A.bisectRight(5, low: 2), 2);
    expect(A.bisectRight(6, low: 2), 2);
    expect(A.bisectRight(7, low: 2), 2);
    expect(A.bisectRight(8, low: 2), 2);
  });

  test('list.bisectRight for B lo=2 hi=None', () {
    expect(B.bisectRight(-2, low: 2), 2);
    expect(B.bisectRight(-1, low: 2), 2);
    expect(B.bisectRight(0, low: 2), 2);
    expect(B.bisectRight(1, low: 2), 2);
    expect(B.bisectRight(2, low: 2), 2);
    expect(B.bisectRight(3, low: 2), 2);
    expect(B.bisectRight(4, low: 2), 2);
    expect(B.bisectRight(5, low: 2), 2);
    expect(B.bisectRight(6, low: 2), 2);
    expect(B.bisectRight(7, low: 2), 2);
    expect(B.bisectRight(8, low: 2), 2);
  });

  test('list.bisectRight for C lo=2 hi=None', () {
    expect(C.bisectRight(-2, low: 2), 2);
    expect(C.bisectRight(-1, low: 2), 2);
    expect(C.bisectRight(0, low: 2), 2);
    expect(C.bisectRight(1, low: 2), 2);
    expect(C.bisectRight(2, low: 2), 2);
    expect(C.bisectRight(3, low: 2), 2);
    expect(C.bisectRight(4, low: 2), 2);
    expect(C.bisectRight(5, low: 2), 2);
    expect(C.bisectRight(6, low: 2), 2);
    expect(C.bisectRight(7, low: 2), 2);
    expect(C.bisectRight(8, low: 2), 2);
  });

  test('list.bisectRight for D lo=2 hi=None', () {
    expect(D.bisectRight(-2, low: 2), 2);
    expect(D.bisectRight(-1, low: 2), 2);
    expect(D.bisectRight(0, low: 2), 2);
    expect(D.bisectRight(1, low: 2), 2);
    expect(D.bisectRight(2, low: 2), 2);
    expect(D.bisectRight(3, low: 2), 2);
    expect(D.bisectRight(4, low: 2), 2);
    expect(D.bisectRight(5, low: 2), 3);
    expect(D.bisectRight(6, low: 2), 3);
    expect(D.bisectRight(7, low: 2), 3);
    expect(D.bisectRight(8, low: 2), 3);
  });

  test('list.bisectRight for E lo=2 hi=None', () {
    expect(E.bisectRight(-2, low: 2), 2);
    expect(E.bisectRight(-1, low: 2), 2);
    expect(E.bisectRight(0, low: 2), 2);
    expect(E.bisectRight(1, low: 2), 2);
    expect(E.bisectRight(2, low: 2), 6);
    expect(E.bisectRight(3, low: 2), 8);
    expect(E.bisectRight(4, low: 2), 8);
    expect(E.bisectRight(5, low: 2), 9);
    expect(E.bisectRight(6, low: 2), 10);
    expect(E.bisectRight(7, low: 2), 10);
    expect(E.bisectRight(8, low: 2), 10);
  });

  test('list.bisectRight for A lo=3 hi=None', () {
    expect(A.bisectRight(-2, low: 3), 3);
    expect(A.bisectRight(-1, low: 3), 3);
    expect(A.bisectRight(0, low: 3), 3);
    expect(A.bisectRight(1, low: 3), 3);
    expect(A.bisectRight(2, low: 3), 3);
    expect(A.bisectRight(3, low: 3), 3);
    expect(A.bisectRight(4, low: 3), 3);
    expect(A.bisectRight(5, low: 3), 3);
    expect(A.bisectRight(6, low: 3), 3);
    expect(A.bisectRight(7, low: 3), 3);
    expect(A.bisectRight(8, low: 3), 3);
  });

  test('list.bisectRight for B lo=3 hi=None', () {
    expect(B.bisectRight(-2, low: 3), 3);
    expect(B.bisectRight(-1, low: 3), 3);
    expect(B.bisectRight(0, low: 3), 3);
    expect(B.bisectRight(1, low: 3), 3);
    expect(B.bisectRight(2, low: 3), 3);
    expect(B.bisectRight(3, low: 3), 3);
    expect(B.bisectRight(4, low: 3), 3);
    expect(B.bisectRight(5, low: 3), 3);
    expect(B.bisectRight(6, low: 3), 3);
    expect(B.bisectRight(7, low: 3), 3);
    expect(B.bisectRight(8, low: 3), 3);
  });

  test('list.bisectRight for C lo=3 hi=None', () {
    expect(C.bisectRight(-2, low: 3), 3);
    expect(C.bisectRight(-1, low: 3), 3);
    expect(C.bisectRight(0, low: 3), 3);
    expect(C.bisectRight(1, low: 3), 3);
    expect(C.bisectRight(2, low: 3), 3);
    expect(C.bisectRight(3, low: 3), 3);
    expect(C.bisectRight(4, low: 3), 3);
    expect(C.bisectRight(5, low: 3), 3);
    expect(C.bisectRight(6, low: 3), 3);
    expect(C.bisectRight(7, low: 3), 3);
    expect(C.bisectRight(8, low: 3), 3);
  });

  test('list.bisectRight for D lo=3 hi=None', () {
    expect(D.bisectRight(-2, low: 3), 3);
    expect(D.bisectRight(-1, low: 3), 3);
    expect(D.bisectRight(0, low: 3), 3);
    expect(D.bisectRight(1, low: 3), 3);
    expect(D.bisectRight(2, low: 3), 3);
    expect(D.bisectRight(3, low: 3), 3);
    expect(D.bisectRight(4, low: 3), 3);
    expect(D.bisectRight(5, low: 3), 3);
    expect(D.bisectRight(6, low: 3), 3);
    expect(D.bisectRight(7, low: 3), 3);
    expect(D.bisectRight(8, low: 3), 3);
  });

  test('list.bisectRight for E lo=3 hi=None', () {
    expect(E.bisectRight(-2, low: 3), 3);
    expect(E.bisectRight(-1, low: 3), 3);
    expect(E.bisectRight(0, low: 3), 3);
    expect(E.bisectRight(1, low: 3), 3);
    expect(E.bisectRight(2, low: 3), 6);
    expect(E.bisectRight(3, low: 3), 8);
    expect(E.bisectRight(4, low: 3), 8);
    expect(E.bisectRight(5, low: 3), 9);
    expect(E.bisectRight(6, low: 3), 10);
    expect(E.bisectRight(7, low: 3), 10);
    expect(E.bisectRight(8, low: 3), 10);
  });

  test('list.bisectRight for A lo=4 hi=None', () {
    expect(A.bisectRight(-2, low: 4), 4);
    expect(A.bisectRight(-1, low: 4), 4);
    expect(A.bisectRight(0, low: 4), 4);
    expect(A.bisectRight(1, low: 4), 4);
    expect(A.bisectRight(2, low: 4), 4);
    expect(A.bisectRight(3, low: 4), 4);
    expect(A.bisectRight(4, low: 4), 4);
    expect(A.bisectRight(5, low: 4), 4);
    expect(A.bisectRight(6, low: 4), 4);
    expect(A.bisectRight(7, low: 4), 4);
    expect(A.bisectRight(8, low: 4), 4);
  });

  test('list.bisectRight for B lo=4 hi=None', () {
    expect(B.bisectRight(-2, low: 4), 4);
    expect(B.bisectRight(-1, low: 4), 4);
    expect(B.bisectRight(0, low: 4), 4);
    expect(B.bisectRight(1, low: 4), 4);
    expect(B.bisectRight(2, low: 4), 4);
    expect(B.bisectRight(3, low: 4), 4);
    expect(B.bisectRight(4, low: 4), 4);
    expect(B.bisectRight(5, low: 4), 4);
    expect(B.bisectRight(6, low: 4), 4);
    expect(B.bisectRight(7, low: 4), 4);
    expect(B.bisectRight(8, low: 4), 4);
  });

  test('list.bisectRight for C lo=4 hi=None', () {
    expect(C.bisectRight(-2, low: 4), 4);
    expect(C.bisectRight(-1, low: 4), 4);
    expect(C.bisectRight(0, low: 4), 4);
    expect(C.bisectRight(1, low: 4), 4);
    expect(C.bisectRight(2, low: 4), 4);
    expect(C.bisectRight(3, low: 4), 4);
    expect(C.bisectRight(4, low: 4), 4);
    expect(C.bisectRight(5, low: 4), 4);
    expect(C.bisectRight(6, low: 4), 4);
    expect(C.bisectRight(7, low: 4), 4);
    expect(C.bisectRight(8, low: 4), 4);
  });

  test('list.bisectRight for D lo=4 hi=None', () {
    expect(D.bisectRight(-2, low: 4), 4);
    expect(D.bisectRight(-1, low: 4), 4);
    expect(D.bisectRight(0, low: 4), 4);
    expect(D.bisectRight(1, low: 4), 4);
    expect(D.bisectRight(2, low: 4), 4);
    expect(D.bisectRight(3, low: 4), 4);
    expect(D.bisectRight(4, low: 4), 4);
    expect(D.bisectRight(5, low: 4), 4);
    expect(D.bisectRight(6, low: 4), 4);
    expect(D.bisectRight(7, low: 4), 4);
    expect(D.bisectRight(8, low: 4), 4);
  });

  test('list.bisectRight for E lo=4 hi=None', () {
    expect(E.bisectRight(-2, low: 4), 4);
    expect(E.bisectRight(-1, low: 4), 4);
    expect(E.bisectRight(0, low: 4), 4);
    expect(E.bisectRight(1, low: 4), 4);
    expect(E.bisectRight(2, low: 4), 6);
    expect(E.bisectRight(3, low: 4), 8);
    expect(E.bisectRight(4, low: 4), 8);
    expect(E.bisectRight(5, low: 4), 9);
    expect(E.bisectRight(6, low: 4), 10);
    expect(E.bisectRight(7, low: 4), 10);
    expect(E.bisectRight(8, low: 4), 10);
  });

  test('list.bisectRight for A lo=5 hi=None', () {
    expect(A.bisectRight(-2, low: 5), 5);
    expect(A.bisectRight(-1, low: 5), 5);
    expect(A.bisectRight(0, low: 5), 5);
    expect(A.bisectRight(1, low: 5), 5);
    expect(A.bisectRight(2, low: 5), 5);
    expect(A.bisectRight(3, low: 5), 5);
    expect(A.bisectRight(4, low: 5), 5);
    expect(A.bisectRight(5, low: 5), 5);
    expect(A.bisectRight(6, low: 5), 5);
    expect(A.bisectRight(7, low: 5), 5);
    expect(A.bisectRight(8, low: 5), 5);
  });

  test('list.bisectRight for B lo=5 hi=None', () {
    expect(B.bisectRight(-2, low: 5), 5);
    expect(B.bisectRight(-1, low: 5), 5);
    expect(B.bisectRight(0, low: 5), 5);
    expect(B.bisectRight(1, low: 5), 5);
    expect(B.bisectRight(2, low: 5), 5);
    expect(B.bisectRight(3, low: 5), 5);
    expect(B.bisectRight(4, low: 5), 5);
    expect(B.bisectRight(5, low: 5), 5);
    expect(B.bisectRight(6, low: 5), 5);
    expect(B.bisectRight(7, low: 5), 5);
    expect(B.bisectRight(8, low: 5), 5);
  });

  test('list.bisectRight for C lo=5 hi=None', () {
    expect(C.bisectRight(-2, low: 5), 5);
    expect(C.bisectRight(-1, low: 5), 5);
    expect(C.bisectRight(0, low: 5), 5);
    expect(C.bisectRight(1, low: 5), 5);
    expect(C.bisectRight(2, low: 5), 5);
    expect(C.bisectRight(3, low: 5), 5);
    expect(C.bisectRight(4, low: 5), 5);
    expect(C.bisectRight(5, low: 5), 5);
    expect(C.bisectRight(6, low: 5), 5);
    expect(C.bisectRight(7, low: 5), 5);
    expect(C.bisectRight(8, low: 5), 5);
  });

  test('list.bisectRight for D lo=5 hi=None', () {
    expect(D.bisectRight(-2, low: 5), 5);
    expect(D.bisectRight(-1, low: 5), 5);
    expect(D.bisectRight(0, low: 5), 5);
    expect(D.bisectRight(1, low: 5), 5);
    expect(D.bisectRight(2, low: 5), 5);
    expect(D.bisectRight(3, low: 5), 5);
    expect(D.bisectRight(4, low: 5), 5);
    expect(D.bisectRight(5, low: 5), 5);
    expect(D.bisectRight(6, low: 5), 5);
    expect(D.bisectRight(7, low: 5), 5);
    expect(D.bisectRight(8, low: 5), 5);
  });

  test('list.bisectRight for E lo=5 hi=None', () {
    expect(E.bisectRight(-2, low: 5), 5);
    expect(E.bisectRight(-1, low: 5), 5);
    expect(E.bisectRight(0, low: 5), 5);
    expect(E.bisectRight(1, low: 5), 5);
    expect(E.bisectRight(2, low: 5), 6);
    expect(E.bisectRight(3, low: 5), 8);
    expect(E.bisectRight(4, low: 5), 8);
    expect(E.bisectRight(5, low: 5), 9);
    expect(E.bisectRight(6, low: 5), 10);
    expect(E.bisectRight(7, low: 5), 10);
    expect(E.bisectRight(8, low: 5), 10);
  });

  test('list.bisectRight for A lo=6 hi=None', () {
    expect(A.bisectRight(-2, low: 6), 6);
    expect(A.bisectRight(-1, low: 6), 6);
    expect(A.bisectRight(0, low: 6), 6);
    expect(A.bisectRight(1, low: 6), 6);
    expect(A.bisectRight(2, low: 6), 6);
    expect(A.bisectRight(3, low: 6), 6);
    expect(A.bisectRight(4, low: 6), 6);
    expect(A.bisectRight(5, low: 6), 6);
    expect(A.bisectRight(6, low: 6), 6);
    expect(A.bisectRight(7, low: 6), 6);
    expect(A.bisectRight(8, low: 6), 6);
  });

  test('list.bisectRight for B lo=6 hi=None', () {
    expect(B.bisectRight(-2, low: 6), 6);
    expect(B.bisectRight(-1, low: 6), 6);
    expect(B.bisectRight(0, low: 6), 6);
    expect(B.bisectRight(1, low: 6), 6);
    expect(B.bisectRight(2, low: 6), 6);
    expect(B.bisectRight(3, low: 6), 6);
    expect(B.bisectRight(4, low: 6), 6);
    expect(B.bisectRight(5, low: 6), 6);
    expect(B.bisectRight(6, low: 6), 6);
    expect(B.bisectRight(7, low: 6), 6);
    expect(B.bisectRight(8, low: 6), 6);
  });

  test('list.bisectRight for C lo=6 hi=None', () {
    expect(C.bisectRight(-2, low: 6), 6);
    expect(C.bisectRight(-1, low: 6), 6);
    expect(C.bisectRight(0, low: 6), 6);
    expect(C.bisectRight(1, low: 6), 6);
    expect(C.bisectRight(2, low: 6), 6);
    expect(C.bisectRight(3, low: 6), 6);
    expect(C.bisectRight(4, low: 6), 6);
    expect(C.bisectRight(5, low: 6), 6);
    expect(C.bisectRight(6, low: 6), 6);
    expect(C.bisectRight(7, low: 6), 6);
    expect(C.bisectRight(8, low: 6), 6);
  });

  test('list.bisectRight for D lo=6 hi=None', () {
    expect(D.bisectRight(-2, low: 6), 6);
    expect(D.bisectRight(-1, low: 6), 6);
    expect(D.bisectRight(0, low: 6), 6);
    expect(D.bisectRight(1, low: 6), 6);
    expect(D.bisectRight(2, low: 6), 6);
    expect(D.bisectRight(3, low: 6), 6);
    expect(D.bisectRight(4, low: 6), 6);
    expect(D.bisectRight(5, low: 6), 6);
    expect(D.bisectRight(6, low: 6), 6);
    expect(D.bisectRight(7, low: 6), 6);
    expect(D.bisectRight(8, low: 6), 6);
  });

  test('list.bisectRight for E lo=6 hi=None', () {
    expect(E.bisectRight(-2, low: 6), 6);
    expect(E.bisectRight(-1, low: 6), 6);
    expect(E.bisectRight(0, low: 6), 6);
    expect(E.bisectRight(1, low: 6), 6);
    expect(E.bisectRight(2, low: 6), 6);
    expect(E.bisectRight(3, low: 6), 8);
    expect(E.bisectRight(4, low: 6), 8);
    expect(E.bisectRight(5, low: 6), 9);
    expect(E.bisectRight(6, low: 6), 10);
    expect(E.bisectRight(7, low: 6), 10);
    expect(E.bisectRight(8, low: 6), 10);
  });

  test('list.bisectRight for A lo=7 hi=None', () {
    expect(A.bisectRight(-2, low: 7), 7);
    expect(A.bisectRight(-1, low: 7), 7);
    expect(A.bisectRight(0, low: 7), 7);
    expect(A.bisectRight(1, low: 7), 7);
    expect(A.bisectRight(2, low: 7), 7);
    expect(A.bisectRight(3, low: 7), 7);
    expect(A.bisectRight(4, low: 7), 7);
    expect(A.bisectRight(5, low: 7), 7);
    expect(A.bisectRight(6, low: 7), 7);
    expect(A.bisectRight(7, low: 7), 7);
    expect(A.bisectRight(8, low: 7), 7);
  });

  test('list.bisectRight for B lo=7 hi=None', () {
    expect(B.bisectRight(-2, low: 7), 7);
    expect(B.bisectRight(-1, low: 7), 7);
    expect(B.bisectRight(0, low: 7), 7);
    expect(B.bisectRight(1, low: 7), 7);
    expect(B.bisectRight(2, low: 7), 7);
    expect(B.bisectRight(3, low: 7), 7);
    expect(B.bisectRight(4, low: 7), 7);
    expect(B.bisectRight(5, low: 7), 7);
    expect(B.bisectRight(6, low: 7), 7);
    expect(B.bisectRight(7, low: 7), 7);
    expect(B.bisectRight(8, low: 7), 7);
  });

  test('list.bisectRight for C lo=7 hi=None', () {
    expect(C.bisectRight(-2, low: 7), 7);
    expect(C.bisectRight(-1, low: 7), 7);
    expect(C.bisectRight(0, low: 7), 7);
    expect(C.bisectRight(1, low: 7), 7);
    expect(C.bisectRight(2, low: 7), 7);
    expect(C.bisectRight(3, low: 7), 7);
    expect(C.bisectRight(4, low: 7), 7);
    expect(C.bisectRight(5, low: 7), 7);
    expect(C.bisectRight(6, low: 7), 7);
    expect(C.bisectRight(7, low: 7), 7);
    expect(C.bisectRight(8, low: 7), 7);
  });

  test('list.bisectRight for D lo=7 hi=None', () {
    expect(D.bisectRight(-2, low: 7), 7);
    expect(D.bisectRight(-1, low: 7), 7);
    expect(D.bisectRight(0, low: 7), 7);
    expect(D.bisectRight(1, low: 7), 7);
    expect(D.bisectRight(2, low: 7), 7);
    expect(D.bisectRight(3, low: 7), 7);
    expect(D.bisectRight(4, low: 7), 7);
    expect(D.bisectRight(5, low: 7), 7);
    expect(D.bisectRight(6, low: 7), 7);
    expect(D.bisectRight(7, low: 7), 7);
    expect(D.bisectRight(8, low: 7), 7);
  });

  test('list.bisectRight for E lo=7 hi=None', () {
    expect(E.bisectRight(-2, low: 7), 7);
    expect(E.bisectRight(-1, low: 7), 7);
    expect(E.bisectRight(0, low: 7), 7);
    expect(E.bisectRight(1, low: 7), 7);
    expect(E.bisectRight(2, low: 7), 7);
    expect(E.bisectRight(3, low: 7), 8);
    expect(E.bisectRight(4, low: 7), 8);
    expect(E.bisectRight(5, low: 7), 9);
    expect(E.bisectRight(6, low: 7), 10);
    expect(E.bisectRight(7, low: 7), 10);
    expect(E.bisectRight(8, low: 7), 10);
  });

  test('list.bisectRight for A lo=8 hi=None', () {
    expect(A.bisectRight(-2, low: 8), 8);
    expect(A.bisectRight(-1, low: 8), 8);
    expect(A.bisectRight(0, low: 8), 8);
    expect(A.bisectRight(1, low: 8), 8);
    expect(A.bisectRight(2, low: 8), 8);
    expect(A.bisectRight(3, low: 8), 8);
    expect(A.bisectRight(4, low: 8), 8);
    expect(A.bisectRight(5, low: 8), 8);
    expect(A.bisectRight(6, low: 8), 8);
    expect(A.bisectRight(7, low: 8), 8);
    expect(A.bisectRight(8, low: 8), 8);
  });

  test('list.bisectRight for B lo=8 hi=None', () {
    expect(B.bisectRight(-2, low: 8), 8);
    expect(B.bisectRight(-1, low: 8), 8);
    expect(B.bisectRight(0, low: 8), 8);
    expect(B.bisectRight(1, low: 8), 8);
    expect(B.bisectRight(2, low: 8), 8);
    expect(B.bisectRight(3, low: 8), 8);
    expect(B.bisectRight(4, low: 8), 8);
    expect(B.bisectRight(5, low: 8), 8);
    expect(B.bisectRight(6, low: 8), 8);
    expect(B.bisectRight(7, low: 8), 8);
    expect(B.bisectRight(8, low: 8), 8);
  });

  test('list.bisectRight for C lo=8 hi=None', () {
    expect(C.bisectRight(-2, low: 8), 8);
    expect(C.bisectRight(-1, low: 8), 8);
    expect(C.bisectRight(0, low: 8), 8);
    expect(C.bisectRight(1, low: 8), 8);
    expect(C.bisectRight(2, low: 8), 8);
    expect(C.bisectRight(3, low: 8), 8);
    expect(C.bisectRight(4, low: 8), 8);
    expect(C.bisectRight(5, low: 8), 8);
    expect(C.bisectRight(6, low: 8), 8);
    expect(C.bisectRight(7, low: 8), 8);
    expect(C.bisectRight(8, low: 8), 8);
  });

  test('list.bisectRight for D lo=8 hi=None', () {
    expect(D.bisectRight(-2, low: 8), 8);
    expect(D.bisectRight(-1, low: 8), 8);
    expect(D.bisectRight(0, low: 8), 8);
    expect(D.bisectRight(1, low: 8), 8);
    expect(D.bisectRight(2, low: 8), 8);
    expect(D.bisectRight(3, low: 8), 8);
    expect(D.bisectRight(4, low: 8), 8);
    expect(D.bisectRight(5, low: 8), 8);
    expect(D.bisectRight(6, low: 8), 8);
    expect(D.bisectRight(7, low: 8), 8);
    expect(D.bisectRight(8, low: 8), 8);
  });

  test('list.bisectRight for E lo=8 hi=None', () {
    expect(E.bisectRight(-2, low: 8), 8);
    expect(E.bisectRight(-1, low: 8), 8);
    expect(E.bisectRight(0, low: 8), 8);
    expect(E.bisectRight(1, low: 8), 8);
    expect(E.bisectRight(2, low: 8), 8);
    expect(E.bisectRight(3, low: 8), 8);
    expect(E.bisectRight(4, low: 8), 8);
    expect(E.bisectRight(5, low: 8), 9);
    expect(E.bisectRight(6, low: 8), 10);
    expect(E.bisectRight(7, low: 8), 10);
    expect(E.bisectRight(8, low: 8), 10);
  });

  test('list.bisectRight for A lo=9 hi=None', () {
    expect(A.bisectRight(-2, low: 9), 9);
    expect(A.bisectRight(-1, low: 9), 9);
    expect(A.bisectRight(0, low: 9), 9);
    expect(A.bisectRight(1, low: 9), 9);
    expect(A.bisectRight(2, low: 9), 9);
    expect(A.bisectRight(3, low: 9), 9);
    expect(A.bisectRight(4, low: 9), 9);
    expect(A.bisectRight(5, low: 9), 9);
    expect(A.bisectRight(6, low: 9), 9);
    expect(A.bisectRight(7, low: 9), 9);
    expect(A.bisectRight(8, low: 9), 9);
  });

  test('list.bisectRight for B lo=9 hi=None', () {
    expect(B.bisectRight(-2, low: 9), 9);
    expect(B.bisectRight(-1, low: 9), 9);
    expect(B.bisectRight(0, low: 9), 9);
    expect(B.bisectRight(1, low: 9), 9);
    expect(B.bisectRight(2, low: 9), 9);
    expect(B.bisectRight(3, low: 9), 9);
    expect(B.bisectRight(4, low: 9), 9);
    expect(B.bisectRight(5, low: 9), 9);
    expect(B.bisectRight(6, low: 9), 9);
    expect(B.bisectRight(7, low: 9), 9);
    expect(B.bisectRight(8, low: 9), 9);
  });

  test('list.bisectRight for C lo=9 hi=None', () {
    expect(C.bisectRight(-2, low: 9), 9);
    expect(C.bisectRight(-1, low: 9), 9);
    expect(C.bisectRight(0, low: 9), 9);
    expect(C.bisectRight(1, low: 9), 9);
    expect(C.bisectRight(2, low: 9), 9);
    expect(C.bisectRight(3, low: 9), 9);
    expect(C.bisectRight(4, low: 9), 9);
    expect(C.bisectRight(5, low: 9), 9);
    expect(C.bisectRight(6, low: 9), 9);
    expect(C.bisectRight(7, low: 9), 9);
    expect(C.bisectRight(8, low: 9), 9);
  });

  test('list.bisectRight for D lo=9 hi=None', () {
    expect(D.bisectRight(-2, low: 9), 9);
    expect(D.bisectRight(-1, low: 9), 9);
    expect(D.bisectRight(0, low: 9), 9);
    expect(D.bisectRight(1, low: 9), 9);
    expect(D.bisectRight(2, low: 9), 9);
    expect(D.bisectRight(3, low: 9), 9);
    expect(D.bisectRight(4, low: 9), 9);
    expect(D.bisectRight(5, low: 9), 9);
    expect(D.bisectRight(6, low: 9), 9);
    expect(D.bisectRight(7, low: 9), 9);
    expect(D.bisectRight(8, low: 9), 9);
  });

  test('list.bisectRight for E lo=9 hi=None', () {
    expect(E.bisectRight(-2, low: 9), 9);
    expect(E.bisectRight(-1, low: 9), 9);
    expect(E.bisectRight(0, low: 9), 9);
    expect(E.bisectRight(1, low: 9), 9);
    expect(E.bisectRight(2, low: 9), 9);
    expect(E.bisectRight(3, low: 9), 9);
    expect(E.bisectRight(4, low: 9), 9);
    expect(E.bisectRight(5, low: 9), 9);
    expect(E.bisectRight(6, low: 9), 10);
    expect(E.bisectRight(7, low: 9), 10);
    expect(E.bisectRight(8, low: 9), 10);
  });

  test('list.bisectRight for A lo=None hi=0', () {
    expect(A.bisectRight(-2, high: 0), 0);
    expect(A.bisectRight(-1, high: 0), 0);
    expect(A.bisectRight(0, high: 0), 0);
    expect(A.bisectRight(1, high: 0), 0);
    expect(A.bisectRight(2, high: 0), 0);
    expect(A.bisectRight(3, high: 0), 0);
    expect(A.bisectRight(4, high: 0), 0);
    expect(A.bisectRight(5, high: 0), 0);
    expect(A.bisectRight(6, high: 0), 0);
    expect(A.bisectRight(7, high: 0), 0);
    expect(A.bisectRight(8, high: 0), 0);
  });

  test('list.bisectRight for B lo=None hi=0', () {
    expect(B.bisectRight(-2, high: 0), 0);
    expect(B.bisectRight(-1, high: 0), 0);
    expect(B.bisectRight(0, high: 0), 0);
    expect(B.bisectRight(1, high: 0), 0);
    expect(B.bisectRight(2, high: 0), 0);
    expect(B.bisectRight(3, high: 0), 0);
    expect(B.bisectRight(4, high: 0), 0);
    expect(B.bisectRight(5, high: 0), 0);
    expect(B.bisectRight(6, high: 0), 0);
    expect(B.bisectRight(7, high: 0), 0);
    expect(B.bisectRight(8, high: 0), 0);
  });

  test('list.bisectRight for C lo=None hi=0', () {
    expect(C.bisectRight(-2, high: 0), 0);
    expect(C.bisectRight(-1, high: 0), 0);
    expect(C.bisectRight(0, high: 0), 0);
    expect(C.bisectRight(1, high: 0), 0);
    expect(C.bisectRight(2, high: 0), 0);
    expect(C.bisectRight(3, high: 0), 0);
    expect(C.bisectRight(4, high: 0), 0);
    expect(C.bisectRight(5, high: 0), 0);
    expect(C.bisectRight(6, high: 0), 0);
    expect(C.bisectRight(7, high: 0), 0);
    expect(C.bisectRight(8, high: 0), 0);
  });

  test('list.bisectRight for D lo=None hi=0', () {
    expect(D.bisectRight(-2, high: 0), 0);
    expect(D.bisectRight(-1, high: 0), 0);
    expect(D.bisectRight(0, high: 0), 0);
    expect(D.bisectRight(1, high: 0), 0);
    expect(D.bisectRight(2, high: 0), 0);
    expect(D.bisectRight(3, high: 0), 0);
    expect(D.bisectRight(4, high: 0), 0);
    expect(D.bisectRight(5, high: 0), 0);
    expect(D.bisectRight(6, high: 0), 0);
    expect(D.bisectRight(7, high: 0), 0);
    expect(D.bisectRight(8, high: 0), 0);
  });

  test('list.bisectRight for E lo=None hi=0', () {
    expect(E.bisectRight(-2, high: 0), 0);
    expect(E.bisectRight(-1, high: 0), 0);
    expect(E.bisectRight(0, high: 0), 0);
    expect(E.bisectRight(1, high: 0), 0);
    expect(E.bisectRight(2, high: 0), 0);
    expect(E.bisectRight(3, high: 0), 0);
    expect(E.bisectRight(4, high: 0), 0);
    expect(E.bisectRight(5, high: 0), 0);
    expect(E.bisectRight(6, high: 0), 0);
    expect(E.bisectRight(7, high: 0), 0);
    expect(E.bisectRight(8, high: 0), 0);
  });

  test('list.bisectRight for A lo=0 hi=0', () {
    expect(A.bisectRight(-2, low: 0, high: 0), 0);
    expect(A.bisectRight(-1, low: 0, high: 0), 0);
    expect(A.bisectRight(0, low: 0, high: 0), 0);
    expect(A.bisectRight(1, low: 0, high: 0), 0);
    expect(A.bisectRight(2, low: 0, high: 0), 0);
    expect(A.bisectRight(3, low: 0, high: 0), 0);
    expect(A.bisectRight(4, low: 0, high: 0), 0);
    expect(A.bisectRight(5, low: 0, high: 0), 0);
    expect(A.bisectRight(6, low: 0, high: 0), 0);
    expect(A.bisectRight(7, low: 0, high: 0), 0);
    expect(A.bisectRight(8, low: 0, high: 0), 0);
  });

  test('list.bisectRight for B lo=0 hi=0', () {
    expect(B.bisectRight(-2, low: 0, high: 0), 0);
    expect(B.bisectRight(-1, low: 0, high: 0), 0);
    expect(B.bisectRight(0, low: 0, high: 0), 0);
    expect(B.bisectRight(1, low: 0, high: 0), 0);
    expect(B.bisectRight(2, low: 0, high: 0), 0);
    expect(B.bisectRight(3, low: 0, high: 0), 0);
    expect(B.bisectRight(4, low: 0, high: 0), 0);
    expect(B.bisectRight(5, low: 0, high: 0), 0);
    expect(B.bisectRight(6, low: 0, high: 0), 0);
    expect(B.bisectRight(7, low: 0, high: 0), 0);
    expect(B.bisectRight(8, low: 0, high: 0), 0);
  });

  test('list.bisectRight for C lo=0 hi=0', () {
    expect(C.bisectRight(-2, low: 0, high: 0), 0);
    expect(C.bisectRight(-1, low: 0, high: 0), 0);
    expect(C.bisectRight(0, low: 0, high: 0), 0);
    expect(C.bisectRight(1, low: 0, high: 0), 0);
    expect(C.bisectRight(2, low: 0, high: 0), 0);
    expect(C.bisectRight(3, low: 0, high: 0), 0);
    expect(C.bisectRight(4, low: 0, high: 0), 0);
    expect(C.bisectRight(5, low: 0, high: 0), 0);
    expect(C.bisectRight(6, low: 0, high: 0), 0);
    expect(C.bisectRight(7, low: 0, high: 0), 0);
    expect(C.bisectRight(8, low: 0, high: 0), 0);
  });

  test('list.bisectRight for D lo=0 hi=0', () {
    expect(D.bisectRight(-2, low: 0, high: 0), 0);
    expect(D.bisectRight(-1, low: 0, high: 0), 0);
    expect(D.bisectRight(0, low: 0, high: 0), 0);
    expect(D.bisectRight(1, low: 0, high: 0), 0);
    expect(D.bisectRight(2, low: 0, high: 0), 0);
    expect(D.bisectRight(3, low: 0, high: 0), 0);
    expect(D.bisectRight(4, low: 0, high: 0), 0);
    expect(D.bisectRight(5, low: 0, high: 0), 0);
    expect(D.bisectRight(6, low: 0, high: 0), 0);
    expect(D.bisectRight(7, low: 0, high: 0), 0);
    expect(D.bisectRight(8, low: 0, high: 0), 0);
  });

  test('list.bisectRight for E lo=0 hi=0', () {
    expect(E.bisectRight(-2, low: 0, high: 0), 0);
    expect(E.bisectRight(-1, low: 0, high: 0), 0);
    expect(E.bisectRight(0, low: 0, high: 0), 0);
    expect(E.bisectRight(1, low: 0, high: 0), 0);
    expect(E.bisectRight(2, low: 0, high: 0), 0);
    expect(E.bisectRight(3, low: 0, high: 0), 0);
    expect(E.bisectRight(4, low: 0, high: 0), 0);
    expect(E.bisectRight(5, low: 0, high: 0), 0);
    expect(E.bisectRight(6, low: 0, high: 0), 0);
    expect(E.bisectRight(7, low: 0, high: 0), 0);
    expect(E.bisectRight(8, low: 0, high: 0), 0);
  });

  test('list.bisectRight for A lo=1 hi=0', () {
    expect(A.bisectRight(-2, low: 1, high: 0), 1);
    expect(A.bisectRight(-1, low: 1, high: 0), 1);
    expect(A.bisectRight(0, low: 1, high: 0), 1);
    expect(A.bisectRight(1, low: 1, high: 0), 1);
    expect(A.bisectRight(2, low: 1, high: 0), 1);
    expect(A.bisectRight(3, low: 1, high: 0), 1);
    expect(A.bisectRight(4, low: 1, high: 0), 1);
    expect(A.bisectRight(5, low: 1, high: 0), 1);
    expect(A.bisectRight(6, low: 1, high: 0), 1);
    expect(A.bisectRight(7, low: 1, high: 0), 1);
    expect(A.bisectRight(8, low: 1, high: 0), 1);
  });

  test('list.bisectRight for B lo=1 hi=0', () {
    expect(B.bisectRight(-2, low: 1, high: 0), 1);
    expect(B.bisectRight(-1, low: 1, high: 0), 1);
    expect(B.bisectRight(0, low: 1, high: 0), 1);
    expect(B.bisectRight(1, low: 1, high: 0), 1);
    expect(B.bisectRight(2, low: 1, high: 0), 1);
    expect(B.bisectRight(3, low: 1, high: 0), 1);
    expect(B.bisectRight(4, low: 1, high: 0), 1);
    expect(B.bisectRight(5, low: 1, high: 0), 1);
    expect(B.bisectRight(6, low: 1, high: 0), 1);
    expect(B.bisectRight(7, low: 1, high: 0), 1);
    expect(B.bisectRight(8, low: 1, high: 0), 1);
  });

  test('list.bisectRight for C lo=1 hi=0', () {
    expect(C.bisectRight(-2, low: 1, high: 0), 1);
    expect(C.bisectRight(-1, low: 1, high: 0), 1);
    expect(C.bisectRight(0, low: 1, high: 0), 1);
    expect(C.bisectRight(1, low: 1, high: 0), 1);
    expect(C.bisectRight(2, low: 1, high: 0), 1);
    expect(C.bisectRight(3, low: 1, high: 0), 1);
    expect(C.bisectRight(4, low: 1, high: 0), 1);
    expect(C.bisectRight(5, low: 1, high: 0), 1);
    expect(C.bisectRight(6, low: 1, high: 0), 1);
    expect(C.bisectRight(7, low: 1, high: 0), 1);
    expect(C.bisectRight(8, low: 1, high: 0), 1);
  });

  test('list.bisectRight for D lo=1 hi=0', () {
    expect(D.bisectRight(-2, low: 1, high: 0), 1);
    expect(D.bisectRight(-1, low: 1, high: 0), 1);
    expect(D.bisectRight(0, low: 1, high: 0), 1);
    expect(D.bisectRight(1, low: 1, high: 0), 1);
    expect(D.bisectRight(2, low: 1, high: 0), 1);
    expect(D.bisectRight(3, low: 1, high: 0), 1);
    expect(D.bisectRight(4, low: 1, high: 0), 1);
    expect(D.bisectRight(5, low: 1, high: 0), 1);
    expect(D.bisectRight(6, low: 1, high: 0), 1);
    expect(D.bisectRight(7, low: 1, high: 0), 1);
    expect(D.bisectRight(8, low: 1, high: 0), 1);
  });

  test('list.bisectRight for E lo=1 hi=0', () {
    expect(E.bisectRight(-2, low: 1, high: 0), 1);
    expect(E.bisectRight(-1, low: 1, high: 0), 1);
    expect(E.bisectRight(0, low: 1, high: 0), 1);
    expect(E.bisectRight(1, low: 1, high: 0), 1);
    expect(E.bisectRight(2, low: 1, high: 0), 1);
    expect(E.bisectRight(3, low: 1, high: 0), 1);
    expect(E.bisectRight(4, low: 1, high: 0), 1);
    expect(E.bisectRight(5, low: 1, high: 0), 1);
    expect(E.bisectRight(6, low: 1, high: 0), 1);
    expect(E.bisectRight(7, low: 1, high: 0), 1);
    expect(E.bisectRight(8, low: 1, high: 0), 1);
  });

  test('list.bisectRight for A lo=2 hi=0', () {
    expect(A.bisectRight(-2, low: 2, high: 0), 2);
    expect(A.bisectRight(-1, low: 2, high: 0), 2);
    expect(A.bisectRight(0, low: 2, high: 0), 2);
    expect(A.bisectRight(1, low: 2, high: 0), 2);
    expect(A.bisectRight(2, low: 2, high: 0), 2);
    expect(A.bisectRight(3, low: 2, high: 0), 2);
    expect(A.bisectRight(4, low: 2, high: 0), 2);
    expect(A.bisectRight(5, low: 2, high: 0), 2);
    expect(A.bisectRight(6, low: 2, high: 0), 2);
    expect(A.bisectRight(7, low: 2, high: 0), 2);
    expect(A.bisectRight(8, low: 2, high: 0), 2);
  });

  test('list.bisectRight for B lo=2 hi=0', () {
    expect(B.bisectRight(-2, low: 2, high: 0), 2);
    expect(B.bisectRight(-1, low: 2, high: 0), 2);
    expect(B.bisectRight(0, low: 2, high: 0), 2);
    expect(B.bisectRight(1, low: 2, high: 0), 2);
    expect(B.bisectRight(2, low: 2, high: 0), 2);
    expect(B.bisectRight(3, low: 2, high: 0), 2);
    expect(B.bisectRight(4, low: 2, high: 0), 2);
    expect(B.bisectRight(5, low: 2, high: 0), 2);
    expect(B.bisectRight(6, low: 2, high: 0), 2);
    expect(B.bisectRight(7, low: 2, high: 0), 2);
    expect(B.bisectRight(8, low: 2, high: 0), 2);
  });

  test('list.bisectRight for C lo=2 hi=0', () {
    expect(C.bisectRight(-2, low: 2, high: 0), 2);
    expect(C.bisectRight(-1, low: 2, high: 0), 2);
    expect(C.bisectRight(0, low: 2, high: 0), 2);
    expect(C.bisectRight(1, low: 2, high: 0), 2);
    expect(C.bisectRight(2, low: 2, high: 0), 2);
    expect(C.bisectRight(3, low: 2, high: 0), 2);
    expect(C.bisectRight(4, low: 2, high: 0), 2);
    expect(C.bisectRight(5, low: 2, high: 0), 2);
    expect(C.bisectRight(6, low: 2, high: 0), 2);
    expect(C.bisectRight(7, low: 2, high: 0), 2);
    expect(C.bisectRight(8, low: 2, high: 0), 2);
  });

  test('list.bisectRight for D lo=2 hi=0', () {
    expect(D.bisectRight(-2, low: 2, high: 0), 2);
    expect(D.bisectRight(-1, low: 2, high: 0), 2);
    expect(D.bisectRight(0, low: 2, high: 0), 2);
    expect(D.bisectRight(1, low: 2, high: 0), 2);
    expect(D.bisectRight(2, low: 2, high: 0), 2);
    expect(D.bisectRight(3, low: 2, high: 0), 2);
    expect(D.bisectRight(4, low: 2, high: 0), 2);
    expect(D.bisectRight(5, low: 2, high: 0), 2);
    expect(D.bisectRight(6, low: 2, high: 0), 2);
    expect(D.bisectRight(7, low: 2, high: 0), 2);
    expect(D.bisectRight(8, low: 2, high: 0), 2);
  });

  test('list.bisectRight for E lo=2 hi=0', () {
    expect(E.bisectRight(-2, low: 2, high: 0), 2);
    expect(E.bisectRight(-1, low: 2, high: 0), 2);
    expect(E.bisectRight(0, low: 2, high: 0), 2);
    expect(E.bisectRight(1, low: 2, high: 0), 2);
    expect(E.bisectRight(2, low: 2, high: 0), 2);
    expect(E.bisectRight(3, low: 2, high: 0), 2);
    expect(E.bisectRight(4, low: 2, high: 0), 2);
    expect(E.bisectRight(5, low: 2, high: 0), 2);
    expect(E.bisectRight(6, low: 2, high: 0), 2);
    expect(E.bisectRight(7, low: 2, high: 0), 2);
    expect(E.bisectRight(8, low: 2, high: 0), 2);
  });

  test('list.bisectRight for A lo=3 hi=0', () {
    expect(A.bisectRight(-2, low: 3, high: 0), 3);
    expect(A.bisectRight(-1, low: 3, high: 0), 3);
    expect(A.bisectRight(0, low: 3, high: 0), 3);
    expect(A.bisectRight(1, low: 3, high: 0), 3);
    expect(A.bisectRight(2, low: 3, high: 0), 3);
    expect(A.bisectRight(3, low: 3, high: 0), 3);
    expect(A.bisectRight(4, low: 3, high: 0), 3);
    expect(A.bisectRight(5, low: 3, high: 0), 3);
    expect(A.bisectRight(6, low: 3, high: 0), 3);
    expect(A.bisectRight(7, low: 3, high: 0), 3);
    expect(A.bisectRight(8, low: 3, high: 0), 3);
  });

  test('list.bisectRight for B lo=3 hi=0', () {
    expect(B.bisectRight(-2, low: 3, high: 0), 3);
    expect(B.bisectRight(-1, low: 3, high: 0), 3);
    expect(B.bisectRight(0, low: 3, high: 0), 3);
    expect(B.bisectRight(1, low: 3, high: 0), 3);
    expect(B.bisectRight(2, low: 3, high: 0), 3);
    expect(B.bisectRight(3, low: 3, high: 0), 3);
    expect(B.bisectRight(4, low: 3, high: 0), 3);
    expect(B.bisectRight(5, low: 3, high: 0), 3);
    expect(B.bisectRight(6, low: 3, high: 0), 3);
    expect(B.bisectRight(7, low: 3, high: 0), 3);
    expect(B.bisectRight(8, low: 3, high: 0), 3);
  });

  test('list.bisectRight for C lo=3 hi=0', () {
    expect(C.bisectRight(-2, low: 3, high: 0), 3);
    expect(C.bisectRight(-1, low: 3, high: 0), 3);
    expect(C.bisectRight(0, low: 3, high: 0), 3);
    expect(C.bisectRight(1, low: 3, high: 0), 3);
    expect(C.bisectRight(2, low: 3, high: 0), 3);
    expect(C.bisectRight(3, low: 3, high: 0), 3);
    expect(C.bisectRight(4, low: 3, high: 0), 3);
    expect(C.bisectRight(5, low: 3, high: 0), 3);
    expect(C.bisectRight(6, low: 3, high: 0), 3);
    expect(C.bisectRight(7, low: 3, high: 0), 3);
    expect(C.bisectRight(8, low: 3, high: 0), 3);
  });

  test('list.bisectRight for D lo=3 hi=0', () {
    expect(D.bisectRight(-2, low: 3, high: 0), 3);
    expect(D.bisectRight(-1, low: 3, high: 0), 3);
    expect(D.bisectRight(0, low: 3, high: 0), 3);
    expect(D.bisectRight(1, low: 3, high: 0), 3);
    expect(D.bisectRight(2, low: 3, high: 0), 3);
    expect(D.bisectRight(3, low: 3, high: 0), 3);
    expect(D.bisectRight(4, low: 3, high: 0), 3);
    expect(D.bisectRight(5, low: 3, high: 0), 3);
    expect(D.bisectRight(6, low: 3, high: 0), 3);
    expect(D.bisectRight(7, low: 3, high: 0), 3);
    expect(D.bisectRight(8, low: 3, high: 0), 3);
  });

  test('list.bisectRight for E lo=3 hi=0', () {
    expect(E.bisectRight(-2, low: 3, high: 0), 3);
    expect(E.bisectRight(-1, low: 3, high: 0), 3);
    expect(E.bisectRight(0, low: 3, high: 0), 3);
    expect(E.bisectRight(1, low: 3, high: 0), 3);
    expect(E.bisectRight(2, low: 3, high: 0), 3);
    expect(E.bisectRight(3, low: 3, high: 0), 3);
    expect(E.bisectRight(4, low: 3, high: 0), 3);
    expect(E.bisectRight(5, low: 3, high: 0), 3);
    expect(E.bisectRight(6, low: 3, high: 0), 3);
    expect(E.bisectRight(7, low: 3, high: 0), 3);
    expect(E.bisectRight(8, low: 3, high: 0), 3);
  });

  test('list.bisectRight for A lo=4 hi=0', () {
    expect(A.bisectRight(-2, low: 4, high: 0), 4);
    expect(A.bisectRight(-1, low: 4, high: 0), 4);
    expect(A.bisectRight(0, low: 4, high: 0), 4);
    expect(A.bisectRight(1, low: 4, high: 0), 4);
    expect(A.bisectRight(2, low: 4, high: 0), 4);
    expect(A.bisectRight(3, low: 4, high: 0), 4);
    expect(A.bisectRight(4, low: 4, high: 0), 4);
    expect(A.bisectRight(5, low: 4, high: 0), 4);
    expect(A.bisectRight(6, low: 4, high: 0), 4);
    expect(A.bisectRight(7, low: 4, high: 0), 4);
    expect(A.bisectRight(8, low: 4, high: 0), 4);
  });

  test('list.bisectRight for B lo=4 hi=0', () {
    expect(B.bisectRight(-2, low: 4, high: 0), 4);
    expect(B.bisectRight(-1, low: 4, high: 0), 4);
    expect(B.bisectRight(0, low: 4, high: 0), 4);
    expect(B.bisectRight(1, low: 4, high: 0), 4);
    expect(B.bisectRight(2, low: 4, high: 0), 4);
    expect(B.bisectRight(3, low: 4, high: 0), 4);
    expect(B.bisectRight(4, low: 4, high: 0), 4);
    expect(B.bisectRight(5, low: 4, high: 0), 4);
    expect(B.bisectRight(6, low: 4, high: 0), 4);
    expect(B.bisectRight(7, low: 4, high: 0), 4);
    expect(B.bisectRight(8, low: 4, high: 0), 4);
  });

  test('list.bisectRight for C lo=4 hi=0', () {
    expect(C.bisectRight(-2, low: 4, high: 0), 4);
    expect(C.bisectRight(-1, low: 4, high: 0), 4);
    expect(C.bisectRight(0, low: 4, high: 0), 4);
    expect(C.bisectRight(1, low: 4, high: 0), 4);
    expect(C.bisectRight(2, low: 4, high: 0), 4);
    expect(C.bisectRight(3, low: 4, high: 0), 4);
    expect(C.bisectRight(4, low: 4, high: 0), 4);
    expect(C.bisectRight(5, low: 4, high: 0), 4);
    expect(C.bisectRight(6, low: 4, high: 0), 4);
    expect(C.bisectRight(7, low: 4, high: 0), 4);
    expect(C.bisectRight(8, low: 4, high: 0), 4);
  });

  test('list.bisectRight for D lo=4 hi=0', () {
    expect(D.bisectRight(-2, low: 4, high: 0), 4);
    expect(D.bisectRight(-1, low: 4, high: 0), 4);
    expect(D.bisectRight(0, low: 4, high: 0), 4);
    expect(D.bisectRight(1, low: 4, high: 0), 4);
    expect(D.bisectRight(2, low: 4, high: 0), 4);
    expect(D.bisectRight(3, low: 4, high: 0), 4);
    expect(D.bisectRight(4, low: 4, high: 0), 4);
    expect(D.bisectRight(5, low: 4, high: 0), 4);
    expect(D.bisectRight(6, low: 4, high: 0), 4);
    expect(D.bisectRight(7, low: 4, high: 0), 4);
    expect(D.bisectRight(8, low: 4, high: 0), 4);
  });

  test('list.bisectRight for E lo=4 hi=0', () {
    expect(E.bisectRight(-2, low: 4, high: 0), 4);
    expect(E.bisectRight(-1, low: 4, high: 0), 4);
    expect(E.bisectRight(0, low: 4, high: 0), 4);
    expect(E.bisectRight(1, low: 4, high: 0), 4);
    expect(E.bisectRight(2, low: 4, high: 0), 4);
    expect(E.bisectRight(3, low: 4, high: 0), 4);
    expect(E.bisectRight(4, low: 4, high: 0), 4);
    expect(E.bisectRight(5, low: 4, high: 0), 4);
    expect(E.bisectRight(6, low: 4, high: 0), 4);
    expect(E.bisectRight(7, low: 4, high: 0), 4);
    expect(E.bisectRight(8, low: 4, high: 0), 4);
  });

  test('list.bisectRight for A lo=5 hi=0', () {
    expect(A.bisectRight(-2, low: 5, high: 0), 5);
    expect(A.bisectRight(-1, low: 5, high: 0), 5);
    expect(A.bisectRight(0, low: 5, high: 0), 5);
    expect(A.bisectRight(1, low: 5, high: 0), 5);
    expect(A.bisectRight(2, low: 5, high: 0), 5);
    expect(A.bisectRight(3, low: 5, high: 0), 5);
    expect(A.bisectRight(4, low: 5, high: 0), 5);
    expect(A.bisectRight(5, low: 5, high: 0), 5);
    expect(A.bisectRight(6, low: 5, high: 0), 5);
    expect(A.bisectRight(7, low: 5, high: 0), 5);
    expect(A.bisectRight(8, low: 5, high: 0), 5);
  });

  test('list.bisectRight for B lo=5 hi=0', () {
    expect(B.bisectRight(-2, low: 5, high: 0), 5);
    expect(B.bisectRight(-1, low: 5, high: 0), 5);
    expect(B.bisectRight(0, low: 5, high: 0), 5);
    expect(B.bisectRight(1, low: 5, high: 0), 5);
    expect(B.bisectRight(2, low: 5, high: 0), 5);
    expect(B.bisectRight(3, low: 5, high: 0), 5);
    expect(B.bisectRight(4, low: 5, high: 0), 5);
    expect(B.bisectRight(5, low: 5, high: 0), 5);
    expect(B.bisectRight(6, low: 5, high: 0), 5);
    expect(B.bisectRight(7, low: 5, high: 0), 5);
    expect(B.bisectRight(8, low: 5, high: 0), 5);
  });

  test('list.bisectRight for C lo=5 hi=0', () {
    expect(C.bisectRight(-2, low: 5, high: 0), 5);
    expect(C.bisectRight(-1, low: 5, high: 0), 5);
    expect(C.bisectRight(0, low: 5, high: 0), 5);
    expect(C.bisectRight(1, low: 5, high: 0), 5);
    expect(C.bisectRight(2, low: 5, high: 0), 5);
    expect(C.bisectRight(3, low: 5, high: 0), 5);
    expect(C.bisectRight(4, low: 5, high: 0), 5);
    expect(C.bisectRight(5, low: 5, high: 0), 5);
    expect(C.bisectRight(6, low: 5, high: 0), 5);
    expect(C.bisectRight(7, low: 5, high: 0), 5);
    expect(C.bisectRight(8, low: 5, high: 0), 5);
  });

  test('list.bisectRight for D lo=5 hi=0', () {
    expect(D.bisectRight(-2, low: 5, high: 0), 5);
    expect(D.bisectRight(-1, low: 5, high: 0), 5);
    expect(D.bisectRight(0, low: 5, high: 0), 5);
    expect(D.bisectRight(1, low: 5, high: 0), 5);
    expect(D.bisectRight(2, low: 5, high: 0), 5);
    expect(D.bisectRight(3, low: 5, high: 0), 5);
    expect(D.bisectRight(4, low: 5, high: 0), 5);
    expect(D.bisectRight(5, low: 5, high: 0), 5);
    expect(D.bisectRight(6, low: 5, high: 0), 5);
    expect(D.bisectRight(7, low: 5, high: 0), 5);
    expect(D.bisectRight(8, low: 5, high: 0), 5);
  });

  test('list.bisectRight for E lo=5 hi=0', () {
    expect(E.bisectRight(-2, low: 5, high: 0), 5);
    expect(E.bisectRight(-1, low: 5, high: 0), 5);
    expect(E.bisectRight(0, low: 5, high: 0), 5);
    expect(E.bisectRight(1, low: 5, high: 0), 5);
    expect(E.bisectRight(2, low: 5, high: 0), 5);
    expect(E.bisectRight(3, low: 5, high: 0), 5);
    expect(E.bisectRight(4, low: 5, high: 0), 5);
    expect(E.bisectRight(5, low: 5, high: 0), 5);
    expect(E.bisectRight(6, low: 5, high: 0), 5);
    expect(E.bisectRight(7, low: 5, high: 0), 5);
    expect(E.bisectRight(8, low: 5, high: 0), 5);
  });

  test('list.bisectRight for A lo=6 hi=0', () {
    expect(A.bisectRight(-2, low: 6, high: 0), 6);
    expect(A.bisectRight(-1, low: 6, high: 0), 6);
    expect(A.bisectRight(0, low: 6, high: 0), 6);
    expect(A.bisectRight(1, low: 6, high: 0), 6);
    expect(A.bisectRight(2, low: 6, high: 0), 6);
    expect(A.bisectRight(3, low: 6, high: 0), 6);
    expect(A.bisectRight(4, low: 6, high: 0), 6);
    expect(A.bisectRight(5, low: 6, high: 0), 6);
    expect(A.bisectRight(6, low: 6, high: 0), 6);
    expect(A.bisectRight(7, low: 6, high: 0), 6);
    expect(A.bisectRight(8, low: 6, high: 0), 6);
  });

  test('list.bisectRight for B lo=6 hi=0', () {
    expect(B.bisectRight(-2, low: 6, high: 0), 6);
    expect(B.bisectRight(-1, low: 6, high: 0), 6);
    expect(B.bisectRight(0, low: 6, high: 0), 6);
    expect(B.bisectRight(1, low: 6, high: 0), 6);
    expect(B.bisectRight(2, low: 6, high: 0), 6);
    expect(B.bisectRight(3, low: 6, high: 0), 6);
    expect(B.bisectRight(4, low: 6, high: 0), 6);
    expect(B.bisectRight(5, low: 6, high: 0), 6);
    expect(B.bisectRight(6, low: 6, high: 0), 6);
    expect(B.bisectRight(7, low: 6, high: 0), 6);
    expect(B.bisectRight(8, low: 6, high: 0), 6);
  });

  test('list.bisectRight for C lo=6 hi=0', () {
    expect(C.bisectRight(-2, low: 6, high: 0), 6);
    expect(C.bisectRight(-1, low: 6, high: 0), 6);
    expect(C.bisectRight(0, low: 6, high: 0), 6);
    expect(C.bisectRight(1, low: 6, high: 0), 6);
    expect(C.bisectRight(2, low: 6, high: 0), 6);
    expect(C.bisectRight(3, low: 6, high: 0), 6);
    expect(C.bisectRight(4, low: 6, high: 0), 6);
    expect(C.bisectRight(5, low: 6, high: 0), 6);
    expect(C.bisectRight(6, low: 6, high: 0), 6);
    expect(C.bisectRight(7, low: 6, high: 0), 6);
    expect(C.bisectRight(8, low: 6, high: 0), 6);
  });

  test('list.bisectRight for D lo=6 hi=0', () {
    expect(D.bisectRight(-2, low: 6, high: 0), 6);
    expect(D.bisectRight(-1, low: 6, high: 0), 6);
    expect(D.bisectRight(0, low: 6, high: 0), 6);
    expect(D.bisectRight(1, low: 6, high: 0), 6);
    expect(D.bisectRight(2, low: 6, high: 0), 6);
    expect(D.bisectRight(3, low: 6, high: 0), 6);
    expect(D.bisectRight(4, low: 6, high: 0), 6);
    expect(D.bisectRight(5, low: 6, high: 0), 6);
    expect(D.bisectRight(6, low: 6, high: 0), 6);
    expect(D.bisectRight(7, low: 6, high: 0), 6);
    expect(D.bisectRight(8, low: 6, high: 0), 6);
  });

  test('list.bisectRight for E lo=6 hi=0', () {
    expect(E.bisectRight(-2, low: 6, high: 0), 6);
    expect(E.bisectRight(-1, low: 6, high: 0), 6);
    expect(E.bisectRight(0, low: 6, high: 0), 6);
    expect(E.bisectRight(1, low: 6, high: 0), 6);
    expect(E.bisectRight(2, low: 6, high: 0), 6);
    expect(E.bisectRight(3, low: 6, high: 0), 6);
    expect(E.bisectRight(4, low: 6, high: 0), 6);
    expect(E.bisectRight(5, low: 6, high: 0), 6);
    expect(E.bisectRight(6, low: 6, high: 0), 6);
    expect(E.bisectRight(7, low: 6, high: 0), 6);
    expect(E.bisectRight(8, low: 6, high: 0), 6);
  });

  test('list.bisectRight for A lo=7 hi=0', () {
    expect(A.bisectRight(-2, low: 7, high: 0), 7);
    expect(A.bisectRight(-1, low: 7, high: 0), 7);
    expect(A.bisectRight(0, low: 7, high: 0), 7);
    expect(A.bisectRight(1, low: 7, high: 0), 7);
    expect(A.bisectRight(2, low: 7, high: 0), 7);
    expect(A.bisectRight(3, low: 7, high: 0), 7);
    expect(A.bisectRight(4, low: 7, high: 0), 7);
    expect(A.bisectRight(5, low: 7, high: 0), 7);
    expect(A.bisectRight(6, low: 7, high: 0), 7);
    expect(A.bisectRight(7, low: 7, high: 0), 7);
    expect(A.bisectRight(8, low: 7, high: 0), 7);
  });

  test('list.bisectRight for B lo=7 hi=0', () {
    expect(B.bisectRight(-2, low: 7, high: 0), 7);
    expect(B.bisectRight(-1, low: 7, high: 0), 7);
    expect(B.bisectRight(0, low: 7, high: 0), 7);
    expect(B.bisectRight(1, low: 7, high: 0), 7);
    expect(B.bisectRight(2, low: 7, high: 0), 7);
    expect(B.bisectRight(3, low: 7, high: 0), 7);
    expect(B.bisectRight(4, low: 7, high: 0), 7);
    expect(B.bisectRight(5, low: 7, high: 0), 7);
    expect(B.bisectRight(6, low: 7, high: 0), 7);
    expect(B.bisectRight(7, low: 7, high: 0), 7);
    expect(B.bisectRight(8, low: 7, high: 0), 7);
  });

  test('list.bisectRight for C lo=7 hi=0', () {
    expect(C.bisectRight(-2, low: 7, high: 0), 7);
    expect(C.bisectRight(-1, low: 7, high: 0), 7);
    expect(C.bisectRight(0, low: 7, high: 0), 7);
    expect(C.bisectRight(1, low: 7, high: 0), 7);
    expect(C.bisectRight(2, low: 7, high: 0), 7);
    expect(C.bisectRight(3, low: 7, high: 0), 7);
    expect(C.bisectRight(4, low: 7, high: 0), 7);
    expect(C.bisectRight(5, low: 7, high: 0), 7);
    expect(C.bisectRight(6, low: 7, high: 0), 7);
    expect(C.bisectRight(7, low: 7, high: 0), 7);
    expect(C.bisectRight(8, low: 7, high: 0), 7);
  });

  test('list.bisectRight for D lo=7 hi=0', () {
    expect(D.bisectRight(-2, low: 7, high: 0), 7);
    expect(D.bisectRight(-1, low: 7, high: 0), 7);
    expect(D.bisectRight(0, low: 7, high: 0), 7);
    expect(D.bisectRight(1, low: 7, high: 0), 7);
    expect(D.bisectRight(2, low: 7, high: 0), 7);
    expect(D.bisectRight(3, low: 7, high: 0), 7);
    expect(D.bisectRight(4, low: 7, high: 0), 7);
    expect(D.bisectRight(5, low: 7, high: 0), 7);
    expect(D.bisectRight(6, low: 7, high: 0), 7);
    expect(D.bisectRight(7, low: 7, high: 0), 7);
    expect(D.bisectRight(8, low: 7, high: 0), 7);
  });

  test('list.bisectRight for E lo=7 hi=0', () {
    expect(E.bisectRight(-2, low: 7, high: 0), 7);
    expect(E.bisectRight(-1, low: 7, high: 0), 7);
    expect(E.bisectRight(0, low: 7, high: 0), 7);
    expect(E.bisectRight(1, low: 7, high: 0), 7);
    expect(E.bisectRight(2, low: 7, high: 0), 7);
    expect(E.bisectRight(3, low: 7, high: 0), 7);
    expect(E.bisectRight(4, low: 7, high: 0), 7);
    expect(E.bisectRight(5, low: 7, high: 0), 7);
    expect(E.bisectRight(6, low: 7, high: 0), 7);
    expect(E.bisectRight(7, low: 7, high: 0), 7);
    expect(E.bisectRight(8, low: 7, high: 0), 7);
  });

  test('list.bisectRight for A lo=8 hi=0', () {
    expect(A.bisectRight(-2, low: 8, high: 0), 8);
    expect(A.bisectRight(-1, low: 8, high: 0), 8);
    expect(A.bisectRight(0, low: 8, high: 0), 8);
    expect(A.bisectRight(1, low: 8, high: 0), 8);
    expect(A.bisectRight(2, low: 8, high: 0), 8);
    expect(A.bisectRight(3, low: 8, high: 0), 8);
    expect(A.bisectRight(4, low: 8, high: 0), 8);
    expect(A.bisectRight(5, low: 8, high: 0), 8);
    expect(A.bisectRight(6, low: 8, high: 0), 8);
    expect(A.bisectRight(7, low: 8, high: 0), 8);
    expect(A.bisectRight(8, low: 8, high: 0), 8);
  });

  test('list.bisectRight for B lo=8 hi=0', () {
    expect(B.bisectRight(-2, low: 8, high: 0), 8);
    expect(B.bisectRight(-1, low: 8, high: 0), 8);
    expect(B.bisectRight(0, low: 8, high: 0), 8);
    expect(B.bisectRight(1, low: 8, high: 0), 8);
    expect(B.bisectRight(2, low: 8, high: 0), 8);
    expect(B.bisectRight(3, low: 8, high: 0), 8);
    expect(B.bisectRight(4, low: 8, high: 0), 8);
    expect(B.bisectRight(5, low: 8, high: 0), 8);
    expect(B.bisectRight(6, low: 8, high: 0), 8);
    expect(B.bisectRight(7, low: 8, high: 0), 8);
    expect(B.bisectRight(8, low: 8, high: 0), 8);
  });

  test('list.bisectRight for C lo=8 hi=0', () {
    expect(C.bisectRight(-2, low: 8, high: 0), 8);
    expect(C.bisectRight(-1, low: 8, high: 0), 8);
    expect(C.bisectRight(0, low: 8, high: 0), 8);
    expect(C.bisectRight(1, low: 8, high: 0), 8);
    expect(C.bisectRight(2, low: 8, high: 0), 8);
    expect(C.bisectRight(3, low: 8, high: 0), 8);
    expect(C.bisectRight(4, low: 8, high: 0), 8);
    expect(C.bisectRight(5, low: 8, high: 0), 8);
    expect(C.bisectRight(6, low: 8, high: 0), 8);
    expect(C.bisectRight(7, low: 8, high: 0), 8);
    expect(C.bisectRight(8, low: 8, high: 0), 8);
  });

  test('list.bisectRight for D lo=8 hi=0', () {
    expect(D.bisectRight(-2, low: 8, high: 0), 8);
    expect(D.bisectRight(-1, low: 8, high: 0), 8);
    expect(D.bisectRight(0, low: 8, high: 0), 8);
    expect(D.bisectRight(1, low: 8, high: 0), 8);
    expect(D.bisectRight(2, low: 8, high: 0), 8);
    expect(D.bisectRight(3, low: 8, high: 0), 8);
    expect(D.bisectRight(4, low: 8, high: 0), 8);
    expect(D.bisectRight(5, low: 8, high: 0), 8);
    expect(D.bisectRight(6, low: 8, high: 0), 8);
    expect(D.bisectRight(7, low: 8, high: 0), 8);
    expect(D.bisectRight(8, low: 8, high: 0), 8);
  });

  test('list.bisectRight for E lo=8 hi=0', () {
    expect(E.bisectRight(-2, low: 8, high: 0), 8);
    expect(E.bisectRight(-1, low: 8, high: 0), 8);
    expect(E.bisectRight(0, low: 8, high: 0), 8);
    expect(E.bisectRight(1, low: 8, high: 0), 8);
    expect(E.bisectRight(2, low: 8, high: 0), 8);
    expect(E.bisectRight(3, low: 8, high: 0), 8);
    expect(E.bisectRight(4, low: 8, high: 0), 8);
    expect(E.bisectRight(5, low: 8, high: 0), 8);
    expect(E.bisectRight(6, low: 8, high: 0), 8);
    expect(E.bisectRight(7, low: 8, high: 0), 8);
    expect(E.bisectRight(8, low: 8, high: 0), 8);
  });

  test('list.bisectRight for A lo=9 hi=0', () {
    expect(A.bisectRight(-2, low: 9, high: 0), 9);
    expect(A.bisectRight(-1, low: 9, high: 0), 9);
    expect(A.bisectRight(0, low: 9, high: 0), 9);
    expect(A.bisectRight(1, low: 9, high: 0), 9);
    expect(A.bisectRight(2, low: 9, high: 0), 9);
    expect(A.bisectRight(3, low: 9, high: 0), 9);
    expect(A.bisectRight(4, low: 9, high: 0), 9);
    expect(A.bisectRight(5, low: 9, high: 0), 9);
    expect(A.bisectRight(6, low: 9, high: 0), 9);
    expect(A.bisectRight(7, low: 9, high: 0), 9);
    expect(A.bisectRight(8, low: 9, high: 0), 9);
  });

  test('list.bisectRight for B lo=9 hi=0', () {
    expect(B.bisectRight(-2, low: 9, high: 0), 9);
    expect(B.bisectRight(-1, low: 9, high: 0), 9);
    expect(B.bisectRight(0, low: 9, high: 0), 9);
    expect(B.bisectRight(1, low: 9, high: 0), 9);
    expect(B.bisectRight(2, low: 9, high: 0), 9);
    expect(B.bisectRight(3, low: 9, high: 0), 9);
    expect(B.bisectRight(4, low: 9, high: 0), 9);
    expect(B.bisectRight(5, low: 9, high: 0), 9);
    expect(B.bisectRight(6, low: 9, high: 0), 9);
    expect(B.bisectRight(7, low: 9, high: 0), 9);
    expect(B.bisectRight(8, low: 9, high: 0), 9);
  });

  test('list.bisectRight for C lo=9 hi=0', () {
    expect(C.bisectRight(-2, low: 9, high: 0), 9);
    expect(C.bisectRight(-1, low: 9, high: 0), 9);
    expect(C.bisectRight(0, low: 9, high: 0), 9);
    expect(C.bisectRight(1, low: 9, high: 0), 9);
    expect(C.bisectRight(2, low: 9, high: 0), 9);
    expect(C.bisectRight(3, low: 9, high: 0), 9);
    expect(C.bisectRight(4, low: 9, high: 0), 9);
    expect(C.bisectRight(5, low: 9, high: 0), 9);
    expect(C.bisectRight(6, low: 9, high: 0), 9);
    expect(C.bisectRight(7, low: 9, high: 0), 9);
    expect(C.bisectRight(8, low: 9, high: 0), 9);
  });

  test('list.bisectRight for D lo=9 hi=0', () {
    expect(D.bisectRight(-2, low: 9, high: 0), 9);
    expect(D.bisectRight(-1, low: 9, high: 0), 9);
    expect(D.bisectRight(0, low: 9, high: 0), 9);
    expect(D.bisectRight(1, low: 9, high: 0), 9);
    expect(D.bisectRight(2, low: 9, high: 0), 9);
    expect(D.bisectRight(3, low: 9, high: 0), 9);
    expect(D.bisectRight(4, low: 9, high: 0), 9);
    expect(D.bisectRight(5, low: 9, high: 0), 9);
    expect(D.bisectRight(6, low: 9, high: 0), 9);
    expect(D.bisectRight(7, low: 9, high: 0), 9);
    expect(D.bisectRight(8, low: 9, high: 0), 9);
  });

  test('list.bisectRight for E lo=9 hi=0', () {
    expect(E.bisectRight(-2, low: 9, high: 0), 9);
    expect(E.bisectRight(-1, low: 9, high: 0), 9);
    expect(E.bisectRight(0, low: 9, high: 0), 9);
    expect(E.bisectRight(1, low: 9, high: 0), 9);
    expect(E.bisectRight(2, low: 9, high: 0), 9);
    expect(E.bisectRight(3, low: 9, high: 0), 9);
    expect(E.bisectRight(4, low: 9, high: 0), 9);
    expect(E.bisectRight(5, low: 9, high: 0), 9);
    expect(E.bisectRight(6, low: 9, high: 0), 9);
    expect(E.bisectRight(7, low: 9, high: 0), 9);
    expect(E.bisectRight(8, low: 9, high: 0), 9);
  });

  test('list.bisectRight for A lo=None hi=1', () {
    expect(() => A.bisectRight(-2, high: 1), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 1), throwsRangeError);
    expect(() => A.bisectRight(0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(1, high: 1), throwsRangeError);
    expect(() => A.bisectRight(2, high: 1), throwsRangeError);
    expect(() => A.bisectRight(3, high: 1), throwsRangeError);
    expect(() => A.bisectRight(4, high: 1), throwsRangeError);
    expect(() => A.bisectRight(5, high: 1), throwsRangeError);
    expect(() => A.bisectRight(6, high: 1), throwsRangeError);
    expect(() => A.bisectRight(7, high: 1), throwsRangeError);
    expect(() => A.bisectRight(8, high: 1), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=1', () {
    expect(B.bisectRight(-2, high: 1), 0);
    expect(B.bisectRight(-1, high: 1), 0);
    expect(B.bisectRight(0, high: 1), 0);
    expect(B.bisectRight(1, high: 1), 0);
    expect(B.bisectRight(2, high: 1), 0);
    expect(B.bisectRight(3, high: 1), 0);
    expect(B.bisectRight(4, high: 1), 1);
    expect(B.bisectRight(5, high: 1), 1);
    expect(B.bisectRight(6, high: 1), 1);
    expect(B.bisectRight(7, high: 1), 1);
    expect(B.bisectRight(8, high: 1), 1);
  });

  test('list.bisectRight for C lo=None hi=1', () {
    expect(C.bisectRight(-2, high: 1), 0);
    expect(C.bisectRight(-1, high: 1), 0);
    expect(C.bisectRight(0, high: 1), 0);
    expect(C.bisectRight(1, high: 1), 0);
    expect(C.bisectRight(2, high: 1), 0);
    expect(C.bisectRight(3, high: 1), 0);
    expect(C.bisectRight(4, high: 1), 1);
    expect(C.bisectRight(5, high: 1), 1);
    expect(C.bisectRight(6, high: 1), 1);
    expect(C.bisectRight(7, high: 1), 1);
    expect(C.bisectRight(8, high: 1), 1);
  });

  test('list.bisectRight for D lo=None hi=1', () {
    expect(D.bisectRight(-2, high: 1), 0);
    expect(D.bisectRight(-1, high: 1), 0);
    expect(D.bisectRight(0, high: 1), 0);
    expect(D.bisectRight(1, high: 1), 0);
    expect(D.bisectRight(2, high: 1), 0);
    expect(D.bisectRight(3, high: 1), 1);
    expect(D.bisectRight(4, high: 1), 1);
    expect(D.bisectRight(5, high: 1), 1);
    expect(D.bisectRight(6, high: 1), 1);
    expect(D.bisectRight(7, high: 1), 1);
    expect(D.bisectRight(8, high: 1), 1);
  });

  test('list.bisectRight for E lo=None hi=1', () {
    expect(E.bisectRight(-2, high: 1), 0);
    expect(E.bisectRight(-1, high: 1), 0);
    expect(E.bisectRight(0, high: 1), 1);
    expect(E.bisectRight(1, high: 1), 1);
    expect(E.bisectRight(2, high: 1), 1);
    expect(E.bisectRight(3, high: 1), 1);
    expect(E.bisectRight(4, high: 1), 1);
    expect(E.bisectRight(5, high: 1), 1);
    expect(E.bisectRight(6, high: 1), 1);
    expect(E.bisectRight(7, high: 1), 1);
    expect(E.bisectRight(8, high: 1), 1);
  });

  test('list.bisectRight for A lo=0 hi=1', () {
    expect(() => A.bisectRight(-2, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 1), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 1), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=1', () {
    expect(B.bisectRight(-2, low: 0, high: 1), 0);
    expect(B.bisectRight(-1, low: 0, high: 1), 0);
    expect(B.bisectRight(0, low: 0, high: 1), 0);
    expect(B.bisectRight(1, low: 0, high: 1), 0);
    expect(B.bisectRight(2, low: 0, high: 1), 0);
    expect(B.bisectRight(3, low: 0, high: 1), 0);
    expect(B.bisectRight(4, low: 0, high: 1), 1);
    expect(B.bisectRight(5, low: 0, high: 1), 1);
    expect(B.bisectRight(6, low: 0, high: 1), 1);
    expect(B.bisectRight(7, low: 0, high: 1), 1);
    expect(B.bisectRight(8, low: 0, high: 1), 1);
  });

  test('list.bisectRight for C lo=0 hi=1', () {
    expect(C.bisectRight(-2, low: 0, high: 1), 0);
    expect(C.bisectRight(-1, low: 0, high: 1), 0);
    expect(C.bisectRight(0, low: 0, high: 1), 0);
    expect(C.bisectRight(1, low: 0, high: 1), 0);
    expect(C.bisectRight(2, low: 0, high: 1), 0);
    expect(C.bisectRight(3, low: 0, high: 1), 0);
    expect(C.bisectRight(4, low: 0, high: 1), 1);
    expect(C.bisectRight(5, low: 0, high: 1), 1);
    expect(C.bisectRight(6, low: 0, high: 1), 1);
    expect(C.bisectRight(7, low: 0, high: 1), 1);
    expect(C.bisectRight(8, low: 0, high: 1), 1);
  });

  test('list.bisectRight for D lo=0 hi=1', () {
    expect(D.bisectRight(-2, low: 0, high: 1), 0);
    expect(D.bisectRight(-1, low: 0, high: 1), 0);
    expect(D.bisectRight(0, low: 0, high: 1), 0);
    expect(D.bisectRight(1, low: 0, high: 1), 0);
    expect(D.bisectRight(2, low: 0, high: 1), 0);
    expect(D.bisectRight(3, low: 0, high: 1), 1);
    expect(D.bisectRight(4, low: 0, high: 1), 1);
    expect(D.bisectRight(5, low: 0, high: 1), 1);
    expect(D.bisectRight(6, low: 0, high: 1), 1);
    expect(D.bisectRight(7, low: 0, high: 1), 1);
    expect(D.bisectRight(8, low: 0, high: 1), 1);
  });

  test('list.bisectRight for E lo=0 hi=1', () {
    expect(E.bisectRight(-2, low: 0, high: 1), 0);
    expect(E.bisectRight(-1, low: 0, high: 1), 0);
    expect(E.bisectRight(0, low: 0, high: 1), 1);
    expect(E.bisectRight(1, low: 0, high: 1), 1);
    expect(E.bisectRight(2, low: 0, high: 1), 1);
    expect(E.bisectRight(3, low: 0, high: 1), 1);
    expect(E.bisectRight(4, low: 0, high: 1), 1);
    expect(E.bisectRight(5, low: 0, high: 1), 1);
    expect(E.bisectRight(6, low: 0, high: 1), 1);
    expect(E.bisectRight(7, low: 0, high: 1), 1);
    expect(E.bisectRight(8, low: 0, high: 1), 1);
  });

  test('list.bisectRight for A lo=1 hi=1', () {
    expect(A.bisectRight(-2, low: 1, high: 1), 1);
    expect(A.bisectRight(-1, low: 1, high: 1), 1);
    expect(A.bisectRight(0, low: 1, high: 1), 1);
    expect(A.bisectRight(1, low: 1, high: 1), 1);
    expect(A.bisectRight(2, low: 1, high: 1), 1);
    expect(A.bisectRight(3, low: 1, high: 1), 1);
    expect(A.bisectRight(4, low: 1, high: 1), 1);
    expect(A.bisectRight(5, low: 1, high: 1), 1);
    expect(A.bisectRight(6, low: 1, high: 1), 1);
    expect(A.bisectRight(7, low: 1, high: 1), 1);
    expect(A.bisectRight(8, low: 1, high: 1), 1);
  });

  test('list.bisectRight for B lo=1 hi=1', () {
    expect(B.bisectRight(-2, low: 1, high: 1), 1);
    expect(B.bisectRight(-1, low: 1, high: 1), 1);
    expect(B.bisectRight(0, low: 1, high: 1), 1);
    expect(B.bisectRight(1, low: 1, high: 1), 1);
    expect(B.bisectRight(2, low: 1, high: 1), 1);
    expect(B.bisectRight(3, low: 1, high: 1), 1);
    expect(B.bisectRight(4, low: 1, high: 1), 1);
    expect(B.bisectRight(5, low: 1, high: 1), 1);
    expect(B.bisectRight(6, low: 1, high: 1), 1);
    expect(B.bisectRight(7, low: 1, high: 1), 1);
    expect(B.bisectRight(8, low: 1, high: 1), 1);
  });

  test('list.bisectRight for C lo=1 hi=1', () {
    expect(C.bisectRight(-2, low: 1, high: 1), 1);
    expect(C.bisectRight(-1, low: 1, high: 1), 1);
    expect(C.bisectRight(0, low: 1, high: 1), 1);
    expect(C.bisectRight(1, low: 1, high: 1), 1);
    expect(C.bisectRight(2, low: 1, high: 1), 1);
    expect(C.bisectRight(3, low: 1, high: 1), 1);
    expect(C.bisectRight(4, low: 1, high: 1), 1);
    expect(C.bisectRight(5, low: 1, high: 1), 1);
    expect(C.bisectRight(6, low: 1, high: 1), 1);
    expect(C.bisectRight(7, low: 1, high: 1), 1);
    expect(C.bisectRight(8, low: 1, high: 1), 1);
  });

  test('list.bisectRight for D lo=1 hi=1', () {
    expect(D.bisectRight(-2, low: 1, high: 1), 1);
    expect(D.bisectRight(-1, low: 1, high: 1), 1);
    expect(D.bisectRight(0, low: 1, high: 1), 1);
    expect(D.bisectRight(1, low: 1, high: 1), 1);
    expect(D.bisectRight(2, low: 1, high: 1), 1);
    expect(D.bisectRight(3, low: 1, high: 1), 1);
    expect(D.bisectRight(4, low: 1, high: 1), 1);
    expect(D.bisectRight(5, low: 1, high: 1), 1);
    expect(D.bisectRight(6, low: 1, high: 1), 1);
    expect(D.bisectRight(7, low: 1, high: 1), 1);
    expect(D.bisectRight(8, low: 1, high: 1), 1);
  });

  test('list.bisectRight for E lo=1 hi=1', () {
    expect(E.bisectRight(-2, low: 1, high: 1), 1);
    expect(E.bisectRight(-1, low: 1, high: 1), 1);
    expect(E.bisectRight(0, low: 1, high: 1), 1);
    expect(E.bisectRight(1, low: 1, high: 1), 1);
    expect(E.bisectRight(2, low: 1, high: 1), 1);
    expect(E.bisectRight(3, low: 1, high: 1), 1);
    expect(E.bisectRight(4, low: 1, high: 1), 1);
    expect(E.bisectRight(5, low: 1, high: 1), 1);
    expect(E.bisectRight(6, low: 1, high: 1), 1);
    expect(E.bisectRight(7, low: 1, high: 1), 1);
    expect(E.bisectRight(8, low: 1, high: 1), 1);
  });

  test('list.bisectRight for A lo=2 hi=1', () {
    expect(A.bisectRight(-2, low: 2, high: 1), 2);
    expect(A.bisectRight(-1, low: 2, high: 1), 2);
    expect(A.bisectRight(0, low: 2, high: 1), 2);
    expect(A.bisectRight(1, low: 2, high: 1), 2);
    expect(A.bisectRight(2, low: 2, high: 1), 2);
    expect(A.bisectRight(3, low: 2, high: 1), 2);
    expect(A.bisectRight(4, low: 2, high: 1), 2);
    expect(A.bisectRight(5, low: 2, high: 1), 2);
    expect(A.bisectRight(6, low: 2, high: 1), 2);
    expect(A.bisectRight(7, low: 2, high: 1), 2);
    expect(A.bisectRight(8, low: 2, high: 1), 2);
  });

  test('list.bisectRight for B lo=2 hi=1', () {
    expect(B.bisectRight(-2, low: 2, high: 1), 2);
    expect(B.bisectRight(-1, low: 2, high: 1), 2);
    expect(B.bisectRight(0, low: 2, high: 1), 2);
    expect(B.bisectRight(1, low: 2, high: 1), 2);
    expect(B.bisectRight(2, low: 2, high: 1), 2);
    expect(B.bisectRight(3, low: 2, high: 1), 2);
    expect(B.bisectRight(4, low: 2, high: 1), 2);
    expect(B.bisectRight(5, low: 2, high: 1), 2);
    expect(B.bisectRight(6, low: 2, high: 1), 2);
    expect(B.bisectRight(7, low: 2, high: 1), 2);
    expect(B.bisectRight(8, low: 2, high: 1), 2);
  });

  test('list.bisectRight for C lo=2 hi=1', () {
    expect(C.bisectRight(-2, low: 2, high: 1), 2);
    expect(C.bisectRight(-1, low: 2, high: 1), 2);
    expect(C.bisectRight(0, low: 2, high: 1), 2);
    expect(C.bisectRight(1, low: 2, high: 1), 2);
    expect(C.bisectRight(2, low: 2, high: 1), 2);
    expect(C.bisectRight(3, low: 2, high: 1), 2);
    expect(C.bisectRight(4, low: 2, high: 1), 2);
    expect(C.bisectRight(5, low: 2, high: 1), 2);
    expect(C.bisectRight(6, low: 2, high: 1), 2);
    expect(C.bisectRight(7, low: 2, high: 1), 2);
    expect(C.bisectRight(8, low: 2, high: 1), 2);
  });

  test('list.bisectRight for D lo=2 hi=1', () {
    expect(D.bisectRight(-2, low: 2, high: 1), 2);
    expect(D.bisectRight(-1, low: 2, high: 1), 2);
    expect(D.bisectRight(0, low: 2, high: 1), 2);
    expect(D.bisectRight(1, low: 2, high: 1), 2);
    expect(D.bisectRight(2, low: 2, high: 1), 2);
    expect(D.bisectRight(3, low: 2, high: 1), 2);
    expect(D.bisectRight(4, low: 2, high: 1), 2);
    expect(D.bisectRight(5, low: 2, high: 1), 2);
    expect(D.bisectRight(6, low: 2, high: 1), 2);
    expect(D.bisectRight(7, low: 2, high: 1), 2);
    expect(D.bisectRight(8, low: 2, high: 1), 2);
  });

  test('list.bisectRight for E lo=2 hi=1', () {
    expect(E.bisectRight(-2, low: 2, high: 1), 2);
    expect(E.bisectRight(-1, low: 2, high: 1), 2);
    expect(E.bisectRight(0, low: 2, high: 1), 2);
    expect(E.bisectRight(1, low: 2, high: 1), 2);
    expect(E.bisectRight(2, low: 2, high: 1), 2);
    expect(E.bisectRight(3, low: 2, high: 1), 2);
    expect(E.bisectRight(4, low: 2, high: 1), 2);
    expect(E.bisectRight(5, low: 2, high: 1), 2);
    expect(E.bisectRight(6, low: 2, high: 1), 2);
    expect(E.bisectRight(7, low: 2, high: 1), 2);
    expect(E.bisectRight(8, low: 2, high: 1), 2);
  });

  test('list.bisectRight for A lo=3 hi=1', () {
    expect(A.bisectRight(-2, low: 3, high: 1), 3);
    expect(A.bisectRight(-1, low: 3, high: 1), 3);
    expect(A.bisectRight(0, low: 3, high: 1), 3);
    expect(A.bisectRight(1, low: 3, high: 1), 3);
    expect(A.bisectRight(2, low: 3, high: 1), 3);
    expect(A.bisectRight(3, low: 3, high: 1), 3);
    expect(A.bisectRight(4, low: 3, high: 1), 3);
    expect(A.bisectRight(5, low: 3, high: 1), 3);
    expect(A.bisectRight(6, low: 3, high: 1), 3);
    expect(A.bisectRight(7, low: 3, high: 1), 3);
    expect(A.bisectRight(8, low: 3, high: 1), 3);
  });

  test('list.bisectRight for B lo=3 hi=1', () {
    expect(B.bisectRight(-2, low: 3, high: 1), 3);
    expect(B.bisectRight(-1, low: 3, high: 1), 3);
    expect(B.bisectRight(0, low: 3, high: 1), 3);
    expect(B.bisectRight(1, low: 3, high: 1), 3);
    expect(B.bisectRight(2, low: 3, high: 1), 3);
    expect(B.bisectRight(3, low: 3, high: 1), 3);
    expect(B.bisectRight(4, low: 3, high: 1), 3);
    expect(B.bisectRight(5, low: 3, high: 1), 3);
    expect(B.bisectRight(6, low: 3, high: 1), 3);
    expect(B.bisectRight(7, low: 3, high: 1), 3);
    expect(B.bisectRight(8, low: 3, high: 1), 3);
  });

  test('list.bisectRight for C lo=3 hi=1', () {
    expect(C.bisectRight(-2, low: 3, high: 1), 3);
    expect(C.bisectRight(-1, low: 3, high: 1), 3);
    expect(C.bisectRight(0, low: 3, high: 1), 3);
    expect(C.bisectRight(1, low: 3, high: 1), 3);
    expect(C.bisectRight(2, low: 3, high: 1), 3);
    expect(C.bisectRight(3, low: 3, high: 1), 3);
    expect(C.bisectRight(4, low: 3, high: 1), 3);
    expect(C.bisectRight(5, low: 3, high: 1), 3);
    expect(C.bisectRight(6, low: 3, high: 1), 3);
    expect(C.bisectRight(7, low: 3, high: 1), 3);
    expect(C.bisectRight(8, low: 3, high: 1), 3);
  });

  test('list.bisectRight for D lo=3 hi=1', () {
    expect(D.bisectRight(-2, low: 3, high: 1), 3);
    expect(D.bisectRight(-1, low: 3, high: 1), 3);
    expect(D.bisectRight(0, low: 3, high: 1), 3);
    expect(D.bisectRight(1, low: 3, high: 1), 3);
    expect(D.bisectRight(2, low: 3, high: 1), 3);
    expect(D.bisectRight(3, low: 3, high: 1), 3);
    expect(D.bisectRight(4, low: 3, high: 1), 3);
    expect(D.bisectRight(5, low: 3, high: 1), 3);
    expect(D.bisectRight(6, low: 3, high: 1), 3);
    expect(D.bisectRight(7, low: 3, high: 1), 3);
    expect(D.bisectRight(8, low: 3, high: 1), 3);
  });

  test('list.bisectRight for E lo=3 hi=1', () {
    expect(E.bisectRight(-2, low: 3, high: 1), 3);
    expect(E.bisectRight(-1, low: 3, high: 1), 3);
    expect(E.bisectRight(0, low: 3, high: 1), 3);
    expect(E.bisectRight(1, low: 3, high: 1), 3);
    expect(E.bisectRight(2, low: 3, high: 1), 3);
    expect(E.bisectRight(3, low: 3, high: 1), 3);
    expect(E.bisectRight(4, low: 3, high: 1), 3);
    expect(E.bisectRight(5, low: 3, high: 1), 3);
    expect(E.bisectRight(6, low: 3, high: 1), 3);
    expect(E.bisectRight(7, low: 3, high: 1), 3);
    expect(E.bisectRight(8, low: 3, high: 1), 3);
  });

  test('list.bisectRight for A lo=4 hi=1', () {
    expect(A.bisectRight(-2, low: 4, high: 1), 4);
    expect(A.bisectRight(-1, low: 4, high: 1), 4);
    expect(A.bisectRight(0, low: 4, high: 1), 4);
    expect(A.bisectRight(1, low: 4, high: 1), 4);
    expect(A.bisectRight(2, low: 4, high: 1), 4);
    expect(A.bisectRight(3, low: 4, high: 1), 4);
    expect(A.bisectRight(4, low: 4, high: 1), 4);
    expect(A.bisectRight(5, low: 4, high: 1), 4);
    expect(A.bisectRight(6, low: 4, high: 1), 4);
    expect(A.bisectRight(7, low: 4, high: 1), 4);
    expect(A.bisectRight(8, low: 4, high: 1), 4);
  });

  test('list.bisectRight for B lo=4 hi=1', () {
    expect(B.bisectRight(-2, low: 4, high: 1), 4);
    expect(B.bisectRight(-1, low: 4, high: 1), 4);
    expect(B.bisectRight(0, low: 4, high: 1), 4);
    expect(B.bisectRight(1, low: 4, high: 1), 4);
    expect(B.bisectRight(2, low: 4, high: 1), 4);
    expect(B.bisectRight(3, low: 4, high: 1), 4);
    expect(B.bisectRight(4, low: 4, high: 1), 4);
    expect(B.bisectRight(5, low: 4, high: 1), 4);
    expect(B.bisectRight(6, low: 4, high: 1), 4);
    expect(B.bisectRight(7, low: 4, high: 1), 4);
    expect(B.bisectRight(8, low: 4, high: 1), 4);
  });

  test('list.bisectRight for C lo=4 hi=1', () {
    expect(C.bisectRight(-2, low: 4, high: 1), 4);
    expect(C.bisectRight(-1, low: 4, high: 1), 4);
    expect(C.bisectRight(0, low: 4, high: 1), 4);
    expect(C.bisectRight(1, low: 4, high: 1), 4);
    expect(C.bisectRight(2, low: 4, high: 1), 4);
    expect(C.bisectRight(3, low: 4, high: 1), 4);
    expect(C.bisectRight(4, low: 4, high: 1), 4);
    expect(C.bisectRight(5, low: 4, high: 1), 4);
    expect(C.bisectRight(6, low: 4, high: 1), 4);
    expect(C.bisectRight(7, low: 4, high: 1), 4);
    expect(C.bisectRight(8, low: 4, high: 1), 4);
  });

  test('list.bisectRight for D lo=4 hi=1', () {
    expect(D.bisectRight(-2, low: 4, high: 1), 4);
    expect(D.bisectRight(-1, low: 4, high: 1), 4);
    expect(D.bisectRight(0, low: 4, high: 1), 4);
    expect(D.bisectRight(1, low: 4, high: 1), 4);
    expect(D.bisectRight(2, low: 4, high: 1), 4);
    expect(D.bisectRight(3, low: 4, high: 1), 4);
    expect(D.bisectRight(4, low: 4, high: 1), 4);
    expect(D.bisectRight(5, low: 4, high: 1), 4);
    expect(D.bisectRight(6, low: 4, high: 1), 4);
    expect(D.bisectRight(7, low: 4, high: 1), 4);
    expect(D.bisectRight(8, low: 4, high: 1), 4);
  });

  test('list.bisectRight for E lo=4 hi=1', () {
    expect(E.bisectRight(-2, low: 4, high: 1), 4);
    expect(E.bisectRight(-1, low: 4, high: 1), 4);
    expect(E.bisectRight(0, low: 4, high: 1), 4);
    expect(E.bisectRight(1, low: 4, high: 1), 4);
    expect(E.bisectRight(2, low: 4, high: 1), 4);
    expect(E.bisectRight(3, low: 4, high: 1), 4);
    expect(E.bisectRight(4, low: 4, high: 1), 4);
    expect(E.bisectRight(5, low: 4, high: 1), 4);
    expect(E.bisectRight(6, low: 4, high: 1), 4);
    expect(E.bisectRight(7, low: 4, high: 1), 4);
    expect(E.bisectRight(8, low: 4, high: 1), 4);
  });

  test('list.bisectRight for A lo=5 hi=1', () {
    expect(A.bisectRight(-2, low: 5, high: 1), 5);
    expect(A.bisectRight(-1, low: 5, high: 1), 5);
    expect(A.bisectRight(0, low: 5, high: 1), 5);
    expect(A.bisectRight(1, low: 5, high: 1), 5);
    expect(A.bisectRight(2, low: 5, high: 1), 5);
    expect(A.bisectRight(3, low: 5, high: 1), 5);
    expect(A.bisectRight(4, low: 5, high: 1), 5);
    expect(A.bisectRight(5, low: 5, high: 1), 5);
    expect(A.bisectRight(6, low: 5, high: 1), 5);
    expect(A.bisectRight(7, low: 5, high: 1), 5);
    expect(A.bisectRight(8, low: 5, high: 1), 5);
  });

  test('list.bisectRight for B lo=5 hi=1', () {
    expect(B.bisectRight(-2, low: 5, high: 1), 5);
    expect(B.bisectRight(-1, low: 5, high: 1), 5);
    expect(B.bisectRight(0, low: 5, high: 1), 5);
    expect(B.bisectRight(1, low: 5, high: 1), 5);
    expect(B.bisectRight(2, low: 5, high: 1), 5);
    expect(B.bisectRight(3, low: 5, high: 1), 5);
    expect(B.bisectRight(4, low: 5, high: 1), 5);
    expect(B.bisectRight(5, low: 5, high: 1), 5);
    expect(B.bisectRight(6, low: 5, high: 1), 5);
    expect(B.bisectRight(7, low: 5, high: 1), 5);
    expect(B.bisectRight(8, low: 5, high: 1), 5);
  });

  test('list.bisectRight for C lo=5 hi=1', () {
    expect(C.bisectRight(-2, low: 5, high: 1), 5);
    expect(C.bisectRight(-1, low: 5, high: 1), 5);
    expect(C.bisectRight(0, low: 5, high: 1), 5);
    expect(C.bisectRight(1, low: 5, high: 1), 5);
    expect(C.bisectRight(2, low: 5, high: 1), 5);
    expect(C.bisectRight(3, low: 5, high: 1), 5);
    expect(C.bisectRight(4, low: 5, high: 1), 5);
    expect(C.bisectRight(5, low: 5, high: 1), 5);
    expect(C.bisectRight(6, low: 5, high: 1), 5);
    expect(C.bisectRight(7, low: 5, high: 1), 5);
    expect(C.bisectRight(8, low: 5, high: 1), 5);
  });

  test('list.bisectRight for D lo=5 hi=1', () {
    expect(D.bisectRight(-2, low: 5, high: 1), 5);
    expect(D.bisectRight(-1, low: 5, high: 1), 5);
    expect(D.bisectRight(0, low: 5, high: 1), 5);
    expect(D.bisectRight(1, low: 5, high: 1), 5);
    expect(D.bisectRight(2, low: 5, high: 1), 5);
    expect(D.bisectRight(3, low: 5, high: 1), 5);
    expect(D.bisectRight(4, low: 5, high: 1), 5);
    expect(D.bisectRight(5, low: 5, high: 1), 5);
    expect(D.bisectRight(6, low: 5, high: 1), 5);
    expect(D.bisectRight(7, low: 5, high: 1), 5);
    expect(D.bisectRight(8, low: 5, high: 1), 5);
  });

  test('list.bisectRight for E lo=5 hi=1', () {
    expect(E.bisectRight(-2, low: 5, high: 1), 5);
    expect(E.bisectRight(-1, low: 5, high: 1), 5);
    expect(E.bisectRight(0, low: 5, high: 1), 5);
    expect(E.bisectRight(1, low: 5, high: 1), 5);
    expect(E.bisectRight(2, low: 5, high: 1), 5);
    expect(E.bisectRight(3, low: 5, high: 1), 5);
    expect(E.bisectRight(4, low: 5, high: 1), 5);
    expect(E.bisectRight(5, low: 5, high: 1), 5);
    expect(E.bisectRight(6, low: 5, high: 1), 5);
    expect(E.bisectRight(7, low: 5, high: 1), 5);
    expect(E.bisectRight(8, low: 5, high: 1), 5);
  });

  test('list.bisectRight for A lo=6 hi=1', () {
    expect(A.bisectRight(-2, low: 6, high: 1), 6);
    expect(A.bisectRight(-1, low: 6, high: 1), 6);
    expect(A.bisectRight(0, low: 6, high: 1), 6);
    expect(A.bisectRight(1, low: 6, high: 1), 6);
    expect(A.bisectRight(2, low: 6, high: 1), 6);
    expect(A.bisectRight(3, low: 6, high: 1), 6);
    expect(A.bisectRight(4, low: 6, high: 1), 6);
    expect(A.bisectRight(5, low: 6, high: 1), 6);
    expect(A.bisectRight(6, low: 6, high: 1), 6);
    expect(A.bisectRight(7, low: 6, high: 1), 6);
    expect(A.bisectRight(8, low: 6, high: 1), 6);
  });

  test('list.bisectRight for B lo=6 hi=1', () {
    expect(B.bisectRight(-2, low: 6, high: 1), 6);
    expect(B.bisectRight(-1, low: 6, high: 1), 6);
    expect(B.bisectRight(0, low: 6, high: 1), 6);
    expect(B.bisectRight(1, low: 6, high: 1), 6);
    expect(B.bisectRight(2, low: 6, high: 1), 6);
    expect(B.bisectRight(3, low: 6, high: 1), 6);
    expect(B.bisectRight(4, low: 6, high: 1), 6);
    expect(B.bisectRight(5, low: 6, high: 1), 6);
    expect(B.bisectRight(6, low: 6, high: 1), 6);
    expect(B.bisectRight(7, low: 6, high: 1), 6);
    expect(B.bisectRight(8, low: 6, high: 1), 6);
  });

  test('list.bisectRight for C lo=6 hi=1', () {
    expect(C.bisectRight(-2, low: 6, high: 1), 6);
    expect(C.bisectRight(-1, low: 6, high: 1), 6);
    expect(C.bisectRight(0, low: 6, high: 1), 6);
    expect(C.bisectRight(1, low: 6, high: 1), 6);
    expect(C.bisectRight(2, low: 6, high: 1), 6);
    expect(C.bisectRight(3, low: 6, high: 1), 6);
    expect(C.bisectRight(4, low: 6, high: 1), 6);
    expect(C.bisectRight(5, low: 6, high: 1), 6);
    expect(C.bisectRight(6, low: 6, high: 1), 6);
    expect(C.bisectRight(7, low: 6, high: 1), 6);
    expect(C.bisectRight(8, low: 6, high: 1), 6);
  });

  test('list.bisectRight for D lo=6 hi=1', () {
    expect(D.bisectRight(-2, low: 6, high: 1), 6);
    expect(D.bisectRight(-1, low: 6, high: 1), 6);
    expect(D.bisectRight(0, low: 6, high: 1), 6);
    expect(D.bisectRight(1, low: 6, high: 1), 6);
    expect(D.bisectRight(2, low: 6, high: 1), 6);
    expect(D.bisectRight(3, low: 6, high: 1), 6);
    expect(D.bisectRight(4, low: 6, high: 1), 6);
    expect(D.bisectRight(5, low: 6, high: 1), 6);
    expect(D.bisectRight(6, low: 6, high: 1), 6);
    expect(D.bisectRight(7, low: 6, high: 1), 6);
    expect(D.bisectRight(8, low: 6, high: 1), 6);
  });

  test('list.bisectRight for E lo=6 hi=1', () {
    expect(E.bisectRight(-2, low: 6, high: 1), 6);
    expect(E.bisectRight(-1, low: 6, high: 1), 6);
    expect(E.bisectRight(0, low: 6, high: 1), 6);
    expect(E.bisectRight(1, low: 6, high: 1), 6);
    expect(E.bisectRight(2, low: 6, high: 1), 6);
    expect(E.bisectRight(3, low: 6, high: 1), 6);
    expect(E.bisectRight(4, low: 6, high: 1), 6);
    expect(E.bisectRight(5, low: 6, high: 1), 6);
    expect(E.bisectRight(6, low: 6, high: 1), 6);
    expect(E.bisectRight(7, low: 6, high: 1), 6);
    expect(E.bisectRight(8, low: 6, high: 1), 6);
  });

  test('list.bisectRight for A lo=7 hi=1', () {
    expect(A.bisectRight(-2, low: 7, high: 1), 7);
    expect(A.bisectRight(-1, low: 7, high: 1), 7);
    expect(A.bisectRight(0, low: 7, high: 1), 7);
    expect(A.bisectRight(1, low: 7, high: 1), 7);
    expect(A.bisectRight(2, low: 7, high: 1), 7);
    expect(A.bisectRight(3, low: 7, high: 1), 7);
    expect(A.bisectRight(4, low: 7, high: 1), 7);
    expect(A.bisectRight(5, low: 7, high: 1), 7);
    expect(A.bisectRight(6, low: 7, high: 1), 7);
    expect(A.bisectRight(7, low: 7, high: 1), 7);
    expect(A.bisectRight(8, low: 7, high: 1), 7);
  });

  test('list.bisectRight for B lo=7 hi=1', () {
    expect(B.bisectRight(-2, low: 7, high: 1), 7);
    expect(B.bisectRight(-1, low: 7, high: 1), 7);
    expect(B.bisectRight(0, low: 7, high: 1), 7);
    expect(B.bisectRight(1, low: 7, high: 1), 7);
    expect(B.bisectRight(2, low: 7, high: 1), 7);
    expect(B.bisectRight(3, low: 7, high: 1), 7);
    expect(B.bisectRight(4, low: 7, high: 1), 7);
    expect(B.bisectRight(5, low: 7, high: 1), 7);
    expect(B.bisectRight(6, low: 7, high: 1), 7);
    expect(B.bisectRight(7, low: 7, high: 1), 7);
    expect(B.bisectRight(8, low: 7, high: 1), 7);
  });

  test('list.bisectRight for C lo=7 hi=1', () {
    expect(C.bisectRight(-2, low: 7, high: 1), 7);
    expect(C.bisectRight(-1, low: 7, high: 1), 7);
    expect(C.bisectRight(0, low: 7, high: 1), 7);
    expect(C.bisectRight(1, low: 7, high: 1), 7);
    expect(C.bisectRight(2, low: 7, high: 1), 7);
    expect(C.bisectRight(3, low: 7, high: 1), 7);
    expect(C.bisectRight(4, low: 7, high: 1), 7);
    expect(C.bisectRight(5, low: 7, high: 1), 7);
    expect(C.bisectRight(6, low: 7, high: 1), 7);
    expect(C.bisectRight(7, low: 7, high: 1), 7);
    expect(C.bisectRight(8, low: 7, high: 1), 7);
  });

  test('list.bisectRight for D lo=7 hi=1', () {
    expect(D.bisectRight(-2, low: 7, high: 1), 7);
    expect(D.bisectRight(-1, low: 7, high: 1), 7);
    expect(D.bisectRight(0, low: 7, high: 1), 7);
    expect(D.bisectRight(1, low: 7, high: 1), 7);
    expect(D.bisectRight(2, low: 7, high: 1), 7);
    expect(D.bisectRight(3, low: 7, high: 1), 7);
    expect(D.bisectRight(4, low: 7, high: 1), 7);
    expect(D.bisectRight(5, low: 7, high: 1), 7);
    expect(D.bisectRight(6, low: 7, high: 1), 7);
    expect(D.bisectRight(7, low: 7, high: 1), 7);
    expect(D.bisectRight(8, low: 7, high: 1), 7);
  });

  test('list.bisectRight for E lo=7 hi=1', () {
    expect(E.bisectRight(-2, low: 7, high: 1), 7);
    expect(E.bisectRight(-1, low: 7, high: 1), 7);
    expect(E.bisectRight(0, low: 7, high: 1), 7);
    expect(E.bisectRight(1, low: 7, high: 1), 7);
    expect(E.bisectRight(2, low: 7, high: 1), 7);
    expect(E.bisectRight(3, low: 7, high: 1), 7);
    expect(E.bisectRight(4, low: 7, high: 1), 7);
    expect(E.bisectRight(5, low: 7, high: 1), 7);
    expect(E.bisectRight(6, low: 7, high: 1), 7);
    expect(E.bisectRight(7, low: 7, high: 1), 7);
    expect(E.bisectRight(8, low: 7, high: 1), 7);
  });

  test('list.bisectRight for A lo=8 hi=1', () {
    expect(A.bisectRight(-2, low: 8, high: 1), 8);
    expect(A.bisectRight(-1, low: 8, high: 1), 8);
    expect(A.bisectRight(0, low: 8, high: 1), 8);
    expect(A.bisectRight(1, low: 8, high: 1), 8);
    expect(A.bisectRight(2, low: 8, high: 1), 8);
    expect(A.bisectRight(3, low: 8, high: 1), 8);
    expect(A.bisectRight(4, low: 8, high: 1), 8);
    expect(A.bisectRight(5, low: 8, high: 1), 8);
    expect(A.bisectRight(6, low: 8, high: 1), 8);
    expect(A.bisectRight(7, low: 8, high: 1), 8);
    expect(A.bisectRight(8, low: 8, high: 1), 8);
  });

  test('list.bisectRight for B lo=8 hi=1', () {
    expect(B.bisectRight(-2, low: 8, high: 1), 8);
    expect(B.bisectRight(-1, low: 8, high: 1), 8);
    expect(B.bisectRight(0, low: 8, high: 1), 8);
    expect(B.bisectRight(1, low: 8, high: 1), 8);
    expect(B.bisectRight(2, low: 8, high: 1), 8);
    expect(B.bisectRight(3, low: 8, high: 1), 8);
    expect(B.bisectRight(4, low: 8, high: 1), 8);
    expect(B.bisectRight(5, low: 8, high: 1), 8);
    expect(B.bisectRight(6, low: 8, high: 1), 8);
    expect(B.bisectRight(7, low: 8, high: 1), 8);
    expect(B.bisectRight(8, low: 8, high: 1), 8);
  });

  test('list.bisectRight for C lo=8 hi=1', () {
    expect(C.bisectRight(-2, low: 8, high: 1), 8);
    expect(C.bisectRight(-1, low: 8, high: 1), 8);
    expect(C.bisectRight(0, low: 8, high: 1), 8);
    expect(C.bisectRight(1, low: 8, high: 1), 8);
    expect(C.bisectRight(2, low: 8, high: 1), 8);
    expect(C.bisectRight(3, low: 8, high: 1), 8);
    expect(C.bisectRight(4, low: 8, high: 1), 8);
    expect(C.bisectRight(5, low: 8, high: 1), 8);
    expect(C.bisectRight(6, low: 8, high: 1), 8);
    expect(C.bisectRight(7, low: 8, high: 1), 8);
    expect(C.bisectRight(8, low: 8, high: 1), 8);
  });

  test('list.bisectRight for D lo=8 hi=1', () {
    expect(D.bisectRight(-2, low: 8, high: 1), 8);
    expect(D.bisectRight(-1, low: 8, high: 1), 8);
    expect(D.bisectRight(0, low: 8, high: 1), 8);
    expect(D.bisectRight(1, low: 8, high: 1), 8);
    expect(D.bisectRight(2, low: 8, high: 1), 8);
    expect(D.bisectRight(3, low: 8, high: 1), 8);
    expect(D.bisectRight(4, low: 8, high: 1), 8);
    expect(D.bisectRight(5, low: 8, high: 1), 8);
    expect(D.bisectRight(6, low: 8, high: 1), 8);
    expect(D.bisectRight(7, low: 8, high: 1), 8);
    expect(D.bisectRight(8, low: 8, high: 1), 8);
  });

  test('list.bisectRight for E lo=8 hi=1', () {
    expect(E.bisectRight(-2, low: 8, high: 1), 8);
    expect(E.bisectRight(-1, low: 8, high: 1), 8);
    expect(E.bisectRight(0, low: 8, high: 1), 8);
    expect(E.bisectRight(1, low: 8, high: 1), 8);
    expect(E.bisectRight(2, low: 8, high: 1), 8);
    expect(E.bisectRight(3, low: 8, high: 1), 8);
    expect(E.bisectRight(4, low: 8, high: 1), 8);
    expect(E.bisectRight(5, low: 8, high: 1), 8);
    expect(E.bisectRight(6, low: 8, high: 1), 8);
    expect(E.bisectRight(7, low: 8, high: 1), 8);
    expect(E.bisectRight(8, low: 8, high: 1), 8);
  });

  test('list.bisectRight for A lo=9 hi=1', () {
    expect(A.bisectRight(-2, low: 9, high: 1), 9);
    expect(A.bisectRight(-1, low: 9, high: 1), 9);
    expect(A.bisectRight(0, low: 9, high: 1), 9);
    expect(A.bisectRight(1, low: 9, high: 1), 9);
    expect(A.bisectRight(2, low: 9, high: 1), 9);
    expect(A.bisectRight(3, low: 9, high: 1), 9);
    expect(A.bisectRight(4, low: 9, high: 1), 9);
    expect(A.bisectRight(5, low: 9, high: 1), 9);
    expect(A.bisectRight(6, low: 9, high: 1), 9);
    expect(A.bisectRight(7, low: 9, high: 1), 9);
    expect(A.bisectRight(8, low: 9, high: 1), 9);
  });

  test('list.bisectRight for B lo=9 hi=1', () {
    expect(B.bisectRight(-2, low: 9, high: 1), 9);
    expect(B.bisectRight(-1, low: 9, high: 1), 9);
    expect(B.bisectRight(0, low: 9, high: 1), 9);
    expect(B.bisectRight(1, low: 9, high: 1), 9);
    expect(B.bisectRight(2, low: 9, high: 1), 9);
    expect(B.bisectRight(3, low: 9, high: 1), 9);
    expect(B.bisectRight(4, low: 9, high: 1), 9);
    expect(B.bisectRight(5, low: 9, high: 1), 9);
    expect(B.bisectRight(6, low: 9, high: 1), 9);
    expect(B.bisectRight(7, low: 9, high: 1), 9);
    expect(B.bisectRight(8, low: 9, high: 1), 9);
  });

  test('list.bisectRight for C lo=9 hi=1', () {
    expect(C.bisectRight(-2, low: 9, high: 1), 9);
    expect(C.bisectRight(-1, low: 9, high: 1), 9);
    expect(C.bisectRight(0, low: 9, high: 1), 9);
    expect(C.bisectRight(1, low: 9, high: 1), 9);
    expect(C.bisectRight(2, low: 9, high: 1), 9);
    expect(C.bisectRight(3, low: 9, high: 1), 9);
    expect(C.bisectRight(4, low: 9, high: 1), 9);
    expect(C.bisectRight(5, low: 9, high: 1), 9);
    expect(C.bisectRight(6, low: 9, high: 1), 9);
    expect(C.bisectRight(7, low: 9, high: 1), 9);
    expect(C.bisectRight(8, low: 9, high: 1), 9);
  });

  test('list.bisectRight for D lo=9 hi=1', () {
    expect(D.bisectRight(-2, low: 9, high: 1), 9);
    expect(D.bisectRight(-1, low: 9, high: 1), 9);
    expect(D.bisectRight(0, low: 9, high: 1), 9);
    expect(D.bisectRight(1, low: 9, high: 1), 9);
    expect(D.bisectRight(2, low: 9, high: 1), 9);
    expect(D.bisectRight(3, low: 9, high: 1), 9);
    expect(D.bisectRight(4, low: 9, high: 1), 9);
    expect(D.bisectRight(5, low: 9, high: 1), 9);
    expect(D.bisectRight(6, low: 9, high: 1), 9);
    expect(D.bisectRight(7, low: 9, high: 1), 9);
    expect(D.bisectRight(8, low: 9, high: 1), 9);
  });

  test('list.bisectRight for E lo=9 hi=1', () {
    expect(E.bisectRight(-2, low: 9, high: 1), 9);
    expect(E.bisectRight(-1, low: 9, high: 1), 9);
    expect(E.bisectRight(0, low: 9, high: 1), 9);
    expect(E.bisectRight(1, low: 9, high: 1), 9);
    expect(E.bisectRight(2, low: 9, high: 1), 9);
    expect(E.bisectRight(3, low: 9, high: 1), 9);
    expect(E.bisectRight(4, low: 9, high: 1), 9);
    expect(E.bisectRight(5, low: 9, high: 1), 9);
    expect(E.bisectRight(6, low: 9, high: 1), 9);
    expect(E.bisectRight(7, low: 9, high: 1), 9);
    expect(E.bisectRight(8, low: 9, high: 1), 9);
  });

  test('list.bisectRight for A lo=None hi=2', () {
    expect(() => A.bisectRight(-2, high: 2), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(2, high: 2), throwsRangeError);
    expect(() => A.bisectRight(3, high: 2), throwsRangeError);
    expect(() => A.bisectRight(4, high: 2), throwsRangeError);
    expect(() => A.bisectRight(5, high: 2), throwsRangeError);
    expect(() => A.bisectRight(6, high: 2), throwsRangeError);
    expect(() => A.bisectRight(7, high: 2), throwsRangeError);
    expect(() => A.bisectRight(8, high: 2), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=2', () {
    expect(() => B.bisectRight(-2, high: 2), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(2, high: 2), throwsRangeError);
    expect(() => B.bisectRight(3, high: 2), throwsRangeError);
    expect(() => B.bisectRight(4, high: 2), throwsRangeError);
    expect(() => B.bisectRight(5, high: 2), throwsRangeError);
    expect(() => B.bisectRight(6, high: 2), throwsRangeError);
    expect(() => B.bisectRight(7, high: 2), throwsRangeError);
    expect(() => B.bisectRight(8, high: 2), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=2', () {
    expect(C.bisectRight(-2, high: 2), 0);
    expect(C.bisectRight(-1, high: 2), 0);
    expect(C.bisectRight(0, high: 2), 0);
    expect(C.bisectRight(1, high: 2), 0);
    expect(C.bisectRight(2, high: 2), 0);
    expect(C.bisectRight(3, high: 2), 0);
    expect(C.bisectRight(4, high: 2), 1);
    expect(C.bisectRight(5, high: 2), 2);
    expect(C.bisectRight(6, high: 2), 2);
    expect(C.bisectRight(7, high: 2), 2);
    expect(C.bisectRight(8, high: 2), 2);
  });

  test('list.bisectRight for D lo=None hi=2', () {
    expect(D.bisectRight(-2, high: 2), 0);
    expect(D.bisectRight(-1, high: 2), 0);
    expect(D.bisectRight(0, high: 2), 0);
    expect(D.bisectRight(1, high: 2), 0);
    expect(D.bisectRight(2, high: 2), 0);
    expect(D.bisectRight(3, high: 2), 1);
    expect(D.bisectRight(4, high: 2), 2);
    expect(D.bisectRight(5, high: 2), 2);
    expect(D.bisectRight(6, high: 2), 2);
    expect(D.bisectRight(7, high: 2), 2);
    expect(D.bisectRight(8, high: 2), 2);
  });

  test('list.bisectRight for E lo=None hi=2', () {
    expect(E.bisectRight(-2, high: 2), 0);
    expect(E.bisectRight(-1, high: 2), 0);
    expect(E.bisectRight(0, high: 2), 1);
    expect(E.bisectRight(1, high: 2), 2);
    expect(E.bisectRight(2, high: 2), 2);
    expect(E.bisectRight(3, high: 2), 2);
    expect(E.bisectRight(4, high: 2), 2);
    expect(E.bisectRight(5, high: 2), 2);
    expect(E.bisectRight(6, high: 2), 2);
    expect(E.bisectRight(7, high: 2), 2);
    expect(E.bisectRight(8, high: 2), 2);
  });

  test('list.bisectRight for A lo=0 hi=2', () {
    expect(() => A.bisectRight(-2, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 2), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 2), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=2', () {
    expect(() => B.bisectRight(-2, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 2), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 2), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=2', () {
    expect(C.bisectRight(-2, low: 0, high: 2), 0);
    expect(C.bisectRight(-1, low: 0, high: 2), 0);
    expect(C.bisectRight(0, low: 0, high: 2), 0);
    expect(C.bisectRight(1, low: 0, high: 2), 0);
    expect(C.bisectRight(2, low: 0, high: 2), 0);
    expect(C.bisectRight(3, low: 0, high: 2), 0);
    expect(C.bisectRight(4, low: 0, high: 2), 1);
    expect(C.bisectRight(5, low: 0, high: 2), 2);
    expect(C.bisectRight(6, low: 0, high: 2), 2);
    expect(C.bisectRight(7, low: 0, high: 2), 2);
    expect(C.bisectRight(8, low: 0, high: 2), 2);
  });

  test('list.bisectRight for D lo=0 hi=2', () {
    expect(D.bisectRight(-2, low: 0, high: 2), 0);
    expect(D.bisectRight(-1, low: 0, high: 2), 0);
    expect(D.bisectRight(0, low: 0, high: 2), 0);
    expect(D.bisectRight(1, low: 0, high: 2), 0);
    expect(D.bisectRight(2, low: 0, high: 2), 0);
    expect(D.bisectRight(3, low: 0, high: 2), 1);
    expect(D.bisectRight(4, low: 0, high: 2), 2);
    expect(D.bisectRight(5, low: 0, high: 2), 2);
    expect(D.bisectRight(6, low: 0, high: 2), 2);
    expect(D.bisectRight(7, low: 0, high: 2), 2);
    expect(D.bisectRight(8, low: 0, high: 2), 2);
  });

  test('list.bisectRight for E lo=0 hi=2', () {
    expect(E.bisectRight(-2, low: 0, high: 2), 0);
    expect(E.bisectRight(-1, low: 0, high: 2), 0);
    expect(E.bisectRight(0, low: 0, high: 2), 1);
    expect(E.bisectRight(1, low: 0, high: 2), 2);
    expect(E.bisectRight(2, low: 0, high: 2), 2);
    expect(E.bisectRight(3, low: 0, high: 2), 2);
    expect(E.bisectRight(4, low: 0, high: 2), 2);
    expect(E.bisectRight(5, low: 0, high: 2), 2);
    expect(E.bisectRight(6, low: 0, high: 2), 2);
    expect(E.bisectRight(7, low: 0, high: 2), 2);
    expect(E.bisectRight(8, low: 0, high: 2), 2);
  });

  test('list.bisectRight for A lo=1 hi=2', () {
    expect(() => A.bisectRight(-2, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 2), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 2), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=2', () {
    expect(() => B.bisectRight(-2, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 2), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 2), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=2', () {
    expect(C.bisectRight(-2, low: 1, high: 2), 1);
    expect(C.bisectRight(-1, low: 1, high: 2), 1);
    expect(C.bisectRight(0, low: 1, high: 2), 1);
    expect(C.bisectRight(1, low: 1, high: 2), 1);
    expect(C.bisectRight(2, low: 1, high: 2), 1);
    expect(C.bisectRight(3, low: 1, high: 2), 1);
    expect(C.bisectRight(4, low: 1, high: 2), 1);
    expect(C.bisectRight(5, low: 1, high: 2), 2);
    expect(C.bisectRight(6, low: 1, high: 2), 2);
    expect(C.bisectRight(7, low: 1, high: 2), 2);
    expect(C.bisectRight(8, low: 1, high: 2), 2);
  });

  test('list.bisectRight for D lo=1 hi=2', () {
    expect(D.bisectRight(-2, low: 1, high: 2), 1);
    expect(D.bisectRight(-1, low: 1, high: 2), 1);
    expect(D.bisectRight(0, low: 1, high: 2), 1);
    expect(D.bisectRight(1, low: 1, high: 2), 1);
    expect(D.bisectRight(2, low: 1, high: 2), 1);
    expect(D.bisectRight(3, low: 1, high: 2), 1);
    expect(D.bisectRight(4, low: 1, high: 2), 2);
    expect(D.bisectRight(5, low: 1, high: 2), 2);
    expect(D.bisectRight(6, low: 1, high: 2), 2);
    expect(D.bisectRight(7, low: 1, high: 2), 2);
    expect(D.bisectRight(8, low: 1, high: 2), 2);
  });

  test('list.bisectRight for E lo=1 hi=2', () {
    expect(E.bisectRight(-2, low: 1, high: 2), 1);
    expect(E.bisectRight(-1, low: 1, high: 2), 1);
    expect(E.bisectRight(0, low: 1, high: 2), 1);
    expect(E.bisectRight(1, low: 1, high: 2), 2);
    expect(E.bisectRight(2, low: 1, high: 2), 2);
    expect(E.bisectRight(3, low: 1, high: 2), 2);
    expect(E.bisectRight(4, low: 1, high: 2), 2);
    expect(E.bisectRight(5, low: 1, high: 2), 2);
    expect(E.bisectRight(6, low: 1, high: 2), 2);
    expect(E.bisectRight(7, low: 1, high: 2), 2);
    expect(E.bisectRight(8, low: 1, high: 2), 2);
  });

  test('list.bisectRight for A lo=2 hi=2', () {
    expect(A.bisectRight(-2, low: 2, high: 2), 2);
    expect(A.bisectRight(-1, low: 2, high: 2), 2);
    expect(A.bisectRight(0, low: 2, high: 2), 2);
    expect(A.bisectRight(1, low: 2, high: 2), 2);
    expect(A.bisectRight(2, low: 2, high: 2), 2);
    expect(A.bisectRight(3, low: 2, high: 2), 2);
    expect(A.bisectRight(4, low: 2, high: 2), 2);
    expect(A.bisectRight(5, low: 2, high: 2), 2);
    expect(A.bisectRight(6, low: 2, high: 2), 2);
    expect(A.bisectRight(7, low: 2, high: 2), 2);
    expect(A.bisectRight(8, low: 2, high: 2), 2);
  });

  test('list.bisectRight for B lo=2 hi=2', () {
    expect(B.bisectRight(-2, low: 2, high: 2), 2);
    expect(B.bisectRight(-1, low: 2, high: 2), 2);
    expect(B.bisectRight(0, low: 2, high: 2), 2);
    expect(B.bisectRight(1, low: 2, high: 2), 2);
    expect(B.bisectRight(2, low: 2, high: 2), 2);
    expect(B.bisectRight(3, low: 2, high: 2), 2);
    expect(B.bisectRight(4, low: 2, high: 2), 2);
    expect(B.bisectRight(5, low: 2, high: 2), 2);
    expect(B.bisectRight(6, low: 2, high: 2), 2);
    expect(B.bisectRight(7, low: 2, high: 2), 2);
    expect(B.bisectRight(8, low: 2, high: 2), 2);
  });

  test('list.bisectRight for C lo=2 hi=2', () {
    expect(C.bisectRight(-2, low: 2, high: 2), 2);
    expect(C.bisectRight(-1, low: 2, high: 2), 2);
    expect(C.bisectRight(0, low: 2, high: 2), 2);
    expect(C.bisectRight(1, low: 2, high: 2), 2);
    expect(C.bisectRight(2, low: 2, high: 2), 2);
    expect(C.bisectRight(3, low: 2, high: 2), 2);
    expect(C.bisectRight(4, low: 2, high: 2), 2);
    expect(C.bisectRight(5, low: 2, high: 2), 2);
    expect(C.bisectRight(6, low: 2, high: 2), 2);
    expect(C.bisectRight(7, low: 2, high: 2), 2);
    expect(C.bisectRight(8, low: 2, high: 2), 2);
  });

  test('list.bisectRight for D lo=2 hi=2', () {
    expect(D.bisectRight(-2, low: 2, high: 2), 2);
    expect(D.bisectRight(-1, low: 2, high: 2), 2);
    expect(D.bisectRight(0, low: 2, high: 2), 2);
    expect(D.bisectRight(1, low: 2, high: 2), 2);
    expect(D.bisectRight(2, low: 2, high: 2), 2);
    expect(D.bisectRight(3, low: 2, high: 2), 2);
    expect(D.bisectRight(4, low: 2, high: 2), 2);
    expect(D.bisectRight(5, low: 2, high: 2), 2);
    expect(D.bisectRight(6, low: 2, high: 2), 2);
    expect(D.bisectRight(7, low: 2, high: 2), 2);
    expect(D.bisectRight(8, low: 2, high: 2), 2);
  });

  test('list.bisectRight for E lo=2 hi=2', () {
    expect(E.bisectRight(-2, low: 2, high: 2), 2);
    expect(E.bisectRight(-1, low: 2, high: 2), 2);
    expect(E.bisectRight(0, low: 2, high: 2), 2);
    expect(E.bisectRight(1, low: 2, high: 2), 2);
    expect(E.bisectRight(2, low: 2, high: 2), 2);
    expect(E.bisectRight(3, low: 2, high: 2), 2);
    expect(E.bisectRight(4, low: 2, high: 2), 2);
    expect(E.bisectRight(5, low: 2, high: 2), 2);
    expect(E.bisectRight(6, low: 2, high: 2), 2);
    expect(E.bisectRight(7, low: 2, high: 2), 2);
    expect(E.bisectRight(8, low: 2, high: 2), 2);
  });

  test('list.bisectRight for A lo=3 hi=2', () {
    expect(A.bisectRight(-2, low: 3, high: 2), 3);
    expect(A.bisectRight(-1, low: 3, high: 2), 3);
    expect(A.bisectRight(0, low: 3, high: 2), 3);
    expect(A.bisectRight(1, low: 3, high: 2), 3);
    expect(A.bisectRight(2, low: 3, high: 2), 3);
    expect(A.bisectRight(3, low: 3, high: 2), 3);
    expect(A.bisectRight(4, low: 3, high: 2), 3);
    expect(A.bisectRight(5, low: 3, high: 2), 3);
    expect(A.bisectRight(6, low: 3, high: 2), 3);
    expect(A.bisectRight(7, low: 3, high: 2), 3);
    expect(A.bisectRight(8, low: 3, high: 2), 3);
  });

  test('list.bisectRight for B lo=3 hi=2', () {
    expect(B.bisectRight(-2, low: 3, high: 2), 3);
    expect(B.bisectRight(-1, low: 3, high: 2), 3);
    expect(B.bisectRight(0, low: 3, high: 2), 3);
    expect(B.bisectRight(1, low: 3, high: 2), 3);
    expect(B.bisectRight(2, low: 3, high: 2), 3);
    expect(B.bisectRight(3, low: 3, high: 2), 3);
    expect(B.bisectRight(4, low: 3, high: 2), 3);
    expect(B.bisectRight(5, low: 3, high: 2), 3);
    expect(B.bisectRight(6, low: 3, high: 2), 3);
    expect(B.bisectRight(7, low: 3, high: 2), 3);
    expect(B.bisectRight(8, low: 3, high: 2), 3);
  });

  test('list.bisectRight for C lo=3 hi=2', () {
    expect(C.bisectRight(-2, low: 3, high: 2), 3);
    expect(C.bisectRight(-1, low: 3, high: 2), 3);
    expect(C.bisectRight(0, low: 3, high: 2), 3);
    expect(C.bisectRight(1, low: 3, high: 2), 3);
    expect(C.bisectRight(2, low: 3, high: 2), 3);
    expect(C.bisectRight(3, low: 3, high: 2), 3);
    expect(C.bisectRight(4, low: 3, high: 2), 3);
    expect(C.bisectRight(5, low: 3, high: 2), 3);
    expect(C.bisectRight(6, low: 3, high: 2), 3);
    expect(C.bisectRight(7, low: 3, high: 2), 3);
    expect(C.bisectRight(8, low: 3, high: 2), 3);
  });

  test('list.bisectRight for D lo=3 hi=2', () {
    expect(D.bisectRight(-2, low: 3, high: 2), 3);
    expect(D.bisectRight(-1, low: 3, high: 2), 3);
    expect(D.bisectRight(0, low: 3, high: 2), 3);
    expect(D.bisectRight(1, low: 3, high: 2), 3);
    expect(D.bisectRight(2, low: 3, high: 2), 3);
    expect(D.bisectRight(3, low: 3, high: 2), 3);
    expect(D.bisectRight(4, low: 3, high: 2), 3);
    expect(D.bisectRight(5, low: 3, high: 2), 3);
    expect(D.bisectRight(6, low: 3, high: 2), 3);
    expect(D.bisectRight(7, low: 3, high: 2), 3);
    expect(D.bisectRight(8, low: 3, high: 2), 3);
  });

  test('list.bisectRight for E lo=3 hi=2', () {
    expect(E.bisectRight(-2, low: 3, high: 2), 3);
    expect(E.bisectRight(-1, low: 3, high: 2), 3);
    expect(E.bisectRight(0, low: 3, high: 2), 3);
    expect(E.bisectRight(1, low: 3, high: 2), 3);
    expect(E.bisectRight(2, low: 3, high: 2), 3);
    expect(E.bisectRight(3, low: 3, high: 2), 3);
    expect(E.bisectRight(4, low: 3, high: 2), 3);
    expect(E.bisectRight(5, low: 3, high: 2), 3);
    expect(E.bisectRight(6, low: 3, high: 2), 3);
    expect(E.bisectRight(7, low: 3, high: 2), 3);
    expect(E.bisectRight(8, low: 3, high: 2), 3);
  });

  test('list.bisectRight for A lo=4 hi=2', () {
    expect(A.bisectRight(-2, low: 4, high: 2), 4);
    expect(A.bisectRight(-1, low: 4, high: 2), 4);
    expect(A.bisectRight(0, low: 4, high: 2), 4);
    expect(A.bisectRight(1, low: 4, high: 2), 4);
    expect(A.bisectRight(2, low: 4, high: 2), 4);
    expect(A.bisectRight(3, low: 4, high: 2), 4);
    expect(A.bisectRight(4, low: 4, high: 2), 4);
    expect(A.bisectRight(5, low: 4, high: 2), 4);
    expect(A.bisectRight(6, low: 4, high: 2), 4);
    expect(A.bisectRight(7, low: 4, high: 2), 4);
    expect(A.bisectRight(8, low: 4, high: 2), 4);
  });

  test('list.bisectRight for B lo=4 hi=2', () {
    expect(B.bisectRight(-2, low: 4, high: 2), 4);
    expect(B.bisectRight(-1, low: 4, high: 2), 4);
    expect(B.bisectRight(0, low: 4, high: 2), 4);
    expect(B.bisectRight(1, low: 4, high: 2), 4);
    expect(B.bisectRight(2, low: 4, high: 2), 4);
    expect(B.bisectRight(3, low: 4, high: 2), 4);
    expect(B.bisectRight(4, low: 4, high: 2), 4);
    expect(B.bisectRight(5, low: 4, high: 2), 4);
    expect(B.bisectRight(6, low: 4, high: 2), 4);
    expect(B.bisectRight(7, low: 4, high: 2), 4);
    expect(B.bisectRight(8, low: 4, high: 2), 4);
  });

  test('list.bisectRight for C lo=4 hi=2', () {
    expect(C.bisectRight(-2, low: 4, high: 2), 4);
    expect(C.bisectRight(-1, low: 4, high: 2), 4);
    expect(C.bisectRight(0, low: 4, high: 2), 4);
    expect(C.bisectRight(1, low: 4, high: 2), 4);
    expect(C.bisectRight(2, low: 4, high: 2), 4);
    expect(C.bisectRight(3, low: 4, high: 2), 4);
    expect(C.bisectRight(4, low: 4, high: 2), 4);
    expect(C.bisectRight(5, low: 4, high: 2), 4);
    expect(C.bisectRight(6, low: 4, high: 2), 4);
    expect(C.bisectRight(7, low: 4, high: 2), 4);
    expect(C.bisectRight(8, low: 4, high: 2), 4);
  });

  test('list.bisectRight for D lo=4 hi=2', () {
    expect(D.bisectRight(-2, low: 4, high: 2), 4);
    expect(D.bisectRight(-1, low: 4, high: 2), 4);
    expect(D.bisectRight(0, low: 4, high: 2), 4);
    expect(D.bisectRight(1, low: 4, high: 2), 4);
    expect(D.bisectRight(2, low: 4, high: 2), 4);
    expect(D.bisectRight(3, low: 4, high: 2), 4);
    expect(D.bisectRight(4, low: 4, high: 2), 4);
    expect(D.bisectRight(5, low: 4, high: 2), 4);
    expect(D.bisectRight(6, low: 4, high: 2), 4);
    expect(D.bisectRight(7, low: 4, high: 2), 4);
    expect(D.bisectRight(8, low: 4, high: 2), 4);
  });

  test('list.bisectRight for E lo=4 hi=2', () {
    expect(E.bisectRight(-2, low: 4, high: 2), 4);
    expect(E.bisectRight(-1, low: 4, high: 2), 4);
    expect(E.bisectRight(0, low: 4, high: 2), 4);
    expect(E.bisectRight(1, low: 4, high: 2), 4);
    expect(E.bisectRight(2, low: 4, high: 2), 4);
    expect(E.bisectRight(3, low: 4, high: 2), 4);
    expect(E.bisectRight(4, low: 4, high: 2), 4);
    expect(E.bisectRight(5, low: 4, high: 2), 4);
    expect(E.bisectRight(6, low: 4, high: 2), 4);
    expect(E.bisectRight(7, low: 4, high: 2), 4);
    expect(E.bisectRight(8, low: 4, high: 2), 4);
  });

  test('list.bisectRight for A lo=5 hi=2', () {
    expect(A.bisectRight(-2, low: 5, high: 2), 5);
    expect(A.bisectRight(-1, low: 5, high: 2), 5);
    expect(A.bisectRight(0, low: 5, high: 2), 5);
    expect(A.bisectRight(1, low: 5, high: 2), 5);
    expect(A.bisectRight(2, low: 5, high: 2), 5);
    expect(A.bisectRight(3, low: 5, high: 2), 5);
    expect(A.bisectRight(4, low: 5, high: 2), 5);
    expect(A.bisectRight(5, low: 5, high: 2), 5);
    expect(A.bisectRight(6, low: 5, high: 2), 5);
    expect(A.bisectRight(7, low: 5, high: 2), 5);
    expect(A.bisectRight(8, low: 5, high: 2), 5);
  });

  test('list.bisectRight for B lo=5 hi=2', () {
    expect(B.bisectRight(-2, low: 5, high: 2), 5);
    expect(B.bisectRight(-1, low: 5, high: 2), 5);
    expect(B.bisectRight(0, low: 5, high: 2), 5);
    expect(B.bisectRight(1, low: 5, high: 2), 5);
    expect(B.bisectRight(2, low: 5, high: 2), 5);
    expect(B.bisectRight(3, low: 5, high: 2), 5);
    expect(B.bisectRight(4, low: 5, high: 2), 5);
    expect(B.bisectRight(5, low: 5, high: 2), 5);
    expect(B.bisectRight(6, low: 5, high: 2), 5);
    expect(B.bisectRight(7, low: 5, high: 2), 5);
    expect(B.bisectRight(8, low: 5, high: 2), 5);
  });

  test('list.bisectRight for C lo=5 hi=2', () {
    expect(C.bisectRight(-2, low: 5, high: 2), 5);
    expect(C.bisectRight(-1, low: 5, high: 2), 5);
    expect(C.bisectRight(0, low: 5, high: 2), 5);
    expect(C.bisectRight(1, low: 5, high: 2), 5);
    expect(C.bisectRight(2, low: 5, high: 2), 5);
    expect(C.bisectRight(3, low: 5, high: 2), 5);
    expect(C.bisectRight(4, low: 5, high: 2), 5);
    expect(C.bisectRight(5, low: 5, high: 2), 5);
    expect(C.bisectRight(6, low: 5, high: 2), 5);
    expect(C.bisectRight(7, low: 5, high: 2), 5);
    expect(C.bisectRight(8, low: 5, high: 2), 5);
  });

  test('list.bisectRight for D lo=5 hi=2', () {
    expect(D.bisectRight(-2, low: 5, high: 2), 5);
    expect(D.bisectRight(-1, low: 5, high: 2), 5);
    expect(D.bisectRight(0, low: 5, high: 2), 5);
    expect(D.bisectRight(1, low: 5, high: 2), 5);
    expect(D.bisectRight(2, low: 5, high: 2), 5);
    expect(D.bisectRight(3, low: 5, high: 2), 5);
    expect(D.bisectRight(4, low: 5, high: 2), 5);
    expect(D.bisectRight(5, low: 5, high: 2), 5);
    expect(D.bisectRight(6, low: 5, high: 2), 5);
    expect(D.bisectRight(7, low: 5, high: 2), 5);
    expect(D.bisectRight(8, low: 5, high: 2), 5);
  });

  test('list.bisectRight for E lo=5 hi=2', () {
    expect(E.bisectRight(-2, low: 5, high: 2), 5);
    expect(E.bisectRight(-1, low: 5, high: 2), 5);
    expect(E.bisectRight(0, low: 5, high: 2), 5);
    expect(E.bisectRight(1, low: 5, high: 2), 5);
    expect(E.bisectRight(2, low: 5, high: 2), 5);
    expect(E.bisectRight(3, low: 5, high: 2), 5);
    expect(E.bisectRight(4, low: 5, high: 2), 5);
    expect(E.bisectRight(5, low: 5, high: 2), 5);
    expect(E.bisectRight(6, low: 5, high: 2), 5);
    expect(E.bisectRight(7, low: 5, high: 2), 5);
    expect(E.bisectRight(8, low: 5, high: 2), 5);
  });

  test('list.bisectRight for A lo=6 hi=2', () {
    expect(A.bisectRight(-2, low: 6, high: 2), 6);
    expect(A.bisectRight(-1, low: 6, high: 2), 6);
    expect(A.bisectRight(0, low: 6, high: 2), 6);
    expect(A.bisectRight(1, low: 6, high: 2), 6);
    expect(A.bisectRight(2, low: 6, high: 2), 6);
    expect(A.bisectRight(3, low: 6, high: 2), 6);
    expect(A.bisectRight(4, low: 6, high: 2), 6);
    expect(A.bisectRight(5, low: 6, high: 2), 6);
    expect(A.bisectRight(6, low: 6, high: 2), 6);
    expect(A.bisectRight(7, low: 6, high: 2), 6);
    expect(A.bisectRight(8, low: 6, high: 2), 6);
  });

  test('list.bisectRight for B lo=6 hi=2', () {
    expect(B.bisectRight(-2, low: 6, high: 2), 6);
    expect(B.bisectRight(-1, low: 6, high: 2), 6);
    expect(B.bisectRight(0, low: 6, high: 2), 6);
    expect(B.bisectRight(1, low: 6, high: 2), 6);
    expect(B.bisectRight(2, low: 6, high: 2), 6);
    expect(B.bisectRight(3, low: 6, high: 2), 6);
    expect(B.bisectRight(4, low: 6, high: 2), 6);
    expect(B.bisectRight(5, low: 6, high: 2), 6);
    expect(B.bisectRight(6, low: 6, high: 2), 6);
    expect(B.bisectRight(7, low: 6, high: 2), 6);
    expect(B.bisectRight(8, low: 6, high: 2), 6);
  });

  test('list.bisectRight for C lo=6 hi=2', () {
    expect(C.bisectRight(-2, low: 6, high: 2), 6);
    expect(C.bisectRight(-1, low: 6, high: 2), 6);
    expect(C.bisectRight(0, low: 6, high: 2), 6);
    expect(C.bisectRight(1, low: 6, high: 2), 6);
    expect(C.bisectRight(2, low: 6, high: 2), 6);
    expect(C.bisectRight(3, low: 6, high: 2), 6);
    expect(C.bisectRight(4, low: 6, high: 2), 6);
    expect(C.bisectRight(5, low: 6, high: 2), 6);
    expect(C.bisectRight(6, low: 6, high: 2), 6);
    expect(C.bisectRight(7, low: 6, high: 2), 6);
    expect(C.bisectRight(8, low: 6, high: 2), 6);
  });

  test('list.bisectRight for D lo=6 hi=2', () {
    expect(D.bisectRight(-2, low: 6, high: 2), 6);
    expect(D.bisectRight(-1, low: 6, high: 2), 6);
    expect(D.bisectRight(0, low: 6, high: 2), 6);
    expect(D.bisectRight(1, low: 6, high: 2), 6);
    expect(D.bisectRight(2, low: 6, high: 2), 6);
    expect(D.bisectRight(3, low: 6, high: 2), 6);
    expect(D.bisectRight(4, low: 6, high: 2), 6);
    expect(D.bisectRight(5, low: 6, high: 2), 6);
    expect(D.bisectRight(6, low: 6, high: 2), 6);
    expect(D.bisectRight(7, low: 6, high: 2), 6);
    expect(D.bisectRight(8, low: 6, high: 2), 6);
  });

  test('list.bisectRight for E lo=6 hi=2', () {
    expect(E.bisectRight(-2, low: 6, high: 2), 6);
    expect(E.bisectRight(-1, low: 6, high: 2), 6);
    expect(E.bisectRight(0, low: 6, high: 2), 6);
    expect(E.bisectRight(1, low: 6, high: 2), 6);
    expect(E.bisectRight(2, low: 6, high: 2), 6);
    expect(E.bisectRight(3, low: 6, high: 2), 6);
    expect(E.bisectRight(4, low: 6, high: 2), 6);
    expect(E.bisectRight(5, low: 6, high: 2), 6);
    expect(E.bisectRight(6, low: 6, high: 2), 6);
    expect(E.bisectRight(7, low: 6, high: 2), 6);
    expect(E.bisectRight(8, low: 6, high: 2), 6);
  });

  test('list.bisectRight for A lo=7 hi=2', () {
    expect(A.bisectRight(-2, low: 7, high: 2), 7);
    expect(A.bisectRight(-1, low: 7, high: 2), 7);
    expect(A.bisectRight(0, low: 7, high: 2), 7);
    expect(A.bisectRight(1, low: 7, high: 2), 7);
    expect(A.bisectRight(2, low: 7, high: 2), 7);
    expect(A.bisectRight(3, low: 7, high: 2), 7);
    expect(A.bisectRight(4, low: 7, high: 2), 7);
    expect(A.bisectRight(5, low: 7, high: 2), 7);
    expect(A.bisectRight(6, low: 7, high: 2), 7);
    expect(A.bisectRight(7, low: 7, high: 2), 7);
    expect(A.bisectRight(8, low: 7, high: 2), 7);
  });

  test('list.bisectRight for B lo=7 hi=2', () {
    expect(B.bisectRight(-2, low: 7, high: 2), 7);
    expect(B.bisectRight(-1, low: 7, high: 2), 7);
    expect(B.bisectRight(0, low: 7, high: 2), 7);
    expect(B.bisectRight(1, low: 7, high: 2), 7);
    expect(B.bisectRight(2, low: 7, high: 2), 7);
    expect(B.bisectRight(3, low: 7, high: 2), 7);
    expect(B.bisectRight(4, low: 7, high: 2), 7);
    expect(B.bisectRight(5, low: 7, high: 2), 7);
    expect(B.bisectRight(6, low: 7, high: 2), 7);
    expect(B.bisectRight(7, low: 7, high: 2), 7);
    expect(B.bisectRight(8, low: 7, high: 2), 7);
  });

  test('list.bisectRight for C lo=7 hi=2', () {
    expect(C.bisectRight(-2, low: 7, high: 2), 7);
    expect(C.bisectRight(-1, low: 7, high: 2), 7);
    expect(C.bisectRight(0, low: 7, high: 2), 7);
    expect(C.bisectRight(1, low: 7, high: 2), 7);
    expect(C.bisectRight(2, low: 7, high: 2), 7);
    expect(C.bisectRight(3, low: 7, high: 2), 7);
    expect(C.bisectRight(4, low: 7, high: 2), 7);
    expect(C.bisectRight(5, low: 7, high: 2), 7);
    expect(C.bisectRight(6, low: 7, high: 2), 7);
    expect(C.bisectRight(7, low: 7, high: 2), 7);
    expect(C.bisectRight(8, low: 7, high: 2), 7);
  });

  test('list.bisectRight for D lo=7 hi=2', () {
    expect(D.bisectRight(-2, low: 7, high: 2), 7);
    expect(D.bisectRight(-1, low: 7, high: 2), 7);
    expect(D.bisectRight(0, low: 7, high: 2), 7);
    expect(D.bisectRight(1, low: 7, high: 2), 7);
    expect(D.bisectRight(2, low: 7, high: 2), 7);
    expect(D.bisectRight(3, low: 7, high: 2), 7);
    expect(D.bisectRight(4, low: 7, high: 2), 7);
    expect(D.bisectRight(5, low: 7, high: 2), 7);
    expect(D.bisectRight(6, low: 7, high: 2), 7);
    expect(D.bisectRight(7, low: 7, high: 2), 7);
    expect(D.bisectRight(8, low: 7, high: 2), 7);
  });

  test('list.bisectRight for E lo=7 hi=2', () {
    expect(E.bisectRight(-2, low: 7, high: 2), 7);
    expect(E.bisectRight(-1, low: 7, high: 2), 7);
    expect(E.bisectRight(0, low: 7, high: 2), 7);
    expect(E.bisectRight(1, low: 7, high: 2), 7);
    expect(E.bisectRight(2, low: 7, high: 2), 7);
    expect(E.bisectRight(3, low: 7, high: 2), 7);
    expect(E.bisectRight(4, low: 7, high: 2), 7);
    expect(E.bisectRight(5, low: 7, high: 2), 7);
    expect(E.bisectRight(6, low: 7, high: 2), 7);
    expect(E.bisectRight(7, low: 7, high: 2), 7);
    expect(E.bisectRight(8, low: 7, high: 2), 7);
  });

  test('list.bisectRight for A lo=8 hi=2', () {
    expect(A.bisectRight(-2, low: 8, high: 2), 8);
    expect(A.bisectRight(-1, low: 8, high: 2), 8);
    expect(A.bisectRight(0, low: 8, high: 2), 8);
    expect(A.bisectRight(1, low: 8, high: 2), 8);
    expect(A.bisectRight(2, low: 8, high: 2), 8);
    expect(A.bisectRight(3, low: 8, high: 2), 8);
    expect(A.bisectRight(4, low: 8, high: 2), 8);
    expect(A.bisectRight(5, low: 8, high: 2), 8);
    expect(A.bisectRight(6, low: 8, high: 2), 8);
    expect(A.bisectRight(7, low: 8, high: 2), 8);
    expect(A.bisectRight(8, low: 8, high: 2), 8);
  });

  test('list.bisectRight for B lo=8 hi=2', () {
    expect(B.bisectRight(-2, low: 8, high: 2), 8);
    expect(B.bisectRight(-1, low: 8, high: 2), 8);
    expect(B.bisectRight(0, low: 8, high: 2), 8);
    expect(B.bisectRight(1, low: 8, high: 2), 8);
    expect(B.bisectRight(2, low: 8, high: 2), 8);
    expect(B.bisectRight(3, low: 8, high: 2), 8);
    expect(B.bisectRight(4, low: 8, high: 2), 8);
    expect(B.bisectRight(5, low: 8, high: 2), 8);
    expect(B.bisectRight(6, low: 8, high: 2), 8);
    expect(B.bisectRight(7, low: 8, high: 2), 8);
    expect(B.bisectRight(8, low: 8, high: 2), 8);
  });

  test('list.bisectRight for C lo=8 hi=2', () {
    expect(C.bisectRight(-2, low: 8, high: 2), 8);
    expect(C.bisectRight(-1, low: 8, high: 2), 8);
    expect(C.bisectRight(0, low: 8, high: 2), 8);
    expect(C.bisectRight(1, low: 8, high: 2), 8);
    expect(C.bisectRight(2, low: 8, high: 2), 8);
    expect(C.bisectRight(3, low: 8, high: 2), 8);
    expect(C.bisectRight(4, low: 8, high: 2), 8);
    expect(C.bisectRight(5, low: 8, high: 2), 8);
    expect(C.bisectRight(6, low: 8, high: 2), 8);
    expect(C.bisectRight(7, low: 8, high: 2), 8);
    expect(C.bisectRight(8, low: 8, high: 2), 8);
  });

  test('list.bisectRight for D lo=8 hi=2', () {
    expect(D.bisectRight(-2, low: 8, high: 2), 8);
    expect(D.bisectRight(-1, low: 8, high: 2), 8);
    expect(D.bisectRight(0, low: 8, high: 2), 8);
    expect(D.bisectRight(1, low: 8, high: 2), 8);
    expect(D.bisectRight(2, low: 8, high: 2), 8);
    expect(D.bisectRight(3, low: 8, high: 2), 8);
    expect(D.bisectRight(4, low: 8, high: 2), 8);
    expect(D.bisectRight(5, low: 8, high: 2), 8);
    expect(D.bisectRight(6, low: 8, high: 2), 8);
    expect(D.bisectRight(7, low: 8, high: 2), 8);
    expect(D.bisectRight(8, low: 8, high: 2), 8);
  });

  test('list.bisectRight for E lo=8 hi=2', () {
    expect(E.bisectRight(-2, low: 8, high: 2), 8);
    expect(E.bisectRight(-1, low: 8, high: 2), 8);
    expect(E.bisectRight(0, low: 8, high: 2), 8);
    expect(E.bisectRight(1, low: 8, high: 2), 8);
    expect(E.bisectRight(2, low: 8, high: 2), 8);
    expect(E.bisectRight(3, low: 8, high: 2), 8);
    expect(E.bisectRight(4, low: 8, high: 2), 8);
    expect(E.bisectRight(5, low: 8, high: 2), 8);
    expect(E.bisectRight(6, low: 8, high: 2), 8);
    expect(E.bisectRight(7, low: 8, high: 2), 8);
    expect(E.bisectRight(8, low: 8, high: 2), 8);
  });

  test('list.bisectRight for A lo=9 hi=2', () {
    expect(A.bisectRight(-2, low: 9, high: 2), 9);
    expect(A.bisectRight(-1, low: 9, high: 2), 9);
    expect(A.bisectRight(0, low: 9, high: 2), 9);
    expect(A.bisectRight(1, low: 9, high: 2), 9);
    expect(A.bisectRight(2, low: 9, high: 2), 9);
    expect(A.bisectRight(3, low: 9, high: 2), 9);
    expect(A.bisectRight(4, low: 9, high: 2), 9);
    expect(A.bisectRight(5, low: 9, high: 2), 9);
    expect(A.bisectRight(6, low: 9, high: 2), 9);
    expect(A.bisectRight(7, low: 9, high: 2), 9);
    expect(A.bisectRight(8, low: 9, high: 2), 9);
  });

  test('list.bisectRight for B lo=9 hi=2', () {
    expect(B.bisectRight(-2, low: 9, high: 2), 9);
    expect(B.bisectRight(-1, low: 9, high: 2), 9);
    expect(B.bisectRight(0, low: 9, high: 2), 9);
    expect(B.bisectRight(1, low: 9, high: 2), 9);
    expect(B.bisectRight(2, low: 9, high: 2), 9);
    expect(B.bisectRight(3, low: 9, high: 2), 9);
    expect(B.bisectRight(4, low: 9, high: 2), 9);
    expect(B.bisectRight(5, low: 9, high: 2), 9);
    expect(B.bisectRight(6, low: 9, high: 2), 9);
    expect(B.bisectRight(7, low: 9, high: 2), 9);
    expect(B.bisectRight(8, low: 9, high: 2), 9);
  });

  test('list.bisectRight for C lo=9 hi=2', () {
    expect(C.bisectRight(-2, low: 9, high: 2), 9);
    expect(C.bisectRight(-1, low: 9, high: 2), 9);
    expect(C.bisectRight(0, low: 9, high: 2), 9);
    expect(C.bisectRight(1, low: 9, high: 2), 9);
    expect(C.bisectRight(2, low: 9, high: 2), 9);
    expect(C.bisectRight(3, low: 9, high: 2), 9);
    expect(C.bisectRight(4, low: 9, high: 2), 9);
    expect(C.bisectRight(5, low: 9, high: 2), 9);
    expect(C.bisectRight(6, low: 9, high: 2), 9);
    expect(C.bisectRight(7, low: 9, high: 2), 9);
    expect(C.bisectRight(8, low: 9, high: 2), 9);
  });

  test('list.bisectRight for D lo=9 hi=2', () {
    expect(D.bisectRight(-2, low: 9, high: 2), 9);
    expect(D.bisectRight(-1, low: 9, high: 2), 9);
    expect(D.bisectRight(0, low: 9, high: 2), 9);
    expect(D.bisectRight(1, low: 9, high: 2), 9);
    expect(D.bisectRight(2, low: 9, high: 2), 9);
    expect(D.bisectRight(3, low: 9, high: 2), 9);
    expect(D.bisectRight(4, low: 9, high: 2), 9);
    expect(D.bisectRight(5, low: 9, high: 2), 9);
    expect(D.bisectRight(6, low: 9, high: 2), 9);
    expect(D.bisectRight(7, low: 9, high: 2), 9);
    expect(D.bisectRight(8, low: 9, high: 2), 9);
  });

  test('list.bisectRight for E lo=9 hi=2', () {
    expect(E.bisectRight(-2, low: 9, high: 2), 9);
    expect(E.bisectRight(-1, low: 9, high: 2), 9);
    expect(E.bisectRight(0, low: 9, high: 2), 9);
    expect(E.bisectRight(1, low: 9, high: 2), 9);
    expect(E.bisectRight(2, low: 9, high: 2), 9);
    expect(E.bisectRight(3, low: 9, high: 2), 9);
    expect(E.bisectRight(4, low: 9, high: 2), 9);
    expect(E.bisectRight(5, low: 9, high: 2), 9);
    expect(E.bisectRight(6, low: 9, high: 2), 9);
    expect(E.bisectRight(7, low: 9, high: 2), 9);
    expect(E.bisectRight(8, low: 9, high: 2), 9);
  });

  test('list.bisectRight for A lo=None hi=3', () {
    expect(() => A.bisectRight(-2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, high: 3), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=3', () {
    expect(() => B.bisectRight(-2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, high: 3), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=3', () {
    expect(C.bisectRight(-2, high: 3), 0);
    expect(C.bisectRight(-1, high: 3), 0);
    expect(C.bisectRight(0, high: 3), 0);
    expect(C.bisectRight(1, high: 3), 0);
    expect(C.bisectRight(2, high: 3), 0);
    expect(C.bisectRight(3, high: 3), 0);
    expect(C.bisectRight(4, high: 3), 1);
    expect(() => C.bisectRight(5, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, high: 3), throwsRangeError);
  });

  test('list.bisectRight for D lo=None hi=3', () {
    expect(D.bisectRight(-2, high: 3), 0);
    expect(D.bisectRight(-1, high: 3), 0);
    expect(D.bisectRight(0, high: 3), 0);
    expect(D.bisectRight(1, high: 3), 0);
    expect(D.bisectRight(2, high: 3), 0);
    expect(D.bisectRight(3, high: 3), 1);
    expect(D.bisectRight(4, high: 3), 2);
    expect(D.bisectRight(5, high: 3), 3);
    expect(D.bisectRight(6, high: 3), 3);
    expect(D.bisectRight(7, high: 3), 3);
    expect(D.bisectRight(8, high: 3), 3);
  });

  test('list.bisectRight for E lo=None hi=3', () {
    expect(E.bisectRight(-2, high: 3), 0);
    expect(E.bisectRight(-1, high: 3), 0);
    expect(E.bisectRight(0, high: 3), 1);
    expect(E.bisectRight(1, high: 3), 2);
    expect(E.bisectRight(2, high: 3), 3);
    expect(E.bisectRight(3, high: 3), 3);
    expect(E.bisectRight(4, high: 3), 3);
    expect(E.bisectRight(5, high: 3), 3);
    expect(E.bisectRight(6, high: 3), 3);
    expect(E.bisectRight(7, high: 3), 3);
    expect(E.bisectRight(8, high: 3), 3);
  });

  test('list.bisectRight for A lo=0 hi=3', () {
    expect(() => A.bisectRight(-2, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 3), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=3', () {
    expect(() => B.bisectRight(-2, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 3), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=3', () {
    expect(C.bisectRight(-2, low: 0, high: 3), 0);
    expect(C.bisectRight(-1, low: 0, high: 3), 0);
    expect(C.bisectRight(0, low: 0, high: 3), 0);
    expect(C.bisectRight(1, low: 0, high: 3), 0);
    expect(C.bisectRight(2, low: 0, high: 3), 0);
    expect(C.bisectRight(3, low: 0, high: 3), 0);
    expect(C.bisectRight(4, low: 0, high: 3), 1);
    expect(() => C.bisectRight(5, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 3), throwsRangeError);
  });

  test('list.bisectRight for D lo=0 hi=3', () {
    expect(D.bisectRight(-2, low: 0, high: 3), 0);
    expect(D.bisectRight(-1, low: 0, high: 3), 0);
    expect(D.bisectRight(0, low: 0, high: 3), 0);
    expect(D.bisectRight(1, low: 0, high: 3), 0);
    expect(D.bisectRight(2, low: 0, high: 3), 0);
    expect(D.bisectRight(3, low: 0, high: 3), 1);
    expect(D.bisectRight(4, low: 0, high: 3), 2);
    expect(D.bisectRight(5, low: 0, high: 3), 3);
    expect(D.bisectRight(6, low: 0, high: 3), 3);
    expect(D.bisectRight(7, low: 0, high: 3), 3);
    expect(D.bisectRight(8, low: 0, high: 3), 3);
  });

  test('list.bisectRight for E lo=0 hi=3', () {
    expect(E.bisectRight(-2, low: 0, high: 3), 0);
    expect(E.bisectRight(-1, low: 0, high: 3), 0);
    expect(E.bisectRight(0, low: 0, high: 3), 1);
    expect(E.bisectRight(1, low: 0, high: 3), 2);
    expect(E.bisectRight(2, low: 0, high: 3), 3);
    expect(E.bisectRight(3, low: 0, high: 3), 3);
    expect(E.bisectRight(4, low: 0, high: 3), 3);
    expect(E.bisectRight(5, low: 0, high: 3), 3);
    expect(E.bisectRight(6, low: 0, high: 3), 3);
    expect(E.bisectRight(7, low: 0, high: 3), 3);
    expect(E.bisectRight(8, low: 0, high: 3), 3);
  });

  test('list.bisectRight for A lo=1 hi=3', () {
    expect(() => A.bisectRight(-2, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 3), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=3', () {
    expect(() => B.bisectRight(-2, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 3), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=3', () {
    expect(() => C.bisectRight(-2, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 3), throwsRangeError);
  });

  test('list.bisectRight for D lo=1 hi=3', () {
    expect(D.bisectRight(-2, low: 1, high: 3), 1);
    expect(D.bisectRight(-1, low: 1, high: 3), 1);
    expect(D.bisectRight(0, low: 1, high: 3), 1);
    expect(D.bisectRight(1, low: 1, high: 3), 1);
    expect(D.bisectRight(2, low: 1, high: 3), 1);
    expect(D.bisectRight(3, low: 1, high: 3), 1);
    expect(D.bisectRight(4, low: 1, high: 3), 2);
    expect(D.bisectRight(5, low: 1, high: 3), 3);
    expect(D.bisectRight(6, low: 1, high: 3), 3);
    expect(D.bisectRight(7, low: 1, high: 3), 3);
    expect(D.bisectRight(8, low: 1, high: 3), 3);
  });

  test('list.bisectRight for E lo=1 hi=3', () {
    expect(E.bisectRight(-2, low: 1, high: 3), 1);
    expect(E.bisectRight(-1, low: 1, high: 3), 1);
    expect(E.bisectRight(0, low: 1, high: 3), 1);
    expect(E.bisectRight(1, low: 1, high: 3), 2);
    expect(E.bisectRight(2, low: 1, high: 3), 3);
    expect(E.bisectRight(3, low: 1, high: 3), 3);
    expect(E.bisectRight(4, low: 1, high: 3), 3);
    expect(E.bisectRight(5, low: 1, high: 3), 3);
    expect(E.bisectRight(6, low: 1, high: 3), 3);
    expect(E.bisectRight(7, low: 1, high: 3), 3);
    expect(E.bisectRight(8, low: 1, high: 3), 3);
  });

  test('list.bisectRight for A lo=2 hi=3', () {
    expect(() => A.bisectRight(-2, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 3), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 3), throwsRangeError);
  });

  test('list.bisectRight for B lo=2 hi=3', () {
    expect(() => B.bisectRight(-2, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 3), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 3), throwsRangeError);
  });

  test('list.bisectRight for C lo=2 hi=3', () {
    expect(() => C.bisectRight(-2, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 3), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 3), throwsRangeError);
  });

  test('list.bisectRight for D lo=2 hi=3', () {
    expect(D.bisectRight(-2, low: 2, high: 3), 2);
    expect(D.bisectRight(-1, low: 2, high: 3), 2);
    expect(D.bisectRight(0, low: 2, high: 3), 2);
    expect(D.bisectRight(1, low: 2, high: 3), 2);
    expect(D.bisectRight(2, low: 2, high: 3), 2);
    expect(D.bisectRight(3, low: 2, high: 3), 2);
    expect(D.bisectRight(4, low: 2, high: 3), 2);
    expect(D.bisectRight(5, low: 2, high: 3), 3);
    expect(D.bisectRight(6, low: 2, high: 3), 3);
    expect(D.bisectRight(7, low: 2, high: 3), 3);
    expect(D.bisectRight(8, low: 2, high: 3), 3);
  });

  test('list.bisectRight for E lo=2 hi=3', () {
    expect(E.bisectRight(-2, low: 2, high: 3), 2);
    expect(E.bisectRight(-1, low: 2, high: 3), 2);
    expect(E.bisectRight(0, low: 2, high: 3), 2);
    expect(E.bisectRight(1, low: 2, high: 3), 2);
    expect(E.bisectRight(2, low: 2, high: 3), 3);
    expect(E.bisectRight(3, low: 2, high: 3), 3);
    expect(E.bisectRight(4, low: 2, high: 3), 3);
    expect(E.bisectRight(5, low: 2, high: 3), 3);
    expect(E.bisectRight(6, low: 2, high: 3), 3);
    expect(E.bisectRight(7, low: 2, high: 3), 3);
    expect(E.bisectRight(8, low: 2, high: 3), 3);
  });

  test('list.bisectRight for A lo=3 hi=3', () {
    expect(A.bisectRight(-2, low: 3, high: 3), 3);
    expect(A.bisectRight(-1, low: 3, high: 3), 3);
    expect(A.bisectRight(0, low: 3, high: 3), 3);
    expect(A.bisectRight(1, low: 3, high: 3), 3);
    expect(A.bisectRight(2, low: 3, high: 3), 3);
    expect(A.bisectRight(3, low: 3, high: 3), 3);
    expect(A.bisectRight(4, low: 3, high: 3), 3);
    expect(A.bisectRight(5, low: 3, high: 3), 3);
    expect(A.bisectRight(6, low: 3, high: 3), 3);
    expect(A.bisectRight(7, low: 3, high: 3), 3);
    expect(A.bisectRight(8, low: 3, high: 3), 3);
  });

  test('list.bisectRight for B lo=3 hi=3', () {
    expect(B.bisectRight(-2, low: 3, high: 3), 3);
    expect(B.bisectRight(-1, low: 3, high: 3), 3);
    expect(B.bisectRight(0, low: 3, high: 3), 3);
    expect(B.bisectRight(1, low: 3, high: 3), 3);
    expect(B.bisectRight(2, low: 3, high: 3), 3);
    expect(B.bisectRight(3, low: 3, high: 3), 3);
    expect(B.bisectRight(4, low: 3, high: 3), 3);
    expect(B.bisectRight(5, low: 3, high: 3), 3);
    expect(B.bisectRight(6, low: 3, high: 3), 3);
    expect(B.bisectRight(7, low: 3, high: 3), 3);
    expect(B.bisectRight(8, low: 3, high: 3), 3);
  });

  test('list.bisectRight for C lo=3 hi=3', () {
    expect(C.bisectRight(-2, low: 3, high: 3), 3);
    expect(C.bisectRight(-1, low: 3, high: 3), 3);
    expect(C.bisectRight(0, low: 3, high: 3), 3);
    expect(C.bisectRight(1, low: 3, high: 3), 3);
    expect(C.bisectRight(2, low: 3, high: 3), 3);
    expect(C.bisectRight(3, low: 3, high: 3), 3);
    expect(C.bisectRight(4, low: 3, high: 3), 3);
    expect(C.bisectRight(5, low: 3, high: 3), 3);
    expect(C.bisectRight(6, low: 3, high: 3), 3);
    expect(C.bisectRight(7, low: 3, high: 3), 3);
    expect(C.bisectRight(8, low: 3, high: 3), 3);
  });

  test('list.bisectRight for D lo=3 hi=3', () {
    expect(D.bisectRight(-2, low: 3, high: 3), 3);
    expect(D.bisectRight(-1, low: 3, high: 3), 3);
    expect(D.bisectRight(0, low: 3, high: 3), 3);
    expect(D.bisectRight(1, low: 3, high: 3), 3);
    expect(D.bisectRight(2, low: 3, high: 3), 3);
    expect(D.bisectRight(3, low: 3, high: 3), 3);
    expect(D.bisectRight(4, low: 3, high: 3), 3);
    expect(D.bisectRight(5, low: 3, high: 3), 3);
    expect(D.bisectRight(6, low: 3, high: 3), 3);
    expect(D.bisectRight(7, low: 3, high: 3), 3);
    expect(D.bisectRight(8, low: 3, high: 3), 3);
  });

  test('list.bisectRight for E lo=3 hi=3', () {
    expect(E.bisectRight(-2, low: 3, high: 3), 3);
    expect(E.bisectRight(-1, low: 3, high: 3), 3);
    expect(E.bisectRight(0, low: 3, high: 3), 3);
    expect(E.bisectRight(1, low: 3, high: 3), 3);
    expect(E.bisectRight(2, low: 3, high: 3), 3);
    expect(E.bisectRight(3, low: 3, high: 3), 3);
    expect(E.bisectRight(4, low: 3, high: 3), 3);
    expect(E.bisectRight(5, low: 3, high: 3), 3);
    expect(E.bisectRight(6, low: 3, high: 3), 3);
    expect(E.bisectRight(7, low: 3, high: 3), 3);
    expect(E.bisectRight(8, low: 3, high: 3), 3);
  });

  test('list.bisectRight for A lo=4 hi=3', () {
    expect(A.bisectRight(-2, low: 4, high: 3), 4);
    expect(A.bisectRight(-1, low: 4, high: 3), 4);
    expect(A.bisectRight(0, low: 4, high: 3), 4);
    expect(A.bisectRight(1, low: 4, high: 3), 4);
    expect(A.bisectRight(2, low: 4, high: 3), 4);
    expect(A.bisectRight(3, low: 4, high: 3), 4);
    expect(A.bisectRight(4, low: 4, high: 3), 4);
    expect(A.bisectRight(5, low: 4, high: 3), 4);
    expect(A.bisectRight(6, low: 4, high: 3), 4);
    expect(A.bisectRight(7, low: 4, high: 3), 4);
    expect(A.bisectRight(8, low: 4, high: 3), 4);
  });

  test('list.bisectRight for B lo=4 hi=3', () {
    expect(B.bisectRight(-2, low: 4, high: 3), 4);
    expect(B.bisectRight(-1, low: 4, high: 3), 4);
    expect(B.bisectRight(0, low: 4, high: 3), 4);
    expect(B.bisectRight(1, low: 4, high: 3), 4);
    expect(B.bisectRight(2, low: 4, high: 3), 4);
    expect(B.bisectRight(3, low: 4, high: 3), 4);
    expect(B.bisectRight(4, low: 4, high: 3), 4);
    expect(B.bisectRight(5, low: 4, high: 3), 4);
    expect(B.bisectRight(6, low: 4, high: 3), 4);
    expect(B.bisectRight(7, low: 4, high: 3), 4);
    expect(B.bisectRight(8, low: 4, high: 3), 4);
  });

  test('list.bisectRight for C lo=4 hi=3', () {
    expect(C.bisectRight(-2, low: 4, high: 3), 4);
    expect(C.bisectRight(-1, low: 4, high: 3), 4);
    expect(C.bisectRight(0, low: 4, high: 3), 4);
    expect(C.bisectRight(1, low: 4, high: 3), 4);
    expect(C.bisectRight(2, low: 4, high: 3), 4);
    expect(C.bisectRight(3, low: 4, high: 3), 4);
    expect(C.bisectRight(4, low: 4, high: 3), 4);
    expect(C.bisectRight(5, low: 4, high: 3), 4);
    expect(C.bisectRight(6, low: 4, high: 3), 4);
    expect(C.bisectRight(7, low: 4, high: 3), 4);
    expect(C.bisectRight(8, low: 4, high: 3), 4);
  });

  test('list.bisectRight for D lo=4 hi=3', () {
    expect(D.bisectRight(-2, low: 4, high: 3), 4);
    expect(D.bisectRight(-1, low: 4, high: 3), 4);
    expect(D.bisectRight(0, low: 4, high: 3), 4);
    expect(D.bisectRight(1, low: 4, high: 3), 4);
    expect(D.bisectRight(2, low: 4, high: 3), 4);
    expect(D.bisectRight(3, low: 4, high: 3), 4);
    expect(D.bisectRight(4, low: 4, high: 3), 4);
    expect(D.bisectRight(5, low: 4, high: 3), 4);
    expect(D.bisectRight(6, low: 4, high: 3), 4);
    expect(D.bisectRight(7, low: 4, high: 3), 4);
    expect(D.bisectRight(8, low: 4, high: 3), 4);
  });

  test('list.bisectRight for E lo=4 hi=3', () {
    expect(E.bisectRight(-2, low: 4, high: 3), 4);
    expect(E.bisectRight(-1, low: 4, high: 3), 4);
    expect(E.bisectRight(0, low: 4, high: 3), 4);
    expect(E.bisectRight(1, low: 4, high: 3), 4);
    expect(E.bisectRight(2, low: 4, high: 3), 4);
    expect(E.bisectRight(3, low: 4, high: 3), 4);
    expect(E.bisectRight(4, low: 4, high: 3), 4);
    expect(E.bisectRight(5, low: 4, high: 3), 4);
    expect(E.bisectRight(6, low: 4, high: 3), 4);
    expect(E.bisectRight(7, low: 4, high: 3), 4);
    expect(E.bisectRight(8, low: 4, high: 3), 4);
  });

  test('list.bisectRight for A lo=5 hi=3', () {
    expect(A.bisectRight(-2, low: 5, high: 3), 5);
    expect(A.bisectRight(-1, low: 5, high: 3), 5);
    expect(A.bisectRight(0, low: 5, high: 3), 5);
    expect(A.bisectRight(1, low: 5, high: 3), 5);
    expect(A.bisectRight(2, low: 5, high: 3), 5);
    expect(A.bisectRight(3, low: 5, high: 3), 5);
    expect(A.bisectRight(4, low: 5, high: 3), 5);
    expect(A.bisectRight(5, low: 5, high: 3), 5);
    expect(A.bisectRight(6, low: 5, high: 3), 5);
    expect(A.bisectRight(7, low: 5, high: 3), 5);
    expect(A.bisectRight(8, low: 5, high: 3), 5);
  });

  test('list.bisectRight for B lo=5 hi=3', () {
    expect(B.bisectRight(-2, low: 5, high: 3), 5);
    expect(B.bisectRight(-1, low: 5, high: 3), 5);
    expect(B.bisectRight(0, low: 5, high: 3), 5);
    expect(B.bisectRight(1, low: 5, high: 3), 5);
    expect(B.bisectRight(2, low: 5, high: 3), 5);
    expect(B.bisectRight(3, low: 5, high: 3), 5);
    expect(B.bisectRight(4, low: 5, high: 3), 5);
    expect(B.bisectRight(5, low: 5, high: 3), 5);
    expect(B.bisectRight(6, low: 5, high: 3), 5);
    expect(B.bisectRight(7, low: 5, high: 3), 5);
    expect(B.bisectRight(8, low: 5, high: 3), 5);
  });

  test('list.bisectRight for C lo=5 hi=3', () {
    expect(C.bisectRight(-2, low: 5, high: 3), 5);
    expect(C.bisectRight(-1, low: 5, high: 3), 5);
    expect(C.bisectRight(0, low: 5, high: 3), 5);
    expect(C.bisectRight(1, low: 5, high: 3), 5);
    expect(C.bisectRight(2, low: 5, high: 3), 5);
    expect(C.bisectRight(3, low: 5, high: 3), 5);
    expect(C.bisectRight(4, low: 5, high: 3), 5);
    expect(C.bisectRight(5, low: 5, high: 3), 5);
    expect(C.bisectRight(6, low: 5, high: 3), 5);
    expect(C.bisectRight(7, low: 5, high: 3), 5);
    expect(C.bisectRight(8, low: 5, high: 3), 5);
  });

  test('list.bisectRight for D lo=5 hi=3', () {
    expect(D.bisectRight(-2, low: 5, high: 3), 5);
    expect(D.bisectRight(-1, low: 5, high: 3), 5);
    expect(D.bisectRight(0, low: 5, high: 3), 5);
    expect(D.bisectRight(1, low: 5, high: 3), 5);
    expect(D.bisectRight(2, low: 5, high: 3), 5);
    expect(D.bisectRight(3, low: 5, high: 3), 5);
    expect(D.bisectRight(4, low: 5, high: 3), 5);
    expect(D.bisectRight(5, low: 5, high: 3), 5);
    expect(D.bisectRight(6, low: 5, high: 3), 5);
    expect(D.bisectRight(7, low: 5, high: 3), 5);
    expect(D.bisectRight(8, low: 5, high: 3), 5);
  });

  test('list.bisectRight for E lo=5 hi=3', () {
    expect(E.bisectRight(-2, low: 5, high: 3), 5);
    expect(E.bisectRight(-1, low: 5, high: 3), 5);
    expect(E.bisectRight(0, low: 5, high: 3), 5);
    expect(E.bisectRight(1, low: 5, high: 3), 5);
    expect(E.bisectRight(2, low: 5, high: 3), 5);
    expect(E.bisectRight(3, low: 5, high: 3), 5);
    expect(E.bisectRight(4, low: 5, high: 3), 5);
    expect(E.bisectRight(5, low: 5, high: 3), 5);
    expect(E.bisectRight(6, low: 5, high: 3), 5);
    expect(E.bisectRight(7, low: 5, high: 3), 5);
    expect(E.bisectRight(8, low: 5, high: 3), 5);
  });

  test('list.bisectRight for A lo=6 hi=3', () {
    expect(A.bisectRight(-2, low: 6, high: 3), 6);
    expect(A.bisectRight(-1, low: 6, high: 3), 6);
    expect(A.bisectRight(0, low: 6, high: 3), 6);
    expect(A.bisectRight(1, low: 6, high: 3), 6);
    expect(A.bisectRight(2, low: 6, high: 3), 6);
    expect(A.bisectRight(3, low: 6, high: 3), 6);
    expect(A.bisectRight(4, low: 6, high: 3), 6);
    expect(A.bisectRight(5, low: 6, high: 3), 6);
    expect(A.bisectRight(6, low: 6, high: 3), 6);
    expect(A.bisectRight(7, low: 6, high: 3), 6);
    expect(A.bisectRight(8, low: 6, high: 3), 6);
  });

  test('list.bisectRight for B lo=6 hi=3', () {
    expect(B.bisectRight(-2, low: 6, high: 3), 6);
    expect(B.bisectRight(-1, low: 6, high: 3), 6);
    expect(B.bisectRight(0, low: 6, high: 3), 6);
    expect(B.bisectRight(1, low: 6, high: 3), 6);
    expect(B.bisectRight(2, low: 6, high: 3), 6);
    expect(B.bisectRight(3, low: 6, high: 3), 6);
    expect(B.bisectRight(4, low: 6, high: 3), 6);
    expect(B.bisectRight(5, low: 6, high: 3), 6);
    expect(B.bisectRight(6, low: 6, high: 3), 6);
    expect(B.bisectRight(7, low: 6, high: 3), 6);
    expect(B.bisectRight(8, low: 6, high: 3), 6);
  });

  test('list.bisectRight for C lo=6 hi=3', () {
    expect(C.bisectRight(-2, low: 6, high: 3), 6);
    expect(C.bisectRight(-1, low: 6, high: 3), 6);
    expect(C.bisectRight(0, low: 6, high: 3), 6);
    expect(C.bisectRight(1, low: 6, high: 3), 6);
    expect(C.bisectRight(2, low: 6, high: 3), 6);
    expect(C.bisectRight(3, low: 6, high: 3), 6);
    expect(C.bisectRight(4, low: 6, high: 3), 6);
    expect(C.bisectRight(5, low: 6, high: 3), 6);
    expect(C.bisectRight(6, low: 6, high: 3), 6);
    expect(C.bisectRight(7, low: 6, high: 3), 6);
    expect(C.bisectRight(8, low: 6, high: 3), 6);
  });

  test('list.bisectRight for D lo=6 hi=3', () {
    expect(D.bisectRight(-2, low: 6, high: 3), 6);
    expect(D.bisectRight(-1, low: 6, high: 3), 6);
    expect(D.bisectRight(0, low: 6, high: 3), 6);
    expect(D.bisectRight(1, low: 6, high: 3), 6);
    expect(D.bisectRight(2, low: 6, high: 3), 6);
    expect(D.bisectRight(3, low: 6, high: 3), 6);
    expect(D.bisectRight(4, low: 6, high: 3), 6);
    expect(D.bisectRight(5, low: 6, high: 3), 6);
    expect(D.bisectRight(6, low: 6, high: 3), 6);
    expect(D.bisectRight(7, low: 6, high: 3), 6);
    expect(D.bisectRight(8, low: 6, high: 3), 6);
  });

  test('list.bisectRight for E lo=6 hi=3', () {
    expect(E.bisectRight(-2, low: 6, high: 3), 6);
    expect(E.bisectRight(-1, low: 6, high: 3), 6);
    expect(E.bisectRight(0, low: 6, high: 3), 6);
    expect(E.bisectRight(1, low: 6, high: 3), 6);
    expect(E.bisectRight(2, low: 6, high: 3), 6);
    expect(E.bisectRight(3, low: 6, high: 3), 6);
    expect(E.bisectRight(4, low: 6, high: 3), 6);
    expect(E.bisectRight(5, low: 6, high: 3), 6);
    expect(E.bisectRight(6, low: 6, high: 3), 6);
    expect(E.bisectRight(7, low: 6, high: 3), 6);
    expect(E.bisectRight(8, low: 6, high: 3), 6);
  });

  test('list.bisectRight for A lo=7 hi=3', () {
    expect(A.bisectRight(-2, low: 7, high: 3), 7);
    expect(A.bisectRight(-1, low: 7, high: 3), 7);
    expect(A.bisectRight(0, low: 7, high: 3), 7);
    expect(A.bisectRight(1, low: 7, high: 3), 7);
    expect(A.bisectRight(2, low: 7, high: 3), 7);
    expect(A.bisectRight(3, low: 7, high: 3), 7);
    expect(A.bisectRight(4, low: 7, high: 3), 7);
    expect(A.bisectRight(5, low: 7, high: 3), 7);
    expect(A.bisectRight(6, low: 7, high: 3), 7);
    expect(A.bisectRight(7, low: 7, high: 3), 7);
    expect(A.bisectRight(8, low: 7, high: 3), 7);
  });

  test('list.bisectRight for B lo=7 hi=3', () {
    expect(B.bisectRight(-2, low: 7, high: 3), 7);
    expect(B.bisectRight(-1, low: 7, high: 3), 7);
    expect(B.bisectRight(0, low: 7, high: 3), 7);
    expect(B.bisectRight(1, low: 7, high: 3), 7);
    expect(B.bisectRight(2, low: 7, high: 3), 7);
    expect(B.bisectRight(3, low: 7, high: 3), 7);
    expect(B.bisectRight(4, low: 7, high: 3), 7);
    expect(B.bisectRight(5, low: 7, high: 3), 7);
    expect(B.bisectRight(6, low: 7, high: 3), 7);
    expect(B.bisectRight(7, low: 7, high: 3), 7);
    expect(B.bisectRight(8, low: 7, high: 3), 7);
  });

  test('list.bisectRight for C lo=7 hi=3', () {
    expect(C.bisectRight(-2, low: 7, high: 3), 7);
    expect(C.bisectRight(-1, low: 7, high: 3), 7);
    expect(C.bisectRight(0, low: 7, high: 3), 7);
    expect(C.bisectRight(1, low: 7, high: 3), 7);
    expect(C.bisectRight(2, low: 7, high: 3), 7);
    expect(C.bisectRight(3, low: 7, high: 3), 7);
    expect(C.bisectRight(4, low: 7, high: 3), 7);
    expect(C.bisectRight(5, low: 7, high: 3), 7);
    expect(C.bisectRight(6, low: 7, high: 3), 7);
    expect(C.bisectRight(7, low: 7, high: 3), 7);
    expect(C.bisectRight(8, low: 7, high: 3), 7);
  });

  test('list.bisectRight for D lo=7 hi=3', () {
    expect(D.bisectRight(-2, low: 7, high: 3), 7);
    expect(D.bisectRight(-1, low: 7, high: 3), 7);
    expect(D.bisectRight(0, low: 7, high: 3), 7);
    expect(D.bisectRight(1, low: 7, high: 3), 7);
    expect(D.bisectRight(2, low: 7, high: 3), 7);
    expect(D.bisectRight(3, low: 7, high: 3), 7);
    expect(D.bisectRight(4, low: 7, high: 3), 7);
    expect(D.bisectRight(5, low: 7, high: 3), 7);
    expect(D.bisectRight(6, low: 7, high: 3), 7);
    expect(D.bisectRight(7, low: 7, high: 3), 7);
    expect(D.bisectRight(8, low: 7, high: 3), 7);
  });

  test('list.bisectRight for E lo=7 hi=3', () {
    expect(E.bisectRight(-2, low: 7, high: 3), 7);
    expect(E.bisectRight(-1, low: 7, high: 3), 7);
    expect(E.bisectRight(0, low: 7, high: 3), 7);
    expect(E.bisectRight(1, low: 7, high: 3), 7);
    expect(E.bisectRight(2, low: 7, high: 3), 7);
    expect(E.bisectRight(3, low: 7, high: 3), 7);
    expect(E.bisectRight(4, low: 7, high: 3), 7);
    expect(E.bisectRight(5, low: 7, high: 3), 7);
    expect(E.bisectRight(6, low: 7, high: 3), 7);
    expect(E.bisectRight(7, low: 7, high: 3), 7);
    expect(E.bisectRight(8, low: 7, high: 3), 7);
  });

  test('list.bisectRight for A lo=8 hi=3', () {
    expect(A.bisectRight(-2, low: 8, high: 3), 8);
    expect(A.bisectRight(-1, low: 8, high: 3), 8);
    expect(A.bisectRight(0, low: 8, high: 3), 8);
    expect(A.bisectRight(1, low: 8, high: 3), 8);
    expect(A.bisectRight(2, low: 8, high: 3), 8);
    expect(A.bisectRight(3, low: 8, high: 3), 8);
    expect(A.bisectRight(4, low: 8, high: 3), 8);
    expect(A.bisectRight(5, low: 8, high: 3), 8);
    expect(A.bisectRight(6, low: 8, high: 3), 8);
    expect(A.bisectRight(7, low: 8, high: 3), 8);
    expect(A.bisectRight(8, low: 8, high: 3), 8);
  });

  test('list.bisectRight for B lo=8 hi=3', () {
    expect(B.bisectRight(-2, low: 8, high: 3), 8);
    expect(B.bisectRight(-1, low: 8, high: 3), 8);
    expect(B.bisectRight(0, low: 8, high: 3), 8);
    expect(B.bisectRight(1, low: 8, high: 3), 8);
    expect(B.bisectRight(2, low: 8, high: 3), 8);
    expect(B.bisectRight(3, low: 8, high: 3), 8);
    expect(B.bisectRight(4, low: 8, high: 3), 8);
    expect(B.bisectRight(5, low: 8, high: 3), 8);
    expect(B.bisectRight(6, low: 8, high: 3), 8);
    expect(B.bisectRight(7, low: 8, high: 3), 8);
    expect(B.bisectRight(8, low: 8, high: 3), 8);
  });

  test('list.bisectRight for C lo=8 hi=3', () {
    expect(C.bisectRight(-2, low: 8, high: 3), 8);
    expect(C.bisectRight(-1, low: 8, high: 3), 8);
    expect(C.bisectRight(0, low: 8, high: 3), 8);
    expect(C.bisectRight(1, low: 8, high: 3), 8);
    expect(C.bisectRight(2, low: 8, high: 3), 8);
    expect(C.bisectRight(3, low: 8, high: 3), 8);
    expect(C.bisectRight(4, low: 8, high: 3), 8);
    expect(C.bisectRight(5, low: 8, high: 3), 8);
    expect(C.bisectRight(6, low: 8, high: 3), 8);
    expect(C.bisectRight(7, low: 8, high: 3), 8);
    expect(C.bisectRight(8, low: 8, high: 3), 8);
  });

  test('list.bisectRight for D lo=8 hi=3', () {
    expect(D.bisectRight(-2, low: 8, high: 3), 8);
    expect(D.bisectRight(-1, low: 8, high: 3), 8);
    expect(D.bisectRight(0, low: 8, high: 3), 8);
    expect(D.bisectRight(1, low: 8, high: 3), 8);
    expect(D.bisectRight(2, low: 8, high: 3), 8);
    expect(D.bisectRight(3, low: 8, high: 3), 8);
    expect(D.bisectRight(4, low: 8, high: 3), 8);
    expect(D.bisectRight(5, low: 8, high: 3), 8);
    expect(D.bisectRight(6, low: 8, high: 3), 8);
    expect(D.bisectRight(7, low: 8, high: 3), 8);
    expect(D.bisectRight(8, low: 8, high: 3), 8);
  });

  test('list.bisectRight for E lo=8 hi=3', () {
    expect(E.bisectRight(-2, low: 8, high: 3), 8);
    expect(E.bisectRight(-1, low: 8, high: 3), 8);
    expect(E.bisectRight(0, low: 8, high: 3), 8);
    expect(E.bisectRight(1, low: 8, high: 3), 8);
    expect(E.bisectRight(2, low: 8, high: 3), 8);
    expect(E.bisectRight(3, low: 8, high: 3), 8);
    expect(E.bisectRight(4, low: 8, high: 3), 8);
    expect(E.bisectRight(5, low: 8, high: 3), 8);
    expect(E.bisectRight(6, low: 8, high: 3), 8);
    expect(E.bisectRight(7, low: 8, high: 3), 8);
    expect(E.bisectRight(8, low: 8, high: 3), 8);
  });

  test('list.bisectRight for A lo=9 hi=3', () {
    expect(A.bisectRight(-2, low: 9, high: 3), 9);
    expect(A.bisectRight(-1, low: 9, high: 3), 9);
    expect(A.bisectRight(0, low: 9, high: 3), 9);
    expect(A.bisectRight(1, low: 9, high: 3), 9);
    expect(A.bisectRight(2, low: 9, high: 3), 9);
    expect(A.bisectRight(3, low: 9, high: 3), 9);
    expect(A.bisectRight(4, low: 9, high: 3), 9);
    expect(A.bisectRight(5, low: 9, high: 3), 9);
    expect(A.bisectRight(6, low: 9, high: 3), 9);
    expect(A.bisectRight(7, low: 9, high: 3), 9);
    expect(A.bisectRight(8, low: 9, high: 3), 9);
  });

  test('list.bisectRight for B lo=9 hi=3', () {
    expect(B.bisectRight(-2, low: 9, high: 3), 9);
    expect(B.bisectRight(-1, low: 9, high: 3), 9);
    expect(B.bisectRight(0, low: 9, high: 3), 9);
    expect(B.bisectRight(1, low: 9, high: 3), 9);
    expect(B.bisectRight(2, low: 9, high: 3), 9);
    expect(B.bisectRight(3, low: 9, high: 3), 9);
    expect(B.bisectRight(4, low: 9, high: 3), 9);
    expect(B.bisectRight(5, low: 9, high: 3), 9);
    expect(B.bisectRight(6, low: 9, high: 3), 9);
    expect(B.bisectRight(7, low: 9, high: 3), 9);
    expect(B.bisectRight(8, low: 9, high: 3), 9);
  });

  test('list.bisectRight for C lo=9 hi=3', () {
    expect(C.bisectRight(-2, low: 9, high: 3), 9);
    expect(C.bisectRight(-1, low: 9, high: 3), 9);
    expect(C.bisectRight(0, low: 9, high: 3), 9);
    expect(C.bisectRight(1, low: 9, high: 3), 9);
    expect(C.bisectRight(2, low: 9, high: 3), 9);
    expect(C.bisectRight(3, low: 9, high: 3), 9);
    expect(C.bisectRight(4, low: 9, high: 3), 9);
    expect(C.bisectRight(5, low: 9, high: 3), 9);
    expect(C.bisectRight(6, low: 9, high: 3), 9);
    expect(C.bisectRight(7, low: 9, high: 3), 9);
    expect(C.bisectRight(8, low: 9, high: 3), 9);
  });

  test('list.bisectRight for D lo=9 hi=3', () {
    expect(D.bisectRight(-2, low: 9, high: 3), 9);
    expect(D.bisectRight(-1, low: 9, high: 3), 9);
    expect(D.bisectRight(0, low: 9, high: 3), 9);
    expect(D.bisectRight(1, low: 9, high: 3), 9);
    expect(D.bisectRight(2, low: 9, high: 3), 9);
    expect(D.bisectRight(3, low: 9, high: 3), 9);
    expect(D.bisectRight(4, low: 9, high: 3), 9);
    expect(D.bisectRight(5, low: 9, high: 3), 9);
    expect(D.bisectRight(6, low: 9, high: 3), 9);
    expect(D.bisectRight(7, low: 9, high: 3), 9);
    expect(D.bisectRight(8, low: 9, high: 3), 9);
  });

  test('list.bisectRight for E lo=9 hi=3', () {
    expect(E.bisectRight(-2, low: 9, high: 3), 9);
    expect(E.bisectRight(-1, low: 9, high: 3), 9);
    expect(E.bisectRight(0, low: 9, high: 3), 9);
    expect(E.bisectRight(1, low: 9, high: 3), 9);
    expect(E.bisectRight(2, low: 9, high: 3), 9);
    expect(E.bisectRight(3, low: 9, high: 3), 9);
    expect(E.bisectRight(4, low: 9, high: 3), 9);
    expect(E.bisectRight(5, low: 9, high: 3), 9);
    expect(E.bisectRight(6, low: 9, high: 3), 9);
    expect(E.bisectRight(7, low: 9, high: 3), 9);
    expect(E.bisectRight(8, low: 9, high: 3), 9);
  });

  test('list.bisectRight for A lo=None hi=4', () {
    expect(() => A.bisectRight(-2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, high: 4), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=4', () {
    expect(() => B.bisectRight(-2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, high: 4), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=4', () {
    expect(() => C.bisectRight(-2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, high: 4), throwsRangeError);
  });

  test('list.bisectRight for D lo=None hi=4', () {
    expect(D.bisectRight(-2, high: 4), 0);
    expect(D.bisectRight(-1, high: 4), 0);
    expect(D.bisectRight(0, high: 4), 0);
    expect(D.bisectRight(1, high: 4), 0);
    expect(D.bisectRight(2, high: 4), 0);
    expect(D.bisectRight(3, high: 4), 1);
    expect(D.bisectRight(4, high: 4), 2);
    expect(() => D.bisectRight(5, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, high: 4), throwsRangeError);
  });

  test('list.bisectRight for E lo=None hi=4', () {
    expect(E.bisectRight(-2, high: 4), 0);
    expect(E.bisectRight(-1, high: 4), 0);
    expect(E.bisectRight(0, high: 4), 1);
    expect(E.bisectRight(1, high: 4), 2);
    expect(E.bisectRight(2, high: 4), 4);
    expect(E.bisectRight(3, high: 4), 4);
    expect(E.bisectRight(4, high: 4), 4);
    expect(E.bisectRight(5, high: 4), 4);
    expect(E.bisectRight(6, high: 4), 4);
    expect(E.bisectRight(7, high: 4), 4);
    expect(E.bisectRight(8, high: 4), 4);
  });

  test('list.bisectRight for A lo=0 hi=4', () {
    expect(() => A.bisectRight(-2, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=4', () {
    expect(() => B.bisectRight(-2, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=4', () {
    expect(() => C.bisectRight(-2, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectRight for D lo=0 hi=4', () {
    expect(D.bisectRight(-2, low: 0, high: 4), 0);
    expect(D.bisectRight(-1, low: 0, high: 4), 0);
    expect(D.bisectRight(0, low: 0, high: 4), 0);
    expect(D.bisectRight(1, low: 0, high: 4), 0);
    expect(D.bisectRight(2, low: 0, high: 4), 0);
    expect(D.bisectRight(3, low: 0, high: 4), 1);
    expect(D.bisectRight(4, low: 0, high: 4), 2);
    expect(() => D.bisectRight(5, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 4), throwsRangeError);
  });

  test('list.bisectRight for E lo=0 hi=4', () {
    expect(E.bisectRight(-2, low: 0, high: 4), 0);
    expect(E.bisectRight(-1, low: 0, high: 4), 0);
    expect(E.bisectRight(0, low: 0, high: 4), 1);
    expect(E.bisectRight(1, low: 0, high: 4), 2);
    expect(E.bisectRight(2, low: 0, high: 4), 4);
    expect(E.bisectRight(3, low: 0, high: 4), 4);
    expect(E.bisectRight(4, low: 0, high: 4), 4);
    expect(E.bisectRight(5, low: 0, high: 4), 4);
    expect(E.bisectRight(6, low: 0, high: 4), 4);
    expect(E.bisectRight(7, low: 0, high: 4), 4);
    expect(E.bisectRight(8, low: 0, high: 4), 4);
  });

  test('list.bisectRight for A lo=1 hi=4', () {
    expect(() => A.bisectRight(-2, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=4', () {
    expect(() => B.bisectRight(-2, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=4', () {
    expect(() => C.bisectRight(-2, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectRight for D lo=1 hi=4', () {
    expect(D.bisectRight(-2, low: 1, high: 4), 1);
    expect(D.bisectRight(-1, low: 1, high: 4), 1);
    expect(D.bisectRight(0, low: 1, high: 4), 1);
    expect(D.bisectRight(1, low: 1, high: 4), 1);
    expect(D.bisectRight(2, low: 1, high: 4), 1);
    expect(D.bisectRight(3, low: 1, high: 4), 1);
    expect(D.bisectRight(4, low: 1, high: 4), 2);
    expect(() => D.bisectRight(5, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 4), throwsRangeError);
  });

  test('list.bisectRight for E lo=1 hi=4', () {
    expect(E.bisectRight(-2, low: 1, high: 4), 1);
    expect(E.bisectRight(-1, low: 1, high: 4), 1);
    expect(E.bisectRight(0, low: 1, high: 4), 1);
    expect(E.bisectRight(1, low: 1, high: 4), 2);
    expect(E.bisectRight(2, low: 1, high: 4), 4);
    expect(E.bisectRight(3, low: 1, high: 4), 4);
    expect(E.bisectRight(4, low: 1, high: 4), 4);
    expect(E.bisectRight(5, low: 1, high: 4), 4);
    expect(E.bisectRight(6, low: 1, high: 4), 4);
    expect(E.bisectRight(7, low: 1, high: 4), 4);
    expect(E.bisectRight(8, low: 1, high: 4), 4);
  });

  test('list.bisectRight for A lo=2 hi=4', () {
    expect(() => A.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectRight for B lo=2 hi=4', () {
    expect(() => B.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectRight for C lo=2 hi=4', () {
    expect(() => C.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectRight for D lo=2 hi=4', () {
    expect(() => D.bisectRight(-2, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 4), throwsRangeError);
  });

  test('list.bisectRight for E lo=2 hi=4', () {
    expect(E.bisectRight(-2, low: 2, high: 4), 2);
    expect(E.bisectRight(-1, low: 2, high: 4), 2);
    expect(E.bisectRight(0, low: 2, high: 4), 2);
    expect(E.bisectRight(1, low: 2, high: 4), 2);
    expect(E.bisectRight(2, low: 2, high: 4), 4);
    expect(E.bisectRight(3, low: 2, high: 4), 4);
    expect(E.bisectRight(4, low: 2, high: 4), 4);
    expect(E.bisectRight(5, low: 2, high: 4), 4);
    expect(E.bisectRight(6, low: 2, high: 4), 4);
    expect(E.bisectRight(7, low: 2, high: 4), 4);
    expect(E.bisectRight(8, low: 2, high: 4), 4);
  });

  test('list.bisectRight for A lo=3 hi=4', () {
    expect(() => A.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectRight for B lo=3 hi=4', () {
    expect(() => B.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectRight for C lo=3 hi=4', () {
    expect(() => C.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectRight for D lo=3 hi=4', () {
    expect(() => D.bisectRight(-2, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 4), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 4), throwsRangeError);
  });

  test('list.bisectRight for E lo=3 hi=4', () {
    expect(E.bisectRight(-2, low: 3, high: 4), 3);
    expect(E.bisectRight(-1, low: 3, high: 4), 3);
    expect(E.bisectRight(0, low: 3, high: 4), 3);
    expect(E.bisectRight(1, low: 3, high: 4), 3);
    expect(E.bisectRight(2, low: 3, high: 4), 4);
    expect(E.bisectRight(3, low: 3, high: 4), 4);
    expect(E.bisectRight(4, low: 3, high: 4), 4);
    expect(E.bisectRight(5, low: 3, high: 4), 4);
    expect(E.bisectRight(6, low: 3, high: 4), 4);
    expect(E.bisectRight(7, low: 3, high: 4), 4);
    expect(E.bisectRight(8, low: 3, high: 4), 4);
  });

  test('list.bisectRight for A lo=4 hi=4', () {
    expect(A.bisectRight(-2, low: 4, high: 4), 4);
    expect(A.bisectRight(-1, low: 4, high: 4), 4);
    expect(A.bisectRight(0, low: 4, high: 4), 4);
    expect(A.bisectRight(1, low: 4, high: 4), 4);
    expect(A.bisectRight(2, low: 4, high: 4), 4);
    expect(A.bisectRight(3, low: 4, high: 4), 4);
    expect(A.bisectRight(4, low: 4, high: 4), 4);
    expect(A.bisectRight(5, low: 4, high: 4), 4);
    expect(A.bisectRight(6, low: 4, high: 4), 4);
    expect(A.bisectRight(7, low: 4, high: 4), 4);
    expect(A.bisectRight(8, low: 4, high: 4), 4);
  });

  test('list.bisectRight for B lo=4 hi=4', () {
    expect(B.bisectRight(-2, low: 4, high: 4), 4);
    expect(B.bisectRight(-1, low: 4, high: 4), 4);
    expect(B.bisectRight(0, low: 4, high: 4), 4);
    expect(B.bisectRight(1, low: 4, high: 4), 4);
    expect(B.bisectRight(2, low: 4, high: 4), 4);
    expect(B.bisectRight(3, low: 4, high: 4), 4);
    expect(B.bisectRight(4, low: 4, high: 4), 4);
    expect(B.bisectRight(5, low: 4, high: 4), 4);
    expect(B.bisectRight(6, low: 4, high: 4), 4);
    expect(B.bisectRight(7, low: 4, high: 4), 4);
    expect(B.bisectRight(8, low: 4, high: 4), 4);
  });

  test('list.bisectRight for C lo=4 hi=4', () {
    expect(C.bisectRight(-2, low: 4, high: 4), 4);
    expect(C.bisectRight(-1, low: 4, high: 4), 4);
    expect(C.bisectRight(0, low: 4, high: 4), 4);
    expect(C.bisectRight(1, low: 4, high: 4), 4);
    expect(C.bisectRight(2, low: 4, high: 4), 4);
    expect(C.bisectRight(3, low: 4, high: 4), 4);
    expect(C.bisectRight(4, low: 4, high: 4), 4);
    expect(C.bisectRight(5, low: 4, high: 4), 4);
    expect(C.bisectRight(6, low: 4, high: 4), 4);
    expect(C.bisectRight(7, low: 4, high: 4), 4);
    expect(C.bisectRight(8, low: 4, high: 4), 4);
  });

  test('list.bisectRight for D lo=4 hi=4', () {
    expect(D.bisectRight(-2, low: 4, high: 4), 4);
    expect(D.bisectRight(-1, low: 4, high: 4), 4);
    expect(D.bisectRight(0, low: 4, high: 4), 4);
    expect(D.bisectRight(1, low: 4, high: 4), 4);
    expect(D.bisectRight(2, low: 4, high: 4), 4);
    expect(D.bisectRight(3, low: 4, high: 4), 4);
    expect(D.bisectRight(4, low: 4, high: 4), 4);
    expect(D.bisectRight(5, low: 4, high: 4), 4);
    expect(D.bisectRight(6, low: 4, high: 4), 4);
    expect(D.bisectRight(7, low: 4, high: 4), 4);
    expect(D.bisectRight(8, low: 4, high: 4), 4);
  });

  test('list.bisectRight for E lo=4 hi=4', () {
    expect(E.bisectRight(-2, low: 4, high: 4), 4);
    expect(E.bisectRight(-1, low: 4, high: 4), 4);
    expect(E.bisectRight(0, low: 4, high: 4), 4);
    expect(E.bisectRight(1, low: 4, high: 4), 4);
    expect(E.bisectRight(2, low: 4, high: 4), 4);
    expect(E.bisectRight(3, low: 4, high: 4), 4);
    expect(E.bisectRight(4, low: 4, high: 4), 4);
    expect(E.bisectRight(5, low: 4, high: 4), 4);
    expect(E.bisectRight(6, low: 4, high: 4), 4);
    expect(E.bisectRight(7, low: 4, high: 4), 4);
    expect(E.bisectRight(8, low: 4, high: 4), 4);
  });

  test('list.bisectRight for A lo=5 hi=4', () {
    expect(A.bisectRight(-2, low: 5, high: 4), 5);
    expect(A.bisectRight(-1, low: 5, high: 4), 5);
    expect(A.bisectRight(0, low: 5, high: 4), 5);
    expect(A.bisectRight(1, low: 5, high: 4), 5);
    expect(A.bisectRight(2, low: 5, high: 4), 5);
    expect(A.bisectRight(3, low: 5, high: 4), 5);
    expect(A.bisectRight(4, low: 5, high: 4), 5);
    expect(A.bisectRight(5, low: 5, high: 4), 5);
    expect(A.bisectRight(6, low: 5, high: 4), 5);
    expect(A.bisectRight(7, low: 5, high: 4), 5);
    expect(A.bisectRight(8, low: 5, high: 4), 5);
  });

  test('list.bisectRight for B lo=5 hi=4', () {
    expect(B.bisectRight(-2, low: 5, high: 4), 5);
    expect(B.bisectRight(-1, low: 5, high: 4), 5);
    expect(B.bisectRight(0, low: 5, high: 4), 5);
    expect(B.bisectRight(1, low: 5, high: 4), 5);
    expect(B.bisectRight(2, low: 5, high: 4), 5);
    expect(B.bisectRight(3, low: 5, high: 4), 5);
    expect(B.bisectRight(4, low: 5, high: 4), 5);
    expect(B.bisectRight(5, low: 5, high: 4), 5);
    expect(B.bisectRight(6, low: 5, high: 4), 5);
    expect(B.bisectRight(7, low: 5, high: 4), 5);
    expect(B.bisectRight(8, low: 5, high: 4), 5);
  });

  test('list.bisectRight for C lo=5 hi=4', () {
    expect(C.bisectRight(-2, low: 5, high: 4), 5);
    expect(C.bisectRight(-1, low: 5, high: 4), 5);
    expect(C.bisectRight(0, low: 5, high: 4), 5);
    expect(C.bisectRight(1, low: 5, high: 4), 5);
    expect(C.bisectRight(2, low: 5, high: 4), 5);
    expect(C.bisectRight(3, low: 5, high: 4), 5);
    expect(C.bisectRight(4, low: 5, high: 4), 5);
    expect(C.bisectRight(5, low: 5, high: 4), 5);
    expect(C.bisectRight(6, low: 5, high: 4), 5);
    expect(C.bisectRight(7, low: 5, high: 4), 5);
    expect(C.bisectRight(8, low: 5, high: 4), 5);
  });

  test('list.bisectRight for D lo=5 hi=4', () {
    expect(D.bisectRight(-2, low: 5, high: 4), 5);
    expect(D.bisectRight(-1, low: 5, high: 4), 5);
    expect(D.bisectRight(0, low: 5, high: 4), 5);
    expect(D.bisectRight(1, low: 5, high: 4), 5);
    expect(D.bisectRight(2, low: 5, high: 4), 5);
    expect(D.bisectRight(3, low: 5, high: 4), 5);
    expect(D.bisectRight(4, low: 5, high: 4), 5);
    expect(D.bisectRight(5, low: 5, high: 4), 5);
    expect(D.bisectRight(6, low: 5, high: 4), 5);
    expect(D.bisectRight(7, low: 5, high: 4), 5);
    expect(D.bisectRight(8, low: 5, high: 4), 5);
  });

  test('list.bisectRight for E lo=5 hi=4', () {
    expect(E.bisectRight(-2, low: 5, high: 4), 5);
    expect(E.bisectRight(-1, low: 5, high: 4), 5);
    expect(E.bisectRight(0, low: 5, high: 4), 5);
    expect(E.bisectRight(1, low: 5, high: 4), 5);
    expect(E.bisectRight(2, low: 5, high: 4), 5);
    expect(E.bisectRight(3, low: 5, high: 4), 5);
    expect(E.bisectRight(4, low: 5, high: 4), 5);
    expect(E.bisectRight(5, low: 5, high: 4), 5);
    expect(E.bisectRight(6, low: 5, high: 4), 5);
    expect(E.bisectRight(7, low: 5, high: 4), 5);
    expect(E.bisectRight(8, low: 5, high: 4), 5);
  });

  test('list.bisectRight for A lo=6 hi=4', () {
    expect(A.bisectRight(-2, low: 6, high: 4), 6);
    expect(A.bisectRight(-1, low: 6, high: 4), 6);
    expect(A.bisectRight(0, low: 6, high: 4), 6);
    expect(A.bisectRight(1, low: 6, high: 4), 6);
    expect(A.bisectRight(2, low: 6, high: 4), 6);
    expect(A.bisectRight(3, low: 6, high: 4), 6);
    expect(A.bisectRight(4, low: 6, high: 4), 6);
    expect(A.bisectRight(5, low: 6, high: 4), 6);
    expect(A.bisectRight(6, low: 6, high: 4), 6);
    expect(A.bisectRight(7, low: 6, high: 4), 6);
    expect(A.bisectRight(8, low: 6, high: 4), 6);
  });

  test('list.bisectRight for B lo=6 hi=4', () {
    expect(B.bisectRight(-2, low: 6, high: 4), 6);
    expect(B.bisectRight(-1, low: 6, high: 4), 6);
    expect(B.bisectRight(0, low: 6, high: 4), 6);
    expect(B.bisectRight(1, low: 6, high: 4), 6);
    expect(B.bisectRight(2, low: 6, high: 4), 6);
    expect(B.bisectRight(3, low: 6, high: 4), 6);
    expect(B.bisectRight(4, low: 6, high: 4), 6);
    expect(B.bisectRight(5, low: 6, high: 4), 6);
    expect(B.bisectRight(6, low: 6, high: 4), 6);
    expect(B.bisectRight(7, low: 6, high: 4), 6);
    expect(B.bisectRight(8, low: 6, high: 4), 6);
  });

  test('list.bisectRight for C lo=6 hi=4', () {
    expect(C.bisectRight(-2, low: 6, high: 4), 6);
    expect(C.bisectRight(-1, low: 6, high: 4), 6);
    expect(C.bisectRight(0, low: 6, high: 4), 6);
    expect(C.bisectRight(1, low: 6, high: 4), 6);
    expect(C.bisectRight(2, low: 6, high: 4), 6);
    expect(C.bisectRight(3, low: 6, high: 4), 6);
    expect(C.bisectRight(4, low: 6, high: 4), 6);
    expect(C.bisectRight(5, low: 6, high: 4), 6);
    expect(C.bisectRight(6, low: 6, high: 4), 6);
    expect(C.bisectRight(7, low: 6, high: 4), 6);
    expect(C.bisectRight(8, low: 6, high: 4), 6);
  });

  test('list.bisectRight for D lo=6 hi=4', () {
    expect(D.bisectRight(-2, low: 6, high: 4), 6);
    expect(D.bisectRight(-1, low: 6, high: 4), 6);
    expect(D.bisectRight(0, low: 6, high: 4), 6);
    expect(D.bisectRight(1, low: 6, high: 4), 6);
    expect(D.bisectRight(2, low: 6, high: 4), 6);
    expect(D.bisectRight(3, low: 6, high: 4), 6);
    expect(D.bisectRight(4, low: 6, high: 4), 6);
    expect(D.bisectRight(5, low: 6, high: 4), 6);
    expect(D.bisectRight(6, low: 6, high: 4), 6);
    expect(D.bisectRight(7, low: 6, high: 4), 6);
    expect(D.bisectRight(8, low: 6, high: 4), 6);
  });

  test('list.bisectRight for E lo=6 hi=4', () {
    expect(E.bisectRight(-2, low: 6, high: 4), 6);
    expect(E.bisectRight(-1, low: 6, high: 4), 6);
    expect(E.bisectRight(0, low: 6, high: 4), 6);
    expect(E.bisectRight(1, low: 6, high: 4), 6);
    expect(E.bisectRight(2, low: 6, high: 4), 6);
    expect(E.bisectRight(3, low: 6, high: 4), 6);
    expect(E.bisectRight(4, low: 6, high: 4), 6);
    expect(E.bisectRight(5, low: 6, high: 4), 6);
    expect(E.bisectRight(6, low: 6, high: 4), 6);
    expect(E.bisectRight(7, low: 6, high: 4), 6);
    expect(E.bisectRight(8, low: 6, high: 4), 6);
  });

  test('list.bisectRight for A lo=7 hi=4', () {
    expect(A.bisectRight(-2, low: 7, high: 4), 7);
    expect(A.bisectRight(-1, low: 7, high: 4), 7);
    expect(A.bisectRight(0, low: 7, high: 4), 7);
    expect(A.bisectRight(1, low: 7, high: 4), 7);
    expect(A.bisectRight(2, low: 7, high: 4), 7);
    expect(A.bisectRight(3, low: 7, high: 4), 7);
    expect(A.bisectRight(4, low: 7, high: 4), 7);
    expect(A.bisectRight(5, low: 7, high: 4), 7);
    expect(A.bisectRight(6, low: 7, high: 4), 7);
    expect(A.bisectRight(7, low: 7, high: 4), 7);
    expect(A.bisectRight(8, low: 7, high: 4), 7);
  });

  test('list.bisectRight for B lo=7 hi=4', () {
    expect(B.bisectRight(-2, low: 7, high: 4), 7);
    expect(B.bisectRight(-1, low: 7, high: 4), 7);
    expect(B.bisectRight(0, low: 7, high: 4), 7);
    expect(B.bisectRight(1, low: 7, high: 4), 7);
    expect(B.bisectRight(2, low: 7, high: 4), 7);
    expect(B.bisectRight(3, low: 7, high: 4), 7);
    expect(B.bisectRight(4, low: 7, high: 4), 7);
    expect(B.bisectRight(5, low: 7, high: 4), 7);
    expect(B.bisectRight(6, low: 7, high: 4), 7);
    expect(B.bisectRight(7, low: 7, high: 4), 7);
    expect(B.bisectRight(8, low: 7, high: 4), 7);
  });

  test('list.bisectRight for C lo=7 hi=4', () {
    expect(C.bisectRight(-2, low: 7, high: 4), 7);
    expect(C.bisectRight(-1, low: 7, high: 4), 7);
    expect(C.bisectRight(0, low: 7, high: 4), 7);
    expect(C.bisectRight(1, low: 7, high: 4), 7);
    expect(C.bisectRight(2, low: 7, high: 4), 7);
    expect(C.bisectRight(3, low: 7, high: 4), 7);
    expect(C.bisectRight(4, low: 7, high: 4), 7);
    expect(C.bisectRight(5, low: 7, high: 4), 7);
    expect(C.bisectRight(6, low: 7, high: 4), 7);
    expect(C.bisectRight(7, low: 7, high: 4), 7);
    expect(C.bisectRight(8, low: 7, high: 4), 7);
  });

  test('list.bisectRight for D lo=7 hi=4', () {
    expect(D.bisectRight(-2, low: 7, high: 4), 7);
    expect(D.bisectRight(-1, low: 7, high: 4), 7);
    expect(D.bisectRight(0, low: 7, high: 4), 7);
    expect(D.bisectRight(1, low: 7, high: 4), 7);
    expect(D.bisectRight(2, low: 7, high: 4), 7);
    expect(D.bisectRight(3, low: 7, high: 4), 7);
    expect(D.bisectRight(4, low: 7, high: 4), 7);
    expect(D.bisectRight(5, low: 7, high: 4), 7);
    expect(D.bisectRight(6, low: 7, high: 4), 7);
    expect(D.bisectRight(7, low: 7, high: 4), 7);
    expect(D.bisectRight(8, low: 7, high: 4), 7);
  });

  test('list.bisectRight for E lo=7 hi=4', () {
    expect(E.bisectRight(-2, low: 7, high: 4), 7);
    expect(E.bisectRight(-1, low: 7, high: 4), 7);
    expect(E.bisectRight(0, low: 7, high: 4), 7);
    expect(E.bisectRight(1, low: 7, high: 4), 7);
    expect(E.bisectRight(2, low: 7, high: 4), 7);
    expect(E.bisectRight(3, low: 7, high: 4), 7);
    expect(E.bisectRight(4, low: 7, high: 4), 7);
    expect(E.bisectRight(5, low: 7, high: 4), 7);
    expect(E.bisectRight(6, low: 7, high: 4), 7);
    expect(E.bisectRight(7, low: 7, high: 4), 7);
    expect(E.bisectRight(8, low: 7, high: 4), 7);
  });

  test('list.bisectRight for A lo=8 hi=4', () {
    expect(A.bisectRight(-2, low: 8, high: 4), 8);
    expect(A.bisectRight(-1, low: 8, high: 4), 8);
    expect(A.bisectRight(0, low: 8, high: 4), 8);
    expect(A.bisectRight(1, low: 8, high: 4), 8);
    expect(A.bisectRight(2, low: 8, high: 4), 8);
    expect(A.bisectRight(3, low: 8, high: 4), 8);
    expect(A.bisectRight(4, low: 8, high: 4), 8);
    expect(A.bisectRight(5, low: 8, high: 4), 8);
    expect(A.bisectRight(6, low: 8, high: 4), 8);
    expect(A.bisectRight(7, low: 8, high: 4), 8);
    expect(A.bisectRight(8, low: 8, high: 4), 8);
  });

  test('list.bisectRight for B lo=8 hi=4', () {
    expect(B.bisectRight(-2, low: 8, high: 4), 8);
    expect(B.bisectRight(-1, low: 8, high: 4), 8);
    expect(B.bisectRight(0, low: 8, high: 4), 8);
    expect(B.bisectRight(1, low: 8, high: 4), 8);
    expect(B.bisectRight(2, low: 8, high: 4), 8);
    expect(B.bisectRight(3, low: 8, high: 4), 8);
    expect(B.bisectRight(4, low: 8, high: 4), 8);
    expect(B.bisectRight(5, low: 8, high: 4), 8);
    expect(B.bisectRight(6, low: 8, high: 4), 8);
    expect(B.bisectRight(7, low: 8, high: 4), 8);
    expect(B.bisectRight(8, low: 8, high: 4), 8);
  });

  test('list.bisectRight for C lo=8 hi=4', () {
    expect(C.bisectRight(-2, low: 8, high: 4), 8);
    expect(C.bisectRight(-1, low: 8, high: 4), 8);
    expect(C.bisectRight(0, low: 8, high: 4), 8);
    expect(C.bisectRight(1, low: 8, high: 4), 8);
    expect(C.bisectRight(2, low: 8, high: 4), 8);
    expect(C.bisectRight(3, low: 8, high: 4), 8);
    expect(C.bisectRight(4, low: 8, high: 4), 8);
    expect(C.bisectRight(5, low: 8, high: 4), 8);
    expect(C.bisectRight(6, low: 8, high: 4), 8);
    expect(C.bisectRight(7, low: 8, high: 4), 8);
    expect(C.bisectRight(8, low: 8, high: 4), 8);
  });

  test('list.bisectRight for D lo=8 hi=4', () {
    expect(D.bisectRight(-2, low: 8, high: 4), 8);
    expect(D.bisectRight(-1, low: 8, high: 4), 8);
    expect(D.bisectRight(0, low: 8, high: 4), 8);
    expect(D.bisectRight(1, low: 8, high: 4), 8);
    expect(D.bisectRight(2, low: 8, high: 4), 8);
    expect(D.bisectRight(3, low: 8, high: 4), 8);
    expect(D.bisectRight(4, low: 8, high: 4), 8);
    expect(D.bisectRight(5, low: 8, high: 4), 8);
    expect(D.bisectRight(6, low: 8, high: 4), 8);
    expect(D.bisectRight(7, low: 8, high: 4), 8);
    expect(D.bisectRight(8, low: 8, high: 4), 8);
  });

  test('list.bisectRight for E lo=8 hi=4', () {
    expect(E.bisectRight(-2, low: 8, high: 4), 8);
    expect(E.bisectRight(-1, low: 8, high: 4), 8);
    expect(E.bisectRight(0, low: 8, high: 4), 8);
    expect(E.bisectRight(1, low: 8, high: 4), 8);
    expect(E.bisectRight(2, low: 8, high: 4), 8);
    expect(E.bisectRight(3, low: 8, high: 4), 8);
    expect(E.bisectRight(4, low: 8, high: 4), 8);
    expect(E.bisectRight(5, low: 8, high: 4), 8);
    expect(E.bisectRight(6, low: 8, high: 4), 8);
    expect(E.bisectRight(7, low: 8, high: 4), 8);
    expect(E.bisectRight(8, low: 8, high: 4), 8);
  });

  test('list.bisectRight for A lo=9 hi=4', () {
    expect(A.bisectRight(-2, low: 9, high: 4), 9);
    expect(A.bisectRight(-1, low: 9, high: 4), 9);
    expect(A.bisectRight(0, low: 9, high: 4), 9);
    expect(A.bisectRight(1, low: 9, high: 4), 9);
    expect(A.bisectRight(2, low: 9, high: 4), 9);
    expect(A.bisectRight(3, low: 9, high: 4), 9);
    expect(A.bisectRight(4, low: 9, high: 4), 9);
    expect(A.bisectRight(5, low: 9, high: 4), 9);
    expect(A.bisectRight(6, low: 9, high: 4), 9);
    expect(A.bisectRight(7, low: 9, high: 4), 9);
    expect(A.bisectRight(8, low: 9, high: 4), 9);
  });

  test('list.bisectRight for B lo=9 hi=4', () {
    expect(B.bisectRight(-2, low: 9, high: 4), 9);
    expect(B.bisectRight(-1, low: 9, high: 4), 9);
    expect(B.bisectRight(0, low: 9, high: 4), 9);
    expect(B.bisectRight(1, low: 9, high: 4), 9);
    expect(B.bisectRight(2, low: 9, high: 4), 9);
    expect(B.bisectRight(3, low: 9, high: 4), 9);
    expect(B.bisectRight(4, low: 9, high: 4), 9);
    expect(B.bisectRight(5, low: 9, high: 4), 9);
    expect(B.bisectRight(6, low: 9, high: 4), 9);
    expect(B.bisectRight(7, low: 9, high: 4), 9);
    expect(B.bisectRight(8, low: 9, high: 4), 9);
  });

  test('list.bisectRight for C lo=9 hi=4', () {
    expect(C.bisectRight(-2, low: 9, high: 4), 9);
    expect(C.bisectRight(-1, low: 9, high: 4), 9);
    expect(C.bisectRight(0, low: 9, high: 4), 9);
    expect(C.bisectRight(1, low: 9, high: 4), 9);
    expect(C.bisectRight(2, low: 9, high: 4), 9);
    expect(C.bisectRight(3, low: 9, high: 4), 9);
    expect(C.bisectRight(4, low: 9, high: 4), 9);
    expect(C.bisectRight(5, low: 9, high: 4), 9);
    expect(C.bisectRight(6, low: 9, high: 4), 9);
    expect(C.bisectRight(7, low: 9, high: 4), 9);
    expect(C.bisectRight(8, low: 9, high: 4), 9);
  });

  test('list.bisectRight for D lo=9 hi=4', () {
    expect(D.bisectRight(-2, low: 9, high: 4), 9);
    expect(D.bisectRight(-1, low: 9, high: 4), 9);
    expect(D.bisectRight(0, low: 9, high: 4), 9);
    expect(D.bisectRight(1, low: 9, high: 4), 9);
    expect(D.bisectRight(2, low: 9, high: 4), 9);
    expect(D.bisectRight(3, low: 9, high: 4), 9);
    expect(D.bisectRight(4, low: 9, high: 4), 9);
    expect(D.bisectRight(5, low: 9, high: 4), 9);
    expect(D.bisectRight(6, low: 9, high: 4), 9);
    expect(D.bisectRight(7, low: 9, high: 4), 9);
    expect(D.bisectRight(8, low: 9, high: 4), 9);
  });

  test('list.bisectRight for E lo=9 hi=4', () {
    expect(E.bisectRight(-2, low: 9, high: 4), 9);
    expect(E.bisectRight(-1, low: 9, high: 4), 9);
    expect(E.bisectRight(0, low: 9, high: 4), 9);
    expect(E.bisectRight(1, low: 9, high: 4), 9);
    expect(E.bisectRight(2, low: 9, high: 4), 9);
    expect(E.bisectRight(3, low: 9, high: 4), 9);
    expect(E.bisectRight(4, low: 9, high: 4), 9);
    expect(E.bisectRight(5, low: 9, high: 4), 9);
    expect(E.bisectRight(6, low: 9, high: 4), 9);
    expect(E.bisectRight(7, low: 9, high: 4), 9);
    expect(E.bisectRight(8, low: 9, high: 4), 9);
  });

  test('list.bisectRight for A lo=None hi=5', () {
    expect(() => A.bisectRight(-2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, high: 5), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=5', () {
    expect(() => B.bisectRight(-2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, high: 5), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=5', () {
    expect(() => C.bisectRight(-2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, high: 5), throwsRangeError);
  });

  test('list.bisectRight for D lo=None hi=5', () {
    expect(D.bisectRight(-2, high: 5), 0);
    expect(D.bisectRight(-1, high: 5), 0);
    expect(D.bisectRight(0, high: 5), 0);
    expect(D.bisectRight(1, high: 5), 0);
    expect(D.bisectRight(2, high: 5), 0);
    expect(D.bisectRight(3, high: 5), 1);
    expect(D.bisectRight(4, high: 5), 2);
    expect(() => D.bisectRight(5, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, high: 5), throwsRangeError);
  });

  test('list.bisectRight for E lo=None hi=5', () {
    expect(E.bisectRight(-2, high: 5), 0);
    expect(E.bisectRight(-1, high: 5), 0);
    expect(E.bisectRight(0, high: 5), 1);
    expect(E.bisectRight(1, high: 5), 2);
    expect(E.bisectRight(2, high: 5), 5);
    expect(E.bisectRight(3, high: 5), 5);
    expect(E.bisectRight(4, high: 5), 5);
    expect(E.bisectRight(5, high: 5), 5);
    expect(E.bisectRight(6, high: 5), 5);
    expect(E.bisectRight(7, high: 5), 5);
    expect(E.bisectRight(8, high: 5), 5);
  });

  test('list.bisectRight for A lo=0 hi=5', () {
    expect(() => A.bisectRight(-2, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=5', () {
    expect(() => B.bisectRight(-2, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=5', () {
    expect(() => C.bisectRight(-2, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectRight for D lo=0 hi=5', () {
    expect(D.bisectRight(-2, low: 0, high: 5), 0);
    expect(D.bisectRight(-1, low: 0, high: 5), 0);
    expect(D.bisectRight(0, low: 0, high: 5), 0);
    expect(D.bisectRight(1, low: 0, high: 5), 0);
    expect(D.bisectRight(2, low: 0, high: 5), 0);
    expect(D.bisectRight(3, low: 0, high: 5), 1);
    expect(D.bisectRight(4, low: 0, high: 5), 2);
    expect(() => D.bisectRight(5, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 5), throwsRangeError);
  });

  test('list.bisectRight for E lo=0 hi=5', () {
    expect(E.bisectRight(-2, low: 0, high: 5), 0);
    expect(E.bisectRight(-1, low: 0, high: 5), 0);
    expect(E.bisectRight(0, low: 0, high: 5), 1);
    expect(E.bisectRight(1, low: 0, high: 5), 2);
    expect(E.bisectRight(2, low: 0, high: 5), 5);
    expect(E.bisectRight(3, low: 0, high: 5), 5);
    expect(E.bisectRight(4, low: 0, high: 5), 5);
    expect(E.bisectRight(5, low: 0, high: 5), 5);
    expect(E.bisectRight(6, low: 0, high: 5), 5);
    expect(E.bisectRight(7, low: 0, high: 5), 5);
    expect(E.bisectRight(8, low: 0, high: 5), 5);
  });

  test('list.bisectRight for A lo=1 hi=5', () {
    expect(() => A.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=5', () {
    expect(() => B.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=5', () {
    expect(() => C.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectRight for D lo=1 hi=5', () {
    expect(() => D.bisectRight(-2, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 5), throwsRangeError);
  });

  test('list.bisectRight for E lo=1 hi=5', () {
    expect(E.bisectRight(-2, low: 1, high: 5), 1);
    expect(E.bisectRight(-1, low: 1, high: 5), 1);
    expect(E.bisectRight(0, low: 1, high: 5), 1);
    expect(E.bisectRight(1, low: 1, high: 5), 2);
    expect(E.bisectRight(2, low: 1, high: 5), 5);
    expect(E.bisectRight(3, low: 1, high: 5), 5);
    expect(E.bisectRight(4, low: 1, high: 5), 5);
    expect(E.bisectRight(5, low: 1, high: 5), 5);
    expect(E.bisectRight(6, low: 1, high: 5), 5);
    expect(E.bisectRight(7, low: 1, high: 5), 5);
    expect(E.bisectRight(8, low: 1, high: 5), 5);
  });

  test('list.bisectRight for A lo=2 hi=5', () {
    expect(() => A.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectRight for B lo=2 hi=5', () {
    expect(() => B.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectRight for C lo=2 hi=5', () {
    expect(() => C.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectRight for D lo=2 hi=5', () {
    expect(() => D.bisectRight(-2, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 5), throwsRangeError);
  });

  test('list.bisectRight for E lo=2 hi=5', () {
    expect(E.bisectRight(-2, low: 2, high: 5), 2);
    expect(E.bisectRight(-1, low: 2, high: 5), 2);
    expect(E.bisectRight(0, low: 2, high: 5), 2);
    expect(E.bisectRight(1, low: 2, high: 5), 2);
    expect(E.bisectRight(2, low: 2, high: 5), 5);
    expect(E.bisectRight(3, low: 2, high: 5), 5);
    expect(E.bisectRight(4, low: 2, high: 5), 5);
    expect(E.bisectRight(5, low: 2, high: 5), 5);
    expect(E.bisectRight(6, low: 2, high: 5), 5);
    expect(E.bisectRight(7, low: 2, high: 5), 5);
    expect(E.bisectRight(8, low: 2, high: 5), 5);
  });

  test('list.bisectRight for A lo=3 hi=5', () {
    expect(() => A.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectRight for B lo=3 hi=5', () {
    expect(() => B.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectRight for C lo=3 hi=5', () {
    expect(() => C.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectRight for D lo=3 hi=5', () {
    expect(() => D.bisectRight(-2, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 5), throwsRangeError);
  });

  test('list.bisectRight for E lo=3 hi=5', () {
    expect(E.bisectRight(-2, low: 3, high: 5), 3);
    expect(E.bisectRight(-1, low: 3, high: 5), 3);
    expect(E.bisectRight(0, low: 3, high: 5), 3);
    expect(E.bisectRight(1, low: 3, high: 5), 3);
    expect(E.bisectRight(2, low: 3, high: 5), 5);
    expect(E.bisectRight(3, low: 3, high: 5), 5);
    expect(E.bisectRight(4, low: 3, high: 5), 5);
    expect(E.bisectRight(5, low: 3, high: 5), 5);
    expect(E.bisectRight(6, low: 3, high: 5), 5);
    expect(E.bisectRight(7, low: 3, high: 5), 5);
    expect(E.bisectRight(8, low: 3, high: 5), 5);
  });

  test('list.bisectRight for A lo=4 hi=5', () {
    expect(() => A.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectRight for B lo=4 hi=5', () {
    expect(() => B.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectRight for C lo=4 hi=5', () {
    expect(() => C.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectRight for D lo=4 hi=5', () {
    expect(() => D.bisectRight(-2, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 5), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 5), throwsRangeError);
  });

  test('list.bisectRight for E lo=4 hi=5', () {
    expect(E.bisectRight(-2, low: 4, high: 5), 4);
    expect(E.bisectRight(-1, low: 4, high: 5), 4);
    expect(E.bisectRight(0, low: 4, high: 5), 4);
    expect(E.bisectRight(1, low: 4, high: 5), 4);
    expect(E.bisectRight(2, low: 4, high: 5), 5);
    expect(E.bisectRight(3, low: 4, high: 5), 5);
    expect(E.bisectRight(4, low: 4, high: 5), 5);
    expect(E.bisectRight(5, low: 4, high: 5), 5);
    expect(E.bisectRight(6, low: 4, high: 5), 5);
    expect(E.bisectRight(7, low: 4, high: 5), 5);
    expect(E.bisectRight(8, low: 4, high: 5), 5);
  });

  test('list.bisectRight for A lo=5 hi=5', () {
    expect(A.bisectRight(-2, low: 5, high: 5), 5);
    expect(A.bisectRight(-1, low: 5, high: 5), 5);
    expect(A.bisectRight(0, low: 5, high: 5), 5);
    expect(A.bisectRight(1, low: 5, high: 5), 5);
    expect(A.bisectRight(2, low: 5, high: 5), 5);
    expect(A.bisectRight(3, low: 5, high: 5), 5);
    expect(A.bisectRight(4, low: 5, high: 5), 5);
    expect(A.bisectRight(5, low: 5, high: 5), 5);
    expect(A.bisectRight(6, low: 5, high: 5), 5);
    expect(A.bisectRight(7, low: 5, high: 5), 5);
    expect(A.bisectRight(8, low: 5, high: 5), 5);
  });

  test('list.bisectRight for B lo=5 hi=5', () {
    expect(B.bisectRight(-2, low: 5, high: 5), 5);
    expect(B.bisectRight(-1, low: 5, high: 5), 5);
    expect(B.bisectRight(0, low: 5, high: 5), 5);
    expect(B.bisectRight(1, low: 5, high: 5), 5);
    expect(B.bisectRight(2, low: 5, high: 5), 5);
    expect(B.bisectRight(3, low: 5, high: 5), 5);
    expect(B.bisectRight(4, low: 5, high: 5), 5);
    expect(B.bisectRight(5, low: 5, high: 5), 5);
    expect(B.bisectRight(6, low: 5, high: 5), 5);
    expect(B.bisectRight(7, low: 5, high: 5), 5);
    expect(B.bisectRight(8, low: 5, high: 5), 5);
  });

  test('list.bisectRight for C lo=5 hi=5', () {
    expect(C.bisectRight(-2, low: 5, high: 5), 5);
    expect(C.bisectRight(-1, low: 5, high: 5), 5);
    expect(C.bisectRight(0, low: 5, high: 5), 5);
    expect(C.bisectRight(1, low: 5, high: 5), 5);
    expect(C.bisectRight(2, low: 5, high: 5), 5);
    expect(C.bisectRight(3, low: 5, high: 5), 5);
    expect(C.bisectRight(4, low: 5, high: 5), 5);
    expect(C.bisectRight(5, low: 5, high: 5), 5);
    expect(C.bisectRight(6, low: 5, high: 5), 5);
    expect(C.bisectRight(7, low: 5, high: 5), 5);
    expect(C.bisectRight(8, low: 5, high: 5), 5);
  });

  test('list.bisectRight for D lo=5 hi=5', () {
    expect(D.bisectRight(-2, low: 5, high: 5), 5);
    expect(D.bisectRight(-1, low: 5, high: 5), 5);
    expect(D.bisectRight(0, low: 5, high: 5), 5);
    expect(D.bisectRight(1, low: 5, high: 5), 5);
    expect(D.bisectRight(2, low: 5, high: 5), 5);
    expect(D.bisectRight(3, low: 5, high: 5), 5);
    expect(D.bisectRight(4, low: 5, high: 5), 5);
    expect(D.bisectRight(5, low: 5, high: 5), 5);
    expect(D.bisectRight(6, low: 5, high: 5), 5);
    expect(D.bisectRight(7, low: 5, high: 5), 5);
    expect(D.bisectRight(8, low: 5, high: 5), 5);
  });

  test('list.bisectRight for E lo=5 hi=5', () {
    expect(E.bisectRight(-2, low: 5, high: 5), 5);
    expect(E.bisectRight(-1, low: 5, high: 5), 5);
    expect(E.bisectRight(0, low: 5, high: 5), 5);
    expect(E.bisectRight(1, low: 5, high: 5), 5);
    expect(E.bisectRight(2, low: 5, high: 5), 5);
    expect(E.bisectRight(3, low: 5, high: 5), 5);
    expect(E.bisectRight(4, low: 5, high: 5), 5);
    expect(E.bisectRight(5, low: 5, high: 5), 5);
    expect(E.bisectRight(6, low: 5, high: 5), 5);
    expect(E.bisectRight(7, low: 5, high: 5), 5);
    expect(E.bisectRight(8, low: 5, high: 5), 5);
  });

  test('list.bisectRight for A lo=6 hi=5', () {
    expect(A.bisectRight(-2, low: 6, high: 5), 6);
    expect(A.bisectRight(-1, low: 6, high: 5), 6);
    expect(A.bisectRight(0, low: 6, high: 5), 6);
    expect(A.bisectRight(1, low: 6, high: 5), 6);
    expect(A.bisectRight(2, low: 6, high: 5), 6);
    expect(A.bisectRight(3, low: 6, high: 5), 6);
    expect(A.bisectRight(4, low: 6, high: 5), 6);
    expect(A.bisectRight(5, low: 6, high: 5), 6);
    expect(A.bisectRight(6, low: 6, high: 5), 6);
    expect(A.bisectRight(7, low: 6, high: 5), 6);
    expect(A.bisectRight(8, low: 6, high: 5), 6);
  });

  test('list.bisectRight for B lo=6 hi=5', () {
    expect(B.bisectRight(-2, low: 6, high: 5), 6);
    expect(B.bisectRight(-1, low: 6, high: 5), 6);
    expect(B.bisectRight(0, low: 6, high: 5), 6);
    expect(B.bisectRight(1, low: 6, high: 5), 6);
    expect(B.bisectRight(2, low: 6, high: 5), 6);
    expect(B.bisectRight(3, low: 6, high: 5), 6);
    expect(B.bisectRight(4, low: 6, high: 5), 6);
    expect(B.bisectRight(5, low: 6, high: 5), 6);
    expect(B.bisectRight(6, low: 6, high: 5), 6);
    expect(B.bisectRight(7, low: 6, high: 5), 6);
    expect(B.bisectRight(8, low: 6, high: 5), 6);
  });

  test('list.bisectRight for C lo=6 hi=5', () {
    expect(C.bisectRight(-2, low: 6, high: 5), 6);
    expect(C.bisectRight(-1, low: 6, high: 5), 6);
    expect(C.bisectRight(0, low: 6, high: 5), 6);
    expect(C.bisectRight(1, low: 6, high: 5), 6);
    expect(C.bisectRight(2, low: 6, high: 5), 6);
    expect(C.bisectRight(3, low: 6, high: 5), 6);
    expect(C.bisectRight(4, low: 6, high: 5), 6);
    expect(C.bisectRight(5, low: 6, high: 5), 6);
    expect(C.bisectRight(6, low: 6, high: 5), 6);
    expect(C.bisectRight(7, low: 6, high: 5), 6);
    expect(C.bisectRight(8, low: 6, high: 5), 6);
  });

  test('list.bisectRight for D lo=6 hi=5', () {
    expect(D.bisectRight(-2, low: 6, high: 5), 6);
    expect(D.bisectRight(-1, low: 6, high: 5), 6);
    expect(D.bisectRight(0, low: 6, high: 5), 6);
    expect(D.bisectRight(1, low: 6, high: 5), 6);
    expect(D.bisectRight(2, low: 6, high: 5), 6);
    expect(D.bisectRight(3, low: 6, high: 5), 6);
    expect(D.bisectRight(4, low: 6, high: 5), 6);
    expect(D.bisectRight(5, low: 6, high: 5), 6);
    expect(D.bisectRight(6, low: 6, high: 5), 6);
    expect(D.bisectRight(7, low: 6, high: 5), 6);
    expect(D.bisectRight(8, low: 6, high: 5), 6);
  });

  test('list.bisectRight for E lo=6 hi=5', () {
    expect(E.bisectRight(-2, low: 6, high: 5), 6);
    expect(E.bisectRight(-1, low: 6, high: 5), 6);
    expect(E.bisectRight(0, low: 6, high: 5), 6);
    expect(E.bisectRight(1, low: 6, high: 5), 6);
    expect(E.bisectRight(2, low: 6, high: 5), 6);
    expect(E.bisectRight(3, low: 6, high: 5), 6);
    expect(E.bisectRight(4, low: 6, high: 5), 6);
    expect(E.bisectRight(5, low: 6, high: 5), 6);
    expect(E.bisectRight(6, low: 6, high: 5), 6);
    expect(E.bisectRight(7, low: 6, high: 5), 6);
    expect(E.bisectRight(8, low: 6, high: 5), 6);
  });

  test('list.bisectRight for A lo=7 hi=5', () {
    expect(A.bisectRight(-2, low: 7, high: 5), 7);
    expect(A.bisectRight(-1, low: 7, high: 5), 7);
    expect(A.bisectRight(0, low: 7, high: 5), 7);
    expect(A.bisectRight(1, low: 7, high: 5), 7);
    expect(A.bisectRight(2, low: 7, high: 5), 7);
    expect(A.bisectRight(3, low: 7, high: 5), 7);
    expect(A.bisectRight(4, low: 7, high: 5), 7);
    expect(A.bisectRight(5, low: 7, high: 5), 7);
    expect(A.bisectRight(6, low: 7, high: 5), 7);
    expect(A.bisectRight(7, low: 7, high: 5), 7);
    expect(A.bisectRight(8, low: 7, high: 5), 7);
  });

  test('list.bisectRight for B lo=7 hi=5', () {
    expect(B.bisectRight(-2, low: 7, high: 5), 7);
    expect(B.bisectRight(-1, low: 7, high: 5), 7);
    expect(B.bisectRight(0, low: 7, high: 5), 7);
    expect(B.bisectRight(1, low: 7, high: 5), 7);
    expect(B.bisectRight(2, low: 7, high: 5), 7);
    expect(B.bisectRight(3, low: 7, high: 5), 7);
    expect(B.bisectRight(4, low: 7, high: 5), 7);
    expect(B.bisectRight(5, low: 7, high: 5), 7);
    expect(B.bisectRight(6, low: 7, high: 5), 7);
    expect(B.bisectRight(7, low: 7, high: 5), 7);
    expect(B.bisectRight(8, low: 7, high: 5), 7);
  });

  test('list.bisectRight for C lo=7 hi=5', () {
    expect(C.bisectRight(-2, low: 7, high: 5), 7);
    expect(C.bisectRight(-1, low: 7, high: 5), 7);
    expect(C.bisectRight(0, low: 7, high: 5), 7);
    expect(C.bisectRight(1, low: 7, high: 5), 7);
    expect(C.bisectRight(2, low: 7, high: 5), 7);
    expect(C.bisectRight(3, low: 7, high: 5), 7);
    expect(C.bisectRight(4, low: 7, high: 5), 7);
    expect(C.bisectRight(5, low: 7, high: 5), 7);
    expect(C.bisectRight(6, low: 7, high: 5), 7);
    expect(C.bisectRight(7, low: 7, high: 5), 7);
    expect(C.bisectRight(8, low: 7, high: 5), 7);
  });

  test('list.bisectRight for D lo=7 hi=5', () {
    expect(D.bisectRight(-2, low: 7, high: 5), 7);
    expect(D.bisectRight(-1, low: 7, high: 5), 7);
    expect(D.bisectRight(0, low: 7, high: 5), 7);
    expect(D.bisectRight(1, low: 7, high: 5), 7);
    expect(D.bisectRight(2, low: 7, high: 5), 7);
    expect(D.bisectRight(3, low: 7, high: 5), 7);
    expect(D.bisectRight(4, low: 7, high: 5), 7);
    expect(D.bisectRight(5, low: 7, high: 5), 7);
    expect(D.bisectRight(6, low: 7, high: 5), 7);
    expect(D.bisectRight(7, low: 7, high: 5), 7);
    expect(D.bisectRight(8, low: 7, high: 5), 7);
  });

  test('list.bisectRight for E lo=7 hi=5', () {
    expect(E.bisectRight(-2, low: 7, high: 5), 7);
    expect(E.bisectRight(-1, low: 7, high: 5), 7);
    expect(E.bisectRight(0, low: 7, high: 5), 7);
    expect(E.bisectRight(1, low: 7, high: 5), 7);
    expect(E.bisectRight(2, low: 7, high: 5), 7);
    expect(E.bisectRight(3, low: 7, high: 5), 7);
    expect(E.bisectRight(4, low: 7, high: 5), 7);
    expect(E.bisectRight(5, low: 7, high: 5), 7);
    expect(E.bisectRight(6, low: 7, high: 5), 7);
    expect(E.bisectRight(7, low: 7, high: 5), 7);
    expect(E.bisectRight(8, low: 7, high: 5), 7);
  });

  test('list.bisectRight for A lo=8 hi=5', () {
    expect(A.bisectRight(-2, low: 8, high: 5), 8);
    expect(A.bisectRight(-1, low: 8, high: 5), 8);
    expect(A.bisectRight(0, low: 8, high: 5), 8);
    expect(A.bisectRight(1, low: 8, high: 5), 8);
    expect(A.bisectRight(2, low: 8, high: 5), 8);
    expect(A.bisectRight(3, low: 8, high: 5), 8);
    expect(A.bisectRight(4, low: 8, high: 5), 8);
    expect(A.bisectRight(5, low: 8, high: 5), 8);
    expect(A.bisectRight(6, low: 8, high: 5), 8);
    expect(A.bisectRight(7, low: 8, high: 5), 8);
    expect(A.bisectRight(8, low: 8, high: 5), 8);
  });

  test('list.bisectRight for B lo=8 hi=5', () {
    expect(B.bisectRight(-2, low: 8, high: 5), 8);
    expect(B.bisectRight(-1, low: 8, high: 5), 8);
    expect(B.bisectRight(0, low: 8, high: 5), 8);
    expect(B.bisectRight(1, low: 8, high: 5), 8);
    expect(B.bisectRight(2, low: 8, high: 5), 8);
    expect(B.bisectRight(3, low: 8, high: 5), 8);
    expect(B.bisectRight(4, low: 8, high: 5), 8);
    expect(B.bisectRight(5, low: 8, high: 5), 8);
    expect(B.bisectRight(6, low: 8, high: 5), 8);
    expect(B.bisectRight(7, low: 8, high: 5), 8);
    expect(B.bisectRight(8, low: 8, high: 5), 8);
  });

  test('list.bisectRight for C lo=8 hi=5', () {
    expect(C.bisectRight(-2, low: 8, high: 5), 8);
    expect(C.bisectRight(-1, low: 8, high: 5), 8);
    expect(C.bisectRight(0, low: 8, high: 5), 8);
    expect(C.bisectRight(1, low: 8, high: 5), 8);
    expect(C.bisectRight(2, low: 8, high: 5), 8);
    expect(C.bisectRight(3, low: 8, high: 5), 8);
    expect(C.bisectRight(4, low: 8, high: 5), 8);
    expect(C.bisectRight(5, low: 8, high: 5), 8);
    expect(C.bisectRight(6, low: 8, high: 5), 8);
    expect(C.bisectRight(7, low: 8, high: 5), 8);
    expect(C.bisectRight(8, low: 8, high: 5), 8);
  });

  test('list.bisectRight for D lo=8 hi=5', () {
    expect(D.bisectRight(-2, low: 8, high: 5), 8);
    expect(D.bisectRight(-1, low: 8, high: 5), 8);
    expect(D.bisectRight(0, low: 8, high: 5), 8);
    expect(D.bisectRight(1, low: 8, high: 5), 8);
    expect(D.bisectRight(2, low: 8, high: 5), 8);
    expect(D.bisectRight(3, low: 8, high: 5), 8);
    expect(D.bisectRight(4, low: 8, high: 5), 8);
    expect(D.bisectRight(5, low: 8, high: 5), 8);
    expect(D.bisectRight(6, low: 8, high: 5), 8);
    expect(D.bisectRight(7, low: 8, high: 5), 8);
    expect(D.bisectRight(8, low: 8, high: 5), 8);
  });

  test('list.bisectRight for E lo=8 hi=5', () {
    expect(E.bisectRight(-2, low: 8, high: 5), 8);
    expect(E.bisectRight(-1, low: 8, high: 5), 8);
    expect(E.bisectRight(0, low: 8, high: 5), 8);
    expect(E.bisectRight(1, low: 8, high: 5), 8);
    expect(E.bisectRight(2, low: 8, high: 5), 8);
    expect(E.bisectRight(3, low: 8, high: 5), 8);
    expect(E.bisectRight(4, low: 8, high: 5), 8);
    expect(E.bisectRight(5, low: 8, high: 5), 8);
    expect(E.bisectRight(6, low: 8, high: 5), 8);
    expect(E.bisectRight(7, low: 8, high: 5), 8);
    expect(E.bisectRight(8, low: 8, high: 5), 8);
  });

  test('list.bisectRight for A lo=9 hi=5', () {
    expect(A.bisectRight(-2, low: 9, high: 5), 9);
    expect(A.bisectRight(-1, low: 9, high: 5), 9);
    expect(A.bisectRight(0, low: 9, high: 5), 9);
    expect(A.bisectRight(1, low: 9, high: 5), 9);
    expect(A.bisectRight(2, low: 9, high: 5), 9);
    expect(A.bisectRight(3, low: 9, high: 5), 9);
    expect(A.bisectRight(4, low: 9, high: 5), 9);
    expect(A.bisectRight(5, low: 9, high: 5), 9);
    expect(A.bisectRight(6, low: 9, high: 5), 9);
    expect(A.bisectRight(7, low: 9, high: 5), 9);
    expect(A.bisectRight(8, low: 9, high: 5), 9);
  });

  test('list.bisectRight for B lo=9 hi=5', () {
    expect(B.bisectRight(-2, low: 9, high: 5), 9);
    expect(B.bisectRight(-1, low: 9, high: 5), 9);
    expect(B.bisectRight(0, low: 9, high: 5), 9);
    expect(B.bisectRight(1, low: 9, high: 5), 9);
    expect(B.bisectRight(2, low: 9, high: 5), 9);
    expect(B.bisectRight(3, low: 9, high: 5), 9);
    expect(B.bisectRight(4, low: 9, high: 5), 9);
    expect(B.bisectRight(5, low: 9, high: 5), 9);
    expect(B.bisectRight(6, low: 9, high: 5), 9);
    expect(B.bisectRight(7, low: 9, high: 5), 9);
    expect(B.bisectRight(8, low: 9, high: 5), 9);
  });

  test('list.bisectRight for C lo=9 hi=5', () {
    expect(C.bisectRight(-2, low: 9, high: 5), 9);
    expect(C.bisectRight(-1, low: 9, high: 5), 9);
    expect(C.bisectRight(0, low: 9, high: 5), 9);
    expect(C.bisectRight(1, low: 9, high: 5), 9);
    expect(C.bisectRight(2, low: 9, high: 5), 9);
    expect(C.bisectRight(3, low: 9, high: 5), 9);
    expect(C.bisectRight(4, low: 9, high: 5), 9);
    expect(C.bisectRight(5, low: 9, high: 5), 9);
    expect(C.bisectRight(6, low: 9, high: 5), 9);
    expect(C.bisectRight(7, low: 9, high: 5), 9);
    expect(C.bisectRight(8, low: 9, high: 5), 9);
  });

  test('list.bisectRight for D lo=9 hi=5', () {
    expect(D.bisectRight(-2, low: 9, high: 5), 9);
    expect(D.bisectRight(-1, low: 9, high: 5), 9);
    expect(D.bisectRight(0, low: 9, high: 5), 9);
    expect(D.bisectRight(1, low: 9, high: 5), 9);
    expect(D.bisectRight(2, low: 9, high: 5), 9);
    expect(D.bisectRight(3, low: 9, high: 5), 9);
    expect(D.bisectRight(4, low: 9, high: 5), 9);
    expect(D.bisectRight(5, low: 9, high: 5), 9);
    expect(D.bisectRight(6, low: 9, high: 5), 9);
    expect(D.bisectRight(7, low: 9, high: 5), 9);
    expect(D.bisectRight(8, low: 9, high: 5), 9);
  });

  test('list.bisectRight for E lo=9 hi=5', () {
    expect(E.bisectRight(-2, low: 9, high: 5), 9);
    expect(E.bisectRight(-1, low: 9, high: 5), 9);
    expect(E.bisectRight(0, low: 9, high: 5), 9);
    expect(E.bisectRight(1, low: 9, high: 5), 9);
    expect(E.bisectRight(2, low: 9, high: 5), 9);
    expect(E.bisectRight(3, low: 9, high: 5), 9);
    expect(E.bisectRight(4, low: 9, high: 5), 9);
    expect(E.bisectRight(5, low: 9, high: 5), 9);
    expect(E.bisectRight(6, low: 9, high: 5), 9);
    expect(E.bisectRight(7, low: 9, high: 5), 9);
    expect(E.bisectRight(8, low: 9, high: 5), 9);
  });

  test('list.bisectRight for A lo=None hi=6', () {
    expect(() => A.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, high: 6), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=6', () {
    expect(() => B.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, high: 6), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=6', () {
    expect(() => C.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, high: 6), throwsRangeError);
  });

  test('list.bisectRight for D lo=None hi=6', () {
    expect(() => D.bisectRight(-2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, high: 6), throwsRangeError);
  });

  test('list.bisectRight for E lo=None hi=6', () {
    expect(E.bisectRight(-2, high: 6), 0);
    expect(E.bisectRight(-1, high: 6), 0);
    expect(E.bisectRight(0, high: 6), 1);
    expect(E.bisectRight(1, high: 6), 2);
    expect(E.bisectRight(2, high: 6), 6);
    expect(E.bisectRight(3, high: 6), 6);
    expect(E.bisectRight(4, high: 6), 6);
    expect(E.bisectRight(5, high: 6), 6);
    expect(E.bisectRight(6, high: 6), 6);
    expect(E.bisectRight(7, high: 6), 6);
    expect(E.bisectRight(8, high: 6), 6);
  });

  test('list.bisectRight for A lo=0 hi=6', () {
    expect(() => A.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=6', () {
    expect(() => B.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=6', () {
    expect(() => C.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectRight for D lo=0 hi=6', () {
    expect(() => D.bisectRight(-2, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 6), throwsRangeError);
  });

  test('list.bisectRight for E lo=0 hi=6', () {
    expect(E.bisectRight(-2, low: 0, high: 6), 0);
    expect(E.bisectRight(-1, low: 0, high: 6), 0);
    expect(E.bisectRight(0, low: 0, high: 6), 1);
    expect(E.bisectRight(1, low: 0, high: 6), 2);
    expect(E.bisectRight(2, low: 0, high: 6), 6);
    expect(E.bisectRight(3, low: 0, high: 6), 6);
    expect(E.bisectRight(4, low: 0, high: 6), 6);
    expect(E.bisectRight(5, low: 0, high: 6), 6);
    expect(E.bisectRight(6, low: 0, high: 6), 6);
    expect(E.bisectRight(7, low: 0, high: 6), 6);
    expect(E.bisectRight(8, low: 0, high: 6), 6);
  });

  test('list.bisectRight for A lo=1 hi=6', () {
    expect(() => A.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=6', () {
    expect(() => B.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=6', () {
    expect(() => C.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectRight for D lo=1 hi=6', () {
    expect(() => D.bisectRight(-2, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 6), throwsRangeError);
  });

  test('list.bisectRight for E lo=1 hi=6', () {
    expect(E.bisectRight(-2, low: 1, high: 6), 1);
    expect(E.bisectRight(-1, low: 1, high: 6), 1);
    expect(E.bisectRight(0, low: 1, high: 6), 1);
    expect(E.bisectRight(1, low: 1, high: 6), 2);
    expect(E.bisectRight(2, low: 1, high: 6), 6);
    expect(E.bisectRight(3, low: 1, high: 6), 6);
    expect(E.bisectRight(4, low: 1, high: 6), 6);
    expect(E.bisectRight(5, low: 1, high: 6), 6);
    expect(E.bisectRight(6, low: 1, high: 6), 6);
    expect(E.bisectRight(7, low: 1, high: 6), 6);
    expect(E.bisectRight(8, low: 1, high: 6), 6);
  });

  test('list.bisectRight for A lo=2 hi=6', () {
    expect(() => A.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectRight for B lo=2 hi=6', () {
    expect(() => B.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectRight for C lo=2 hi=6', () {
    expect(() => C.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectRight for D lo=2 hi=6', () {
    expect(() => D.bisectRight(-2, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 6), throwsRangeError);
  });

  test('list.bisectRight for E lo=2 hi=6', () {
    expect(E.bisectRight(-2, low: 2, high: 6), 2);
    expect(E.bisectRight(-1, low: 2, high: 6), 2);
    expect(E.bisectRight(0, low: 2, high: 6), 2);
    expect(E.bisectRight(1, low: 2, high: 6), 2);
    expect(E.bisectRight(2, low: 2, high: 6), 6);
    expect(E.bisectRight(3, low: 2, high: 6), 6);
    expect(E.bisectRight(4, low: 2, high: 6), 6);
    expect(E.bisectRight(5, low: 2, high: 6), 6);
    expect(E.bisectRight(6, low: 2, high: 6), 6);
    expect(E.bisectRight(7, low: 2, high: 6), 6);
    expect(E.bisectRight(8, low: 2, high: 6), 6);
  });

  test('list.bisectRight for A lo=3 hi=6', () {
    expect(() => A.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectRight for B lo=3 hi=6', () {
    expect(() => B.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectRight for C lo=3 hi=6', () {
    expect(() => C.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectRight for D lo=3 hi=6', () {
    expect(() => D.bisectRight(-2, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 6), throwsRangeError);
  });

  test('list.bisectRight for E lo=3 hi=6', () {
    expect(E.bisectRight(-2, low: 3, high: 6), 3);
    expect(E.bisectRight(-1, low: 3, high: 6), 3);
    expect(E.bisectRight(0, low: 3, high: 6), 3);
    expect(E.bisectRight(1, low: 3, high: 6), 3);
    expect(E.bisectRight(2, low: 3, high: 6), 6);
    expect(E.bisectRight(3, low: 3, high: 6), 6);
    expect(E.bisectRight(4, low: 3, high: 6), 6);
    expect(E.bisectRight(5, low: 3, high: 6), 6);
    expect(E.bisectRight(6, low: 3, high: 6), 6);
    expect(E.bisectRight(7, low: 3, high: 6), 6);
    expect(E.bisectRight(8, low: 3, high: 6), 6);
  });

  test('list.bisectRight for A lo=4 hi=6', () {
    expect(() => A.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectRight for B lo=4 hi=6', () {
    expect(() => B.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectRight for C lo=4 hi=6', () {
    expect(() => C.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectRight for D lo=4 hi=6', () {
    expect(() => D.bisectRight(-2, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 6), throwsRangeError);
  });

  test('list.bisectRight for E lo=4 hi=6', () {
    expect(E.bisectRight(-2, low: 4, high: 6), 4);
    expect(E.bisectRight(-1, low: 4, high: 6), 4);
    expect(E.bisectRight(0, low: 4, high: 6), 4);
    expect(E.bisectRight(1, low: 4, high: 6), 4);
    expect(E.bisectRight(2, low: 4, high: 6), 6);
    expect(E.bisectRight(3, low: 4, high: 6), 6);
    expect(E.bisectRight(4, low: 4, high: 6), 6);
    expect(E.bisectRight(5, low: 4, high: 6), 6);
    expect(E.bisectRight(6, low: 4, high: 6), 6);
    expect(E.bisectRight(7, low: 4, high: 6), 6);
    expect(E.bisectRight(8, low: 4, high: 6), 6);
  });

  test('list.bisectRight for A lo=5 hi=6', () {
    expect(() => A.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectRight for B lo=5 hi=6', () {
    expect(() => B.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectRight for C lo=5 hi=6', () {
    expect(() => C.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectRight for D lo=5 hi=6', () {
    expect(() => D.bisectRight(-2, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 6), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 6), throwsRangeError);
  });

  test('list.bisectRight for E lo=5 hi=6', () {
    expect(E.bisectRight(-2, low: 5, high: 6), 5);
    expect(E.bisectRight(-1, low: 5, high: 6), 5);
    expect(E.bisectRight(0, low: 5, high: 6), 5);
    expect(E.bisectRight(1, low: 5, high: 6), 5);
    expect(E.bisectRight(2, low: 5, high: 6), 6);
    expect(E.bisectRight(3, low: 5, high: 6), 6);
    expect(E.bisectRight(4, low: 5, high: 6), 6);
    expect(E.bisectRight(5, low: 5, high: 6), 6);
    expect(E.bisectRight(6, low: 5, high: 6), 6);
    expect(E.bisectRight(7, low: 5, high: 6), 6);
    expect(E.bisectRight(8, low: 5, high: 6), 6);
  });

  test('list.bisectRight for A lo=6 hi=6', () {
    expect(A.bisectRight(-2, low: 6, high: 6), 6);
    expect(A.bisectRight(-1, low: 6, high: 6), 6);
    expect(A.bisectRight(0, low: 6, high: 6), 6);
    expect(A.bisectRight(1, low: 6, high: 6), 6);
    expect(A.bisectRight(2, low: 6, high: 6), 6);
    expect(A.bisectRight(3, low: 6, high: 6), 6);
    expect(A.bisectRight(4, low: 6, high: 6), 6);
    expect(A.bisectRight(5, low: 6, high: 6), 6);
    expect(A.bisectRight(6, low: 6, high: 6), 6);
    expect(A.bisectRight(7, low: 6, high: 6), 6);
    expect(A.bisectRight(8, low: 6, high: 6), 6);
  });

  test('list.bisectRight for B lo=6 hi=6', () {
    expect(B.bisectRight(-2, low: 6, high: 6), 6);
    expect(B.bisectRight(-1, low: 6, high: 6), 6);
    expect(B.bisectRight(0, low: 6, high: 6), 6);
    expect(B.bisectRight(1, low: 6, high: 6), 6);
    expect(B.bisectRight(2, low: 6, high: 6), 6);
    expect(B.bisectRight(3, low: 6, high: 6), 6);
    expect(B.bisectRight(4, low: 6, high: 6), 6);
    expect(B.bisectRight(5, low: 6, high: 6), 6);
    expect(B.bisectRight(6, low: 6, high: 6), 6);
    expect(B.bisectRight(7, low: 6, high: 6), 6);
    expect(B.bisectRight(8, low: 6, high: 6), 6);
  });

  test('list.bisectRight for C lo=6 hi=6', () {
    expect(C.bisectRight(-2, low: 6, high: 6), 6);
    expect(C.bisectRight(-1, low: 6, high: 6), 6);
    expect(C.bisectRight(0, low: 6, high: 6), 6);
    expect(C.bisectRight(1, low: 6, high: 6), 6);
    expect(C.bisectRight(2, low: 6, high: 6), 6);
    expect(C.bisectRight(3, low: 6, high: 6), 6);
    expect(C.bisectRight(4, low: 6, high: 6), 6);
    expect(C.bisectRight(5, low: 6, high: 6), 6);
    expect(C.bisectRight(6, low: 6, high: 6), 6);
    expect(C.bisectRight(7, low: 6, high: 6), 6);
    expect(C.bisectRight(8, low: 6, high: 6), 6);
  });

  test('list.bisectRight for D lo=6 hi=6', () {
    expect(D.bisectRight(-2, low: 6, high: 6), 6);
    expect(D.bisectRight(-1, low: 6, high: 6), 6);
    expect(D.bisectRight(0, low: 6, high: 6), 6);
    expect(D.bisectRight(1, low: 6, high: 6), 6);
    expect(D.bisectRight(2, low: 6, high: 6), 6);
    expect(D.bisectRight(3, low: 6, high: 6), 6);
    expect(D.bisectRight(4, low: 6, high: 6), 6);
    expect(D.bisectRight(5, low: 6, high: 6), 6);
    expect(D.bisectRight(6, low: 6, high: 6), 6);
    expect(D.bisectRight(7, low: 6, high: 6), 6);
    expect(D.bisectRight(8, low: 6, high: 6), 6);
  });

  test('list.bisectRight for E lo=6 hi=6', () {
    expect(E.bisectRight(-2, low: 6, high: 6), 6);
    expect(E.bisectRight(-1, low: 6, high: 6), 6);
    expect(E.bisectRight(0, low: 6, high: 6), 6);
    expect(E.bisectRight(1, low: 6, high: 6), 6);
    expect(E.bisectRight(2, low: 6, high: 6), 6);
    expect(E.bisectRight(3, low: 6, high: 6), 6);
    expect(E.bisectRight(4, low: 6, high: 6), 6);
    expect(E.bisectRight(5, low: 6, high: 6), 6);
    expect(E.bisectRight(6, low: 6, high: 6), 6);
    expect(E.bisectRight(7, low: 6, high: 6), 6);
    expect(E.bisectRight(8, low: 6, high: 6), 6);
  });

  test('list.bisectRight for A lo=7 hi=6', () {
    expect(A.bisectRight(-2, low: 7, high: 6), 7);
    expect(A.bisectRight(-1, low: 7, high: 6), 7);
    expect(A.bisectRight(0, low: 7, high: 6), 7);
    expect(A.bisectRight(1, low: 7, high: 6), 7);
    expect(A.bisectRight(2, low: 7, high: 6), 7);
    expect(A.bisectRight(3, low: 7, high: 6), 7);
    expect(A.bisectRight(4, low: 7, high: 6), 7);
    expect(A.bisectRight(5, low: 7, high: 6), 7);
    expect(A.bisectRight(6, low: 7, high: 6), 7);
    expect(A.bisectRight(7, low: 7, high: 6), 7);
    expect(A.bisectRight(8, low: 7, high: 6), 7);
  });

  test('list.bisectRight for B lo=7 hi=6', () {
    expect(B.bisectRight(-2, low: 7, high: 6), 7);
    expect(B.bisectRight(-1, low: 7, high: 6), 7);
    expect(B.bisectRight(0, low: 7, high: 6), 7);
    expect(B.bisectRight(1, low: 7, high: 6), 7);
    expect(B.bisectRight(2, low: 7, high: 6), 7);
    expect(B.bisectRight(3, low: 7, high: 6), 7);
    expect(B.bisectRight(4, low: 7, high: 6), 7);
    expect(B.bisectRight(5, low: 7, high: 6), 7);
    expect(B.bisectRight(6, low: 7, high: 6), 7);
    expect(B.bisectRight(7, low: 7, high: 6), 7);
    expect(B.bisectRight(8, low: 7, high: 6), 7);
  });

  test('list.bisectRight for C lo=7 hi=6', () {
    expect(C.bisectRight(-2, low: 7, high: 6), 7);
    expect(C.bisectRight(-1, low: 7, high: 6), 7);
    expect(C.bisectRight(0, low: 7, high: 6), 7);
    expect(C.bisectRight(1, low: 7, high: 6), 7);
    expect(C.bisectRight(2, low: 7, high: 6), 7);
    expect(C.bisectRight(3, low: 7, high: 6), 7);
    expect(C.bisectRight(4, low: 7, high: 6), 7);
    expect(C.bisectRight(5, low: 7, high: 6), 7);
    expect(C.bisectRight(6, low: 7, high: 6), 7);
    expect(C.bisectRight(7, low: 7, high: 6), 7);
    expect(C.bisectRight(8, low: 7, high: 6), 7);
  });

  test('list.bisectRight for D lo=7 hi=6', () {
    expect(D.bisectRight(-2, low: 7, high: 6), 7);
    expect(D.bisectRight(-1, low: 7, high: 6), 7);
    expect(D.bisectRight(0, low: 7, high: 6), 7);
    expect(D.bisectRight(1, low: 7, high: 6), 7);
    expect(D.bisectRight(2, low: 7, high: 6), 7);
    expect(D.bisectRight(3, low: 7, high: 6), 7);
    expect(D.bisectRight(4, low: 7, high: 6), 7);
    expect(D.bisectRight(5, low: 7, high: 6), 7);
    expect(D.bisectRight(6, low: 7, high: 6), 7);
    expect(D.bisectRight(7, low: 7, high: 6), 7);
    expect(D.bisectRight(8, low: 7, high: 6), 7);
  });

  test('list.bisectRight for E lo=7 hi=6', () {
    expect(E.bisectRight(-2, low: 7, high: 6), 7);
    expect(E.bisectRight(-1, low: 7, high: 6), 7);
    expect(E.bisectRight(0, low: 7, high: 6), 7);
    expect(E.bisectRight(1, low: 7, high: 6), 7);
    expect(E.bisectRight(2, low: 7, high: 6), 7);
    expect(E.bisectRight(3, low: 7, high: 6), 7);
    expect(E.bisectRight(4, low: 7, high: 6), 7);
    expect(E.bisectRight(5, low: 7, high: 6), 7);
    expect(E.bisectRight(6, low: 7, high: 6), 7);
    expect(E.bisectRight(7, low: 7, high: 6), 7);
    expect(E.bisectRight(8, low: 7, high: 6), 7);
  });

  test('list.bisectRight for A lo=8 hi=6', () {
    expect(A.bisectRight(-2, low: 8, high: 6), 8);
    expect(A.bisectRight(-1, low: 8, high: 6), 8);
    expect(A.bisectRight(0, low: 8, high: 6), 8);
    expect(A.bisectRight(1, low: 8, high: 6), 8);
    expect(A.bisectRight(2, low: 8, high: 6), 8);
    expect(A.bisectRight(3, low: 8, high: 6), 8);
    expect(A.bisectRight(4, low: 8, high: 6), 8);
    expect(A.bisectRight(5, low: 8, high: 6), 8);
    expect(A.bisectRight(6, low: 8, high: 6), 8);
    expect(A.bisectRight(7, low: 8, high: 6), 8);
    expect(A.bisectRight(8, low: 8, high: 6), 8);
  });

  test('list.bisectRight for B lo=8 hi=6', () {
    expect(B.bisectRight(-2, low: 8, high: 6), 8);
    expect(B.bisectRight(-1, low: 8, high: 6), 8);
    expect(B.bisectRight(0, low: 8, high: 6), 8);
    expect(B.bisectRight(1, low: 8, high: 6), 8);
    expect(B.bisectRight(2, low: 8, high: 6), 8);
    expect(B.bisectRight(3, low: 8, high: 6), 8);
    expect(B.bisectRight(4, low: 8, high: 6), 8);
    expect(B.bisectRight(5, low: 8, high: 6), 8);
    expect(B.bisectRight(6, low: 8, high: 6), 8);
    expect(B.bisectRight(7, low: 8, high: 6), 8);
    expect(B.bisectRight(8, low: 8, high: 6), 8);
  });

  test('list.bisectRight for C lo=8 hi=6', () {
    expect(C.bisectRight(-2, low: 8, high: 6), 8);
    expect(C.bisectRight(-1, low: 8, high: 6), 8);
    expect(C.bisectRight(0, low: 8, high: 6), 8);
    expect(C.bisectRight(1, low: 8, high: 6), 8);
    expect(C.bisectRight(2, low: 8, high: 6), 8);
    expect(C.bisectRight(3, low: 8, high: 6), 8);
    expect(C.bisectRight(4, low: 8, high: 6), 8);
    expect(C.bisectRight(5, low: 8, high: 6), 8);
    expect(C.bisectRight(6, low: 8, high: 6), 8);
    expect(C.bisectRight(7, low: 8, high: 6), 8);
    expect(C.bisectRight(8, low: 8, high: 6), 8);
  });

  test('list.bisectRight for D lo=8 hi=6', () {
    expect(D.bisectRight(-2, low: 8, high: 6), 8);
    expect(D.bisectRight(-1, low: 8, high: 6), 8);
    expect(D.bisectRight(0, low: 8, high: 6), 8);
    expect(D.bisectRight(1, low: 8, high: 6), 8);
    expect(D.bisectRight(2, low: 8, high: 6), 8);
    expect(D.bisectRight(3, low: 8, high: 6), 8);
    expect(D.bisectRight(4, low: 8, high: 6), 8);
    expect(D.bisectRight(5, low: 8, high: 6), 8);
    expect(D.bisectRight(6, low: 8, high: 6), 8);
    expect(D.bisectRight(7, low: 8, high: 6), 8);
    expect(D.bisectRight(8, low: 8, high: 6), 8);
  });

  test('list.bisectRight for E lo=8 hi=6', () {
    expect(E.bisectRight(-2, low: 8, high: 6), 8);
    expect(E.bisectRight(-1, low: 8, high: 6), 8);
    expect(E.bisectRight(0, low: 8, high: 6), 8);
    expect(E.bisectRight(1, low: 8, high: 6), 8);
    expect(E.bisectRight(2, low: 8, high: 6), 8);
    expect(E.bisectRight(3, low: 8, high: 6), 8);
    expect(E.bisectRight(4, low: 8, high: 6), 8);
    expect(E.bisectRight(5, low: 8, high: 6), 8);
    expect(E.bisectRight(6, low: 8, high: 6), 8);
    expect(E.bisectRight(7, low: 8, high: 6), 8);
    expect(E.bisectRight(8, low: 8, high: 6), 8);
  });

  test('list.bisectRight for A lo=9 hi=6', () {
    expect(A.bisectRight(-2, low: 9, high: 6), 9);
    expect(A.bisectRight(-1, low: 9, high: 6), 9);
    expect(A.bisectRight(0, low: 9, high: 6), 9);
    expect(A.bisectRight(1, low: 9, high: 6), 9);
    expect(A.bisectRight(2, low: 9, high: 6), 9);
    expect(A.bisectRight(3, low: 9, high: 6), 9);
    expect(A.bisectRight(4, low: 9, high: 6), 9);
    expect(A.bisectRight(5, low: 9, high: 6), 9);
    expect(A.bisectRight(6, low: 9, high: 6), 9);
    expect(A.bisectRight(7, low: 9, high: 6), 9);
    expect(A.bisectRight(8, low: 9, high: 6), 9);
  });

  test('list.bisectRight for B lo=9 hi=6', () {
    expect(B.bisectRight(-2, low: 9, high: 6), 9);
    expect(B.bisectRight(-1, low: 9, high: 6), 9);
    expect(B.bisectRight(0, low: 9, high: 6), 9);
    expect(B.bisectRight(1, low: 9, high: 6), 9);
    expect(B.bisectRight(2, low: 9, high: 6), 9);
    expect(B.bisectRight(3, low: 9, high: 6), 9);
    expect(B.bisectRight(4, low: 9, high: 6), 9);
    expect(B.bisectRight(5, low: 9, high: 6), 9);
    expect(B.bisectRight(6, low: 9, high: 6), 9);
    expect(B.bisectRight(7, low: 9, high: 6), 9);
    expect(B.bisectRight(8, low: 9, high: 6), 9);
  });

  test('list.bisectRight for C lo=9 hi=6', () {
    expect(C.bisectRight(-2, low: 9, high: 6), 9);
    expect(C.bisectRight(-1, low: 9, high: 6), 9);
    expect(C.bisectRight(0, low: 9, high: 6), 9);
    expect(C.bisectRight(1, low: 9, high: 6), 9);
    expect(C.bisectRight(2, low: 9, high: 6), 9);
    expect(C.bisectRight(3, low: 9, high: 6), 9);
    expect(C.bisectRight(4, low: 9, high: 6), 9);
    expect(C.bisectRight(5, low: 9, high: 6), 9);
    expect(C.bisectRight(6, low: 9, high: 6), 9);
    expect(C.bisectRight(7, low: 9, high: 6), 9);
    expect(C.bisectRight(8, low: 9, high: 6), 9);
  });

  test('list.bisectRight for D lo=9 hi=6', () {
    expect(D.bisectRight(-2, low: 9, high: 6), 9);
    expect(D.bisectRight(-1, low: 9, high: 6), 9);
    expect(D.bisectRight(0, low: 9, high: 6), 9);
    expect(D.bisectRight(1, low: 9, high: 6), 9);
    expect(D.bisectRight(2, low: 9, high: 6), 9);
    expect(D.bisectRight(3, low: 9, high: 6), 9);
    expect(D.bisectRight(4, low: 9, high: 6), 9);
    expect(D.bisectRight(5, low: 9, high: 6), 9);
    expect(D.bisectRight(6, low: 9, high: 6), 9);
    expect(D.bisectRight(7, low: 9, high: 6), 9);
    expect(D.bisectRight(8, low: 9, high: 6), 9);
  });

  test('list.bisectRight for E lo=9 hi=6', () {
    expect(E.bisectRight(-2, low: 9, high: 6), 9);
    expect(E.bisectRight(-1, low: 9, high: 6), 9);
    expect(E.bisectRight(0, low: 9, high: 6), 9);
    expect(E.bisectRight(1, low: 9, high: 6), 9);
    expect(E.bisectRight(2, low: 9, high: 6), 9);
    expect(E.bisectRight(3, low: 9, high: 6), 9);
    expect(E.bisectRight(4, low: 9, high: 6), 9);
    expect(E.bisectRight(5, low: 9, high: 6), 9);
    expect(E.bisectRight(6, low: 9, high: 6), 9);
    expect(E.bisectRight(7, low: 9, high: 6), 9);
    expect(E.bisectRight(8, low: 9, high: 6), 9);
  });

  test('list.bisectRight for A lo=None hi=7', () {
    expect(() => A.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=7', () {
    expect(() => B.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=7', () {
    expect(() => C.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=None hi=7', () {
    expect(() => D.bisectRight(-2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=None hi=7', () {
    expect(E.bisectRight(-2, high: 7), 0);
    expect(E.bisectRight(-1, high: 7), 0);
    expect(E.bisectRight(0, high: 7), 1);
    expect(E.bisectRight(1, high: 7), 2);
    expect(E.bisectRight(2, high: 7), 6);
    expect(E.bisectRight(3, high: 7), 7);
    expect(E.bisectRight(4, high: 7), 7);
    expect(E.bisectRight(5, high: 7), 7);
    expect(E.bisectRight(6, high: 7), 7);
    expect(E.bisectRight(7, high: 7), 7);
    expect(E.bisectRight(8, high: 7), 7);
  });

  test('list.bisectRight for A lo=0 hi=7', () {
    expect(() => A.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=7', () {
    expect(() => B.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=7', () {
    expect(() => C.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=0 hi=7', () {
    expect(() => D.bisectRight(-2, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=0 hi=7', () {
    expect(E.bisectRight(-2, low: 0, high: 7), 0);
    expect(E.bisectRight(-1, low: 0, high: 7), 0);
    expect(E.bisectRight(0, low: 0, high: 7), 1);
    expect(E.bisectRight(1, low: 0, high: 7), 2);
    expect(E.bisectRight(2, low: 0, high: 7), 6);
    expect(E.bisectRight(3, low: 0, high: 7), 7);
    expect(E.bisectRight(4, low: 0, high: 7), 7);
    expect(E.bisectRight(5, low: 0, high: 7), 7);
    expect(E.bisectRight(6, low: 0, high: 7), 7);
    expect(E.bisectRight(7, low: 0, high: 7), 7);
    expect(E.bisectRight(8, low: 0, high: 7), 7);
  });

  test('list.bisectRight for A lo=1 hi=7', () {
    expect(() => A.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=7', () {
    expect(() => B.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=7', () {
    expect(() => C.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=1 hi=7', () {
    expect(() => D.bisectRight(-2, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=1 hi=7', () {
    expect(E.bisectRight(-2, low: 1, high: 7), 1);
    expect(E.bisectRight(-1, low: 1, high: 7), 1);
    expect(E.bisectRight(0, low: 1, high: 7), 1);
    expect(E.bisectRight(1, low: 1, high: 7), 2);
    expect(E.bisectRight(2, low: 1, high: 7), 6);
    expect(E.bisectRight(3, low: 1, high: 7), 7);
    expect(E.bisectRight(4, low: 1, high: 7), 7);
    expect(E.bisectRight(5, low: 1, high: 7), 7);
    expect(E.bisectRight(6, low: 1, high: 7), 7);
    expect(E.bisectRight(7, low: 1, high: 7), 7);
    expect(E.bisectRight(8, low: 1, high: 7), 7);
  });

  test('list.bisectRight for A lo=2 hi=7', () {
    expect(() => A.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=2 hi=7', () {
    expect(() => B.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=2 hi=7', () {
    expect(() => C.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=2 hi=7', () {
    expect(() => D.bisectRight(-2, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=2 hi=7', () {
    expect(E.bisectRight(-2, low: 2, high: 7), 2);
    expect(E.bisectRight(-1, low: 2, high: 7), 2);
    expect(E.bisectRight(0, low: 2, high: 7), 2);
    expect(E.bisectRight(1, low: 2, high: 7), 2);
    expect(E.bisectRight(2, low: 2, high: 7), 6);
    expect(E.bisectRight(3, low: 2, high: 7), 7);
    expect(E.bisectRight(4, low: 2, high: 7), 7);
    expect(E.bisectRight(5, low: 2, high: 7), 7);
    expect(E.bisectRight(6, low: 2, high: 7), 7);
    expect(E.bisectRight(7, low: 2, high: 7), 7);
    expect(E.bisectRight(8, low: 2, high: 7), 7);
  });

  test('list.bisectRight for A lo=3 hi=7', () {
    expect(() => A.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=3 hi=7', () {
    expect(() => B.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=3 hi=7', () {
    expect(() => C.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=3 hi=7', () {
    expect(() => D.bisectRight(-2, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=3 hi=7', () {
    expect(E.bisectRight(-2, low: 3, high: 7), 3);
    expect(E.bisectRight(-1, low: 3, high: 7), 3);
    expect(E.bisectRight(0, low: 3, high: 7), 3);
    expect(E.bisectRight(1, low: 3, high: 7), 3);
    expect(E.bisectRight(2, low: 3, high: 7), 6);
    expect(E.bisectRight(3, low: 3, high: 7), 7);
    expect(E.bisectRight(4, low: 3, high: 7), 7);
    expect(E.bisectRight(5, low: 3, high: 7), 7);
    expect(E.bisectRight(6, low: 3, high: 7), 7);
    expect(E.bisectRight(7, low: 3, high: 7), 7);
    expect(E.bisectRight(8, low: 3, high: 7), 7);
  });

  test('list.bisectRight for A lo=4 hi=7', () {
    expect(() => A.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=4 hi=7', () {
    expect(() => B.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=4 hi=7', () {
    expect(() => C.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=4 hi=7', () {
    expect(() => D.bisectRight(-2, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=4 hi=7', () {
    expect(E.bisectRight(-2, low: 4, high: 7), 4);
    expect(E.bisectRight(-1, low: 4, high: 7), 4);
    expect(E.bisectRight(0, low: 4, high: 7), 4);
    expect(E.bisectRight(1, low: 4, high: 7), 4);
    expect(E.bisectRight(2, low: 4, high: 7), 6);
    expect(E.bisectRight(3, low: 4, high: 7), 7);
    expect(E.bisectRight(4, low: 4, high: 7), 7);
    expect(E.bisectRight(5, low: 4, high: 7), 7);
    expect(E.bisectRight(6, low: 4, high: 7), 7);
    expect(E.bisectRight(7, low: 4, high: 7), 7);
    expect(E.bisectRight(8, low: 4, high: 7), 7);
  });

  test('list.bisectRight for A lo=5 hi=7', () {
    expect(() => A.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=5 hi=7', () {
    expect(() => B.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=5 hi=7', () {
    expect(() => C.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=5 hi=7', () {
    expect(() => D.bisectRight(-2, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=5 hi=7', () {
    expect(E.bisectRight(-2, low: 5, high: 7), 5);
    expect(E.bisectRight(-1, low: 5, high: 7), 5);
    expect(E.bisectRight(0, low: 5, high: 7), 5);
    expect(E.bisectRight(1, low: 5, high: 7), 5);
    expect(E.bisectRight(2, low: 5, high: 7), 6);
    expect(E.bisectRight(3, low: 5, high: 7), 7);
    expect(E.bisectRight(4, low: 5, high: 7), 7);
    expect(E.bisectRight(5, low: 5, high: 7), 7);
    expect(E.bisectRight(6, low: 5, high: 7), 7);
    expect(E.bisectRight(7, low: 5, high: 7), 7);
    expect(E.bisectRight(8, low: 5, high: 7), 7);
  });

  test('list.bisectRight for A lo=6 hi=7', () {
    expect(() => A.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => A.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectRight for B lo=6 hi=7', () {
    expect(() => B.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => B.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectRight for C lo=6 hi=7', () {
    expect(() => C.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => C.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectRight for D lo=6 hi=7', () {
    expect(() => D.bisectRight(-2, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(0, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(1, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(2, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(3, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(4, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(5, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(6, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(7, low: 6, high: 7), throwsRangeError);
    expect(() => D.bisectRight(8, low: 6, high: 7), throwsRangeError);
  });

  test('list.bisectRight for E lo=6 hi=7', () {
    expect(E.bisectRight(-2, low: 6, high: 7), 6);
    expect(E.bisectRight(-1, low: 6, high: 7), 6);
    expect(E.bisectRight(0, low: 6, high: 7), 6);
    expect(E.bisectRight(1, low: 6, high: 7), 6);
    expect(E.bisectRight(2, low: 6, high: 7), 6);
    expect(E.bisectRight(3, low: 6, high: 7), 7);
    expect(E.bisectRight(4, low: 6, high: 7), 7);
    expect(E.bisectRight(5, low: 6, high: 7), 7);
    expect(E.bisectRight(6, low: 6, high: 7), 7);
    expect(E.bisectRight(7, low: 6, high: 7), 7);
    expect(E.bisectRight(8, low: 6, high: 7), 7);
  });

  test('list.bisectRight for A lo=7 hi=7', () {
    expect(A.bisectRight(-2, low: 7, high: 7), 7);
    expect(A.bisectRight(-1, low: 7, high: 7), 7);
    expect(A.bisectRight(0, low: 7, high: 7), 7);
    expect(A.bisectRight(1, low: 7, high: 7), 7);
    expect(A.bisectRight(2, low: 7, high: 7), 7);
    expect(A.bisectRight(3, low: 7, high: 7), 7);
    expect(A.bisectRight(4, low: 7, high: 7), 7);
    expect(A.bisectRight(5, low: 7, high: 7), 7);
    expect(A.bisectRight(6, low: 7, high: 7), 7);
    expect(A.bisectRight(7, low: 7, high: 7), 7);
    expect(A.bisectRight(8, low: 7, high: 7), 7);
  });

  test('list.bisectRight for B lo=7 hi=7', () {
    expect(B.bisectRight(-2, low: 7, high: 7), 7);
    expect(B.bisectRight(-1, low: 7, high: 7), 7);
    expect(B.bisectRight(0, low: 7, high: 7), 7);
    expect(B.bisectRight(1, low: 7, high: 7), 7);
    expect(B.bisectRight(2, low: 7, high: 7), 7);
    expect(B.bisectRight(3, low: 7, high: 7), 7);
    expect(B.bisectRight(4, low: 7, high: 7), 7);
    expect(B.bisectRight(5, low: 7, high: 7), 7);
    expect(B.bisectRight(6, low: 7, high: 7), 7);
    expect(B.bisectRight(7, low: 7, high: 7), 7);
    expect(B.bisectRight(8, low: 7, high: 7), 7);
  });

  test('list.bisectRight for C lo=7 hi=7', () {
    expect(C.bisectRight(-2, low: 7, high: 7), 7);
    expect(C.bisectRight(-1, low: 7, high: 7), 7);
    expect(C.bisectRight(0, low: 7, high: 7), 7);
    expect(C.bisectRight(1, low: 7, high: 7), 7);
    expect(C.bisectRight(2, low: 7, high: 7), 7);
    expect(C.bisectRight(3, low: 7, high: 7), 7);
    expect(C.bisectRight(4, low: 7, high: 7), 7);
    expect(C.bisectRight(5, low: 7, high: 7), 7);
    expect(C.bisectRight(6, low: 7, high: 7), 7);
    expect(C.bisectRight(7, low: 7, high: 7), 7);
    expect(C.bisectRight(8, low: 7, high: 7), 7);
  });

  test('list.bisectRight for D lo=7 hi=7', () {
    expect(D.bisectRight(-2, low: 7, high: 7), 7);
    expect(D.bisectRight(-1, low: 7, high: 7), 7);
    expect(D.bisectRight(0, low: 7, high: 7), 7);
    expect(D.bisectRight(1, low: 7, high: 7), 7);
    expect(D.bisectRight(2, low: 7, high: 7), 7);
    expect(D.bisectRight(3, low: 7, high: 7), 7);
    expect(D.bisectRight(4, low: 7, high: 7), 7);
    expect(D.bisectRight(5, low: 7, high: 7), 7);
    expect(D.bisectRight(6, low: 7, high: 7), 7);
    expect(D.bisectRight(7, low: 7, high: 7), 7);
    expect(D.bisectRight(8, low: 7, high: 7), 7);
  });

  test('list.bisectRight for E lo=7 hi=7', () {
    expect(E.bisectRight(-2, low: 7, high: 7), 7);
    expect(E.bisectRight(-1, low: 7, high: 7), 7);
    expect(E.bisectRight(0, low: 7, high: 7), 7);
    expect(E.bisectRight(1, low: 7, high: 7), 7);
    expect(E.bisectRight(2, low: 7, high: 7), 7);
    expect(E.bisectRight(3, low: 7, high: 7), 7);
    expect(E.bisectRight(4, low: 7, high: 7), 7);
    expect(E.bisectRight(5, low: 7, high: 7), 7);
    expect(E.bisectRight(6, low: 7, high: 7), 7);
    expect(E.bisectRight(7, low: 7, high: 7), 7);
    expect(E.bisectRight(8, low: 7, high: 7), 7);
  });

  test('list.bisectRight for A lo=8 hi=7', () {
    expect(A.bisectRight(-2, low: 8, high: 7), 8);
    expect(A.bisectRight(-1, low: 8, high: 7), 8);
    expect(A.bisectRight(0, low: 8, high: 7), 8);
    expect(A.bisectRight(1, low: 8, high: 7), 8);
    expect(A.bisectRight(2, low: 8, high: 7), 8);
    expect(A.bisectRight(3, low: 8, high: 7), 8);
    expect(A.bisectRight(4, low: 8, high: 7), 8);
    expect(A.bisectRight(5, low: 8, high: 7), 8);
    expect(A.bisectRight(6, low: 8, high: 7), 8);
    expect(A.bisectRight(7, low: 8, high: 7), 8);
    expect(A.bisectRight(8, low: 8, high: 7), 8);
  });

  test('list.bisectRight for B lo=8 hi=7', () {
    expect(B.bisectRight(-2, low: 8, high: 7), 8);
    expect(B.bisectRight(-1, low: 8, high: 7), 8);
    expect(B.bisectRight(0, low: 8, high: 7), 8);
    expect(B.bisectRight(1, low: 8, high: 7), 8);
    expect(B.bisectRight(2, low: 8, high: 7), 8);
    expect(B.bisectRight(3, low: 8, high: 7), 8);
    expect(B.bisectRight(4, low: 8, high: 7), 8);
    expect(B.bisectRight(5, low: 8, high: 7), 8);
    expect(B.bisectRight(6, low: 8, high: 7), 8);
    expect(B.bisectRight(7, low: 8, high: 7), 8);
    expect(B.bisectRight(8, low: 8, high: 7), 8);
  });

  test('list.bisectRight for C lo=8 hi=7', () {
    expect(C.bisectRight(-2, low: 8, high: 7), 8);
    expect(C.bisectRight(-1, low: 8, high: 7), 8);
    expect(C.bisectRight(0, low: 8, high: 7), 8);
    expect(C.bisectRight(1, low: 8, high: 7), 8);
    expect(C.bisectRight(2, low: 8, high: 7), 8);
    expect(C.bisectRight(3, low: 8, high: 7), 8);
    expect(C.bisectRight(4, low: 8, high: 7), 8);
    expect(C.bisectRight(5, low: 8, high: 7), 8);
    expect(C.bisectRight(6, low: 8, high: 7), 8);
    expect(C.bisectRight(7, low: 8, high: 7), 8);
    expect(C.bisectRight(8, low: 8, high: 7), 8);
  });

  test('list.bisectRight for D lo=8 hi=7', () {
    expect(D.bisectRight(-2, low: 8, high: 7), 8);
    expect(D.bisectRight(-1, low: 8, high: 7), 8);
    expect(D.bisectRight(0, low: 8, high: 7), 8);
    expect(D.bisectRight(1, low: 8, high: 7), 8);
    expect(D.bisectRight(2, low: 8, high: 7), 8);
    expect(D.bisectRight(3, low: 8, high: 7), 8);
    expect(D.bisectRight(4, low: 8, high: 7), 8);
    expect(D.bisectRight(5, low: 8, high: 7), 8);
    expect(D.bisectRight(6, low: 8, high: 7), 8);
    expect(D.bisectRight(7, low: 8, high: 7), 8);
    expect(D.bisectRight(8, low: 8, high: 7), 8);
  });

  test('list.bisectRight for E lo=8 hi=7', () {
    expect(E.bisectRight(-2, low: 8, high: 7), 8);
    expect(E.bisectRight(-1, low: 8, high: 7), 8);
    expect(E.bisectRight(0, low: 8, high: 7), 8);
    expect(E.bisectRight(1, low: 8, high: 7), 8);
    expect(E.bisectRight(2, low: 8, high: 7), 8);
    expect(E.bisectRight(3, low: 8, high: 7), 8);
    expect(E.bisectRight(4, low: 8, high: 7), 8);
    expect(E.bisectRight(5, low: 8, high: 7), 8);
    expect(E.bisectRight(6, low: 8, high: 7), 8);
    expect(E.bisectRight(7, low: 8, high: 7), 8);
    expect(E.bisectRight(8, low: 8, high: 7), 8);
  });

  test('list.bisectRight for A lo=9 hi=7', () {
    expect(A.bisectRight(-2, low: 9, high: 7), 9);
    expect(A.bisectRight(-1, low: 9, high: 7), 9);
    expect(A.bisectRight(0, low: 9, high: 7), 9);
    expect(A.bisectRight(1, low: 9, high: 7), 9);
    expect(A.bisectRight(2, low: 9, high: 7), 9);
    expect(A.bisectRight(3, low: 9, high: 7), 9);
    expect(A.bisectRight(4, low: 9, high: 7), 9);
    expect(A.bisectRight(5, low: 9, high: 7), 9);
    expect(A.bisectRight(6, low: 9, high: 7), 9);
    expect(A.bisectRight(7, low: 9, high: 7), 9);
    expect(A.bisectRight(8, low: 9, high: 7), 9);
  });

  test('list.bisectRight for B lo=9 hi=7', () {
    expect(B.bisectRight(-2, low: 9, high: 7), 9);
    expect(B.bisectRight(-1, low: 9, high: 7), 9);
    expect(B.bisectRight(0, low: 9, high: 7), 9);
    expect(B.bisectRight(1, low: 9, high: 7), 9);
    expect(B.bisectRight(2, low: 9, high: 7), 9);
    expect(B.bisectRight(3, low: 9, high: 7), 9);
    expect(B.bisectRight(4, low: 9, high: 7), 9);
    expect(B.bisectRight(5, low: 9, high: 7), 9);
    expect(B.bisectRight(6, low: 9, high: 7), 9);
    expect(B.bisectRight(7, low: 9, high: 7), 9);
    expect(B.bisectRight(8, low: 9, high: 7), 9);
  });

  test('list.bisectRight for C lo=9 hi=7', () {
    expect(C.bisectRight(-2, low: 9, high: 7), 9);
    expect(C.bisectRight(-1, low: 9, high: 7), 9);
    expect(C.bisectRight(0, low: 9, high: 7), 9);
    expect(C.bisectRight(1, low: 9, high: 7), 9);
    expect(C.bisectRight(2, low: 9, high: 7), 9);
    expect(C.bisectRight(3, low: 9, high: 7), 9);
    expect(C.bisectRight(4, low: 9, high: 7), 9);
    expect(C.bisectRight(5, low: 9, high: 7), 9);
    expect(C.bisectRight(6, low: 9, high: 7), 9);
    expect(C.bisectRight(7, low: 9, high: 7), 9);
    expect(C.bisectRight(8, low: 9, high: 7), 9);
  });

  test('list.bisectRight for D lo=9 hi=7', () {
    expect(D.bisectRight(-2, low: 9, high: 7), 9);
    expect(D.bisectRight(-1, low: 9, high: 7), 9);
    expect(D.bisectRight(0, low: 9, high: 7), 9);
    expect(D.bisectRight(1, low: 9, high: 7), 9);
    expect(D.bisectRight(2, low: 9, high: 7), 9);
    expect(D.bisectRight(3, low: 9, high: 7), 9);
    expect(D.bisectRight(4, low: 9, high: 7), 9);
    expect(D.bisectRight(5, low: 9, high: 7), 9);
    expect(D.bisectRight(6, low: 9, high: 7), 9);
    expect(D.bisectRight(7, low: 9, high: 7), 9);
    expect(D.bisectRight(8, low: 9, high: 7), 9);
  });

  test('list.bisectRight for E lo=9 hi=7', () {
    expect(E.bisectRight(-2, low: 9, high: 7), 9);
    expect(E.bisectRight(-1, low: 9, high: 7), 9);
    expect(E.bisectRight(0, low: 9, high: 7), 9);
    expect(E.bisectRight(1, low: 9, high: 7), 9);
    expect(E.bisectRight(2, low: 9, high: 7), 9);
    expect(E.bisectRight(3, low: 9, high: 7), 9);
    expect(E.bisectRight(4, low: 9, high: 7), 9);
    expect(E.bisectRight(5, low: 9, high: 7), 9);
    expect(E.bisectRight(6, low: 9, high: 7), 9);
    expect(E.bisectRight(7, low: 9, high: 7), 9);
    expect(E.bisectRight(8, low: 9, high: 7), 9);
  });

  test('list.bisectRight for A lo=None hi=8', () {
    expect(() => A.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=8', () {
    expect(() => B.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=8', () {
    expect(() => C.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=None hi=8', () {
    expect(() => D.bisectRight(-2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=None hi=8', () {
    expect(E.bisectRight(-2, high: 8), 0);
    expect(E.bisectRight(-1, high: 8), 0);
    expect(E.bisectRight(0, high: 8), 1);
    expect(E.bisectRight(1, high: 8), 2);
    expect(E.bisectRight(2, high: 8), 6);
    expect(E.bisectRight(3, high: 8), 8);
    expect(E.bisectRight(4, high: 8), 8);
    expect(E.bisectRight(5, high: 8), 8);
    expect(E.bisectRight(6, high: 8), 8);
    expect(E.bisectRight(7, high: 8), 8);
    expect(E.bisectRight(8, high: 8), 8);
  });

  test('list.bisectRight for A lo=0 hi=8', () {
    expect(() => A.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=8', () {
    expect(() => B.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=8', () {
    expect(() => C.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=0 hi=8', () {
    expect(() => D.bisectRight(-2, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=0 hi=8', () {
    expect(E.bisectRight(-2, low: 0, high: 8), 0);
    expect(E.bisectRight(-1, low: 0, high: 8), 0);
    expect(E.bisectRight(0, low: 0, high: 8), 1);
    expect(E.bisectRight(1, low: 0, high: 8), 2);
    expect(E.bisectRight(2, low: 0, high: 8), 6);
    expect(E.bisectRight(3, low: 0, high: 8), 8);
    expect(E.bisectRight(4, low: 0, high: 8), 8);
    expect(E.bisectRight(5, low: 0, high: 8), 8);
    expect(E.bisectRight(6, low: 0, high: 8), 8);
    expect(E.bisectRight(7, low: 0, high: 8), 8);
    expect(E.bisectRight(8, low: 0, high: 8), 8);
  });

  test('list.bisectRight for A lo=1 hi=8', () {
    expect(() => A.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=8', () {
    expect(() => B.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=8', () {
    expect(() => C.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=1 hi=8', () {
    expect(() => D.bisectRight(-2, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=1 hi=8', () {
    expect(E.bisectRight(-2, low: 1, high: 8), 1);
    expect(E.bisectRight(-1, low: 1, high: 8), 1);
    expect(E.bisectRight(0, low: 1, high: 8), 1);
    expect(E.bisectRight(1, low: 1, high: 8), 2);
    expect(E.bisectRight(2, low: 1, high: 8), 6);
    expect(E.bisectRight(3, low: 1, high: 8), 8);
    expect(E.bisectRight(4, low: 1, high: 8), 8);
    expect(E.bisectRight(5, low: 1, high: 8), 8);
    expect(E.bisectRight(6, low: 1, high: 8), 8);
    expect(E.bisectRight(7, low: 1, high: 8), 8);
    expect(E.bisectRight(8, low: 1, high: 8), 8);
  });

  test('list.bisectRight for A lo=2 hi=8', () {
    expect(() => A.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=2 hi=8', () {
    expect(() => B.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=2 hi=8', () {
    expect(() => C.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=2 hi=8', () {
    expect(() => D.bisectRight(-2, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=2 hi=8', () {
    expect(E.bisectRight(-2, low: 2, high: 8), 2);
    expect(E.bisectRight(-1, low: 2, high: 8), 2);
    expect(E.bisectRight(0, low: 2, high: 8), 2);
    expect(E.bisectRight(1, low: 2, high: 8), 2);
    expect(E.bisectRight(2, low: 2, high: 8), 6);
    expect(E.bisectRight(3, low: 2, high: 8), 8);
    expect(E.bisectRight(4, low: 2, high: 8), 8);
    expect(E.bisectRight(5, low: 2, high: 8), 8);
    expect(E.bisectRight(6, low: 2, high: 8), 8);
    expect(E.bisectRight(7, low: 2, high: 8), 8);
    expect(E.bisectRight(8, low: 2, high: 8), 8);
  });

  test('list.bisectRight for A lo=3 hi=8', () {
    expect(() => A.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=3 hi=8', () {
    expect(() => B.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=3 hi=8', () {
    expect(() => C.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=3 hi=8', () {
    expect(() => D.bisectRight(-2, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=3 hi=8', () {
    expect(E.bisectRight(-2, low: 3, high: 8), 3);
    expect(E.bisectRight(-1, low: 3, high: 8), 3);
    expect(E.bisectRight(0, low: 3, high: 8), 3);
    expect(E.bisectRight(1, low: 3, high: 8), 3);
    expect(E.bisectRight(2, low: 3, high: 8), 6);
    expect(E.bisectRight(3, low: 3, high: 8), 8);
    expect(E.bisectRight(4, low: 3, high: 8), 8);
    expect(E.bisectRight(5, low: 3, high: 8), 8);
    expect(E.bisectRight(6, low: 3, high: 8), 8);
    expect(E.bisectRight(7, low: 3, high: 8), 8);
    expect(E.bisectRight(8, low: 3, high: 8), 8);
  });

  test('list.bisectRight for A lo=4 hi=8', () {
    expect(() => A.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=4 hi=8', () {
    expect(() => B.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=4 hi=8', () {
    expect(() => C.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=4 hi=8', () {
    expect(() => D.bisectRight(-2, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=4 hi=8', () {
    expect(E.bisectRight(-2, low: 4, high: 8), 4);
    expect(E.bisectRight(-1, low: 4, high: 8), 4);
    expect(E.bisectRight(0, low: 4, high: 8), 4);
    expect(E.bisectRight(1, low: 4, high: 8), 4);
    expect(E.bisectRight(2, low: 4, high: 8), 6);
    expect(E.bisectRight(3, low: 4, high: 8), 8);
    expect(E.bisectRight(4, low: 4, high: 8), 8);
    expect(E.bisectRight(5, low: 4, high: 8), 8);
    expect(E.bisectRight(6, low: 4, high: 8), 8);
    expect(E.bisectRight(7, low: 4, high: 8), 8);
    expect(E.bisectRight(8, low: 4, high: 8), 8);
  });

  test('list.bisectRight for A lo=5 hi=8', () {
    expect(() => A.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=5 hi=8', () {
    expect(() => B.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=5 hi=8', () {
    expect(() => C.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=5 hi=8', () {
    expect(() => D.bisectRight(-2, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=5 hi=8', () {
    expect(E.bisectRight(-2, low: 5, high: 8), 5);
    expect(E.bisectRight(-1, low: 5, high: 8), 5);
    expect(E.bisectRight(0, low: 5, high: 8), 5);
    expect(E.bisectRight(1, low: 5, high: 8), 5);
    expect(E.bisectRight(2, low: 5, high: 8), 6);
    expect(E.bisectRight(3, low: 5, high: 8), 8);
    expect(E.bisectRight(4, low: 5, high: 8), 8);
    expect(E.bisectRight(5, low: 5, high: 8), 8);
    expect(E.bisectRight(6, low: 5, high: 8), 8);
    expect(E.bisectRight(7, low: 5, high: 8), 8);
    expect(E.bisectRight(8, low: 5, high: 8), 8);
  });

  test('list.bisectRight for A lo=6 hi=8', () {
    expect(() => A.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=6 hi=8', () {
    expect(() => B.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=6 hi=8', () {
    expect(() => C.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=6 hi=8', () {
    expect(() => D.bisectRight(-2, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 6, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 6, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=6 hi=8', () {
    expect(E.bisectRight(-2, low: 6, high: 8), 6);
    expect(E.bisectRight(-1, low: 6, high: 8), 6);
    expect(E.bisectRight(0, low: 6, high: 8), 6);
    expect(E.bisectRight(1, low: 6, high: 8), 6);
    expect(E.bisectRight(2, low: 6, high: 8), 6);
    expect(E.bisectRight(3, low: 6, high: 8), 8);
    expect(E.bisectRight(4, low: 6, high: 8), 8);
    expect(E.bisectRight(5, low: 6, high: 8), 8);
    expect(E.bisectRight(6, low: 6, high: 8), 8);
    expect(E.bisectRight(7, low: 6, high: 8), 8);
    expect(E.bisectRight(8, low: 6, high: 8), 8);
  });

  test('list.bisectRight for A lo=7 hi=8', () {
    expect(() => A.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => A.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectRight for B lo=7 hi=8', () {
    expect(() => B.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => B.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectRight for C lo=7 hi=8', () {
    expect(() => C.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => C.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectRight for D lo=7 hi=8', () {
    expect(() => D.bisectRight(-2, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(0, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(1, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(2, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(3, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(4, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(5, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(6, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(7, low: 7, high: 8), throwsRangeError);
    expect(() => D.bisectRight(8, low: 7, high: 8), throwsRangeError);
  });

  test('list.bisectRight for E lo=7 hi=8', () {
    expect(E.bisectRight(-2, low: 7, high: 8), 7);
    expect(E.bisectRight(-1, low: 7, high: 8), 7);
    expect(E.bisectRight(0, low: 7, high: 8), 7);
    expect(E.bisectRight(1, low: 7, high: 8), 7);
    expect(E.bisectRight(2, low: 7, high: 8), 7);
    expect(E.bisectRight(3, low: 7, high: 8), 8);
    expect(E.bisectRight(4, low: 7, high: 8), 8);
    expect(E.bisectRight(5, low: 7, high: 8), 8);
    expect(E.bisectRight(6, low: 7, high: 8), 8);
    expect(E.bisectRight(7, low: 7, high: 8), 8);
    expect(E.bisectRight(8, low: 7, high: 8), 8);
  });

  test('list.bisectRight for A lo=8 hi=8', () {
    expect(A.bisectRight(-2, low: 8, high: 8), 8);
    expect(A.bisectRight(-1, low: 8, high: 8), 8);
    expect(A.bisectRight(0, low: 8, high: 8), 8);
    expect(A.bisectRight(1, low: 8, high: 8), 8);
    expect(A.bisectRight(2, low: 8, high: 8), 8);
    expect(A.bisectRight(3, low: 8, high: 8), 8);
    expect(A.bisectRight(4, low: 8, high: 8), 8);
    expect(A.bisectRight(5, low: 8, high: 8), 8);
    expect(A.bisectRight(6, low: 8, high: 8), 8);
    expect(A.bisectRight(7, low: 8, high: 8), 8);
    expect(A.bisectRight(8, low: 8, high: 8), 8);
  });

  test('list.bisectRight for B lo=8 hi=8', () {
    expect(B.bisectRight(-2, low: 8, high: 8), 8);
    expect(B.bisectRight(-1, low: 8, high: 8), 8);
    expect(B.bisectRight(0, low: 8, high: 8), 8);
    expect(B.bisectRight(1, low: 8, high: 8), 8);
    expect(B.bisectRight(2, low: 8, high: 8), 8);
    expect(B.bisectRight(3, low: 8, high: 8), 8);
    expect(B.bisectRight(4, low: 8, high: 8), 8);
    expect(B.bisectRight(5, low: 8, high: 8), 8);
    expect(B.bisectRight(6, low: 8, high: 8), 8);
    expect(B.bisectRight(7, low: 8, high: 8), 8);
    expect(B.bisectRight(8, low: 8, high: 8), 8);
  });

  test('list.bisectRight for C lo=8 hi=8', () {
    expect(C.bisectRight(-2, low: 8, high: 8), 8);
    expect(C.bisectRight(-1, low: 8, high: 8), 8);
    expect(C.bisectRight(0, low: 8, high: 8), 8);
    expect(C.bisectRight(1, low: 8, high: 8), 8);
    expect(C.bisectRight(2, low: 8, high: 8), 8);
    expect(C.bisectRight(3, low: 8, high: 8), 8);
    expect(C.bisectRight(4, low: 8, high: 8), 8);
    expect(C.bisectRight(5, low: 8, high: 8), 8);
    expect(C.bisectRight(6, low: 8, high: 8), 8);
    expect(C.bisectRight(7, low: 8, high: 8), 8);
    expect(C.bisectRight(8, low: 8, high: 8), 8);
  });

  test('list.bisectRight for D lo=8 hi=8', () {
    expect(D.bisectRight(-2, low: 8, high: 8), 8);
    expect(D.bisectRight(-1, low: 8, high: 8), 8);
    expect(D.bisectRight(0, low: 8, high: 8), 8);
    expect(D.bisectRight(1, low: 8, high: 8), 8);
    expect(D.bisectRight(2, low: 8, high: 8), 8);
    expect(D.bisectRight(3, low: 8, high: 8), 8);
    expect(D.bisectRight(4, low: 8, high: 8), 8);
    expect(D.bisectRight(5, low: 8, high: 8), 8);
    expect(D.bisectRight(6, low: 8, high: 8), 8);
    expect(D.bisectRight(7, low: 8, high: 8), 8);
    expect(D.bisectRight(8, low: 8, high: 8), 8);
  });

  test('list.bisectRight for E lo=8 hi=8', () {
    expect(E.bisectRight(-2, low: 8, high: 8), 8);
    expect(E.bisectRight(-1, low: 8, high: 8), 8);
    expect(E.bisectRight(0, low: 8, high: 8), 8);
    expect(E.bisectRight(1, low: 8, high: 8), 8);
    expect(E.bisectRight(2, low: 8, high: 8), 8);
    expect(E.bisectRight(3, low: 8, high: 8), 8);
    expect(E.bisectRight(4, low: 8, high: 8), 8);
    expect(E.bisectRight(5, low: 8, high: 8), 8);
    expect(E.bisectRight(6, low: 8, high: 8), 8);
    expect(E.bisectRight(7, low: 8, high: 8), 8);
    expect(E.bisectRight(8, low: 8, high: 8), 8);
  });

  test('list.bisectRight for A lo=9 hi=8', () {
    expect(A.bisectRight(-2, low: 9, high: 8), 9);
    expect(A.bisectRight(-1, low: 9, high: 8), 9);
    expect(A.bisectRight(0, low: 9, high: 8), 9);
    expect(A.bisectRight(1, low: 9, high: 8), 9);
    expect(A.bisectRight(2, low: 9, high: 8), 9);
    expect(A.bisectRight(3, low: 9, high: 8), 9);
    expect(A.bisectRight(4, low: 9, high: 8), 9);
    expect(A.bisectRight(5, low: 9, high: 8), 9);
    expect(A.bisectRight(6, low: 9, high: 8), 9);
    expect(A.bisectRight(7, low: 9, high: 8), 9);
    expect(A.bisectRight(8, low: 9, high: 8), 9);
  });

  test('list.bisectRight for B lo=9 hi=8', () {
    expect(B.bisectRight(-2, low: 9, high: 8), 9);
    expect(B.bisectRight(-1, low: 9, high: 8), 9);
    expect(B.bisectRight(0, low: 9, high: 8), 9);
    expect(B.bisectRight(1, low: 9, high: 8), 9);
    expect(B.bisectRight(2, low: 9, high: 8), 9);
    expect(B.bisectRight(3, low: 9, high: 8), 9);
    expect(B.bisectRight(4, low: 9, high: 8), 9);
    expect(B.bisectRight(5, low: 9, high: 8), 9);
    expect(B.bisectRight(6, low: 9, high: 8), 9);
    expect(B.bisectRight(7, low: 9, high: 8), 9);
    expect(B.bisectRight(8, low: 9, high: 8), 9);
  });

  test('list.bisectRight for C lo=9 hi=8', () {
    expect(C.bisectRight(-2, low: 9, high: 8), 9);
    expect(C.bisectRight(-1, low: 9, high: 8), 9);
    expect(C.bisectRight(0, low: 9, high: 8), 9);
    expect(C.bisectRight(1, low: 9, high: 8), 9);
    expect(C.bisectRight(2, low: 9, high: 8), 9);
    expect(C.bisectRight(3, low: 9, high: 8), 9);
    expect(C.bisectRight(4, low: 9, high: 8), 9);
    expect(C.bisectRight(5, low: 9, high: 8), 9);
    expect(C.bisectRight(6, low: 9, high: 8), 9);
    expect(C.bisectRight(7, low: 9, high: 8), 9);
    expect(C.bisectRight(8, low: 9, high: 8), 9);
  });

  test('list.bisectRight for D lo=9 hi=8', () {
    expect(D.bisectRight(-2, low: 9, high: 8), 9);
    expect(D.bisectRight(-1, low: 9, high: 8), 9);
    expect(D.bisectRight(0, low: 9, high: 8), 9);
    expect(D.bisectRight(1, low: 9, high: 8), 9);
    expect(D.bisectRight(2, low: 9, high: 8), 9);
    expect(D.bisectRight(3, low: 9, high: 8), 9);
    expect(D.bisectRight(4, low: 9, high: 8), 9);
    expect(D.bisectRight(5, low: 9, high: 8), 9);
    expect(D.bisectRight(6, low: 9, high: 8), 9);
    expect(D.bisectRight(7, low: 9, high: 8), 9);
    expect(D.bisectRight(8, low: 9, high: 8), 9);
  });

  test('list.bisectRight for E lo=9 hi=8', () {
    expect(E.bisectRight(-2, low: 9, high: 8), 9);
    expect(E.bisectRight(-1, low: 9, high: 8), 9);
    expect(E.bisectRight(0, low: 9, high: 8), 9);
    expect(E.bisectRight(1, low: 9, high: 8), 9);
    expect(E.bisectRight(2, low: 9, high: 8), 9);
    expect(E.bisectRight(3, low: 9, high: 8), 9);
    expect(E.bisectRight(4, low: 9, high: 8), 9);
    expect(E.bisectRight(5, low: 9, high: 8), 9);
    expect(E.bisectRight(6, low: 9, high: 8), 9);
    expect(E.bisectRight(7, low: 9, high: 8), 9);
    expect(E.bisectRight(8, low: 9, high: 8), 9);
  });

  test('list.bisectRight for A lo=None hi=9', () {
    expect(() => A.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=None hi=9', () {
    expect(() => B.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=None hi=9', () {
    expect(() => C.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=None hi=9', () {
    expect(() => D.bisectRight(-2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=None hi=9', () {
    expect(E.bisectRight(-2, high: 9), 0);
    expect(E.bisectRight(-1, high: 9), 0);
    expect(E.bisectRight(0, high: 9), 1);
    expect(E.bisectRight(1, high: 9), 2);
    expect(E.bisectRight(2, high: 9), 6);
    expect(E.bisectRight(3, high: 9), 8);
    expect(E.bisectRight(4, high: 9), 8);
    expect(E.bisectRight(5, high: 9), 9);
    expect(E.bisectRight(6, high: 9), 9);
    expect(E.bisectRight(7, high: 9), 9);
    expect(E.bisectRight(8, high: 9), 9);
  });

  test('list.bisectRight for A lo=0 hi=9', () {
    expect(() => A.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=0 hi=9', () {
    expect(() => B.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=0 hi=9', () {
    expect(() => C.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=0 hi=9', () {
    expect(() => D.bisectRight(-2, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 0, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 0, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=0 hi=9', () {
    expect(E.bisectRight(-2, low: 0, high: 9), 0);
    expect(E.bisectRight(-1, low: 0, high: 9), 0);
    expect(E.bisectRight(0, low: 0, high: 9), 1);
    expect(E.bisectRight(1, low: 0, high: 9), 2);
    expect(E.bisectRight(2, low: 0, high: 9), 6);
    expect(E.bisectRight(3, low: 0, high: 9), 8);
    expect(E.bisectRight(4, low: 0, high: 9), 8);
    expect(E.bisectRight(5, low: 0, high: 9), 9);
    expect(E.bisectRight(6, low: 0, high: 9), 9);
    expect(E.bisectRight(7, low: 0, high: 9), 9);
    expect(E.bisectRight(8, low: 0, high: 9), 9);
  });

  test('list.bisectRight for A lo=1 hi=9', () {
    expect(() => A.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=1 hi=9', () {
    expect(() => B.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=1 hi=9', () {
    expect(() => C.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=1 hi=9', () {
    expect(() => D.bisectRight(-2, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 1, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 1, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=1 hi=9', () {
    expect(E.bisectRight(-2, low: 1, high: 9), 1);
    expect(E.bisectRight(-1, low: 1, high: 9), 1);
    expect(E.bisectRight(0, low: 1, high: 9), 1);
    expect(E.bisectRight(1, low: 1, high: 9), 2);
    expect(E.bisectRight(2, low: 1, high: 9), 6);
    expect(E.bisectRight(3, low: 1, high: 9), 8);
    expect(E.bisectRight(4, low: 1, high: 9), 8);
    expect(E.bisectRight(5, low: 1, high: 9), 9);
    expect(E.bisectRight(6, low: 1, high: 9), 9);
    expect(E.bisectRight(7, low: 1, high: 9), 9);
    expect(E.bisectRight(8, low: 1, high: 9), 9);
  });

  test('list.bisectRight for A lo=2 hi=9', () {
    expect(() => A.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=2 hi=9', () {
    expect(() => B.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=2 hi=9', () {
    expect(() => C.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=2 hi=9', () {
    expect(() => D.bisectRight(-2, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 2, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 2, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=2 hi=9', () {
    expect(E.bisectRight(-2, low: 2, high: 9), 2);
    expect(E.bisectRight(-1, low: 2, high: 9), 2);
    expect(E.bisectRight(0, low: 2, high: 9), 2);
    expect(E.bisectRight(1, low: 2, high: 9), 2);
    expect(E.bisectRight(2, low: 2, high: 9), 6);
    expect(E.bisectRight(3, low: 2, high: 9), 8);
    expect(E.bisectRight(4, low: 2, high: 9), 8);
    expect(E.bisectRight(5, low: 2, high: 9), 9);
    expect(E.bisectRight(6, low: 2, high: 9), 9);
    expect(E.bisectRight(7, low: 2, high: 9), 9);
    expect(E.bisectRight(8, low: 2, high: 9), 9);
  });

  test('list.bisectRight for A lo=3 hi=9', () {
    expect(() => A.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=3 hi=9', () {
    expect(() => B.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=3 hi=9', () {
    expect(() => C.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=3 hi=9', () {
    expect(() => D.bisectRight(-2, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 3, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 3, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=3 hi=9', () {
    expect(E.bisectRight(-2, low: 3, high: 9), 3);
    expect(E.bisectRight(-1, low: 3, high: 9), 3);
    expect(E.bisectRight(0, low: 3, high: 9), 3);
    expect(E.bisectRight(1, low: 3, high: 9), 3);
    expect(E.bisectRight(2, low: 3, high: 9), 6);
    expect(E.bisectRight(3, low: 3, high: 9), 8);
    expect(E.bisectRight(4, low: 3, high: 9), 8);
    expect(E.bisectRight(5, low: 3, high: 9), 9);
    expect(E.bisectRight(6, low: 3, high: 9), 9);
    expect(E.bisectRight(7, low: 3, high: 9), 9);
    expect(E.bisectRight(8, low: 3, high: 9), 9);
  });

  test('list.bisectRight for A lo=4 hi=9', () {
    expect(() => A.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=4 hi=9', () {
    expect(() => B.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=4 hi=9', () {
    expect(() => C.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=4 hi=9', () {
    expect(() => D.bisectRight(-2, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 4, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 4, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=4 hi=9', () {
    expect(E.bisectRight(-2, low: 4, high: 9), 4);
    expect(E.bisectRight(-1, low: 4, high: 9), 4);
    expect(E.bisectRight(0, low: 4, high: 9), 4);
    expect(E.bisectRight(1, low: 4, high: 9), 4);
    expect(E.bisectRight(2, low: 4, high: 9), 6);
    expect(E.bisectRight(3, low: 4, high: 9), 8);
    expect(E.bisectRight(4, low: 4, high: 9), 8);
    expect(E.bisectRight(5, low: 4, high: 9), 9);
    expect(E.bisectRight(6, low: 4, high: 9), 9);
    expect(E.bisectRight(7, low: 4, high: 9), 9);
    expect(E.bisectRight(8, low: 4, high: 9), 9);
  });

  test('list.bisectRight for A lo=5 hi=9', () {
    expect(() => A.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=5 hi=9', () {
    expect(() => B.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=5 hi=9', () {
    expect(() => C.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=5 hi=9', () {
    expect(() => D.bisectRight(-2, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 5, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 5, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=5 hi=9', () {
    expect(E.bisectRight(-2, low: 5, high: 9), 5);
    expect(E.bisectRight(-1, low: 5, high: 9), 5);
    expect(E.bisectRight(0, low: 5, high: 9), 5);
    expect(E.bisectRight(1, low: 5, high: 9), 5);
    expect(E.bisectRight(2, low: 5, high: 9), 6);
    expect(E.bisectRight(3, low: 5, high: 9), 8);
    expect(E.bisectRight(4, low: 5, high: 9), 8);
    expect(E.bisectRight(5, low: 5, high: 9), 9);
    expect(E.bisectRight(6, low: 5, high: 9), 9);
    expect(E.bisectRight(7, low: 5, high: 9), 9);
    expect(E.bisectRight(8, low: 5, high: 9), 9);
  });

  test('list.bisectRight for A lo=6 hi=9', () {
    expect(() => A.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=6 hi=9', () {
    expect(() => B.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=6 hi=9', () {
    expect(() => C.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=6 hi=9', () {
    expect(() => D.bisectRight(-2, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 6, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 6, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=6 hi=9', () {
    expect(E.bisectRight(-2, low: 6, high: 9), 6);
    expect(E.bisectRight(-1, low: 6, high: 9), 6);
    expect(E.bisectRight(0, low: 6, high: 9), 6);
    expect(E.bisectRight(1, low: 6, high: 9), 6);
    expect(E.bisectRight(2, low: 6, high: 9), 6);
    expect(E.bisectRight(3, low: 6, high: 9), 8);
    expect(E.bisectRight(4, low: 6, high: 9), 8);
    expect(E.bisectRight(5, low: 6, high: 9), 9);
    expect(E.bisectRight(6, low: 6, high: 9), 9);
    expect(E.bisectRight(7, low: 6, high: 9), 9);
    expect(E.bisectRight(8, low: 6, high: 9), 9);
  });

  test('list.bisectRight for A lo=7 hi=9', () {
    expect(() => A.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=7 hi=9', () {
    expect(() => B.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=7 hi=9', () {
    expect(() => C.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=7 hi=9', () {
    expect(() => D.bisectRight(-2, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 7, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 7, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=7 hi=9', () {
    expect(E.bisectRight(-2, low: 7, high: 9), 7);
    expect(E.bisectRight(-1, low: 7, high: 9), 7);
    expect(E.bisectRight(0, low: 7, high: 9), 7);
    expect(E.bisectRight(1, low: 7, high: 9), 7);
    expect(E.bisectRight(2, low: 7, high: 9), 7);
    expect(E.bisectRight(3, low: 7, high: 9), 8);
    expect(E.bisectRight(4, low: 7, high: 9), 8);
    expect(E.bisectRight(5, low: 7, high: 9), 9);
    expect(E.bisectRight(6, low: 7, high: 9), 9);
    expect(E.bisectRight(7, low: 7, high: 9), 9);
    expect(E.bisectRight(8, low: 7, high: 9), 9);
  });

  test('list.bisectRight for A lo=8 hi=9', () {
    expect(() => A.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => A.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for B lo=8 hi=9', () {
    expect(() => B.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => B.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for C lo=8 hi=9', () {
    expect(() => C.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => C.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for D lo=8 hi=9', () {
    expect(() => D.bisectRight(-2, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(-1, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(0, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(1, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(2, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(3, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(4, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(5, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(6, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(7, low: 8, high: 9), throwsRangeError);
    expect(() => D.bisectRight(8, low: 8, high: 9), throwsRangeError);
  });

  test('list.bisectRight for E lo=8 hi=9', () {
    expect(E.bisectRight(-2, low: 8, high: 9), 8);
    expect(E.bisectRight(-1, low: 8, high: 9), 8);
    expect(E.bisectRight(0, low: 8, high: 9), 8);
    expect(E.bisectRight(1, low: 8, high: 9), 8);
    expect(E.bisectRight(2, low: 8, high: 9), 8);
    expect(E.bisectRight(3, low: 8, high: 9), 8);
    expect(E.bisectRight(4, low: 8, high: 9), 8);
    expect(E.bisectRight(5, low: 8, high: 9), 9);
    expect(E.bisectRight(6, low: 8, high: 9), 9);
    expect(E.bisectRight(7, low: 8, high: 9), 9);
    expect(E.bisectRight(8, low: 8, high: 9), 9);
  });

  test('list.bisectRight for A lo=9 hi=9', () {
    expect(A.bisectRight(-2, low: 9, high: 9), 9);
    expect(A.bisectRight(-1, low: 9, high: 9), 9);
    expect(A.bisectRight(0, low: 9, high: 9), 9);
    expect(A.bisectRight(1, low: 9, high: 9), 9);
    expect(A.bisectRight(2, low: 9, high: 9), 9);
    expect(A.bisectRight(3, low: 9, high: 9), 9);
    expect(A.bisectRight(4, low: 9, high: 9), 9);
    expect(A.bisectRight(5, low: 9, high: 9), 9);
    expect(A.bisectRight(6, low: 9, high: 9), 9);
    expect(A.bisectRight(7, low: 9, high: 9), 9);
    expect(A.bisectRight(8, low: 9, high: 9), 9);
  });

  test('list.bisectRight for B lo=9 hi=9', () {
    expect(B.bisectRight(-2, low: 9, high: 9), 9);
    expect(B.bisectRight(-1, low: 9, high: 9), 9);
    expect(B.bisectRight(0, low: 9, high: 9), 9);
    expect(B.bisectRight(1, low: 9, high: 9), 9);
    expect(B.bisectRight(2, low: 9, high: 9), 9);
    expect(B.bisectRight(3, low: 9, high: 9), 9);
    expect(B.bisectRight(4, low: 9, high: 9), 9);
    expect(B.bisectRight(5, low: 9, high: 9), 9);
    expect(B.bisectRight(6, low: 9, high: 9), 9);
    expect(B.bisectRight(7, low: 9, high: 9), 9);
    expect(B.bisectRight(8, low: 9, high: 9), 9);
  });

  test('list.bisectRight for C lo=9 hi=9', () {
    expect(C.bisectRight(-2, low: 9, high: 9), 9);
    expect(C.bisectRight(-1, low: 9, high: 9), 9);
    expect(C.bisectRight(0, low: 9, high: 9), 9);
    expect(C.bisectRight(1, low: 9, high: 9), 9);
    expect(C.bisectRight(2, low: 9, high: 9), 9);
    expect(C.bisectRight(3, low: 9, high: 9), 9);
    expect(C.bisectRight(4, low: 9, high: 9), 9);
    expect(C.bisectRight(5, low: 9, high: 9), 9);
    expect(C.bisectRight(6, low: 9, high: 9), 9);
    expect(C.bisectRight(7, low: 9, high: 9), 9);
    expect(C.bisectRight(8, low: 9, high: 9), 9);
  });

  test('list.bisectRight for D lo=9 hi=9', () {
    expect(D.bisectRight(-2, low: 9, high: 9), 9);
    expect(D.bisectRight(-1, low: 9, high: 9), 9);
    expect(D.bisectRight(0, low: 9, high: 9), 9);
    expect(D.bisectRight(1, low: 9, high: 9), 9);
    expect(D.bisectRight(2, low: 9, high: 9), 9);
    expect(D.bisectRight(3, low: 9, high: 9), 9);
    expect(D.bisectRight(4, low: 9, high: 9), 9);
    expect(D.bisectRight(5, low: 9, high: 9), 9);
    expect(D.bisectRight(6, low: 9, high: 9), 9);
    expect(D.bisectRight(7, low: 9, high: 9), 9);
    expect(D.bisectRight(8, low: 9, high: 9), 9);
  });

  test('list.bisectRight for E lo=9 hi=9', () {
    expect(E.bisectRight(-2, low: 9, high: 9), 9);
    expect(E.bisectRight(-1, low: 9, high: 9), 9);
    expect(E.bisectRight(0, low: 9, high: 9), 9);
    expect(E.bisectRight(1, low: 9, high: 9), 9);
    expect(E.bisectRight(2, low: 9, high: 9), 9);
    expect(E.bisectRight(3, low: 9, high: 9), 9);
    expect(E.bisectRight(4, low: 9, high: 9), 9);
    expect(E.bisectRight(5, low: 9, high: 9), 9);
    expect(E.bisectRight(6, low: 9, high: 9), 9);
    expect(E.bisectRight(7, low: 9, high: 9), 9);
    expect(E.bisectRight(8, low: 9, high: 9), 9);
  });

  test('bisect for A lo=None hi=None', () {
    expect(bisect(A, -2), 0);
    expect(bisect(A, -1), 0);
    expect(bisect(A, 0), 0);
    expect(bisect(A, 1), 0);
    expect(bisect(A, 2), 0);
    expect(bisect(A, 3), 0);
    expect(bisect(A, 4), 0);
    expect(bisect(A, 5), 0);
    expect(bisect(A, 6), 0);
    expect(bisect(A, 7), 0);
    expect(bisect(A, 8), 0);
  });

  test('bisect for B lo=None hi=None', () {
    expect(bisect(B, -2), 0);
    expect(bisect(B, -1), 0);
    expect(bisect(B, 0), 0);
    expect(bisect(B, 1), 0);
    expect(bisect(B, 2), 0);
    expect(bisect(B, 3), 0);
    expect(bisect(B, 4), 1);
    expect(bisect(B, 5), 1);
    expect(bisect(B, 6), 1);
    expect(bisect(B, 7), 1);
    expect(bisect(B, 8), 1);
  });

  test('bisect for C lo=None hi=None', () {
    expect(bisect(C, -2), 0);
    expect(bisect(C, -1), 0);
    expect(bisect(C, 0), 0);
    expect(bisect(C, 1), 0);
    expect(bisect(C, 2), 0);
    expect(bisect(C, 3), 0);
    expect(bisect(C, 4), 1);
    expect(bisect(C, 5), 2);
    expect(bisect(C, 6), 2);
    expect(bisect(C, 7), 2);
    expect(bisect(C, 8), 2);
  });

  test('bisect for D lo=None hi=None', () {
    expect(bisect(D, -2), 0);
    expect(bisect(D, -1), 0);
    expect(bisect(D, 0), 0);
    expect(bisect(D, 1), 0);
    expect(bisect(D, 2), 0);
    expect(bisect(D, 3), 1);
    expect(bisect(D, 4), 2);
    expect(bisect(D, 5), 3);
    expect(bisect(D, 6), 3);
    expect(bisect(D, 7), 3);
    expect(bisect(D, 8), 3);
  });

  test('bisect for E lo=None hi=None', () {
    expect(bisect(E, -2), 0);
    expect(bisect(E, -1), 0);
    expect(bisect(E, 0), 1);
    expect(bisect(E, 1), 2);
    expect(bisect(E, 2), 6);
    expect(bisect(E, 3), 8);
    expect(bisect(E, 4), 8);
    expect(bisect(E, 5), 9);
    expect(bisect(E, 6), 10);
    expect(bisect(E, 7), 10);
    expect(bisect(E, 8), 10);
  });

  test('bisect for A lo=0 hi=None', () {
    expect(bisect(A, -2, lo: 0), 0);
    expect(bisect(A, -1, lo: 0), 0);
    expect(bisect(A, 0, lo: 0), 0);
    expect(bisect(A, 1, lo: 0), 0);
    expect(bisect(A, 2, lo: 0), 0);
    expect(bisect(A, 3, lo: 0), 0);
    expect(bisect(A, 4, lo: 0), 0);
    expect(bisect(A, 5, lo: 0), 0);
    expect(bisect(A, 6, lo: 0), 0);
    expect(bisect(A, 7, lo: 0), 0);
    expect(bisect(A, 8, lo: 0), 0);
  });

  test('bisect for B lo=0 hi=None', () {
    expect(bisect(B, -2, lo: 0), 0);
    expect(bisect(B, -1, lo: 0), 0);
    expect(bisect(B, 0, lo: 0), 0);
    expect(bisect(B, 1, lo: 0), 0);
    expect(bisect(B, 2, lo: 0), 0);
    expect(bisect(B, 3, lo: 0), 0);
    expect(bisect(B, 4, lo: 0), 1);
    expect(bisect(B, 5, lo: 0), 1);
    expect(bisect(B, 6, lo: 0), 1);
    expect(bisect(B, 7, lo: 0), 1);
    expect(bisect(B, 8, lo: 0), 1);
  });

  test('bisect for C lo=0 hi=None', () {
    expect(bisect(C, -2, lo: 0), 0);
    expect(bisect(C, -1, lo: 0), 0);
    expect(bisect(C, 0, lo: 0), 0);
    expect(bisect(C, 1, lo: 0), 0);
    expect(bisect(C, 2, lo: 0), 0);
    expect(bisect(C, 3, lo: 0), 0);
    expect(bisect(C, 4, lo: 0), 1);
    expect(bisect(C, 5, lo: 0), 2);
    expect(bisect(C, 6, lo: 0), 2);
    expect(bisect(C, 7, lo: 0), 2);
    expect(bisect(C, 8, lo: 0), 2);
  });

  test('bisect for D lo=0 hi=None', () {
    expect(bisect(D, -2, lo: 0), 0);
    expect(bisect(D, -1, lo: 0), 0);
    expect(bisect(D, 0, lo: 0), 0);
    expect(bisect(D, 1, lo: 0), 0);
    expect(bisect(D, 2, lo: 0), 0);
    expect(bisect(D, 3, lo: 0), 1);
    expect(bisect(D, 4, lo: 0), 2);
    expect(bisect(D, 5, lo: 0), 3);
    expect(bisect(D, 6, lo: 0), 3);
    expect(bisect(D, 7, lo: 0), 3);
    expect(bisect(D, 8, lo: 0), 3);
  });

  test('bisect for E lo=0 hi=None', () {
    expect(bisect(E, -2, lo: 0), 0);
    expect(bisect(E, -1, lo: 0), 0);
    expect(bisect(E, 0, lo: 0), 1);
    expect(bisect(E, 1, lo: 0), 2);
    expect(bisect(E, 2, lo: 0), 6);
    expect(bisect(E, 3, lo: 0), 8);
    expect(bisect(E, 4, lo: 0), 8);
    expect(bisect(E, 5, lo: 0), 9);
    expect(bisect(E, 6, lo: 0), 10);
    expect(bisect(E, 7, lo: 0), 10);
    expect(bisect(E, 8, lo: 0), 10);
  });

  test('bisect for A lo=1 hi=None', () {
    expect(bisect(A, -2, lo: 1), 1);
    expect(bisect(A, -1, lo: 1), 1);
    expect(bisect(A, 0, lo: 1), 1);
    expect(bisect(A, 1, lo: 1), 1);
    expect(bisect(A, 2, lo: 1), 1);
    expect(bisect(A, 3, lo: 1), 1);
    expect(bisect(A, 4, lo: 1), 1);
    expect(bisect(A, 5, lo: 1), 1);
    expect(bisect(A, 6, lo: 1), 1);
    expect(bisect(A, 7, lo: 1), 1);
    expect(bisect(A, 8, lo: 1), 1);
  });

  test('bisect for B lo=1 hi=None', () {
    expect(bisect(B, -2, lo: 1), 1);
    expect(bisect(B, -1, lo: 1), 1);
    expect(bisect(B, 0, lo: 1), 1);
    expect(bisect(B, 1, lo: 1), 1);
    expect(bisect(B, 2, lo: 1), 1);
    expect(bisect(B, 3, lo: 1), 1);
    expect(bisect(B, 4, lo: 1), 1);
    expect(bisect(B, 5, lo: 1), 1);
    expect(bisect(B, 6, lo: 1), 1);
    expect(bisect(B, 7, lo: 1), 1);
    expect(bisect(B, 8, lo: 1), 1);
  });

  test('bisect for C lo=1 hi=None', () {
    expect(bisect(C, -2, lo: 1), 1);
    expect(bisect(C, -1, lo: 1), 1);
    expect(bisect(C, 0, lo: 1), 1);
    expect(bisect(C, 1, lo: 1), 1);
    expect(bisect(C, 2, lo: 1), 1);
    expect(bisect(C, 3, lo: 1), 1);
    expect(bisect(C, 4, lo: 1), 1);
    expect(bisect(C, 5, lo: 1), 2);
    expect(bisect(C, 6, lo: 1), 2);
    expect(bisect(C, 7, lo: 1), 2);
    expect(bisect(C, 8, lo: 1), 2);
  });

  test('bisect for D lo=1 hi=None', () {
    expect(bisect(D, -2, lo: 1), 1);
    expect(bisect(D, -1, lo: 1), 1);
    expect(bisect(D, 0, lo: 1), 1);
    expect(bisect(D, 1, lo: 1), 1);
    expect(bisect(D, 2, lo: 1), 1);
    expect(bisect(D, 3, lo: 1), 1);
    expect(bisect(D, 4, lo: 1), 2);
    expect(bisect(D, 5, lo: 1), 3);
    expect(bisect(D, 6, lo: 1), 3);
    expect(bisect(D, 7, lo: 1), 3);
    expect(bisect(D, 8, lo: 1), 3);
  });

  test('bisect for E lo=1 hi=None', () {
    expect(bisect(E, -2, lo: 1), 1);
    expect(bisect(E, -1, lo: 1), 1);
    expect(bisect(E, 0, lo: 1), 1);
    expect(bisect(E, 1, lo: 1), 2);
    expect(bisect(E, 2, lo: 1), 6);
    expect(bisect(E, 3, lo: 1), 8);
    expect(bisect(E, 4, lo: 1), 8);
    expect(bisect(E, 5, lo: 1), 9);
    expect(bisect(E, 6, lo: 1), 10);
    expect(bisect(E, 7, lo: 1), 10);
    expect(bisect(E, 8, lo: 1), 10);
  });

  test('bisect for A lo=2 hi=None', () {
    expect(bisect(A, -2, lo: 2), 2);
    expect(bisect(A, -1, lo: 2), 2);
    expect(bisect(A, 0, lo: 2), 2);
    expect(bisect(A, 1, lo: 2), 2);
    expect(bisect(A, 2, lo: 2), 2);
    expect(bisect(A, 3, lo: 2), 2);
    expect(bisect(A, 4, lo: 2), 2);
    expect(bisect(A, 5, lo: 2), 2);
    expect(bisect(A, 6, lo: 2), 2);
    expect(bisect(A, 7, lo: 2), 2);
    expect(bisect(A, 8, lo: 2), 2);
  });

  test('bisect for B lo=2 hi=None', () {
    expect(bisect(B, -2, lo: 2), 2);
    expect(bisect(B, -1, lo: 2), 2);
    expect(bisect(B, 0, lo: 2), 2);
    expect(bisect(B, 1, lo: 2), 2);
    expect(bisect(B, 2, lo: 2), 2);
    expect(bisect(B, 3, lo: 2), 2);
    expect(bisect(B, 4, lo: 2), 2);
    expect(bisect(B, 5, lo: 2), 2);
    expect(bisect(B, 6, lo: 2), 2);
    expect(bisect(B, 7, lo: 2), 2);
    expect(bisect(B, 8, lo: 2), 2);
  });

  test('bisect for C lo=2 hi=None', () {
    expect(bisect(C, -2, lo: 2), 2);
    expect(bisect(C, -1, lo: 2), 2);
    expect(bisect(C, 0, lo: 2), 2);
    expect(bisect(C, 1, lo: 2), 2);
    expect(bisect(C, 2, lo: 2), 2);
    expect(bisect(C, 3, lo: 2), 2);
    expect(bisect(C, 4, lo: 2), 2);
    expect(bisect(C, 5, lo: 2), 2);
    expect(bisect(C, 6, lo: 2), 2);
    expect(bisect(C, 7, lo: 2), 2);
    expect(bisect(C, 8, lo: 2), 2);
  });

  test('bisect for D lo=2 hi=None', () {
    expect(bisect(D, -2, lo: 2), 2);
    expect(bisect(D, -1, lo: 2), 2);
    expect(bisect(D, 0, lo: 2), 2);
    expect(bisect(D, 1, lo: 2), 2);
    expect(bisect(D, 2, lo: 2), 2);
    expect(bisect(D, 3, lo: 2), 2);
    expect(bisect(D, 4, lo: 2), 2);
    expect(bisect(D, 5, lo: 2), 3);
    expect(bisect(D, 6, lo: 2), 3);
    expect(bisect(D, 7, lo: 2), 3);
    expect(bisect(D, 8, lo: 2), 3);
  });

  test('bisect for E lo=2 hi=None', () {
    expect(bisect(E, -2, lo: 2), 2);
    expect(bisect(E, -1, lo: 2), 2);
    expect(bisect(E, 0, lo: 2), 2);
    expect(bisect(E, 1, lo: 2), 2);
    expect(bisect(E, 2, lo: 2), 6);
    expect(bisect(E, 3, lo: 2), 8);
    expect(bisect(E, 4, lo: 2), 8);
    expect(bisect(E, 5, lo: 2), 9);
    expect(bisect(E, 6, lo: 2), 10);
    expect(bisect(E, 7, lo: 2), 10);
    expect(bisect(E, 8, lo: 2), 10);
  });

  test('bisect for A lo=3 hi=None', () {
    expect(bisect(A, -2, lo: 3), 3);
    expect(bisect(A, -1, lo: 3), 3);
    expect(bisect(A, 0, lo: 3), 3);
    expect(bisect(A, 1, lo: 3), 3);
    expect(bisect(A, 2, lo: 3), 3);
    expect(bisect(A, 3, lo: 3), 3);
    expect(bisect(A, 4, lo: 3), 3);
    expect(bisect(A, 5, lo: 3), 3);
    expect(bisect(A, 6, lo: 3), 3);
    expect(bisect(A, 7, lo: 3), 3);
    expect(bisect(A, 8, lo: 3), 3);
  });

  test('bisect for B lo=3 hi=None', () {
    expect(bisect(B, -2, lo: 3), 3);
    expect(bisect(B, -1, lo: 3), 3);
    expect(bisect(B, 0, lo: 3), 3);
    expect(bisect(B, 1, lo: 3), 3);
    expect(bisect(B, 2, lo: 3), 3);
    expect(bisect(B, 3, lo: 3), 3);
    expect(bisect(B, 4, lo: 3), 3);
    expect(bisect(B, 5, lo: 3), 3);
    expect(bisect(B, 6, lo: 3), 3);
    expect(bisect(B, 7, lo: 3), 3);
    expect(bisect(B, 8, lo: 3), 3);
  });

  test('bisect for C lo=3 hi=None', () {
    expect(bisect(C, -2, lo: 3), 3);
    expect(bisect(C, -1, lo: 3), 3);
    expect(bisect(C, 0, lo: 3), 3);
    expect(bisect(C, 1, lo: 3), 3);
    expect(bisect(C, 2, lo: 3), 3);
    expect(bisect(C, 3, lo: 3), 3);
    expect(bisect(C, 4, lo: 3), 3);
    expect(bisect(C, 5, lo: 3), 3);
    expect(bisect(C, 6, lo: 3), 3);
    expect(bisect(C, 7, lo: 3), 3);
    expect(bisect(C, 8, lo: 3), 3);
  });

  test('bisect for D lo=3 hi=None', () {
    expect(bisect(D, -2, lo: 3), 3);
    expect(bisect(D, -1, lo: 3), 3);
    expect(bisect(D, 0, lo: 3), 3);
    expect(bisect(D, 1, lo: 3), 3);
    expect(bisect(D, 2, lo: 3), 3);
    expect(bisect(D, 3, lo: 3), 3);
    expect(bisect(D, 4, lo: 3), 3);
    expect(bisect(D, 5, lo: 3), 3);
    expect(bisect(D, 6, lo: 3), 3);
    expect(bisect(D, 7, lo: 3), 3);
    expect(bisect(D, 8, lo: 3), 3);
  });

  test('bisect for E lo=3 hi=None', () {
    expect(bisect(E, -2, lo: 3), 3);
    expect(bisect(E, -1, lo: 3), 3);
    expect(bisect(E, 0, lo: 3), 3);
    expect(bisect(E, 1, lo: 3), 3);
    expect(bisect(E, 2, lo: 3), 6);
    expect(bisect(E, 3, lo: 3), 8);
    expect(bisect(E, 4, lo: 3), 8);
    expect(bisect(E, 5, lo: 3), 9);
    expect(bisect(E, 6, lo: 3), 10);
    expect(bisect(E, 7, lo: 3), 10);
    expect(bisect(E, 8, lo: 3), 10);
  });

  test('bisect for A lo=4 hi=None', () {
    expect(bisect(A, -2, lo: 4), 4);
    expect(bisect(A, -1, lo: 4), 4);
    expect(bisect(A, 0, lo: 4), 4);
    expect(bisect(A, 1, lo: 4), 4);
    expect(bisect(A, 2, lo: 4), 4);
    expect(bisect(A, 3, lo: 4), 4);
    expect(bisect(A, 4, lo: 4), 4);
    expect(bisect(A, 5, lo: 4), 4);
    expect(bisect(A, 6, lo: 4), 4);
    expect(bisect(A, 7, lo: 4), 4);
    expect(bisect(A, 8, lo: 4), 4);
  });

  test('bisect for B lo=4 hi=None', () {
    expect(bisect(B, -2, lo: 4), 4);
    expect(bisect(B, -1, lo: 4), 4);
    expect(bisect(B, 0, lo: 4), 4);
    expect(bisect(B, 1, lo: 4), 4);
    expect(bisect(B, 2, lo: 4), 4);
    expect(bisect(B, 3, lo: 4), 4);
    expect(bisect(B, 4, lo: 4), 4);
    expect(bisect(B, 5, lo: 4), 4);
    expect(bisect(B, 6, lo: 4), 4);
    expect(bisect(B, 7, lo: 4), 4);
    expect(bisect(B, 8, lo: 4), 4);
  });

  test('bisect for C lo=4 hi=None', () {
    expect(bisect(C, -2, lo: 4), 4);
    expect(bisect(C, -1, lo: 4), 4);
    expect(bisect(C, 0, lo: 4), 4);
    expect(bisect(C, 1, lo: 4), 4);
    expect(bisect(C, 2, lo: 4), 4);
    expect(bisect(C, 3, lo: 4), 4);
    expect(bisect(C, 4, lo: 4), 4);
    expect(bisect(C, 5, lo: 4), 4);
    expect(bisect(C, 6, lo: 4), 4);
    expect(bisect(C, 7, lo: 4), 4);
    expect(bisect(C, 8, lo: 4), 4);
  });

  test('bisect for D lo=4 hi=None', () {
    expect(bisect(D, -2, lo: 4), 4);
    expect(bisect(D, -1, lo: 4), 4);
    expect(bisect(D, 0, lo: 4), 4);
    expect(bisect(D, 1, lo: 4), 4);
    expect(bisect(D, 2, lo: 4), 4);
    expect(bisect(D, 3, lo: 4), 4);
    expect(bisect(D, 4, lo: 4), 4);
    expect(bisect(D, 5, lo: 4), 4);
    expect(bisect(D, 6, lo: 4), 4);
    expect(bisect(D, 7, lo: 4), 4);
    expect(bisect(D, 8, lo: 4), 4);
  });

  test('bisect for E lo=4 hi=None', () {
    expect(bisect(E, -2, lo: 4), 4);
    expect(bisect(E, -1, lo: 4), 4);
    expect(bisect(E, 0, lo: 4), 4);
    expect(bisect(E, 1, lo: 4), 4);
    expect(bisect(E, 2, lo: 4), 6);
    expect(bisect(E, 3, lo: 4), 8);
    expect(bisect(E, 4, lo: 4), 8);
    expect(bisect(E, 5, lo: 4), 9);
    expect(bisect(E, 6, lo: 4), 10);
    expect(bisect(E, 7, lo: 4), 10);
    expect(bisect(E, 8, lo: 4), 10);
  });

  test('bisect for A lo=5 hi=None', () {
    expect(bisect(A, -2, lo: 5), 5);
    expect(bisect(A, -1, lo: 5), 5);
    expect(bisect(A, 0, lo: 5), 5);
    expect(bisect(A, 1, lo: 5), 5);
    expect(bisect(A, 2, lo: 5), 5);
    expect(bisect(A, 3, lo: 5), 5);
    expect(bisect(A, 4, lo: 5), 5);
    expect(bisect(A, 5, lo: 5), 5);
    expect(bisect(A, 6, lo: 5), 5);
    expect(bisect(A, 7, lo: 5), 5);
    expect(bisect(A, 8, lo: 5), 5);
  });

  test('bisect for B lo=5 hi=None', () {
    expect(bisect(B, -2, lo: 5), 5);
    expect(bisect(B, -1, lo: 5), 5);
    expect(bisect(B, 0, lo: 5), 5);
    expect(bisect(B, 1, lo: 5), 5);
    expect(bisect(B, 2, lo: 5), 5);
    expect(bisect(B, 3, lo: 5), 5);
    expect(bisect(B, 4, lo: 5), 5);
    expect(bisect(B, 5, lo: 5), 5);
    expect(bisect(B, 6, lo: 5), 5);
    expect(bisect(B, 7, lo: 5), 5);
    expect(bisect(B, 8, lo: 5), 5);
  });

  test('bisect for C lo=5 hi=None', () {
    expect(bisect(C, -2, lo: 5), 5);
    expect(bisect(C, -1, lo: 5), 5);
    expect(bisect(C, 0, lo: 5), 5);
    expect(bisect(C, 1, lo: 5), 5);
    expect(bisect(C, 2, lo: 5), 5);
    expect(bisect(C, 3, lo: 5), 5);
    expect(bisect(C, 4, lo: 5), 5);
    expect(bisect(C, 5, lo: 5), 5);
    expect(bisect(C, 6, lo: 5), 5);
    expect(bisect(C, 7, lo: 5), 5);
    expect(bisect(C, 8, lo: 5), 5);
  });

  test('bisect for D lo=5 hi=None', () {
    expect(bisect(D, -2, lo: 5), 5);
    expect(bisect(D, -1, lo: 5), 5);
    expect(bisect(D, 0, lo: 5), 5);
    expect(bisect(D, 1, lo: 5), 5);
    expect(bisect(D, 2, lo: 5), 5);
    expect(bisect(D, 3, lo: 5), 5);
    expect(bisect(D, 4, lo: 5), 5);
    expect(bisect(D, 5, lo: 5), 5);
    expect(bisect(D, 6, lo: 5), 5);
    expect(bisect(D, 7, lo: 5), 5);
    expect(bisect(D, 8, lo: 5), 5);
  });

  test('bisect for E lo=5 hi=None', () {
    expect(bisect(E, -2, lo: 5), 5);
    expect(bisect(E, -1, lo: 5), 5);
    expect(bisect(E, 0, lo: 5), 5);
    expect(bisect(E, 1, lo: 5), 5);
    expect(bisect(E, 2, lo: 5), 6);
    expect(bisect(E, 3, lo: 5), 8);
    expect(bisect(E, 4, lo: 5), 8);
    expect(bisect(E, 5, lo: 5), 9);
    expect(bisect(E, 6, lo: 5), 10);
    expect(bisect(E, 7, lo: 5), 10);
    expect(bisect(E, 8, lo: 5), 10);
  });

  test('bisect for A lo=6 hi=None', () {
    expect(bisect(A, -2, lo: 6), 6);
    expect(bisect(A, -1, lo: 6), 6);
    expect(bisect(A, 0, lo: 6), 6);
    expect(bisect(A, 1, lo: 6), 6);
    expect(bisect(A, 2, lo: 6), 6);
    expect(bisect(A, 3, lo: 6), 6);
    expect(bisect(A, 4, lo: 6), 6);
    expect(bisect(A, 5, lo: 6), 6);
    expect(bisect(A, 6, lo: 6), 6);
    expect(bisect(A, 7, lo: 6), 6);
    expect(bisect(A, 8, lo: 6), 6);
  });

  test('bisect for B lo=6 hi=None', () {
    expect(bisect(B, -2, lo: 6), 6);
    expect(bisect(B, -1, lo: 6), 6);
    expect(bisect(B, 0, lo: 6), 6);
    expect(bisect(B, 1, lo: 6), 6);
    expect(bisect(B, 2, lo: 6), 6);
    expect(bisect(B, 3, lo: 6), 6);
    expect(bisect(B, 4, lo: 6), 6);
    expect(bisect(B, 5, lo: 6), 6);
    expect(bisect(B, 6, lo: 6), 6);
    expect(bisect(B, 7, lo: 6), 6);
    expect(bisect(B, 8, lo: 6), 6);
  });

  test('bisect for C lo=6 hi=None', () {
    expect(bisect(C, -2, lo: 6), 6);
    expect(bisect(C, -1, lo: 6), 6);
    expect(bisect(C, 0, lo: 6), 6);
    expect(bisect(C, 1, lo: 6), 6);
    expect(bisect(C, 2, lo: 6), 6);
    expect(bisect(C, 3, lo: 6), 6);
    expect(bisect(C, 4, lo: 6), 6);
    expect(bisect(C, 5, lo: 6), 6);
    expect(bisect(C, 6, lo: 6), 6);
    expect(bisect(C, 7, lo: 6), 6);
    expect(bisect(C, 8, lo: 6), 6);
  });

  test('bisect for D lo=6 hi=None', () {
    expect(bisect(D, -2, lo: 6), 6);
    expect(bisect(D, -1, lo: 6), 6);
    expect(bisect(D, 0, lo: 6), 6);
    expect(bisect(D, 1, lo: 6), 6);
    expect(bisect(D, 2, lo: 6), 6);
    expect(bisect(D, 3, lo: 6), 6);
    expect(bisect(D, 4, lo: 6), 6);
    expect(bisect(D, 5, lo: 6), 6);
    expect(bisect(D, 6, lo: 6), 6);
    expect(bisect(D, 7, lo: 6), 6);
    expect(bisect(D, 8, lo: 6), 6);
  });

  test('bisect for E lo=6 hi=None', () {
    expect(bisect(E, -2, lo: 6), 6);
    expect(bisect(E, -1, lo: 6), 6);
    expect(bisect(E, 0, lo: 6), 6);
    expect(bisect(E, 1, lo: 6), 6);
    expect(bisect(E, 2, lo: 6), 6);
    expect(bisect(E, 3, lo: 6), 8);
    expect(bisect(E, 4, lo: 6), 8);
    expect(bisect(E, 5, lo: 6), 9);
    expect(bisect(E, 6, lo: 6), 10);
    expect(bisect(E, 7, lo: 6), 10);
    expect(bisect(E, 8, lo: 6), 10);
  });

  test('bisect for A lo=7 hi=None', () {
    expect(bisect(A, -2, lo: 7), 7);
    expect(bisect(A, -1, lo: 7), 7);
    expect(bisect(A, 0, lo: 7), 7);
    expect(bisect(A, 1, lo: 7), 7);
    expect(bisect(A, 2, lo: 7), 7);
    expect(bisect(A, 3, lo: 7), 7);
    expect(bisect(A, 4, lo: 7), 7);
    expect(bisect(A, 5, lo: 7), 7);
    expect(bisect(A, 6, lo: 7), 7);
    expect(bisect(A, 7, lo: 7), 7);
    expect(bisect(A, 8, lo: 7), 7);
  });

  test('bisect for B lo=7 hi=None', () {
    expect(bisect(B, -2, lo: 7), 7);
    expect(bisect(B, -1, lo: 7), 7);
    expect(bisect(B, 0, lo: 7), 7);
    expect(bisect(B, 1, lo: 7), 7);
    expect(bisect(B, 2, lo: 7), 7);
    expect(bisect(B, 3, lo: 7), 7);
    expect(bisect(B, 4, lo: 7), 7);
    expect(bisect(B, 5, lo: 7), 7);
    expect(bisect(B, 6, lo: 7), 7);
    expect(bisect(B, 7, lo: 7), 7);
    expect(bisect(B, 8, lo: 7), 7);
  });

  test('bisect for C lo=7 hi=None', () {
    expect(bisect(C, -2, lo: 7), 7);
    expect(bisect(C, -1, lo: 7), 7);
    expect(bisect(C, 0, lo: 7), 7);
    expect(bisect(C, 1, lo: 7), 7);
    expect(bisect(C, 2, lo: 7), 7);
    expect(bisect(C, 3, lo: 7), 7);
    expect(bisect(C, 4, lo: 7), 7);
    expect(bisect(C, 5, lo: 7), 7);
    expect(bisect(C, 6, lo: 7), 7);
    expect(bisect(C, 7, lo: 7), 7);
    expect(bisect(C, 8, lo: 7), 7);
  });

  test('bisect for D lo=7 hi=None', () {
    expect(bisect(D, -2, lo: 7), 7);
    expect(bisect(D, -1, lo: 7), 7);
    expect(bisect(D, 0, lo: 7), 7);
    expect(bisect(D, 1, lo: 7), 7);
    expect(bisect(D, 2, lo: 7), 7);
    expect(bisect(D, 3, lo: 7), 7);
    expect(bisect(D, 4, lo: 7), 7);
    expect(bisect(D, 5, lo: 7), 7);
    expect(bisect(D, 6, lo: 7), 7);
    expect(bisect(D, 7, lo: 7), 7);
    expect(bisect(D, 8, lo: 7), 7);
  });

  test('bisect for E lo=7 hi=None', () {
    expect(bisect(E, -2, lo: 7), 7);
    expect(bisect(E, -1, lo: 7), 7);
    expect(bisect(E, 0, lo: 7), 7);
    expect(bisect(E, 1, lo: 7), 7);
    expect(bisect(E, 2, lo: 7), 7);
    expect(bisect(E, 3, lo: 7), 8);
    expect(bisect(E, 4, lo: 7), 8);
    expect(bisect(E, 5, lo: 7), 9);
    expect(bisect(E, 6, lo: 7), 10);
    expect(bisect(E, 7, lo: 7), 10);
    expect(bisect(E, 8, lo: 7), 10);
  });

  test('bisect for A lo=8 hi=None', () {
    expect(bisect(A, -2, lo: 8), 8);
    expect(bisect(A, -1, lo: 8), 8);
    expect(bisect(A, 0, lo: 8), 8);
    expect(bisect(A, 1, lo: 8), 8);
    expect(bisect(A, 2, lo: 8), 8);
    expect(bisect(A, 3, lo: 8), 8);
    expect(bisect(A, 4, lo: 8), 8);
    expect(bisect(A, 5, lo: 8), 8);
    expect(bisect(A, 6, lo: 8), 8);
    expect(bisect(A, 7, lo: 8), 8);
    expect(bisect(A, 8, lo: 8), 8);
  });

  test('bisect for B lo=8 hi=None', () {
    expect(bisect(B, -2, lo: 8), 8);
    expect(bisect(B, -1, lo: 8), 8);
    expect(bisect(B, 0, lo: 8), 8);
    expect(bisect(B, 1, lo: 8), 8);
    expect(bisect(B, 2, lo: 8), 8);
    expect(bisect(B, 3, lo: 8), 8);
    expect(bisect(B, 4, lo: 8), 8);
    expect(bisect(B, 5, lo: 8), 8);
    expect(bisect(B, 6, lo: 8), 8);
    expect(bisect(B, 7, lo: 8), 8);
    expect(bisect(B, 8, lo: 8), 8);
  });

  test('bisect for C lo=8 hi=None', () {
    expect(bisect(C, -2, lo: 8), 8);
    expect(bisect(C, -1, lo: 8), 8);
    expect(bisect(C, 0, lo: 8), 8);
    expect(bisect(C, 1, lo: 8), 8);
    expect(bisect(C, 2, lo: 8), 8);
    expect(bisect(C, 3, lo: 8), 8);
    expect(bisect(C, 4, lo: 8), 8);
    expect(bisect(C, 5, lo: 8), 8);
    expect(bisect(C, 6, lo: 8), 8);
    expect(bisect(C, 7, lo: 8), 8);
    expect(bisect(C, 8, lo: 8), 8);
  });

  test('bisect for D lo=8 hi=None', () {
    expect(bisect(D, -2, lo: 8), 8);
    expect(bisect(D, -1, lo: 8), 8);
    expect(bisect(D, 0, lo: 8), 8);
    expect(bisect(D, 1, lo: 8), 8);
    expect(bisect(D, 2, lo: 8), 8);
    expect(bisect(D, 3, lo: 8), 8);
    expect(bisect(D, 4, lo: 8), 8);
    expect(bisect(D, 5, lo: 8), 8);
    expect(bisect(D, 6, lo: 8), 8);
    expect(bisect(D, 7, lo: 8), 8);
    expect(bisect(D, 8, lo: 8), 8);
  });

  test('bisect for E lo=8 hi=None', () {
    expect(bisect(E, -2, lo: 8), 8);
    expect(bisect(E, -1, lo: 8), 8);
    expect(bisect(E, 0, lo: 8), 8);
    expect(bisect(E, 1, lo: 8), 8);
    expect(bisect(E, 2, lo: 8), 8);
    expect(bisect(E, 3, lo: 8), 8);
    expect(bisect(E, 4, lo: 8), 8);
    expect(bisect(E, 5, lo: 8), 9);
    expect(bisect(E, 6, lo: 8), 10);
    expect(bisect(E, 7, lo: 8), 10);
    expect(bisect(E, 8, lo: 8), 10);
  });

  test('bisect for A lo=9 hi=None', () {
    expect(bisect(A, -2, lo: 9), 9);
    expect(bisect(A, -1, lo: 9), 9);
    expect(bisect(A, 0, lo: 9), 9);
    expect(bisect(A, 1, lo: 9), 9);
    expect(bisect(A, 2, lo: 9), 9);
    expect(bisect(A, 3, lo: 9), 9);
    expect(bisect(A, 4, lo: 9), 9);
    expect(bisect(A, 5, lo: 9), 9);
    expect(bisect(A, 6, lo: 9), 9);
    expect(bisect(A, 7, lo: 9), 9);
    expect(bisect(A, 8, lo: 9), 9);
  });

  test('bisect for B lo=9 hi=None', () {
    expect(bisect(B, -2, lo: 9), 9);
    expect(bisect(B, -1, lo: 9), 9);
    expect(bisect(B, 0, lo: 9), 9);
    expect(bisect(B, 1, lo: 9), 9);
    expect(bisect(B, 2, lo: 9), 9);
    expect(bisect(B, 3, lo: 9), 9);
    expect(bisect(B, 4, lo: 9), 9);
    expect(bisect(B, 5, lo: 9), 9);
    expect(bisect(B, 6, lo: 9), 9);
    expect(bisect(B, 7, lo: 9), 9);
    expect(bisect(B, 8, lo: 9), 9);
  });

  test('bisect for C lo=9 hi=None', () {
    expect(bisect(C, -2, lo: 9), 9);
    expect(bisect(C, -1, lo: 9), 9);
    expect(bisect(C, 0, lo: 9), 9);
    expect(bisect(C, 1, lo: 9), 9);
    expect(bisect(C, 2, lo: 9), 9);
    expect(bisect(C, 3, lo: 9), 9);
    expect(bisect(C, 4, lo: 9), 9);
    expect(bisect(C, 5, lo: 9), 9);
    expect(bisect(C, 6, lo: 9), 9);
    expect(bisect(C, 7, lo: 9), 9);
    expect(bisect(C, 8, lo: 9), 9);
  });

  test('bisect for D lo=9 hi=None', () {
    expect(bisect(D, -2, lo: 9), 9);
    expect(bisect(D, -1, lo: 9), 9);
    expect(bisect(D, 0, lo: 9), 9);
    expect(bisect(D, 1, lo: 9), 9);
    expect(bisect(D, 2, lo: 9), 9);
    expect(bisect(D, 3, lo: 9), 9);
    expect(bisect(D, 4, lo: 9), 9);
    expect(bisect(D, 5, lo: 9), 9);
    expect(bisect(D, 6, lo: 9), 9);
    expect(bisect(D, 7, lo: 9), 9);
    expect(bisect(D, 8, lo: 9), 9);
  });

  test('bisect for E lo=9 hi=None', () {
    expect(bisect(E, -2, lo: 9), 9);
    expect(bisect(E, -1, lo: 9), 9);
    expect(bisect(E, 0, lo: 9), 9);
    expect(bisect(E, 1, lo: 9), 9);
    expect(bisect(E, 2, lo: 9), 9);
    expect(bisect(E, 3, lo: 9), 9);
    expect(bisect(E, 4, lo: 9), 9);
    expect(bisect(E, 5, lo: 9), 9);
    expect(bisect(E, 6, lo: 9), 10);
    expect(bisect(E, 7, lo: 9), 10);
    expect(bisect(E, 8, lo: 9), 10);
  });

  test('bisect for A lo=None hi=0', () {
    expect(bisect(A, -2, hi: 0), 0);
    expect(bisect(A, -1, hi: 0), 0);
    expect(bisect(A, 0, hi: 0), 0);
    expect(bisect(A, 1, hi: 0), 0);
    expect(bisect(A, 2, hi: 0), 0);
    expect(bisect(A, 3, hi: 0), 0);
    expect(bisect(A, 4, hi: 0), 0);
    expect(bisect(A, 5, hi: 0), 0);
    expect(bisect(A, 6, hi: 0), 0);
    expect(bisect(A, 7, hi: 0), 0);
    expect(bisect(A, 8, hi: 0), 0);
  });

  test('bisect for B lo=None hi=0', () {
    expect(bisect(B, -2, hi: 0), 0);
    expect(bisect(B, -1, hi: 0), 0);
    expect(bisect(B, 0, hi: 0), 0);
    expect(bisect(B, 1, hi: 0), 0);
    expect(bisect(B, 2, hi: 0), 0);
    expect(bisect(B, 3, hi: 0), 0);
    expect(bisect(B, 4, hi: 0), 0);
    expect(bisect(B, 5, hi: 0), 0);
    expect(bisect(B, 6, hi: 0), 0);
    expect(bisect(B, 7, hi: 0), 0);
    expect(bisect(B, 8, hi: 0), 0);
  });

  test('bisect for C lo=None hi=0', () {
    expect(bisect(C, -2, hi: 0), 0);
    expect(bisect(C, -1, hi: 0), 0);
    expect(bisect(C, 0, hi: 0), 0);
    expect(bisect(C, 1, hi: 0), 0);
    expect(bisect(C, 2, hi: 0), 0);
    expect(bisect(C, 3, hi: 0), 0);
    expect(bisect(C, 4, hi: 0), 0);
    expect(bisect(C, 5, hi: 0), 0);
    expect(bisect(C, 6, hi: 0), 0);
    expect(bisect(C, 7, hi: 0), 0);
    expect(bisect(C, 8, hi: 0), 0);
  });

  test('bisect for D lo=None hi=0', () {
    expect(bisect(D, -2, hi: 0), 0);
    expect(bisect(D, -1, hi: 0), 0);
    expect(bisect(D, 0, hi: 0), 0);
    expect(bisect(D, 1, hi: 0), 0);
    expect(bisect(D, 2, hi: 0), 0);
    expect(bisect(D, 3, hi: 0), 0);
    expect(bisect(D, 4, hi: 0), 0);
    expect(bisect(D, 5, hi: 0), 0);
    expect(bisect(D, 6, hi: 0), 0);
    expect(bisect(D, 7, hi: 0), 0);
    expect(bisect(D, 8, hi: 0), 0);
  });

  test('bisect for E lo=None hi=0', () {
    expect(bisect(E, -2, hi: 0), 0);
    expect(bisect(E, -1, hi: 0), 0);
    expect(bisect(E, 0, hi: 0), 0);
    expect(bisect(E, 1, hi: 0), 0);
    expect(bisect(E, 2, hi: 0), 0);
    expect(bisect(E, 3, hi: 0), 0);
    expect(bisect(E, 4, hi: 0), 0);
    expect(bisect(E, 5, hi: 0), 0);
    expect(bisect(E, 6, hi: 0), 0);
    expect(bisect(E, 7, hi: 0), 0);
    expect(bisect(E, 8, hi: 0), 0);
  });

  test('bisect for A lo=0 hi=0', () {
    expect(bisect(A, -2, lo: 0, hi: 0), 0);
    expect(bisect(A, -1, lo: 0, hi: 0), 0);
    expect(bisect(A, 0, lo: 0, hi: 0), 0);
    expect(bisect(A, 1, lo: 0, hi: 0), 0);
    expect(bisect(A, 2, lo: 0, hi: 0), 0);
    expect(bisect(A, 3, lo: 0, hi: 0), 0);
    expect(bisect(A, 4, lo: 0, hi: 0), 0);
    expect(bisect(A, 5, lo: 0, hi: 0), 0);
    expect(bisect(A, 6, lo: 0, hi: 0), 0);
    expect(bisect(A, 7, lo: 0, hi: 0), 0);
    expect(bisect(A, 8, lo: 0, hi: 0), 0);
  });

  test('bisect for B lo=0 hi=0', () {
    expect(bisect(B, -2, lo: 0, hi: 0), 0);
    expect(bisect(B, -1, lo: 0, hi: 0), 0);
    expect(bisect(B, 0, lo: 0, hi: 0), 0);
    expect(bisect(B, 1, lo: 0, hi: 0), 0);
    expect(bisect(B, 2, lo: 0, hi: 0), 0);
    expect(bisect(B, 3, lo: 0, hi: 0), 0);
    expect(bisect(B, 4, lo: 0, hi: 0), 0);
    expect(bisect(B, 5, lo: 0, hi: 0), 0);
    expect(bisect(B, 6, lo: 0, hi: 0), 0);
    expect(bisect(B, 7, lo: 0, hi: 0), 0);
    expect(bisect(B, 8, lo: 0, hi: 0), 0);
  });

  test('bisect for C lo=0 hi=0', () {
    expect(bisect(C, -2, lo: 0, hi: 0), 0);
    expect(bisect(C, -1, lo: 0, hi: 0), 0);
    expect(bisect(C, 0, lo: 0, hi: 0), 0);
    expect(bisect(C, 1, lo: 0, hi: 0), 0);
    expect(bisect(C, 2, lo: 0, hi: 0), 0);
    expect(bisect(C, 3, lo: 0, hi: 0), 0);
    expect(bisect(C, 4, lo: 0, hi: 0), 0);
    expect(bisect(C, 5, lo: 0, hi: 0), 0);
    expect(bisect(C, 6, lo: 0, hi: 0), 0);
    expect(bisect(C, 7, lo: 0, hi: 0), 0);
    expect(bisect(C, 8, lo: 0, hi: 0), 0);
  });

  test('bisect for D lo=0 hi=0', () {
    expect(bisect(D, -2, lo: 0, hi: 0), 0);
    expect(bisect(D, -1, lo: 0, hi: 0), 0);
    expect(bisect(D, 0, lo: 0, hi: 0), 0);
    expect(bisect(D, 1, lo: 0, hi: 0), 0);
    expect(bisect(D, 2, lo: 0, hi: 0), 0);
    expect(bisect(D, 3, lo: 0, hi: 0), 0);
    expect(bisect(D, 4, lo: 0, hi: 0), 0);
    expect(bisect(D, 5, lo: 0, hi: 0), 0);
    expect(bisect(D, 6, lo: 0, hi: 0), 0);
    expect(bisect(D, 7, lo: 0, hi: 0), 0);
    expect(bisect(D, 8, lo: 0, hi: 0), 0);
  });

  test('bisect for E lo=0 hi=0', () {
    expect(bisect(E, -2, lo: 0, hi: 0), 0);
    expect(bisect(E, -1, lo: 0, hi: 0), 0);
    expect(bisect(E, 0, lo: 0, hi: 0), 0);
    expect(bisect(E, 1, lo: 0, hi: 0), 0);
    expect(bisect(E, 2, lo: 0, hi: 0), 0);
    expect(bisect(E, 3, lo: 0, hi: 0), 0);
    expect(bisect(E, 4, lo: 0, hi: 0), 0);
    expect(bisect(E, 5, lo: 0, hi: 0), 0);
    expect(bisect(E, 6, lo: 0, hi: 0), 0);
    expect(bisect(E, 7, lo: 0, hi: 0), 0);
    expect(bisect(E, 8, lo: 0, hi: 0), 0);
  });

  test('bisect for A lo=1 hi=0', () {
    expect(bisect(A, -2, lo: 1, hi: 0), 1);
    expect(bisect(A, -1, lo: 1, hi: 0), 1);
    expect(bisect(A, 0, lo: 1, hi: 0), 1);
    expect(bisect(A, 1, lo: 1, hi: 0), 1);
    expect(bisect(A, 2, lo: 1, hi: 0), 1);
    expect(bisect(A, 3, lo: 1, hi: 0), 1);
    expect(bisect(A, 4, lo: 1, hi: 0), 1);
    expect(bisect(A, 5, lo: 1, hi: 0), 1);
    expect(bisect(A, 6, lo: 1, hi: 0), 1);
    expect(bisect(A, 7, lo: 1, hi: 0), 1);
    expect(bisect(A, 8, lo: 1, hi: 0), 1);
  });

  test('bisect for B lo=1 hi=0', () {
    expect(bisect(B, -2, lo: 1, hi: 0), 1);
    expect(bisect(B, -1, lo: 1, hi: 0), 1);
    expect(bisect(B, 0, lo: 1, hi: 0), 1);
    expect(bisect(B, 1, lo: 1, hi: 0), 1);
    expect(bisect(B, 2, lo: 1, hi: 0), 1);
    expect(bisect(B, 3, lo: 1, hi: 0), 1);
    expect(bisect(B, 4, lo: 1, hi: 0), 1);
    expect(bisect(B, 5, lo: 1, hi: 0), 1);
    expect(bisect(B, 6, lo: 1, hi: 0), 1);
    expect(bisect(B, 7, lo: 1, hi: 0), 1);
    expect(bisect(B, 8, lo: 1, hi: 0), 1);
  });

  test('bisect for C lo=1 hi=0', () {
    expect(bisect(C, -2, lo: 1, hi: 0), 1);
    expect(bisect(C, -1, lo: 1, hi: 0), 1);
    expect(bisect(C, 0, lo: 1, hi: 0), 1);
    expect(bisect(C, 1, lo: 1, hi: 0), 1);
    expect(bisect(C, 2, lo: 1, hi: 0), 1);
    expect(bisect(C, 3, lo: 1, hi: 0), 1);
    expect(bisect(C, 4, lo: 1, hi: 0), 1);
    expect(bisect(C, 5, lo: 1, hi: 0), 1);
    expect(bisect(C, 6, lo: 1, hi: 0), 1);
    expect(bisect(C, 7, lo: 1, hi: 0), 1);
    expect(bisect(C, 8, lo: 1, hi: 0), 1);
  });

  test('bisect for D lo=1 hi=0', () {
    expect(bisect(D, -2, lo: 1, hi: 0), 1);
    expect(bisect(D, -1, lo: 1, hi: 0), 1);
    expect(bisect(D, 0, lo: 1, hi: 0), 1);
    expect(bisect(D, 1, lo: 1, hi: 0), 1);
    expect(bisect(D, 2, lo: 1, hi: 0), 1);
    expect(bisect(D, 3, lo: 1, hi: 0), 1);
    expect(bisect(D, 4, lo: 1, hi: 0), 1);
    expect(bisect(D, 5, lo: 1, hi: 0), 1);
    expect(bisect(D, 6, lo: 1, hi: 0), 1);
    expect(bisect(D, 7, lo: 1, hi: 0), 1);
    expect(bisect(D, 8, lo: 1, hi: 0), 1);
  });

  test('bisect for E lo=1 hi=0', () {
    expect(bisect(E, -2, lo: 1, hi: 0), 1);
    expect(bisect(E, -1, lo: 1, hi: 0), 1);
    expect(bisect(E, 0, lo: 1, hi: 0), 1);
    expect(bisect(E, 1, lo: 1, hi: 0), 1);
    expect(bisect(E, 2, lo: 1, hi: 0), 1);
    expect(bisect(E, 3, lo: 1, hi: 0), 1);
    expect(bisect(E, 4, lo: 1, hi: 0), 1);
    expect(bisect(E, 5, lo: 1, hi: 0), 1);
    expect(bisect(E, 6, lo: 1, hi: 0), 1);
    expect(bisect(E, 7, lo: 1, hi: 0), 1);
    expect(bisect(E, 8, lo: 1, hi: 0), 1);
  });

  test('bisect for A lo=2 hi=0', () {
    expect(bisect(A, -2, lo: 2, hi: 0), 2);
    expect(bisect(A, -1, lo: 2, hi: 0), 2);
    expect(bisect(A, 0, lo: 2, hi: 0), 2);
    expect(bisect(A, 1, lo: 2, hi: 0), 2);
    expect(bisect(A, 2, lo: 2, hi: 0), 2);
    expect(bisect(A, 3, lo: 2, hi: 0), 2);
    expect(bisect(A, 4, lo: 2, hi: 0), 2);
    expect(bisect(A, 5, lo: 2, hi: 0), 2);
    expect(bisect(A, 6, lo: 2, hi: 0), 2);
    expect(bisect(A, 7, lo: 2, hi: 0), 2);
    expect(bisect(A, 8, lo: 2, hi: 0), 2);
  });

  test('bisect for B lo=2 hi=0', () {
    expect(bisect(B, -2, lo: 2, hi: 0), 2);
    expect(bisect(B, -1, lo: 2, hi: 0), 2);
    expect(bisect(B, 0, lo: 2, hi: 0), 2);
    expect(bisect(B, 1, lo: 2, hi: 0), 2);
    expect(bisect(B, 2, lo: 2, hi: 0), 2);
    expect(bisect(B, 3, lo: 2, hi: 0), 2);
    expect(bisect(B, 4, lo: 2, hi: 0), 2);
    expect(bisect(B, 5, lo: 2, hi: 0), 2);
    expect(bisect(B, 6, lo: 2, hi: 0), 2);
    expect(bisect(B, 7, lo: 2, hi: 0), 2);
    expect(bisect(B, 8, lo: 2, hi: 0), 2);
  });

  test('bisect for C lo=2 hi=0', () {
    expect(bisect(C, -2, lo: 2, hi: 0), 2);
    expect(bisect(C, -1, lo: 2, hi: 0), 2);
    expect(bisect(C, 0, lo: 2, hi: 0), 2);
    expect(bisect(C, 1, lo: 2, hi: 0), 2);
    expect(bisect(C, 2, lo: 2, hi: 0), 2);
    expect(bisect(C, 3, lo: 2, hi: 0), 2);
    expect(bisect(C, 4, lo: 2, hi: 0), 2);
    expect(bisect(C, 5, lo: 2, hi: 0), 2);
    expect(bisect(C, 6, lo: 2, hi: 0), 2);
    expect(bisect(C, 7, lo: 2, hi: 0), 2);
    expect(bisect(C, 8, lo: 2, hi: 0), 2);
  });

  test('bisect for D lo=2 hi=0', () {
    expect(bisect(D, -2, lo: 2, hi: 0), 2);
    expect(bisect(D, -1, lo: 2, hi: 0), 2);
    expect(bisect(D, 0, lo: 2, hi: 0), 2);
    expect(bisect(D, 1, lo: 2, hi: 0), 2);
    expect(bisect(D, 2, lo: 2, hi: 0), 2);
    expect(bisect(D, 3, lo: 2, hi: 0), 2);
    expect(bisect(D, 4, lo: 2, hi: 0), 2);
    expect(bisect(D, 5, lo: 2, hi: 0), 2);
    expect(bisect(D, 6, lo: 2, hi: 0), 2);
    expect(bisect(D, 7, lo: 2, hi: 0), 2);
    expect(bisect(D, 8, lo: 2, hi: 0), 2);
  });

  test('bisect for E lo=2 hi=0', () {
    expect(bisect(E, -2, lo: 2, hi: 0), 2);
    expect(bisect(E, -1, lo: 2, hi: 0), 2);
    expect(bisect(E, 0, lo: 2, hi: 0), 2);
    expect(bisect(E, 1, lo: 2, hi: 0), 2);
    expect(bisect(E, 2, lo: 2, hi: 0), 2);
    expect(bisect(E, 3, lo: 2, hi: 0), 2);
    expect(bisect(E, 4, lo: 2, hi: 0), 2);
    expect(bisect(E, 5, lo: 2, hi: 0), 2);
    expect(bisect(E, 6, lo: 2, hi: 0), 2);
    expect(bisect(E, 7, lo: 2, hi: 0), 2);
    expect(bisect(E, 8, lo: 2, hi: 0), 2);
  });

  test('bisect for A lo=3 hi=0', () {
    expect(bisect(A, -2, lo: 3, hi: 0), 3);
    expect(bisect(A, -1, lo: 3, hi: 0), 3);
    expect(bisect(A, 0, lo: 3, hi: 0), 3);
    expect(bisect(A, 1, lo: 3, hi: 0), 3);
    expect(bisect(A, 2, lo: 3, hi: 0), 3);
    expect(bisect(A, 3, lo: 3, hi: 0), 3);
    expect(bisect(A, 4, lo: 3, hi: 0), 3);
    expect(bisect(A, 5, lo: 3, hi: 0), 3);
    expect(bisect(A, 6, lo: 3, hi: 0), 3);
    expect(bisect(A, 7, lo: 3, hi: 0), 3);
    expect(bisect(A, 8, lo: 3, hi: 0), 3);
  });

  test('bisect for B lo=3 hi=0', () {
    expect(bisect(B, -2, lo: 3, hi: 0), 3);
    expect(bisect(B, -1, lo: 3, hi: 0), 3);
    expect(bisect(B, 0, lo: 3, hi: 0), 3);
    expect(bisect(B, 1, lo: 3, hi: 0), 3);
    expect(bisect(B, 2, lo: 3, hi: 0), 3);
    expect(bisect(B, 3, lo: 3, hi: 0), 3);
    expect(bisect(B, 4, lo: 3, hi: 0), 3);
    expect(bisect(B, 5, lo: 3, hi: 0), 3);
    expect(bisect(B, 6, lo: 3, hi: 0), 3);
    expect(bisect(B, 7, lo: 3, hi: 0), 3);
    expect(bisect(B, 8, lo: 3, hi: 0), 3);
  });

  test('bisect for C lo=3 hi=0', () {
    expect(bisect(C, -2, lo: 3, hi: 0), 3);
    expect(bisect(C, -1, lo: 3, hi: 0), 3);
    expect(bisect(C, 0, lo: 3, hi: 0), 3);
    expect(bisect(C, 1, lo: 3, hi: 0), 3);
    expect(bisect(C, 2, lo: 3, hi: 0), 3);
    expect(bisect(C, 3, lo: 3, hi: 0), 3);
    expect(bisect(C, 4, lo: 3, hi: 0), 3);
    expect(bisect(C, 5, lo: 3, hi: 0), 3);
    expect(bisect(C, 6, lo: 3, hi: 0), 3);
    expect(bisect(C, 7, lo: 3, hi: 0), 3);
    expect(bisect(C, 8, lo: 3, hi: 0), 3);
  });

  test('bisect for D lo=3 hi=0', () {
    expect(bisect(D, -2, lo: 3, hi: 0), 3);
    expect(bisect(D, -1, lo: 3, hi: 0), 3);
    expect(bisect(D, 0, lo: 3, hi: 0), 3);
    expect(bisect(D, 1, lo: 3, hi: 0), 3);
    expect(bisect(D, 2, lo: 3, hi: 0), 3);
    expect(bisect(D, 3, lo: 3, hi: 0), 3);
    expect(bisect(D, 4, lo: 3, hi: 0), 3);
    expect(bisect(D, 5, lo: 3, hi: 0), 3);
    expect(bisect(D, 6, lo: 3, hi: 0), 3);
    expect(bisect(D, 7, lo: 3, hi: 0), 3);
    expect(bisect(D, 8, lo: 3, hi: 0), 3);
  });

  test('bisect for E lo=3 hi=0', () {
    expect(bisect(E, -2, lo: 3, hi: 0), 3);
    expect(bisect(E, -1, lo: 3, hi: 0), 3);
    expect(bisect(E, 0, lo: 3, hi: 0), 3);
    expect(bisect(E, 1, lo: 3, hi: 0), 3);
    expect(bisect(E, 2, lo: 3, hi: 0), 3);
    expect(bisect(E, 3, lo: 3, hi: 0), 3);
    expect(bisect(E, 4, lo: 3, hi: 0), 3);
    expect(bisect(E, 5, lo: 3, hi: 0), 3);
    expect(bisect(E, 6, lo: 3, hi: 0), 3);
    expect(bisect(E, 7, lo: 3, hi: 0), 3);
    expect(bisect(E, 8, lo: 3, hi: 0), 3);
  });

  test('bisect for A lo=4 hi=0', () {
    expect(bisect(A, -2, lo: 4, hi: 0), 4);
    expect(bisect(A, -1, lo: 4, hi: 0), 4);
    expect(bisect(A, 0, lo: 4, hi: 0), 4);
    expect(bisect(A, 1, lo: 4, hi: 0), 4);
    expect(bisect(A, 2, lo: 4, hi: 0), 4);
    expect(bisect(A, 3, lo: 4, hi: 0), 4);
    expect(bisect(A, 4, lo: 4, hi: 0), 4);
    expect(bisect(A, 5, lo: 4, hi: 0), 4);
    expect(bisect(A, 6, lo: 4, hi: 0), 4);
    expect(bisect(A, 7, lo: 4, hi: 0), 4);
    expect(bisect(A, 8, lo: 4, hi: 0), 4);
  });

  test('bisect for B lo=4 hi=0', () {
    expect(bisect(B, -2, lo: 4, hi: 0), 4);
    expect(bisect(B, -1, lo: 4, hi: 0), 4);
    expect(bisect(B, 0, lo: 4, hi: 0), 4);
    expect(bisect(B, 1, lo: 4, hi: 0), 4);
    expect(bisect(B, 2, lo: 4, hi: 0), 4);
    expect(bisect(B, 3, lo: 4, hi: 0), 4);
    expect(bisect(B, 4, lo: 4, hi: 0), 4);
    expect(bisect(B, 5, lo: 4, hi: 0), 4);
    expect(bisect(B, 6, lo: 4, hi: 0), 4);
    expect(bisect(B, 7, lo: 4, hi: 0), 4);
    expect(bisect(B, 8, lo: 4, hi: 0), 4);
  });

  test('bisect for C lo=4 hi=0', () {
    expect(bisect(C, -2, lo: 4, hi: 0), 4);
    expect(bisect(C, -1, lo: 4, hi: 0), 4);
    expect(bisect(C, 0, lo: 4, hi: 0), 4);
    expect(bisect(C, 1, lo: 4, hi: 0), 4);
    expect(bisect(C, 2, lo: 4, hi: 0), 4);
    expect(bisect(C, 3, lo: 4, hi: 0), 4);
    expect(bisect(C, 4, lo: 4, hi: 0), 4);
    expect(bisect(C, 5, lo: 4, hi: 0), 4);
    expect(bisect(C, 6, lo: 4, hi: 0), 4);
    expect(bisect(C, 7, lo: 4, hi: 0), 4);
    expect(bisect(C, 8, lo: 4, hi: 0), 4);
  });

  test('bisect for D lo=4 hi=0', () {
    expect(bisect(D, -2, lo: 4, hi: 0), 4);
    expect(bisect(D, -1, lo: 4, hi: 0), 4);
    expect(bisect(D, 0, lo: 4, hi: 0), 4);
    expect(bisect(D, 1, lo: 4, hi: 0), 4);
    expect(bisect(D, 2, lo: 4, hi: 0), 4);
    expect(bisect(D, 3, lo: 4, hi: 0), 4);
    expect(bisect(D, 4, lo: 4, hi: 0), 4);
    expect(bisect(D, 5, lo: 4, hi: 0), 4);
    expect(bisect(D, 6, lo: 4, hi: 0), 4);
    expect(bisect(D, 7, lo: 4, hi: 0), 4);
    expect(bisect(D, 8, lo: 4, hi: 0), 4);
  });

  test('bisect for E lo=4 hi=0', () {
    expect(bisect(E, -2, lo: 4, hi: 0), 4);
    expect(bisect(E, -1, lo: 4, hi: 0), 4);
    expect(bisect(E, 0, lo: 4, hi: 0), 4);
    expect(bisect(E, 1, lo: 4, hi: 0), 4);
    expect(bisect(E, 2, lo: 4, hi: 0), 4);
    expect(bisect(E, 3, lo: 4, hi: 0), 4);
    expect(bisect(E, 4, lo: 4, hi: 0), 4);
    expect(bisect(E, 5, lo: 4, hi: 0), 4);
    expect(bisect(E, 6, lo: 4, hi: 0), 4);
    expect(bisect(E, 7, lo: 4, hi: 0), 4);
    expect(bisect(E, 8, lo: 4, hi: 0), 4);
  });

  test('bisect for A lo=5 hi=0', () {
    expect(bisect(A, -2, lo: 5, hi: 0), 5);
    expect(bisect(A, -1, lo: 5, hi: 0), 5);
    expect(bisect(A, 0, lo: 5, hi: 0), 5);
    expect(bisect(A, 1, lo: 5, hi: 0), 5);
    expect(bisect(A, 2, lo: 5, hi: 0), 5);
    expect(bisect(A, 3, lo: 5, hi: 0), 5);
    expect(bisect(A, 4, lo: 5, hi: 0), 5);
    expect(bisect(A, 5, lo: 5, hi: 0), 5);
    expect(bisect(A, 6, lo: 5, hi: 0), 5);
    expect(bisect(A, 7, lo: 5, hi: 0), 5);
    expect(bisect(A, 8, lo: 5, hi: 0), 5);
  });

  test('bisect for B lo=5 hi=0', () {
    expect(bisect(B, -2, lo: 5, hi: 0), 5);
    expect(bisect(B, -1, lo: 5, hi: 0), 5);
    expect(bisect(B, 0, lo: 5, hi: 0), 5);
    expect(bisect(B, 1, lo: 5, hi: 0), 5);
    expect(bisect(B, 2, lo: 5, hi: 0), 5);
    expect(bisect(B, 3, lo: 5, hi: 0), 5);
    expect(bisect(B, 4, lo: 5, hi: 0), 5);
    expect(bisect(B, 5, lo: 5, hi: 0), 5);
    expect(bisect(B, 6, lo: 5, hi: 0), 5);
    expect(bisect(B, 7, lo: 5, hi: 0), 5);
    expect(bisect(B, 8, lo: 5, hi: 0), 5);
  });

  test('bisect for C lo=5 hi=0', () {
    expect(bisect(C, -2, lo: 5, hi: 0), 5);
    expect(bisect(C, -1, lo: 5, hi: 0), 5);
    expect(bisect(C, 0, lo: 5, hi: 0), 5);
    expect(bisect(C, 1, lo: 5, hi: 0), 5);
    expect(bisect(C, 2, lo: 5, hi: 0), 5);
    expect(bisect(C, 3, lo: 5, hi: 0), 5);
    expect(bisect(C, 4, lo: 5, hi: 0), 5);
    expect(bisect(C, 5, lo: 5, hi: 0), 5);
    expect(bisect(C, 6, lo: 5, hi: 0), 5);
    expect(bisect(C, 7, lo: 5, hi: 0), 5);
    expect(bisect(C, 8, lo: 5, hi: 0), 5);
  });

  test('bisect for D lo=5 hi=0', () {
    expect(bisect(D, -2, lo: 5, hi: 0), 5);
    expect(bisect(D, -1, lo: 5, hi: 0), 5);
    expect(bisect(D, 0, lo: 5, hi: 0), 5);
    expect(bisect(D, 1, lo: 5, hi: 0), 5);
    expect(bisect(D, 2, lo: 5, hi: 0), 5);
    expect(bisect(D, 3, lo: 5, hi: 0), 5);
    expect(bisect(D, 4, lo: 5, hi: 0), 5);
    expect(bisect(D, 5, lo: 5, hi: 0), 5);
    expect(bisect(D, 6, lo: 5, hi: 0), 5);
    expect(bisect(D, 7, lo: 5, hi: 0), 5);
    expect(bisect(D, 8, lo: 5, hi: 0), 5);
  });

  test('bisect for E lo=5 hi=0', () {
    expect(bisect(E, -2, lo: 5, hi: 0), 5);
    expect(bisect(E, -1, lo: 5, hi: 0), 5);
    expect(bisect(E, 0, lo: 5, hi: 0), 5);
    expect(bisect(E, 1, lo: 5, hi: 0), 5);
    expect(bisect(E, 2, lo: 5, hi: 0), 5);
    expect(bisect(E, 3, lo: 5, hi: 0), 5);
    expect(bisect(E, 4, lo: 5, hi: 0), 5);
    expect(bisect(E, 5, lo: 5, hi: 0), 5);
    expect(bisect(E, 6, lo: 5, hi: 0), 5);
    expect(bisect(E, 7, lo: 5, hi: 0), 5);
    expect(bisect(E, 8, lo: 5, hi: 0), 5);
  });

  test('bisect for A lo=6 hi=0', () {
    expect(bisect(A, -2, lo: 6, hi: 0), 6);
    expect(bisect(A, -1, lo: 6, hi: 0), 6);
    expect(bisect(A, 0, lo: 6, hi: 0), 6);
    expect(bisect(A, 1, lo: 6, hi: 0), 6);
    expect(bisect(A, 2, lo: 6, hi: 0), 6);
    expect(bisect(A, 3, lo: 6, hi: 0), 6);
    expect(bisect(A, 4, lo: 6, hi: 0), 6);
    expect(bisect(A, 5, lo: 6, hi: 0), 6);
    expect(bisect(A, 6, lo: 6, hi: 0), 6);
    expect(bisect(A, 7, lo: 6, hi: 0), 6);
    expect(bisect(A, 8, lo: 6, hi: 0), 6);
  });

  test('bisect for B lo=6 hi=0', () {
    expect(bisect(B, -2, lo: 6, hi: 0), 6);
    expect(bisect(B, -1, lo: 6, hi: 0), 6);
    expect(bisect(B, 0, lo: 6, hi: 0), 6);
    expect(bisect(B, 1, lo: 6, hi: 0), 6);
    expect(bisect(B, 2, lo: 6, hi: 0), 6);
    expect(bisect(B, 3, lo: 6, hi: 0), 6);
    expect(bisect(B, 4, lo: 6, hi: 0), 6);
    expect(bisect(B, 5, lo: 6, hi: 0), 6);
    expect(bisect(B, 6, lo: 6, hi: 0), 6);
    expect(bisect(B, 7, lo: 6, hi: 0), 6);
    expect(bisect(B, 8, lo: 6, hi: 0), 6);
  });

  test('bisect for C lo=6 hi=0', () {
    expect(bisect(C, -2, lo: 6, hi: 0), 6);
    expect(bisect(C, -1, lo: 6, hi: 0), 6);
    expect(bisect(C, 0, lo: 6, hi: 0), 6);
    expect(bisect(C, 1, lo: 6, hi: 0), 6);
    expect(bisect(C, 2, lo: 6, hi: 0), 6);
    expect(bisect(C, 3, lo: 6, hi: 0), 6);
    expect(bisect(C, 4, lo: 6, hi: 0), 6);
    expect(bisect(C, 5, lo: 6, hi: 0), 6);
    expect(bisect(C, 6, lo: 6, hi: 0), 6);
    expect(bisect(C, 7, lo: 6, hi: 0), 6);
    expect(bisect(C, 8, lo: 6, hi: 0), 6);
  });

  test('bisect for D lo=6 hi=0', () {
    expect(bisect(D, -2, lo: 6, hi: 0), 6);
    expect(bisect(D, -1, lo: 6, hi: 0), 6);
    expect(bisect(D, 0, lo: 6, hi: 0), 6);
    expect(bisect(D, 1, lo: 6, hi: 0), 6);
    expect(bisect(D, 2, lo: 6, hi: 0), 6);
    expect(bisect(D, 3, lo: 6, hi: 0), 6);
    expect(bisect(D, 4, lo: 6, hi: 0), 6);
    expect(bisect(D, 5, lo: 6, hi: 0), 6);
    expect(bisect(D, 6, lo: 6, hi: 0), 6);
    expect(bisect(D, 7, lo: 6, hi: 0), 6);
    expect(bisect(D, 8, lo: 6, hi: 0), 6);
  });

  test('bisect for E lo=6 hi=0', () {
    expect(bisect(E, -2, lo: 6, hi: 0), 6);
    expect(bisect(E, -1, lo: 6, hi: 0), 6);
    expect(bisect(E, 0, lo: 6, hi: 0), 6);
    expect(bisect(E, 1, lo: 6, hi: 0), 6);
    expect(bisect(E, 2, lo: 6, hi: 0), 6);
    expect(bisect(E, 3, lo: 6, hi: 0), 6);
    expect(bisect(E, 4, lo: 6, hi: 0), 6);
    expect(bisect(E, 5, lo: 6, hi: 0), 6);
    expect(bisect(E, 6, lo: 6, hi: 0), 6);
    expect(bisect(E, 7, lo: 6, hi: 0), 6);
    expect(bisect(E, 8, lo: 6, hi: 0), 6);
  });

  test('bisect for A lo=7 hi=0', () {
    expect(bisect(A, -2, lo: 7, hi: 0), 7);
    expect(bisect(A, -1, lo: 7, hi: 0), 7);
    expect(bisect(A, 0, lo: 7, hi: 0), 7);
    expect(bisect(A, 1, lo: 7, hi: 0), 7);
    expect(bisect(A, 2, lo: 7, hi: 0), 7);
    expect(bisect(A, 3, lo: 7, hi: 0), 7);
    expect(bisect(A, 4, lo: 7, hi: 0), 7);
    expect(bisect(A, 5, lo: 7, hi: 0), 7);
    expect(bisect(A, 6, lo: 7, hi: 0), 7);
    expect(bisect(A, 7, lo: 7, hi: 0), 7);
    expect(bisect(A, 8, lo: 7, hi: 0), 7);
  });

  test('bisect for B lo=7 hi=0', () {
    expect(bisect(B, -2, lo: 7, hi: 0), 7);
    expect(bisect(B, -1, lo: 7, hi: 0), 7);
    expect(bisect(B, 0, lo: 7, hi: 0), 7);
    expect(bisect(B, 1, lo: 7, hi: 0), 7);
    expect(bisect(B, 2, lo: 7, hi: 0), 7);
    expect(bisect(B, 3, lo: 7, hi: 0), 7);
    expect(bisect(B, 4, lo: 7, hi: 0), 7);
    expect(bisect(B, 5, lo: 7, hi: 0), 7);
    expect(bisect(B, 6, lo: 7, hi: 0), 7);
    expect(bisect(B, 7, lo: 7, hi: 0), 7);
    expect(bisect(B, 8, lo: 7, hi: 0), 7);
  });

  test('bisect for C lo=7 hi=0', () {
    expect(bisect(C, -2, lo: 7, hi: 0), 7);
    expect(bisect(C, -1, lo: 7, hi: 0), 7);
    expect(bisect(C, 0, lo: 7, hi: 0), 7);
    expect(bisect(C, 1, lo: 7, hi: 0), 7);
    expect(bisect(C, 2, lo: 7, hi: 0), 7);
    expect(bisect(C, 3, lo: 7, hi: 0), 7);
    expect(bisect(C, 4, lo: 7, hi: 0), 7);
    expect(bisect(C, 5, lo: 7, hi: 0), 7);
    expect(bisect(C, 6, lo: 7, hi: 0), 7);
    expect(bisect(C, 7, lo: 7, hi: 0), 7);
    expect(bisect(C, 8, lo: 7, hi: 0), 7);
  });

  test('bisect for D lo=7 hi=0', () {
    expect(bisect(D, -2, lo: 7, hi: 0), 7);
    expect(bisect(D, -1, lo: 7, hi: 0), 7);
    expect(bisect(D, 0, lo: 7, hi: 0), 7);
    expect(bisect(D, 1, lo: 7, hi: 0), 7);
    expect(bisect(D, 2, lo: 7, hi: 0), 7);
    expect(bisect(D, 3, lo: 7, hi: 0), 7);
    expect(bisect(D, 4, lo: 7, hi: 0), 7);
    expect(bisect(D, 5, lo: 7, hi: 0), 7);
    expect(bisect(D, 6, lo: 7, hi: 0), 7);
    expect(bisect(D, 7, lo: 7, hi: 0), 7);
    expect(bisect(D, 8, lo: 7, hi: 0), 7);
  });

  test('bisect for E lo=7 hi=0', () {
    expect(bisect(E, -2, lo: 7, hi: 0), 7);
    expect(bisect(E, -1, lo: 7, hi: 0), 7);
    expect(bisect(E, 0, lo: 7, hi: 0), 7);
    expect(bisect(E, 1, lo: 7, hi: 0), 7);
    expect(bisect(E, 2, lo: 7, hi: 0), 7);
    expect(bisect(E, 3, lo: 7, hi: 0), 7);
    expect(bisect(E, 4, lo: 7, hi: 0), 7);
    expect(bisect(E, 5, lo: 7, hi: 0), 7);
    expect(bisect(E, 6, lo: 7, hi: 0), 7);
    expect(bisect(E, 7, lo: 7, hi: 0), 7);
    expect(bisect(E, 8, lo: 7, hi: 0), 7);
  });

  test('bisect for A lo=8 hi=0', () {
    expect(bisect(A, -2, lo: 8, hi: 0), 8);
    expect(bisect(A, -1, lo: 8, hi: 0), 8);
    expect(bisect(A, 0, lo: 8, hi: 0), 8);
    expect(bisect(A, 1, lo: 8, hi: 0), 8);
    expect(bisect(A, 2, lo: 8, hi: 0), 8);
    expect(bisect(A, 3, lo: 8, hi: 0), 8);
    expect(bisect(A, 4, lo: 8, hi: 0), 8);
    expect(bisect(A, 5, lo: 8, hi: 0), 8);
    expect(bisect(A, 6, lo: 8, hi: 0), 8);
    expect(bisect(A, 7, lo: 8, hi: 0), 8);
    expect(bisect(A, 8, lo: 8, hi: 0), 8);
  });

  test('bisect for B lo=8 hi=0', () {
    expect(bisect(B, -2, lo: 8, hi: 0), 8);
    expect(bisect(B, -1, lo: 8, hi: 0), 8);
    expect(bisect(B, 0, lo: 8, hi: 0), 8);
    expect(bisect(B, 1, lo: 8, hi: 0), 8);
    expect(bisect(B, 2, lo: 8, hi: 0), 8);
    expect(bisect(B, 3, lo: 8, hi: 0), 8);
    expect(bisect(B, 4, lo: 8, hi: 0), 8);
    expect(bisect(B, 5, lo: 8, hi: 0), 8);
    expect(bisect(B, 6, lo: 8, hi: 0), 8);
    expect(bisect(B, 7, lo: 8, hi: 0), 8);
    expect(bisect(B, 8, lo: 8, hi: 0), 8);
  });

  test('bisect for C lo=8 hi=0', () {
    expect(bisect(C, -2, lo: 8, hi: 0), 8);
    expect(bisect(C, -1, lo: 8, hi: 0), 8);
    expect(bisect(C, 0, lo: 8, hi: 0), 8);
    expect(bisect(C, 1, lo: 8, hi: 0), 8);
    expect(bisect(C, 2, lo: 8, hi: 0), 8);
    expect(bisect(C, 3, lo: 8, hi: 0), 8);
    expect(bisect(C, 4, lo: 8, hi: 0), 8);
    expect(bisect(C, 5, lo: 8, hi: 0), 8);
    expect(bisect(C, 6, lo: 8, hi: 0), 8);
    expect(bisect(C, 7, lo: 8, hi: 0), 8);
    expect(bisect(C, 8, lo: 8, hi: 0), 8);
  });

  test('bisect for D lo=8 hi=0', () {
    expect(bisect(D, -2, lo: 8, hi: 0), 8);
    expect(bisect(D, -1, lo: 8, hi: 0), 8);
    expect(bisect(D, 0, lo: 8, hi: 0), 8);
    expect(bisect(D, 1, lo: 8, hi: 0), 8);
    expect(bisect(D, 2, lo: 8, hi: 0), 8);
    expect(bisect(D, 3, lo: 8, hi: 0), 8);
    expect(bisect(D, 4, lo: 8, hi: 0), 8);
    expect(bisect(D, 5, lo: 8, hi: 0), 8);
    expect(bisect(D, 6, lo: 8, hi: 0), 8);
    expect(bisect(D, 7, lo: 8, hi: 0), 8);
    expect(bisect(D, 8, lo: 8, hi: 0), 8);
  });

  test('bisect for E lo=8 hi=0', () {
    expect(bisect(E, -2, lo: 8, hi: 0), 8);
    expect(bisect(E, -1, lo: 8, hi: 0), 8);
    expect(bisect(E, 0, lo: 8, hi: 0), 8);
    expect(bisect(E, 1, lo: 8, hi: 0), 8);
    expect(bisect(E, 2, lo: 8, hi: 0), 8);
    expect(bisect(E, 3, lo: 8, hi: 0), 8);
    expect(bisect(E, 4, lo: 8, hi: 0), 8);
    expect(bisect(E, 5, lo: 8, hi: 0), 8);
    expect(bisect(E, 6, lo: 8, hi: 0), 8);
    expect(bisect(E, 7, lo: 8, hi: 0), 8);
    expect(bisect(E, 8, lo: 8, hi: 0), 8);
  });

  test('bisect for A lo=9 hi=0', () {
    expect(bisect(A, -2, lo: 9, hi: 0), 9);
    expect(bisect(A, -1, lo: 9, hi: 0), 9);
    expect(bisect(A, 0, lo: 9, hi: 0), 9);
    expect(bisect(A, 1, lo: 9, hi: 0), 9);
    expect(bisect(A, 2, lo: 9, hi: 0), 9);
    expect(bisect(A, 3, lo: 9, hi: 0), 9);
    expect(bisect(A, 4, lo: 9, hi: 0), 9);
    expect(bisect(A, 5, lo: 9, hi: 0), 9);
    expect(bisect(A, 6, lo: 9, hi: 0), 9);
    expect(bisect(A, 7, lo: 9, hi: 0), 9);
    expect(bisect(A, 8, lo: 9, hi: 0), 9);
  });

  test('bisect for B lo=9 hi=0', () {
    expect(bisect(B, -2, lo: 9, hi: 0), 9);
    expect(bisect(B, -1, lo: 9, hi: 0), 9);
    expect(bisect(B, 0, lo: 9, hi: 0), 9);
    expect(bisect(B, 1, lo: 9, hi: 0), 9);
    expect(bisect(B, 2, lo: 9, hi: 0), 9);
    expect(bisect(B, 3, lo: 9, hi: 0), 9);
    expect(bisect(B, 4, lo: 9, hi: 0), 9);
    expect(bisect(B, 5, lo: 9, hi: 0), 9);
    expect(bisect(B, 6, lo: 9, hi: 0), 9);
    expect(bisect(B, 7, lo: 9, hi: 0), 9);
    expect(bisect(B, 8, lo: 9, hi: 0), 9);
  });

  test('bisect for C lo=9 hi=0', () {
    expect(bisect(C, -2, lo: 9, hi: 0), 9);
    expect(bisect(C, -1, lo: 9, hi: 0), 9);
    expect(bisect(C, 0, lo: 9, hi: 0), 9);
    expect(bisect(C, 1, lo: 9, hi: 0), 9);
    expect(bisect(C, 2, lo: 9, hi: 0), 9);
    expect(bisect(C, 3, lo: 9, hi: 0), 9);
    expect(bisect(C, 4, lo: 9, hi: 0), 9);
    expect(bisect(C, 5, lo: 9, hi: 0), 9);
    expect(bisect(C, 6, lo: 9, hi: 0), 9);
    expect(bisect(C, 7, lo: 9, hi: 0), 9);
    expect(bisect(C, 8, lo: 9, hi: 0), 9);
  });

  test('bisect for D lo=9 hi=0', () {
    expect(bisect(D, -2, lo: 9, hi: 0), 9);
    expect(bisect(D, -1, lo: 9, hi: 0), 9);
    expect(bisect(D, 0, lo: 9, hi: 0), 9);
    expect(bisect(D, 1, lo: 9, hi: 0), 9);
    expect(bisect(D, 2, lo: 9, hi: 0), 9);
    expect(bisect(D, 3, lo: 9, hi: 0), 9);
    expect(bisect(D, 4, lo: 9, hi: 0), 9);
    expect(bisect(D, 5, lo: 9, hi: 0), 9);
    expect(bisect(D, 6, lo: 9, hi: 0), 9);
    expect(bisect(D, 7, lo: 9, hi: 0), 9);
    expect(bisect(D, 8, lo: 9, hi: 0), 9);
  });

  test('bisect for E lo=9 hi=0', () {
    expect(bisect(E, -2, lo: 9, hi: 0), 9);
    expect(bisect(E, -1, lo: 9, hi: 0), 9);
    expect(bisect(E, 0, lo: 9, hi: 0), 9);
    expect(bisect(E, 1, lo: 9, hi: 0), 9);
    expect(bisect(E, 2, lo: 9, hi: 0), 9);
    expect(bisect(E, 3, lo: 9, hi: 0), 9);
    expect(bisect(E, 4, lo: 9, hi: 0), 9);
    expect(bisect(E, 5, lo: 9, hi: 0), 9);
    expect(bisect(E, 6, lo: 9, hi: 0), 9);
    expect(bisect(E, 7, lo: 9, hi: 0), 9);
    expect(bisect(E, 8, lo: 9, hi: 0), 9);
  });

  test('bisect for A lo=None hi=1', () {
    expect(() => bisect(A, -2, hi: 1), throwsRangeError);
    expect(() => bisect(A, -1, hi: 1), throwsRangeError);
    expect(() => bisect(A, 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 1, hi: 1), throwsRangeError);
    expect(() => bisect(A, 2, hi: 1), throwsRangeError);
    expect(() => bisect(A, 3, hi: 1), throwsRangeError);
    expect(() => bisect(A, 4, hi: 1), throwsRangeError);
    expect(() => bisect(A, 5, hi: 1), throwsRangeError);
    expect(() => bisect(A, 6, hi: 1), throwsRangeError);
    expect(() => bisect(A, 7, hi: 1), throwsRangeError);
    expect(() => bisect(A, 8, hi: 1), throwsRangeError);
  });

  test('bisect for B lo=None hi=1', () {
    expect(bisect(B, -2, hi: 1), 0);
    expect(bisect(B, -1, hi: 1), 0);
    expect(bisect(B, 0, hi: 1), 0);
    expect(bisect(B, 1, hi: 1), 0);
    expect(bisect(B, 2, hi: 1), 0);
    expect(bisect(B, 3, hi: 1), 0);
    expect(bisect(B, 4, hi: 1), 1);
    expect(bisect(B, 5, hi: 1), 1);
    expect(bisect(B, 6, hi: 1), 1);
    expect(bisect(B, 7, hi: 1), 1);
    expect(bisect(B, 8, hi: 1), 1);
  });

  test('bisect for C lo=None hi=1', () {
    expect(bisect(C, -2, hi: 1), 0);
    expect(bisect(C, -1, hi: 1), 0);
    expect(bisect(C, 0, hi: 1), 0);
    expect(bisect(C, 1, hi: 1), 0);
    expect(bisect(C, 2, hi: 1), 0);
    expect(bisect(C, 3, hi: 1), 0);
    expect(bisect(C, 4, hi: 1), 1);
    expect(bisect(C, 5, hi: 1), 1);
    expect(bisect(C, 6, hi: 1), 1);
    expect(bisect(C, 7, hi: 1), 1);
    expect(bisect(C, 8, hi: 1), 1);
  });

  test('bisect for D lo=None hi=1', () {
    expect(bisect(D, -2, hi: 1), 0);
    expect(bisect(D, -1, hi: 1), 0);
    expect(bisect(D, 0, hi: 1), 0);
    expect(bisect(D, 1, hi: 1), 0);
    expect(bisect(D, 2, hi: 1), 0);
    expect(bisect(D, 3, hi: 1), 1);
    expect(bisect(D, 4, hi: 1), 1);
    expect(bisect(D, 5, hi: 1), 1);
    expect(bisect(D, 6, hi: 1), 1);
    expect(bisect(D, 7, hi: 1), 1);
    expect(bisect(D, 8, hi: 1), 1);
  });

  test('bisect for E lo=None hi=1', () {
    expect(bisect(E, -2, hi: 1), 0);
    expect(bisect(E, -1, hi: 1), 0);
    expect(bisect(E, 0, hi: 1), 1);
    expect(bisect(E, 1, hi: 1), 1);
    expect(bisect(E, 2, hi: 1), 1);
    expect(bisect(E, 3, hi: 1), 1);
    expect(bisect(E, 4, hi: 1), 1);
    expect(bisect(E, 5, hi: 1), 1);
    expect(bisect(E, 6, hi: 1), 1);
    expect(bisect(E, 7, hi: 1), 1);
    expect(bisect(E, 8, hi: 1), 1);
  });

  test('bisect for A lo=0 hi=1', () {
    expect(() => bisect(A, -2, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 1), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 1), throwsRangeError);
  });

  test('bisect for B lo=0 hi=1', () {
    expect(bisect(B, -2, lo: 0, hi: 1), 0);
    expect(bisect(B, -1, lo: 0, hi: 1), 0);
    expect(bisect(B, 0, lo: 0, hi: 1), 0);
    expect(bisect(B, 1, lo: 0, hi: 1), 0);
    expect(bisect(B, 2, lo: 0, hi: 1), 0);
    expect(bisect(B, 3, lo: 0, hi: 1), 0);
    expect(bisect(B, 4, lo: 0, hi: 1), 1);
    expect(bisect(B, 5, lo: 0, hi: 1), 1);
    expect(bisect(B, 6, lo: 0, hi: 1), 1);
    expect(bisect(B, 7, lo: 0, hi: 1), 1);
    expect(bisect(B, 8, lo: 0, hi: 1), 1);
  });

  test('bisect for C lo=0 hi=1', () {
    expect(bisect(C, -2, lo: 0, hi: 1), 0);
    expect(bisect(C, -1, lo: 0, hi: 1), 0);
    expect(bisect(C, 0, lo: 0, hi: 1), 0);
    expect(bisect(C, 1, lo: 0, hi: 1), 0);
    expect(bisect(C, 2, lo: 0, hi: 1), 0);
    expect(bisect(C, 3, lo: 0, hi: 1), 0);
    expect(bisect(C, 4, lo: 0, hi: 1), 1);
    expect(bisect(C, 5, lo: 0, hi: 1), 1);
    expect(bisect(C, 6, lo: 0, hi: 1), 1);
    expect(bisect(C, 7, lo: 0, hi: 1), 1);
    expect(bisect(C, 8, lo: 0, hi: 1), 1);
  });

  test('bisect for D lo=0 hi=1', () {
    expect(bisect(D, -2, lo: 0, hi: 1), 0);
    expect(bisect(D, -1, lo: 0, hi: 1), 0);
    expect(bisect(D, 0, lo: 0, hi: 1), 0);
    expect(bisect(D, 1, lo: 0, hi: 1), 0);
    expect(bisect(D, 2, lo: 0, hi: 1), 0);
    expect(bisect(D, 3, lo: 0, hi: 1), 1);
    expect(bisect(D, 4, lo: 0, hi: 1), 1);
    expect(bisect(D, 5, lo: 0, hi: 1), 1);
    expect(bisect(D, 6, lo: 0, hi: 1), 1);
    expect(bisect(D, 7, lo: 0, hi: 1), 1);
    expect(bisect(D, 8, lo: 0, hi: 1), 1);
  });

  test('bisect for E lo=0 hi=1', () {
    expect(bisect(E, -2, lo: 0, hi: 1), 0);
    expect(bisect(E, -1, lo: 0, hi: 1), 0);
    expect(bisect(E, 0, lo: 0, hi: 1), 1);
    expect(bisect(E, 1, lo: 0, hi: 1), 1);
    expect(bisect(E, 2, lo: 0, hi: 1), 1);
    expect(bisect(E, 3, lo: 0, hi: 1), 1);
    expect(bisect(E, 4, lo: 0, hi: 1), 1);
    expect(bisect(E, 5, lo: 0, hi: 1), 1);
    expect(bisect(E, 6, lo: 0, hi: 1), 1);
    expect(bisect(E, 7, lo: 0, hi: 1), 1);
    expect(bisect(E, 8, lo: 0, hi: 1), 1);
  });

  test('bisect for A lo=1 hi=1', () {
    expect(bisect(A, -2, lo: 1, hi: 1), 1);
    expect(bisect(A, -1, lo: 1, hi: 1), 1);
    expect(bisect(A, 0, lo: 1, hi: 1), 1);
    expect(bisect(A, 1, lo: 1, hi: 1), 1);
    expect(bisect(A, 2, lo: 1, hi: 1), 1);
    expect(bisect(A, 3, lo: 1, hi: 1), 1);
    expect(bisect(A, 4, lo: 1, hi: 1), 1);
    expect(bisect(A, 5, lo: 1, hi: 1), 1);
    expect(bisect(A, 6, lo: 1, hi: 1), 1);
    expect(bisect(A, 7, lo: 1, hi: 1), 1);
    expect(bisect(A, 8, lo: 1, hi: 1), 1);
  });

  test('bisect for B lo=1 hi=1', () {
    expect(bisect(B, -2, lo: 1, hi: 1), 1);
    expect(bisect(B, -1, lo: 1, hi: 1), 1);
    expect(bisect(B, 0, lo: 1, hi: 1), 1);
    expect(bisect(B, 1, lo: 1, hi: 1), 1);
    expect(bisect(B, 2, lo: 1, hi: 1), 1);
    expect(bisect(B, 3, lo: 1, hi: 1), 1);
    expect(bisect(B, 4, lo: 1, hi: 1), 1);
    expect(bisect(B, 5, lo: 1, hi: 1), 1);
    expect(bisect(B, 6, lo: 1, hi: 1), 1);
    expect(bisect(B, 7, lo: 1, hi: 1), 1);
    expect(bisect(B, 8, lo: 1, hi: 1), 1);
  });

  test('bisect for C lo=1 hi=1', () {
    expect(bisect(C, -2, lo: 1, hi: 1), 1);
    expect(bisect(C, -1, lo: 1, hi: 1), 1);
    expect(bisect(C, 0, lo: 1, hi: 1), 1);
    expect(bisect(C, 1, lo: 1, hi: 1), 1);
    expect(bisect(C, 2, lo: 1, hi: 1), 1);
    expect(bisect(C, 3, lo: 1, hi: 1), 1);
    expect(bisect(C, 4, lo: 1, hi: 1), 1);
    expect(bisect(C, 5, lo: 1, hi: 1), 1);
    expect(bisect(C, 6, lo: 1, hi: 1), 1);
    expect(bisect(C, 7, lo: 1, hi: 1), 1);
    expect(bisect(C, 8, lo: 1, hi: 1), 1);
  });

  test('bisect for D lo=1 hi=1', () {
    expect(bisect(D, -2, lo: 1, hi: 1), 1);
    expect(bisect(D, -1, lo: 1, hi: 1), 1);
    expect(bisect(D, 0, lo: 1, hi: 1), 1);
    expect(bisect(D, 1, lo: 1, hi: 1), 1);
    expect(bisect(D, 2, lo: 1, hi: 1), 1);
    expect(bisect(D, 3, lo: 1, hi: 1), 1);
    expect(bisect(D, 4, lo: 1, hi: 1), 1);
    expect(bisect(D, 5, lo: 1, hi: 1), 1);
    expect(bisect(D, 6, lo: 1, hi: 1), 1);
    expect(bisect(D, 7, lo: 1, hi: 1), 1);
    expect(bisect(D, 8, lo: 1, hi: 1), 1);
  });

  test('bisect for E lo=1 hi=1', () {
    expect(bisect(E, -2, lo: 1, hi: 1), 1);
    expect(bisect(E, -1, lo: 1, hi: 1), 1);
    expect(bisect(E, 0, lo: 1, hi: 1), 1);
    expect(bisect(E, 1, lo: 1, hi: 1), 1);
    expect(bisect(E, 2, lo: 1, hi: 1), 1);
    expect(bisect(E, 3, lo: 1, hi: 1), 1);
    expect(bisect(E, 4, lo: 1, hi: 1), 1);
    expect(bisect(E, 5, lo: 1, hi: 1), 1);
    expect(bisect(E, 6, lo: 1, hi: 1), 1);
    expect(bisect(E, 7, lo: 1, hi: 1), 1);
    expect(bisect(E, 8, lo: 1, hi: 1), 1);
  });

  test('bisect for A lo=2 hi=1', () {
    expect(bisect(A, -2, lo: 2, hi: 1), 2);
    expect(bisect(A, -1, lo: 2, hi: 1), 2);
    expect(bisect(A, 0, lo: 2, hi: 1), 2);
    expect(bisect(A, 1, lo: 2, hi: 1), 2);
    expect(bisect(A, 2, lo: 2, hi: 1), 2);
    expect(bisect(A, 3, lo: 2, hi: 1), 2);
    expect(bisect(A, 4, lo: 2, hi: 1), 2);
    expect(bisect(A, 5, lo: 2, hi: 1), 2);
    expect(bisect(A, 6, lo: 2, hi: 1), 2);
    expect(bisect(A, 7, lo: 2, hi: 1), 2);
    expect(bisect(A, 8, lo: 2, hi: 1), 2);
  });

  test('bisect for B lo=2 hi=1', () {
    expect(bisect(B, -2, lo: 2, hi: 1), 2);
    expect(bisect(B, -1, lo: 2, hi: 1), 2);
    expect(bisect(B, 0, lo: 2, hi: 1), 2);
    expect(bisect(B, 1, lo: 2, hi: 1), 2);
    expect(bisect(B, 2, lo: 2, hi: 1), 2);
    expect(bisect(B, 3, lo: 2, hi: 1), 2);
    expect(bisect(B, 4, lo: 2, hi: 1), 2);
    expect(bisect(B, 5, lo: 2, hi: 1), 2);
    expect(bisect(B, 6, lo: 2, hi: 1), 2);
    expect(bisect(B, 7, lo: 2, hi: 1), 2);
    expect(bisect(B, 8, lo: 2, hi: 1), 2);
  });

  test('bisect for C lo=2 hi=1', () {
    expect(bisect(C, -2, lo: 2, hi: 1), 2);
    expect(bisect(C, -1, lo: 2, hi: 1), 2);
    expect(bisect(C, 0, lo: 2, hi: 1), 2);
    expect(bisect(C, 1, lo: 2, hi: 1), 2);
    expect(bisect(C, 2, lo: 2, hi: 1), 2);
    expect(bisect(C, 3, lo: 2, hi: 1), 2);
    expect(bisect(C, 4, lo: 2, hi: 1), 2);
    expect(bisect(C, 5, lo: 2, hi: 1), 2);
    expect(bisect(C, 6, lo: 2, hi: 1), 2);
    expect(bisect(C, 7, lo: 2, hi: 1), 2);
    expect(bisect(C, 8, lo: 2, hi: 1), 2);
  });

  test('bisect for D lo=2 hi=1', () {
    expect(bisect(D, -2, lo: 2, hi: 1), 2);
    expect(bisect(D, -1, lo: 2, hi: 1), 2);
    expect(bisect(D, 0, lo: 2, hi: 1), 2);
    expect(bisect(D, 1, lo: 2, hi: 1), 2);
    expect(bisect(D, 2, lo: 2, hi: 1), 2);
    expect(bisect(D, 3, lo: 2, hi: 1), 2);
    expect(bisect(D, 4, lo: 2, hi: 1), 2);
    expect(bisect(D, 5, lo: 2, hi: 1), 2);
    expect(bisect(D, 6, lo: 2, hi: 1), 2);
    expect(bisect(D, 7, lo: 2, hi: 1), 2);
    expect(bisect(D, 8, lo: 2, hi: 1), 2);
  });

  test('bisect for E lo=2 hi=1', () {
    expect(bisect(E, -2, lo: 2, hi: 1), 2);
    expect(bisect(E, -1, lo: 2, hi: 1), 2);
    expect(bisect(E, 0, lo: 2, hi: 1), 2);
    expect(bisect(E, 1, lo: 2, hi: 1), 2);
    expect(bisect(E, 2, lo: 2, hi: 1), 2);
    expect(bisect(E, 3, lo: 2, hi: 1), 2);
    expect(bisect(E, 4, lo: 2, hi: 1), 2);
    expect(bisect(E, 5, lo: 2, hi: 1), 2);
    expect(bisect(E, 6, lo: 2, hi: 1), 2);
    expect(bisect(E, 7, lo: 2, hi: 1), 2);
    expect(bisect(E, 8, lo: 2, hi: 1), 2);
  });

  test('bisect for A lo=3 hi=1', () {
    expect(bisect(A, -2, lo: 3, hi: 1), 3);
    expect(bisect(A, -1, lo: 3, hi: 1), 3);
    expect(bisect(A, 0, lo: 3, hi: 1), 3);
    expect(bisect(A, 1, lo: 3, hi: 1), 3);
    expect(bisect(A, 2, lo: 3, hi: 1), 3);
    expect(bisect(A, 3, lo: 3, hi: 1), 3);
    expect(bisect(A, 4, lo: 3, hi: 1), 3);
    expect(bisect(A, 5, lo: 3, hi: 1), 3);
    expect(bisect(A, 6, lo: 3, hi: 1), 3);
    expect(bisect(A, 7, lo: 3, hi: 1), 3);
    expect(bisect(A, 8, lo: 3, hi: 1), 3);
  });

  test('bisect for B lo=3 hi=1', () {
    expect(bisect(B, -2, lo: 3, hi: 1), 3);
    expect(bisect(B, -1, lo: 3, hi: 1), 3);
    expect(bisect(B, 0, lo: 3, hi: 1), 3);
    expect(bisect(B, 1, lo: 3, hi: 1), 3);
    expect(bisect(B, 2, lo: 3, hi: 1), 3);
    expect(bisect(B, 3, lo: 3, hi: 1), 3);
    expect(bisect(B, 4, lo: 3, hi: 1), 3);
    expect(bisect(B, 5, lo: 3, hi: 1), 3);
    expect(bisect(B, 6, lo: 3, hi: 1), 3);
    expect(bisect(B, 7, lo: 3, hi: 1), 3);
    expect(bisect(B, 8, lo: 3, hi: 1), 3);
  });

  test('bisect for C lo=3 hi=1', () {
    expect(bisect(C, -2, lo: 3, hi: 1), 3);
    expect(bisect(C, -1, lo: 3, hi: 1), 3);
    expect(bisect(C, 0, lo: 3, hi: 1), 3);
    expect(bisect(C, 1, lo: 3, hi: 1), 3);
    expect(bisect(C, 2, lo: 3, hi: 1), 3);
    expect(bisect(C, 3, lo: 3, hi: 1), 3);
    expect(bisect(C, 4, lo: 3, hi: 1), 3);
    expect(bisect(C, 5, lo: 3, hi: 1), 3);
    expect(bisect(C, 6, lo: 3, hi: 1), 3);
    expect(bisect(C, 7, lo: 3, hi: 1), 3);
    expect(bisect(C, 8, lo: 3, hi: 1), 3);
  });

  test('bisect for D lo=3 hi=1', () {
    expect(bisect(D, -2, lo: 3, hi: 1), 3);
    expect(bisect(D, -1, lo: 3, hi: 1), 3);
    expect(bisect(D, 0, lo: 3, hi: 1), 3);
    expect(bisect(D, 1, lo: 3, hi: 1), 3);
    expect(bisect(D, 2, lo: 3, hi: 1), 3);
    expect(bisect(D, 3, lo: 3, hi: 1), 3);
    expect(bisect(D, 4, lo: 3, hi: 1), 3);
    expect(bisect(D, 5, lo: 3, hi: 1), 3);
    expect(bisect(D, 6, lo: 3, hi: 1), 3);
    expect(bisect(D, 7, lo: 3, hi: 1), 3);
    expect(bisect(D, 8, lo: 3, hi: 1), 3);
  });

  test('bisect for E lo=3 hi=1', () {
    expect(bisect(E, -2, lo: 3, hi: 1), 3);
    expect(bisect(E, -1, lo: 3, hi: 1), 3);
    expect(bisect(E, 0, lo: 3, hi: 1), 3);
    expect(bisect(E, 1, lo: 3, hi: 1), 3);
    expect(bisect(E, 2, lo: 3, hi: 1), 3);
    expect(bisect(E, 3, lo: 3, hi: 1), 3);
    expect(bisect(E, 4, lo: 3, hi: 1), 3);
    expect(bisect(E, 5, lo: 3, hi: 1), 3);
    expect(bisect(E, 6, lo: 3, hi: 1), 3);
    expect(bisect(E, 7, lo: 3, hi: 1), 3);
    expect(bisect(E, 8, lo: 3, hi: 1), 3);
  });

  test('bisect for A lo=4 hi=1', () {
    expect(bisect(A, -2, lo: 4, hi: 1), 4);
    expect(bisect(A, -1, lo: 4, hi: 1), 4);
    expect(bisect(A, 0, lo: 4, hi: 1), 4);
    expect(bisect(A, 1, lo: 4, hi: 1), 4);
    expect(bisect(A, 2, lo: 4, hi: 1), 4);
    expect(bisect(A, 3, lo: 4, hi: 1), 4);
    expect(bisect(A, 4, lo: 4, hi: 1), 4);
    expect(bisect(A, 5, lo: 4, hi: 1), 4);
    expect(bisect(A, 6, lo: 4, hi: 1), 4);
    expect(bisect(A, 7, lo: 4, hi: 1), 4);
    expect(bisect(A, 8, lo: 4, hi: 1), 4);
  });

  test('bisect for B lo=4 hi=1', () {
    expect(bisect(B, -2, lo: 4, hi: 1), 4);
    expect(bisect(B, -1, lo: 4, hi: 1), 4);
    expect(bisect(B, 0, lo: 4, hi: 1), 4);
    expect(bisect(B, 1, lo: 4, hi: 1), 4);
    expect(bisect(B, 2, lo: 4, hi: 1), 4);
    expect(bisect(B, 3, lo: 4, hi: 1), 4);
    expect(bisect(B, 4, lo: 4, hi: 1), 4);
    expect(bisect(B, 5, lo: 4, hi: 1), 4);
    expect(bisect(B, 6, lo: 4, hi: 1), 4);
    expect(bisect(B, 7, lo: 4, hi: 1), 4);
    expect(bisect(B, 8, lo: 4, hi: 1), 4);
  });

  test('bisect for C lo=4 hi=1', () {
    expect(bisect(C, -2, lo: 4, hi: 1), 4);
    expect(bisect(C, -1, lo: 4, hi: 1), 4);
    expect(bisect(C, 0, lo: 4, hi: 1), 4);
    expect(bisect(C, 1, lo: 4, hi: 1), 4);
    expect(bisect(C, 2, lo: 4, hi: 1), 4);
    expect(bisect(C, 3, lo: 4, hi: 1), 4);
    expect(bisect(C, 4, lo: 4, hi: 1), 4);
    expect(bisect(C, 5, lo: 4, hi: 1), 4);
    expect(bisect(C, 6, lo: 4, hi: 1), 4);
    expect(bisect(C, 7, lo: 4, hi: 1), 4);
    expect(bisect(C, 8, lo: 4, hi: 1), 4);
  });

  test('bisect for D lo=4 hi=1', () {
    expect(bisect(D, -2, lo: 4, hi: 1), 4);
    expect(bisect(D, -1, lo: 4, hi: 1), 4);
    expect(bisect(D, 0, lo: 4, hi: 1), 4);
    expect(bisect(D, 1, lo: 4, hi: 1), 4);
    expect(bisect(D, 2, lo: 4, hi: 1), 4);
    expect(bisect(D, 3, lo: 4, hi: 1), 4);
    expect(bisect(D, 4, lo: 4, hi: 1), 4);
    expect(bisect(D, 5, lo: 4, hi: 1), 4);
    expect(bisect(D, 6, lo: 4, hi: 1), 4);
    expect(bisect(D, 7, lo: 4, hi: 1), 4);
    expect(bisect(D, 8, lo: 4, hi: 1), 4);
  });

  test('bisect for E lo=4 hi=1', () {
    expect(bisect(E, -2, lo: 4, hi: 1), 4);
    expect(bisect(E, -1, lo: 4, hi: 1), 4);
    expect(bisect(E, 0, lo: 4, hi: 1), 4);
    expect(bisect(E, 1, lo: 4, hi: 1), 4);
    expect(bisect(E, 2, lo: 4, hi: 1), 4);
    expect(bisect(E, 3, lo: 4, hi: 1), 4);
    expect(bisect(E, 4, lo: 4, hi: 1), 4);
    expect(bisect(E, 5, lo: 4, hi: 1), 4);
    expect(bisect(E, 6, lo: 4, hi: 1), 4);
    expect(bisect(E, 7, lo: 4, hi: 1), 4);
    expect(bisect(E, 8, lo: 4, hi: 1), 4);
  });

  test('bisect for A lo=5 hi=1', () {
    expect(bisect(A, -2, lo: 5, hi: 1), 5);
    expect(bisect(A, -1, lo: 5, hi: 1), 5);
    expect(bisect(A, 0, lo: 5, hi: 1), 5);
    expect(bisect(A, 1, lo: 5, hi: 1), 5);
    expect(bisect(A, 2, lo: 5, hi: 1), 5);
    expect(bisect(A, 3, lo: 5, hi: 1), 5);
    expect(bisect(A, 4, lo: 5, hi: 1), 5);
    expect(bisect(A, 5, lo: 5, hi: 1), 5);
    expect(bisect(A, 6, lo: 5, hi: 1), 5);
    expect(bisect(A, 7, lo: 5, hi: 1), 5);
    expect(bisect(A, 8, lo: 5, hi: 1), 5);
  });

  test('bisect for B lo=5 hi=1', () {
    expect(bisect(B, -2, lo: 5, hi: 1), 5);
    expect(bisect(B, -1, lo: 5, hi: 1), 5);
    expect(bisect(B, 0, lo: 5, hi: 1), 5);
    expect(bisect(B, 1, lo: 5, hi: 1), 5);
    expect(bisect(B, 2, lo: 5, hi: 1), 5);
    expect(bisect(B, 3, lo: 5, hi: 1), 5);
    expect(bisect(B, 4, lo: 5, hi: 1), 5);
    expect(bisect(B, 5, lo: 5, hi: 1), 5);
    expect(bisect(B, 6, lo: 5, hi: 1), 5);
    expect(bisect(B, 7, lo: 5, hi: 1), 5);
    expect(bisect(B, 8, lo: 5, hi: 1), 5);
  });

  test('bisect for C lo=5 hi=1', () {
    expect(bisect(C, -2, lo: 5, hi: 1), 5);
    expect(bisect(C, -1, lo: 5, hi: 1), 5);
    expect(bisect(C, 0, lo: 5, hi: 1), 5);
    expect(bisect(C, 1, lo: 5, hi: 1), 5);
    expect(bisect(C, 2, lo: 5, hi: 1), 5);
    expect(bisect(C, 3, lo: 5, hi: 1), 5);
    expect(bisect(C, 4, lo: 5, hi: 1), 5);
    expect(bisect(C, 5, lo: 5, hi: 1), 5);
    expect(bisect(C, 6, lo: 5, hi: 1), 5);
    expect(bisect(C, 7, lo: 5, hi: 1), 5);
    expect(bisect(C, 8, lo: 5, hi: 1), 5);
  });

  test('bisect for D lo=5 hi=1', () {
    expect(bisect(D, -2, lo: 5, hi: 1), 5);
    expect(bisect(D, -1, lo: 5, hi: 1), 5);
    expect(bisect(D, 0, lo: 5, hi: 1), 5);
    expect(bisect(D, 1, lo: 5, hi: 1), 5);
    expect(bisect(D, 2, lo: 5, hi: 1), 5);
    expect(bisect(D, 3, lo: 5, hi: 1), 5);
    expect(bisect(D, 4, lo: 5, hi: 1), 5);
    expect(bisect(D, 5, lo: 5, hi: 1), 5);
    expect(bisect(D, 6, lo: 5, hi: 1), 5);
    expect(bisect(D, 7, lo: 5, hi: 1), 5);
    expect(bisect(D, 8, lo: 5, hi: 1), 5);
  });

  test('bisect for E lo=5 hi=1', () {
    expect(bisect(E, -2, lo: 5, hi: 1), 5);
    expect(bisect(E, -1, lo: 5, hi: 1), 5);
    expect(bisect(E, 0, lo: 5, hi: 1), 5);
    expect(bisect(E, 1, lo: 5, hi: 1), 5);
    expect(bisect(E, 2, lo: 5, hi: 1), 5);
    expect(bisect(E, 3, lo: 5, hi: 1), 5);
    expect(bisect(E, 4, lo: 5, hi: 1), 5);
    expect(bisect(E, 5, lo: 5, hi: 1), 5);
    expect(bisect(E, 6, lo: 5, hi: 1), 5);
    expect(bisect(E, 7, lo: 5, hi: 1), 5);
    expect(bisect(E, 8, lo: 5, hi: 1), 5);
  });

  test('bisect for A lo=6 hi=1', () {
    expect(bisect(A, -2, lo: 6, hi: 1), 6);
    expect(bisect(A, -1, lo: 6, hi: 1), 6);
    expect(bisect(A, 0, lo: 6, hi: 1), 6);
    expect(bisect(A, 1, lo: 6, hi: 1), 6);
    expect(bisect(A, 2, lo: 6, hi: 1), 6);
    expect(bisect(A, 3, lo: 6, hi: 1), 6);
    expect(bisect(A, 4, lo: 6, hi: 1), 6);
    expect(bisect(A, 5, lo: 6, hi: 1), 6);
    expect(bisect(A, 6, lo: 6, hi: 1), 6);
    expect(bisect(A, 7, lo: 6, hi: 1), 6);
    expect(bisect(A, 8, lo: 6, hi: 1), 6);
  });

  test('bisect for B lo=6 hi=1', () {
    expect(bisect(B, -2, lo: 6, hi: 1), 6);
    expect(bisect(B, -1, lo: 6, hi: 1), 6);
    expect(bisect(B, 0, lo: 6, hi: 1), 6);
    expect(bisect(B, 1, lo: 6, hi: 1), 6);
    expect(bisect(B, 2, lo: 6, hi: 1), 6);
    expect(bisect(B, 3, lo: 6, hi: 1), 6);
    expect(bisect(B, 4, lo: 6, hi: 1), 6);
    expect(bisect(B, 5, lo: 6, hi: 1), 6);
    expect(bisect(B, 6, lo: 6, hi: 1), 6);
    expect(bisect(B, 7, lo: 6, hi: 1), 6);
    expect(bisect(B, 8, lo: 6, hi: 1), 6);
  });

  test('bisect for C lo=6 hi=1', () {
    expect(bisect(C, -2, lo: 6, hi: 1), 6);
    expect(bisect(C, -1, lo: 6, hi: 1), 6);
    expect(bisect(C, 0, lo: 6, hi: 1), 6);
    expect(bisect(C, 1, lo: 6, hi: 1), 6);
    expect(bisect(C, 2, lo: 6, hi: 1), 6);
    expect(bisect(C, 3, lo: 6, hi: 1), 6);
    expect(bisect(C, 4, lo: 6, hi: 1), 6);
    expect(bisect(C, 5, lo: 6, hi: 1), 6);
    expect(bisect(C, 6, lo: 6, hi: 1), 6);
    expect(bisect(C, 7, lo: 6, hi: 1), 6);
    expect(bisect(C, 8, lo: 6, hi: 1), 6);
  });

  test('bisect for D lo=6 hi=1', () {
    expect(bisect(D, -2, lo: 6, hi: 1), 6);
    expect(bisect(D, -1, lo: 6, hi: 1), 6);
    expect(bisect(D, 0, lo: 6, hi: 1), 6);
    expect(bisect(D, 1, lo: 6, hi: 1), 6);
    expect(bisect(D, 2, lo: 6, hi: 1), 6);
    expect(bisect(D, 3, lo: 6, hi: 1), 6);
    expect(bisect(D, 4, lo: 6, hi: 1), 6);
    expect(bisect(D, 5, lo: 6, hi: 1), 6);
    expect(bisect(D, 6, lo: 6, hi: 1), 6);
    expect(bisect(D, 7, lo: 6, hi: 1), 6);
    expect(bisect(D, 8, lo: 6, hi: 1), 6);
  });

  test('bisect for E lo=6 hi=1', () {
    expect(bisect(E, -2, lo: 6, hi: 1), 6);
    expect(bisect(E, -1, lo: 6, hi: 1), 6);
    expect(bisect(E, 0, lo: 6, hi: 1), 6);
    expect(bisect(E, 1, lo: 6, hi: 1), 6);
    expect(bisect(E, 2, lo: 6, hi: 1), 6);
    expect(bisect(E, 3, lo: 6, hi: 1), 6);
    expect(bisect(E, 4, lo: 6, hi: 1), 6);
    expect(bisect(E, 5, lo: 6, hi: 1), 6);
    expect(bisect(E, 6, lo: 6, hi: 1), 6);
    expect(bisect(E, 7, lo: 6, hi: 1), 6);
    expect(bisect(E, 8, lo: 6, hi: 1), 6);
  });

  test('bisect for A lo=7 hi=1', () {
    expect(bisect(A, -2, lo: 7, hi: 1), 7);
    expect(bisect(A, -1, lo: 7, hi: 1), 7);
    expect(bisect(A, 0, lo: 7, hi: 1), 7);
    expect(bisect(A, 1, lo: 7, hi: 1), 7);
    expect(bisect(A, 2, lo: 7, hi: 1), 7);
    expect(bisect(A, 3, lo: 7, hi: 1), 7);
    expect(bisect(A, 4, lo: 7, hi: 1), 7);
    expect(bisect(A, 5, lo: 7, hi: 1), 7);
    expect(bisect(A, 6, lo: 7, hi: 1), 7);
    expect(bisect(A, 7, lo: 7, hi: 1), 7);
    expect(bisect(A, 8, lo: 7, hi: 1), 7);
  });

  test('bisect for B lo=7 hi=1', () {
    expect(bisect(B, -2, lo: 7, hi: 1), 7);
    expect(bisect(B, -1, lo: 7, hi: 1), 7);
    expect(bisect(B, 0, lo: 7, hi: 1), 7);
    expect(bisect(B, 1, lo: 7, hi: 1), 7);
    expect(bisect(B, 2, lo: 7, hi: 1), 7);
    expect(bisect(B, 3, lo: 7, hi: 1), 7);
    expect(bisect(B, 4, lo: 7, hi: 1), 7);
    expect(bisect(B, 5, lo: 7, hi: 1), 7);
    expect(bisect(B, 6, lo: 7, hi: 1), 7);
    expect(bisect(B, 7, lo: 7, hi: 1), 7);
    expect(bisect(B, 8, lo: 7, hi: 1), 7);
  });

  test('bisect for C lo=7 hi=1', () {
    expect(bisect(C, -2, lo: 7, hi: 1), 7);
    expect(bisect(C, -1, lo: 7, hi: 1), 7);
    expect(bisect(C, 0, lo: 7, hi: 1), 7);
    expect(bisect(C, 1, lo: 7, hi: 1), 7);
    expect(bisect(C, 2, lo: 7, hi: 1), 7);
    expect(bisect(C, 3, lo: 7, hi: 1), 7);
    expect(bisect(C, 4, lo: 7, hi: 1), 7);
    expect(bisect(C, 5, lo: 7, hi: 1), 7);
    expect(bisect(C, 6, lo: 7, hi: 1), 7);
    expect(bisect(C, 7, lo: 7, hi: 1), 7);
    expect(bisect(C, 8, lo: 7, hi: 1), 7);
  });

  test('bisect for D lo=7 hi=1', () {
    expect(bisect(D, -2, lo: 7, hi: 1), 7);
    expect(bisect(D, -1, lo: 7, hi: 1), 7);
    expect(bisect(D, 0, lo: 7, hi: 1), 7);
    expect(bisect(D, 1, lo: 7, hi: 1), 7);
    expect(bisect(D, 2, lo: 7, hi: 1), 7);
    expect(bisect(D, 3, lo: 7, hi: 1), 7);
    expect(bisect(D, 4, lo: 7, hi: 1), 7);
    expect(bisect(D, 5, lo: 7, hi: 1), 7);
    expect(bisect(D, 6, lo: 7, hi: 1), 7);
    expect(bisect(D, 7, lo: 7, hi: 1), 7);
    expect(bisect(D, 8, lo: 7, hi: 1), 7);
  });

  test('bisect for E lo=7 hi=1', () {
    expect(bisect(E, -2, lo: 7, hi: 1), 7);
    expect(bisect(E, -1, lo: 7, hi: 1), 7);
    expect(bisect(E, 0, lo: 7, hi: 1), 7);
    expect(bisect(E, 1, lo: 7, hi: 1), 7);
    expect(bisect(E, 2, lo: 7, hi: 1), 7);
    expect(bisect(E, 3, lo: 7, hi: 1), 7);
    expect(bisect(E, 4, lo: 7, hi: 1), 7);
    expect(bisect(E, 5, lo: 7, hi: 1), 7);
    expect(bisect(E, 6, lo: 7, hi: 1), 7);
    expect(bisect(E, 7, lo: 7, hi: 1), 7);
    expect(bisect(E, 8, lo: 7, hi: 1), 7);
  });

  test('bisect for A lo=8 hi=1', () {
    expect(bisect(A, -2, lo: 8, hi: 1), 8);
    expect(bisect(A, -1, lo: 8, hi: 1), 8);
    expect(bisect(A, 0, lo: 8, hi: 1), 8);
    expect(bisect(A, 1, lo: 8, hi: 1), 8);
    expect(bisect(A, 2, lo: 8, hi: 1), 8);
    expect(bisect(A, 3, lo: 8, hi: 1), 8);
    expect(bisect(A, 4, lo: 8, hi: 1), 8);
    expect(bisect(A, 5, lo: 8, hi: 1), 8);
    expect(bisect(A, 6, lo: 8, hi: 1), 8);
    expect(bisect(A, 7, lo: 8, hi: 1), 8);
    expect(bisect(A, 8, lo: 8, hi: 1), 8);
  });

  test('bisect for B lo=8 hi=1', () {
    expect(bisect(B, -2, lo: 8, hi: 1), 8);
    expect(bisect(B, -1, lo: 8, hi: 1), 8);
    expect(bisect(B, 0, lo: 8, hi: 1), 8);
    expect(bisect(B, 1, lo: 8, hi: 1), 8);
    expect(bisect(B, 2, lo: 8, hi: 1), 8);
    expect(bisect(B, 3, lo: 8, hi: 1), 8);
    expect(bisect(B, 4, lo: 8, hi: 1), 8);
    expect(bisect(B, 5, lo: 8, hi: 1), 8);
    expect(bisect(B, 6, lo: 8, hi: 1), 8);
    expect(bisect(B, 7, lo: 8, hi: 1), 8);
    expect(bisect(B, 8, lo: 8, hi: 1), 8);
  });

  test('bisect for C lo=8 hi=1', () {
    expect(bisect(C, -2, lo: 8, hi: 1), 8);
    expect(bisect(C, -1, lo: 8, hi: 1), 8);
    expect(bisect(C, 0, lo: 8, hi: 1), 8);
    expect(bisect(C, 1, lo: 8, hi: 1), 8);
    expect(bisect(C, 2, lo: 8, hi: 1), 8);
    expect(bisect(C, 3, lo: 8, hi: 1), 8);
    expect(bisect(C, 4, lo: 8, hi: 1), 8);
    expect(bisect(C, 5, lo: 8, hi: 1), 8);
    expect(bisect(C, 6, lo: 8, hi: 1), 8);
    expect(bisect(C, 7, lo: 8, hi: 1), 8);
    expect(bisect(C, 8, lo: 8, hi: 1), 8);
  });

  test('bisect for D lo=8 hi=1', () {
    expect(bisect(D, -2, lo: 8, hi: 1), 8);
    expect(bisect(D, -1, lo: 8, hi: 1), 8);
    expect(bisect(D, 0, lo: 8, hi: 1), 8);
    expect(bisect(D, 1, lo: 8, hi: 1), 8);
    expect(bisect(D, 2, lo: 8, hi: 1), 8);
    expect(bisect(D, 3, lo: 8, hi: 1), 8);
    expect(bisect(D, 4, lo: 8, hi: 1), 8);
    expect(bisect(D, 5, lo: 8, hi: 1), 8);
    expect(bisect(D, 6, lo: 8, hi: 1), 8);
    expect(bisect(D, 7, lo: 8, hi: 1), 8);
    expect(bisect(D, 8, lo: 8, hi: 1), 8);
  });

  test('bisect for E lo=8 hi=1', () {
    expect(bisect(E, -2, lo: 8, hi: 1), 8);
    expect(bisect(E, -1, lo: 8, hi: 1), 8);
    expect(bisect(E, 0, lo: 8, hi: 1), 8);
    expect(bisect(E, 1, lo: 8, hi: 1), 8);
    expect(bisect(E, 2, lo: 8, hi: 1), 8);
    expect(bisect(E, 3, lo: 8, hi: 1), 8);
    expect(bisect(E, 4, lo: 8, hi: 1), 8);
    expect(bisect(E, 5, lo: 8, hi: 1), 8);
    expect(bisect(E, 6, lo: 8, hi: 1), 8);
    expect(bisect(E, 7, lo: 8, hi: 1), 8);
    expect(bisect(E, 8, lo: 8, hi: 1), 8);
  });

  test('bisect for A lo=9 hi=1', () {
    expect(bisect(A, -2, lo: 9, hi: 1), 9);
    expect(bisect(A, -1, lo: 9, hi: 1), 9);
    expect(bisect(A, 0, lo: 9, hi: 1), 9);
    expect(bisect(A, 1, lo: 9, hi: 1), 9);
    expect(bisect(A, 2, lo: 9, hi: 1), 9);
    expect(bisect(A, 3, lo: 9, hi: 1), 9);
    expect(bisect(A, 4, lo: 9, hi: 1), 9);
    expect(bisect(A, 5, lo: 9, hi: 1), 9);
    expect(bisect(A, 6, lo: 9, hi: 1), 9);
    expect(bisect(A, 7, lo: 9, hi: 1), 9);
    expect(bisect(A, 8, lo: 9, hi: 1), 9);
  });

  test('bisect for B lo=9 hi=1', () {
    expect(bisect(B, -2, lo: 9, hi: 1), 9);
    expect(bisect(B, -1, lo: 9, hi: 1), 9);
    expect(bisect(B, 0, lo: 9, hi: 1), 9);
    expect(bisect(B, 1, lo: 9, hi: 1), 9);
    expect(bisect(B, 2, lo: 9, hi: 1), 9);
    expect(bisect(B, 3, lo: 9, hi: 1), 9);
    expect(bisect(B, 4, lo: 9, hi: 1), 9);
    expect(bisect(B, 5, lo: 9, hi: 1), 9);
    expect(bisect(B, 6, lo: 9, hi: 1), 9);
    expect(bisect(B, 7, lo: 9, hi: 1), 9);
    expect(bisect(B, 8, lo: 9, hi: 1), 9);
  });

  test('bisect for C lo=9 hi=1', () {
    expect(bisect(C, -2, lo: 9, hi: 1), 9);
    expect(bisect(C, -1, lo: 9, hi: 1), 9);
    expect(bisect(C, 0, lo: 9, hi: 1), 9);
    expect(bisect(C, 1, lo: 9, hi: 1), 9);
    expect(bisect(C, 2, lo: 9, hi: 1), 9);
    expect(bisect(C, 3, lo: 9, hi: 1), 9);
    expect(bisect(C, 4, lo: 9, hi: 1), 9);
    expect(bisect(C, 5, lo: 9, hi: 1), 9);
    expect(bisect(C, 6, lo: 9, hi: 1), 9);
    expect(bisect(C, 7, lo: 9, hi: 1), 9);
    expect(bisect(C, 8, lo: 9, hi: 1), 9);
  });

  test('bisect for D lo=9 hi=1', () {
    expect(bisect(D, -2, lo: 9, hi: 1), 9);
    expect(bisect(D, -1, lo: 9, hi: 1), 9);
    expect(bisect(D, 0, lo: 9, hi: 1), 9);
    expect(bisect(D, 1, lo: 9, hi: 1), 9);
    expect(bisect(D, 2, lo: 9, hi: 1), 9);
    expect(bisect(D, 3, lo: 9, hi: 1), 9);
    expect(bisect(D, 4, lo: 9, hi: 1), 9);
    expect(bisect(D, 5, lo: 9, hi: 1), 9);
    expect(bisect(D, 6, lo: 9, hi: 1), 9);
    expect(bisect(D, 7, lo: 9, hi: 1), 9);
    expect(bisect(D, 8, lo: 9, hi: 1), 9);
  });

  test('bisect for E lo=9 hi=1', () {
    expect(bisect(E, -2, lo: 9, hi: 1), 9);
    expect(bisect(E, -1, lo: 9, hi: 1), 9);
    expect(bisect(E, 0, lo: 9, hi: 1), 9);
    expect(bisect(E, 1, lo: 9, hi: 1), 9);
    expect(bisect(E, 2, lo: 9, hi: 1), 9);
    expect(bisect(E, 3, lo: 9, hi: 1), 9);
    expect(bisect(E, 4, lo: 9, hi: 1), 9);
    expect(bisect(E, 5, lo: 9, hi: 1), 9);
    expect(bisect(E, 6, lo: 9, hi: 1), 9);
    expect(bisect(E, 7, lo: 9, hi: 1), 9);
    expect(bisect(E, 8, lo: 9, hi: 1), 9);
  });

  test('bisect for A lo=None hi=2', () {
    expect(() => bisect(A, -2, hi: 2), throwsRangeError);
    expect(() => bisect(A, -1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 2, hi: 2), throwsRangeError);
    expect(() => bisect(A, 3, hi: 2), throwsRangeError);
    expect(() => bisect(A, 4, hi: 2), throwsRangeError);
    expect(() => bisect(A, 5, hi: 2), throwsRangeError);
    expect(() => bisect(A, 6, hi: 2), throwsRangeError);
    expect(() => bisect(A, 7, hi: 2), throwsRangeError);
    expect(() => bisect(A, 8, hi: 2), throwsRangeError);
  });

  test('bisect for B lo=None hi=2', () {
    expect(() => bisect(B, -2, hi: 2), throwsRangeError);
    expect(() => bisect(B, -1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 2, hi: 2), throwsRangeError);
    expect(() => bisect(B, 3, hi: 2), throwsRangeError);
    expect(() => bisect(B, 4, hi: 2), throwsRangeError);
    expect(() => bisect(B, 5, hi: 2), throwsRangeError);
    expect(() => bisect(B, 6, hi: 2), throwsRangeError);
    expect(() => bisect(B, 7, hi: 2), throwsRangeError);
    expect(() => bisect(B, 8, hi: 2), throwsRangeError);
  });

  test('bisect for C lo=None hi=2', () {
    expect(bisect(C, -2, hi: 2), 0);
    expect(bisect(C, -1, hi: 2), 0);
    expect(bisect(C, 0, hi: 2), 0);
    expect(bisect(C, 1, hi: 2), 0);
    expect(bisect(C, 2, hi: 2), 0);
    expect(bisect(C, 3, hi: 2), 0);
    expect(bisect(C, 4, hi: 2), 1);
    expect(bisect(C, 5, hi: 2), 2);
    expect(bisect(C, 6, hi: 2), 2);
    expect(bisect(C, 7, hi: 2), 2);
    expect(bisect(C, 8, hi: 2), 2);
  });

  test('bisect for D lo=None hi=2', () {
    expect(bisect(D, -2, hi: 2), 0);
    expect(bisect(D, -1, hi: 2), 0);
    expect(bisect(D, 0, hi: 2), 0);
    expect(bisect(D, 1, hi: 2), 0);
    expect(bisect(D, 2, hi: 2), 0);
    expect(bisect(D, 3, hi: 2), 1);
    expect(bisect(D, 4, hi: 2), 2);
    expect(bisect(D, 5, hi: 2), 2);
    expect(bisect(D, 6, hi: 2), 2);
    expect(bisect(D, 7, hi: 2), 2);
    expect(bisect(D, 8, hi: 2), 2);
  });

  test('bisect for E lo=None hi=2', () {
    expect(bisect(E, -2, hi: 2), 0);
    expect(bisect(E, -1, hi: 2), 0);
    expect(bisect(E, 0, hi: 2), 1);
    expect(bisect(E, 1, hi: 2), 2);
    expect(bisect(E, 2, hi: 2), 2);
    expect(bisect(E, 3, hi: 2), 2);
    expect(bisect(E, 4, hi: 2), 2);
    expect(bisect(E, 5, hi: 2), 2);
    expect(bisect(E, 6, hi: 2), 2);
    expect(bisect(E, 7, hi: 2), 2);
    expect(bisect(E, 8, hi: 2), 2);
  });

  test('bisect for A lo=0 hi=2', () {
    expect(() => bisect(A, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('bisect for B lo=0 hi=2', () {
    expect(() => bisect(B, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('bisect for C lo=0 hi=2', () {
    expect(bisect(C, -2, lo: 0, hi: 2), 0);
    expect(bisect(C, -1, lo: 0, hi: 2), 0);
    expect(bisect(C, 0, lo: 0, hi: 2), 0);
    expect(bisect(C, 1, lo: 0, hi: 2), 0);
    expect(bisect(C, 2, lo: 0, hi: 2), 0);
    expect(bisect(C, 3, lo: 0, hi: 2), 0);
    expect(bisect(C, 4, lo: 0, hi: 2), 1);
    expect(bisect(C, 5, lo: 0, hi: 2), 2);
    expect(bisect(C, 6, lo: 0, hi: 2), 2);
    expect(bisect(C, 7, lo: 0, hi: 2), 2);
    expect(bisect(C, 8, lo: 0, hi: 2), 2);
  });

  test('bisect for D lo=0 hi=2', () {
    expect(bisect(D, -2, lo: 0, hi: 2), 0);
    expect(bisect(D, -1, lo: 0, hi: 2), 0);
    expect(bisect(D, 0, lo: 0, hi: 2), 0);
    expect(bisect(D, 1, lo: 0, hi: 2), 0);
    expect(bisect(D, 2, lo: 0, hi: 2), 0);
    expect(bisect(D, 3, lo: 0, hi: 2), 1);
    expect(bisect(D, 4, lo: 0, hi: 2), 2);
    expect(bisect(D, 5, lo: 0, hi: 2), 2);
    expect(bisect(D, 6, lo: 0, hi: 2), 2);
    expect(bisect(D, 7, lo: 0, hi: 2), 2);
    expect(bisect(D, 8, lo: 0, hi: 2), 2);
  });

  test('bisect for E lo=0 hi=2', () {
    expect(bisect(E, -2, lo: 0, hi: 2), 0);
    expect(bisect(E, -1, lo: 0, hi: 2), 0);
    expect(bisect(E, 0, lo: 0, hi: 2), 1);
    expect(bisect(E, 1, lo: 0, hi: 2), 2);
    expect(bisect(E, 2, lo: 0, hi: 2), 2);
    expect(bisect(E, 3, lo: 0, hi: 2), 2);
    expect(bisect(E, 4, lo: 0, hi: 2), 2);
    expect(bisect(E, 5, lo: 0, hi: 2), 2);
    expect(bisect(E, 6, lo: 0, hi: 2), 2);
    expect(bisect(E, 7, lo: 0, hi: 2), 2);
    expect(bisect(E, 8, lo: 0, hi: 2), 2);
  });

  test('bisect for A lo=1 hi=2', () {
    expect(() => bisect(A, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('bisect for B lo=1 hi=2', () {
    expect(() => bisect(B, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('bisect for C lo=1 hi=2', () {
    expect(bisect(C, -2, lo: 1, hi: 2), 1);
    expect(bisect(C, -1, lo: 1, hi: 2), 1);
    expect(bisect(C, 0, lo: 1, hi: 2), 1);
    expect(bisect(C, 1, lo: 1, hi: 2), 1);
    expect(bisect(C, 2, lo: 1, hi: 2), 1);
    expect(bisect(C, 3, lo: 1, hi: 2), 1);
    expect(bisect(C, 4, lo: 1, hi: 2), 1);
    expect(bisect(C, 5, lo: 1, hi: 2), 2);
    expect(bisect(C, 6, lo: 1, hi: 2), 2);
    expect(bisect(C, 7, lo: 1, hi: 2), 2);
    expect(bisect(C, 8, lo: 1, hi: 2), 2);
  });

  test('bisect for D lo=1 hi=2', () {
    expect(bisect(D, -2, lo: 1, hi: 2), 1);
    expect(bisect(D, -1, lo: 1, hi: 2), 1);
    expect(bisect(D, 0, lo: 1, hi: 2), 1);
    expect(bisect(D, 1, lo: 1, hi: 2), 1);
    expect(bisect(D, 2, lo: 1, hi: 2), 1);
    expect(bisect(D, 3, lo: 1, hi: 2), 1);
    expect(bisect(D, 4, lo: 1, hi: 2), 2);
    expect(bisect(D, 5, lo: 1, hi: 2), 2);
    expect(bisect(D, 6, lo: 1, hi: 2), 2);
    expect(bisect(D, 7, lo: 1, hi: 2), 2);
    expect(bisect(D, 8, lo: 1, hi: 2), 2);
  });

  test('bisect for E lo=1 hi=2', () {
    expect(bisect(E, -2, lo: 1, hi: 2), 1);
    expect(bisect(E, -1, lo: 1, hi: 2), 1);
    expect(bisect(E, 0, lo: 1, hi: 2), 1);
    expect(bisect(E, 1, lo: 1, hi: 2), 2);
    expect(bisect(E, 2, lo: 1, hi: 2), 2);
    expect(bisect(E, 3, lo: 1, hi: 2), 2);
    expect(bisect(E, 4, lo: 1, hi: 2), 2);
    expect(bisect(E, 5, lo: 1, hi: 2), 2);
    expect(bisect(E, 6, lo: 1, hi: 2), 2);
    expect(bisect(E, 7, lo: 1, hi: 2), 2);
    expect(bisect(E, 8, lo: 1, hi: 2), 2);
  });

  test('bisect for A lo=2 hi=2', () {
    expect(bisect(A, -2, lo: 2, hi: 2), 2);
    expect(bisect(A, -1, lo: 2, hi: 2), 2);
    expect(bisect(A, 0, lo: 2, hi: 2), 2);
    expect(bisect(A, 1, lo: 2, hi: 2), 2);
    expect(bisect(A, 2, lo: 2, hi: 2), 2);
    expect(bisect(A, 3, lo: 2, hi: 2), 2);
    expect(bisect(A, 4, lo: 2, hi: 2), 2);
    expect(bisect(A, 5, lo: 2, hi: 2), 2);
    expect(bisect(A, 6, lo: 2, hi: 2), 2);
    expect(bisect(A, 7, lo: 2, hi: 2), 2);
    expect(bisect(A, 8, lo: 2, hi: 2), 2);
  });

  test('bisect for B lo=2 hi=2', () {
    expect(bisect(B, -2, lo: 2, hi: 2), 2);
    expect(bisect(B, -1, lo: 2, hi: 2), 2);
    expect(bisect(B, 0, lo: 2, hi: 2), 2);
    expect(bisect(B, 1, lo: 2, hi: 2), 2);
    expect(bisect(B, 2, lo: 2, hi: 2), 2);
    expect(bisect(B, 3, lo: 2, hi: 2), 2);
    expect(bisect(B, 4, lo: 2, hi: 2), 2);
    expect(bisect(B, 5, lo: 2, hi: 2), 2);
    expect(bisect(B, 6, lo: 2, hi: 2), 2);
    expect(bisect(B, 7, lo: 2, hi: 2), 2);
    expect(bisect(B, 8, lo: 2, hi: 2), 2);
  });

  test('bisect for C lo=2 hi=2', () {
    expect(bisect(C, -2, lo: 2, hi: 2), 2);
    expect(bisect(C, -1, lo: 2, hi: 2), 2);
    expect(bisect(C, 0, lo: 2, hi: 2), 2);
    expect(bisect(C, 1, lo: 2, hi: 2), 2);
    expect(bisect(C, 2, lo: 2, hi: 2), 2);
    expect(bisect(C, 3, lo: 2, hi: 2), 2);
    expect(bisect(C, 4, lo: 2, hi: 2), 2);
    expect(bisect(C, 5, lo: 2, hi: 2), 2);
    expect(bisect(C, 6, lo: 2, hi: 2), 2);
    expect(bisect(C, 7, lo: 2, hi: 2), 2);
    expect(bisect(C, 8, lo: 2, hi: 2), 2);
  });

  test('bisect for D lo=2 hi=2', () {
    expect(bisect(D, -2, lo: 2, hi: 2), 2);
    expect(bisect(D, -1, lo: 2, hi: 2), 2);
    expect(bisect(D, 0, lo: 2, hi: 2), 2);
    expect(bisect(D, 1, lo: 2, hi: 2), 2);
    expect(bisect(D, 2, lo: 2, hi: 2), 2);
    expect(bisect(D, 3, lo: 2, hi: 2), 2);
    expect(bisect(D, 4, lo: 2, hi: 2), 2);
    expect(bisect(D, 5, lo: 2, hi: 2), 2);
    expect(bisect(D, 6, lo: 2, hi: 2), 2);
    expect(bisect(D, 7, lo: 2, hi: 2), 2);
    expect(bisect(D, 8, lo: 2, hi: 2), 2);
  });

  test('bisect for E lo=2 hi=2', () {
    expect(bisect(E, -2, lo: 2, hi: 2), 2);
    expect(bisect(E, -1, lo: 2, hi: 2), 2);
    expect(bisect(E, 0, lo: 2, hi: 2), 2);
    expect(bisect(E, 1, lo: 2, hi: 2), 2);
    expect(bisect(E, 2, lo: 2, hi: 2), 2);
    expect(bisect(E, 3, lo: 2, hi: 2), 2);
    expect(bisect(E, 4, lo: 2, hi: 2), 2);
    expect(bisect(E, 5, lo: 2, hi: 2), 2);
    expect(bisect(E, 6, lo: 2, hi: 2), 2);
    expect(bisect(E, 7, lo: 2, hi: 2), 2);
    expect(bisect(E, 8, lo: 2, hi: 2), 2);
  });

  test('bisect for A lo=3 hi=2', () {
    expect(bisect(A, -2, lo: 3, hi: 2), 3);
    expect(bisect(A, -1, lo: 3, hi: 2), 3);
    expect(bisect(A, 0, lo: 3, hi: 2), 3);
    expect(bisect(A, 1, lo: 3, hi: 2), 3);
    expect(bisect(A, 2, lo: 3, hi: 2), 3);
    expect(bisect(A, 3, lo: 3, hi: 2), 3);
    expect(bisect(A, 4, lo: 3, hi: 2), 3);
    expect(bisect(A, 5, lo: 3, hi: 2), 3);
    expect(bisect(A, 6, lo: 3, hi: 2), 3);
    expect(bisect(A, 7, lo: 3, hi: 2), 3);
    expect(bisect(A, 8, lo: 3, hi: 2), 3);
  });

  test('bisect for B lo=3 hi=2', () {
    expect(bisect(B, -2, lo: 3, hi: 2), 3);
    expect(bisect(B, -1, lo: 3, hi: 2), 3);
    expect(bisect(B, 0, lo: 3, hi: 2), 3);
    expect(bisect(B, 1, lo: 3, hi: 2), 3);
    expect(bisect(B, 2, lo: 3, hi: 2), 3);
    expect(bisect(B, 3, lo: 3, hi: 2), 3);
    expect(bisect(B, 4, lo: 3, hi: 2), 3);
    expect(bisect(B, 5, lo: 3, hi: 2), 3);
    expect(bisect(B, 6, lo: 3, hi: 2), 3);
    expect(bisect(B, 7, lo: 3, hi: 2), 3);
    expect(bisect(B, 8, lo: 3, hi: 2), 3);
  });

  test('bisect for C lo=3 hi=2', () {
    expect(bisect(C, -2, lo: 3, hi: 2), 3);
    expect(bisect(C, -1, lo: 3, hi: 2), 3);
    expect(bisect(C, 0, lo: 3, hi: 2), 3);
    expect(bisect(C, 1, lo: 3, hi: 2), 3);
    expect(bisect(C, 2, lo: 3, hi: 2), 3);
    expect(bisect(C, 3, lo: 3, hi: 2), 3);
    expect(bisect(C, 4, lo: 3, hi: 2), 3);
    expect(bisect(C, 5, lo: 3, hi: 2), 3);
    expect(bisect(C, 6, lo: 3, hi: 2), 3);
    expect(bisect(C, 7, lo: 3, hi: 2), 3);
    expect(bisect(C, 8, lo: 3, hi: 2), 3);
  });

  test('bisect for D lo=3 hi=2', () {
    expect(bisect(D, -2, lo: 3, hi: 2), 3);
    expect(bisect(D, -1, lo: 3, hi: 2), 3);
    expect(bisect(D, 0, lo: 3, hi: 2), 3);
    expect(bisect(D, 1, lo: 3, hi: 2), 3);
    expect(bisect(D, 2, lo: 3, hi: 2), 3);
    expect(bisect(D, 3, lo: 3, hi: 2), 3);
    expect(bisect(D, 4, lo: 3, hi: 2), 3);
    expect(bisect(D, 5, lo: 3, hi: 2), 3);
    expect(bisect(D, 6, lo: 3, hi: 2), 3);
    expect(bisect(D, 7, lo: 3, hi: 2), 3);
    expect(bisect(D, 8, lo: 3, hi: 2), 3);
  });

  test('bisect for E lo=3 hi=2', () {
    expect(bisect(E, -2, lo: 3, hi: 2), 3);
    expect(bisect(E, -1, lo: 3, hi: 2), 3);
    expect(bisect(E, 0, lo: 3, hi: 2), 3);
    expect(bisect(E, 1, lo: 3, hi: 2), 3);
    expect(bisect(E, 2, lo: 3, hi: 2), 3);
    expect(bisect(E, 3, lo: 3, hi: 2), 3);
    expect(bisect(E, 4, lo: 3, hi: 2), 3);
    expect(bisect(E, 5, lo: 3, hi: 2), 3);
    expect(bisect(E, 6, lo: 3, hi: 2), 3);
    expect(bisect(E, 7, lo: 3, hi: 2), 3);
    expect(bisect(E, 8, lo: 3, hi: 2), 3);
  });

  test('bisect for A lo=4 hi=2', () {
    expect(bisect(A, -2, lo: 4, hi: 2), 4);
    expect(bisect(A, -1, lo: 4, hi: 2), 4);
    expect(bisect(A, 0, lo: 4, hi: 2), 4);
    expect(bisect(A, 1, lo: 4, hi: 2), 4);
    expect(bisect(A, 2, lo: 4, hi: 2), 4);
    expect(bisect(A, 3, lo: 4, hi: 2), 4);
    expect(bisect(A, 4, lo: 4, hi: 2), 4);
    expect(bisect(A, 5, lo: 4, hi: 2), 4);
    expect(bisect(A, 6, lo: 4, hi: 2), 4);
    expect(bisect(A, 7, lo: 4, hi: 2), 4);
    expect(bisect(A, 8, lo: 4, hi: 2), 4);
  });

  test('bisect for B lo=4 hi=2', () {
    expect(bisect(B, -2, lo: 4, hi: 2), 4);
    expect(bisect(B, -1, lo: 4, hi: 2), 4);
    expect(bisect(B, 0, lo: 4, hi: 2), 4);
    expect(bisect(B, 1, lo: 4, hi: 2), 4);
    expect(bisect(B, 2, lo: 4, hi: 2), 4);
    expect(bisect(B, 3, lo: 4, hi: 2), 4);
    expect(bisect(B, 4, lo: 4, hi: 2), 4);
    expect(bisect(B, 5, lo: 4, hi: 2), 4);
    expect(bisect(B, 6, lo: 4, hi: 2), 4);
    expect(bisect(B, 7, lo: 4, hi: 2), 4);
    expect(bisect(B, 8, lo: 4, hi: 2), 4);
  });

  test('bisect for C lo=4 hi=2', () {
    expect(bisect(C, -2, lo: 4, hi: 2), 4);
    expect(bisect(C, -1, lo: 4, hi: 2), 4);
    expect(bisect(C, 0, lo: 4, hi: 2), 4);
    expect(bisect(C, 1, lo: 4, hi: 2), 4);
    expect(bisect(C, 2, lo: 4, hi: 2), 4);
    expect(bisect(C, 3, lo: 4, hi: 2), 4);
    expect(bisect(C, 4, lo: 4, hi: 2), 4);
    expect(bisect(C, 5, lo: 4, hi: 2), 4);
    expect(bisect(C, 6, lo: 4, hi: 2), 4);
    expect(bisect(C, 7, lo: 4, hi: 2), 4);
    expect(bisect(C, 8, lo: 4, hi: 2), 4);
  });

  test('bisect for D lo=4 hi=2', () {
    expect(bisect(D, -2, lo: 4, hi: 2), 4);
    expect(bisect(D, -1, lo: 4, hi: 2), 4);
    expect(bisect(D, 0, lo: 4, hi: 2), 4);
    expect(bisect(D, 1, lo: 4, hi: 2), 4);
    expect(bisect(D, 2, lo: 4, hi: 2), 4);
    expect(bisect(D, 3, lo: 4, hi: 2), 4);
    expect(bisect(D, 4, lo: 4, hi: 2), 4);
    expect(bisect(D, 5, lo: 4, hi: 2), 4);
    expect(bisect(D, 6, lo: 4, hi: 2), 4);
    expect(bisect(D, 7, lo: 4, hi: 2), 4);
    expect(bisect(D, 8, lo: 4, hi: 2), 4);
  });

  test('bisect for E lo=4 hi=2', () {
    expect(bisect(E, -2, lo: 4, hi: 2), 4);
    expect(bisect(E, -1, lo: 4, hi: 2), 4);
    expect(bisect(E, 0, lo: 4, hi: 2), 4);
    expect(bisect(E, 1, lo: 4, hi: 2), 4);
    expect(bisect(E, 2, lo: 4, hi: 2), 4);
    expect(bisect(E, 3, lo: 4, hi: 2), 4);
    expect(bisect(E, 4, lo: 4, hi: 2), 4);
    expect(bisect(E, 5, lo: 4, hi: 2), 4);
    expect(bisect(E, 6, lo: 4, hi: 2), 4);
    expect(bisect(E, 7, lo: 4, hi: 2), 4);
    expect(bisect(E, 8, lo: 4, hi: 2), 4);
  });

  test('bisect for A lo=5 hi=2', () {
    expect(bisect(A, -2, lo: 5, hi: 2), 5);
    expect(bisect(A, -1, lo: 5, hi: 2), 5);
    expect(bisect(A, 0, lo: 5, hi: 2), 5);
    expect(bisect(A, 1, lo: 5, hi: 2), 5);
    expect(bisect(A, 2, lo: 5, hi: 2), 5);
    expect(bisect(A, 3, lo: 5, hi: 2), 5);
    expect(bisect(A, 4, lo: 5, hi: 2), 5);
    expect(bisect(A, 5, lo: 5, hi: 2), 5);
    expect(bisect(A, 6, lo: 5, hi: 2), 5);
    expect(bisect(A, 7, lo: 5, hi: 2), 5);
    expect(bisect(A, 8, lo: 5, hi: 2), 5);
  });

  test('bisect for B lo=5 hi=2', () {
    expect(bisect(B, -2, lo: 5, hi: 2), 5);
    expect(bisect(B, -1, lo: 5, hi: 2), 5);
    expect(bisect(B, 0, lo: 5, hi: 2), 5);
    expect(bisect(B, 1, lo: 5, hi: 2), 5);
    expect(bisect(B, 2, lo: 5, hi: 2), 5);
    expect(bisect(B, 3, lo: 5, hi: 2), 5);
    expect(bisect(B, 4, lo: 5, hi: 2), 5);
    expect(bisect(B, 5, lo: 5, hi: 2), 5);
    expect(bisect(B, 6, lo: 5, hi: 2), 5);
    expect(bisect(B, 7, lo: 5, hi: 2), 5);
    expect(bisect(B, 8, lo: 5, hi: 2), 5);
  });

  test('bisect for C lo=5 hi=2', () {
    expect(bisect(C, -2, lo: 5, hi: 2), 5);
    expect(bisect(C, -1, lo: 5, hi: 2), 5);
    expect(bisect(C, 0, lo: 5, hi: 2), 5);
    expect(bisect(C, 1, lo: 5, hi: 2), 5);
    expect(bisect(C, 2, lo: 5, hi: 2), 5);
    expect(bisect(C, 3, lo: 5, hi: 2), 5);
    expect(bisect(C, 4, lo: 5, hi: 2), 5);
    expect(bisect(C, 5, lo: 5, hi: 2), 5);
    expect(bisect(C, 6, lo: 5, hi: 2), 5);
    expect(bisect(C, 7, lo: 5, hi: 2), 5);
    expect(bisect(C, 8, lo: 5, hi: 2), 5);
  });

  test('bisect for D lo=5 hi=2', () {
    expect(bisect(D, -2, lo: 5, hi: 2), 5);
    expect(bisect(D, -1, lo: 5, hi: 2), 5);
    expect(bisect(D, 0, lo: 5, hi: 2), 5);
    expect(bisect(D, 1, lo: 5, hi: 2), 5);
    expect(bisect(D, 2, lo: 5, hi: 2), 5);
    expect(bisect(D, 3, lo: 5, hi: 2), 5);
    expect(bisect(D, 4, lo: 5, hi: 2), 5);
    expect(bisect(D, 5, lo: 5, hi: 2), 5);
    expect(bisect(D, 6, lo: 5, hi: 2), 5);
    expect(bisect(D, 7, lo: 5, hi: 2), 5);
    expect(bisect(D, 8, lo: 5, hi: 2), 5);
  });

  test('bisect for E lo=5 hi=2', () {
    expect(bisect(E, -2, lo: 5, hi: 2), 5);
    expect(bisect(E, -1, lo: 5, hi: 2), 5);
    expect(bisect(E, 0, lo: 5, hi: 2), 5);
    expect(bisect(E, 1, lo: 5, hi: 2), 5);
    expect(bisect(E, 2, lo: 5, hi: 2), 5);
    expect(bisect(E, 3, lo: 5, hi: 2), 5);
    expect(bisect(E, 4, lo: 5, hi: 2), 5);
    expect(bisect(E, 5, lo: 5, hi: 2), 5);
    expect(bisect(E, 6, lo: 5, hi: 2), 5);
    expect(bisect(E, 7, lo: 5, hi: 2), 5);
    expect(bisect(E, 8, lo: 5, hi: 2), 5);
  });

  test('bisect for A lo=6 hi=2', () {
    expect(bisect(A, -2, lo: 6, hi: 2), 6);
    expect(bisect(A, -1, lo: 6, hi: 2), 6);
    expect(bisect(A, 0, lo: 6, hi: 2), 6);
    expect(bisect(A, 1, lo: 6, hi: 2), 6);
    expect(bisect(A, 2, lo: 6, hi: 2), 6);
    expect(bisect(A, 3, lo: 6, hi: 2), 6);
    expect(bisect(A, 4, lo: 6, hi: 2), 6);
    expect(bisect(A, 5, lo: 6, hi: 2), 6);
    expect(bisect(A, 6, lo: 6, hi: 2), 6);
    expect(bisect(A, 7, lo: 6, hi: 2), 6);
    expect(bisect(A, 8, lo: 6, hi: 2), 6);
  });

  test('bisect for B lo=6 hi=2', () {
    expect(bisect(B, -2, lo: 6, hi: 2), 6);
    expect(bisect(B, -1, lo: 6, hi: 2), 6);
    expect(bisect(B, 0, lo: 6, hi: 2), 6);
    expect(bisect(B, 1, lo: 6, hi: 2), 6);
    expect(bisect(B, 2, lo: 6, hi: 2), 6);
    expect(bisect(B, 3, lo: 6, hi: 2), 6);
    expect(bisect(B, 4, lo: 6, hi: 2), 6);
    expect(bisect(B, 5, lo: 6, hi: 2), 6);
    expect(bisect(B, 6, lo: 6, hi: 2), 6);
    expect(bisect(B, 7, lo: 6, hi: 2), 6);
    expect(bisect(B, 8, lo: 6, hi: 2), 6);
  });

  test('bisect for C lo=6 hi=2', () {
    expect(bisect(C, -2, lo: 6, hi: 2), 6);
    expect(bisect(C, -1, lo: 6, hi: 2), 6);
    expect(bisect(C, 0, lo: 6, hi: 2), 6);
    expect(bisect(C, 1, lo: 6, hi: 2), 6);
    expect(bisect(C, 2, lo: 6, hi: 2), 6);
    expect(bisect(C, 3, lo: 6, hi: 2), 6);
    expect(bisect(C, 4, lo: 6, hi: 2), 6);
    expect(bisect(C, 5, lo: 6, hi: 2), 6);
    expect(bisect(C, 6, lo: 6, hi: 2), 6);
    expect(bisect(C, 7, lo: 6, hi: 2), 6);
    expect(bisect(C, 8, lo: 6, hi: 2), 6);
  });

  test('bisect for D lo=6 hi=2', () {
    expect(bisect(D, -2, lo: 6, hi: 2), 6);
    expect(bisect(D, -1, lo: 6, hi: 2), 6);
    expect(bisect(D, 0, lo: 6, hi: 2), 6);
    expect(bisect(D, 1, lo: 6, hi: 2), 6);
    expect(bisect(D, 2, lo: 6, hi: 2), 6);
    expect(bisect(D, 3, lo: 6, hi: 2), 6);
    expect(bisect(D, 4, lo: 6, hi: 2), 6);
    expect(bisect(D, 5, lo: 6, hi: 2), 6);
    expect(bisect(D, 6, lo: 6, hi: 2), 6);
    expect(bisect(D, 7, lo: 6, hi: 2), 6);
    expect(bisect(D, 8, lo: 6, hi: 2), 6);
  });

  test('bisect for E lo=6 hi=2', () {
    expect(bisect(E, -2, lo: 6, hi: 2), 6);
    expect(bisect(E, -1, lo: 6, hi: 2), 6);
    expect(bisect(E, 0, lo: 6, hi: 2), 6);
    expect(bisect(E, 1, lo: 6, hi: 2), 6);
    expect(bisect(E, 2, lo: 6, hi: 2), 6);
    expect(bisect(E, 3, lo: 6, hi: 2), 6);
    expect(bisect(E, 4, lo: 6, hi: 2), 6);
    expect(bisect(E, 5, lo: 6, hi: 2), 6);
    expect(bisect(E, 6, lo: 6, hi: 2), 6);
    expect(bisect(E, 7, lo: 6, hi: 2), 6);
    expect(bisect(E, 8, lo: 6, hi: 2), 6);
  });

  test('bisect for A lo=7 hi=2', () {
    expect(bisect(A, -2, lo: 7, hi: 2), 7);
    expect(bisect(A, -1, lo: 7, hi: 2), 7);
    expect(bisect(A, 0, lo: 7, hi: 2), 7);
    expect(bisect(A, 1, lo: 7, hi: 2), 7);
    expect(bisect(A, 2, lo: 7, hi: 2), 7);
    expect(bisect(A, 3, lo: 7, hi: 2), 7);
    expect(bisect(A, 4, lo: 7, hi: 2), 7);
    expect(bisect(A, 5, lo: 7, hi: 2), 7);
    expect(bisect(A, 6, lo: 7, hi: 2), 7);
    expect(bisect(A, 7, lo: 7, hi: 2), 7);
    expect(bisect(A, 8, lo: 7, hi: 2), 7);
  });

  test('bisect for B lo=7 hi=2', () {
    expect(bisect(B, -2, lo: 7, hi: 2), 7);
    expect(bisect(B, -1, lo: 7, hi: 2), 7);
    expect(bisect(B, 0, lo: 7, hi: 2), 7);
    expect(bisect(B, 1, lo: 7, hi: 2), 7);
    expect(bisect(B, 2, lo: 7, hi: 2), 7);
    expect(bisect(B, 3, lo: 7, hi: 2), 7);
    expect(bisect(B, 4, lo: 7, hi: 2), 7);
    expect(bisect(B, 5, lo: 7, hi: 2), 7);
    expect(bisect(B, 6, lo: 7, hi: 2), 7);
    expect(bisect(B, 7, lo: 7, hi: 2), 7);
    expect(bisect(B, 8, lo: 7, hi: 2), 7);
  });

  test('bisect for C lo=7 hi=2', () {
    expect(bisect(C, -2, lo: 7, hi: 2), 7);
    expect(bisect(C, -1, lo: 7, hi: 2), 7);
    expect(bisect(C, 0, lo: 7, hi: 2), 7);
    expect(bisect(C, 1, lo: 7, hi: 2), 7);
    expect(bisect(C, 2, lo: 7, hi: 2), 7);
    expect(bisect(C, 3, lo: 7, hi: 2), 7);
    expect(bisect(C, 4, lo: 7, hi: 2), 7);
    expect(bisect(C, 5, lo: 7, hi: 2), 7);
    expect(bisect(C, 6, lo: 7, hi: 2), 7);
    expect(bisect(C, 7, lo: 7, hi: 2), 7);
    expect(bisect(C, 8, lo: 7, hi: 2), 7);
  });

  test('bisect for D lo=7 hi=2', () {
    expect(bisect(D, -2, lo: 7, hi: 2), 7);
    expect(bisect(D, -1, lo: 7, hi: 2), 7);
    expect(bisect(D, 0, lo: 7, hi: 2), 7);
    expect(bisect(D, 1, lo: 7, hi: 2), 7);
    expect(bisect(D, 2, lo: 7, hi: 2), 7);
    expect(bisect(D, 3, lo: 7, hi: 2), 7);
    expect(bisect(D, 4, lo: 7, hi: 2), 7);
    expect(bisect(D, 5, lo: 7, hi: 2), 7);
    expect(bisect(D, 6, lo: 7, hi: 2), 7);
    expect(bisect(D, 7, lo: 7, hi: 2), 7);
    expect(bisect(D, 8, lo: 7, hi: 2), 7);
  });

  test('bisect for E lo=7 hi=2', () {
    expect(bisect(E, -2, lo: 7, hi: 2), 7);
    expect(bisect(E, -1, lo: 7, hi: 2), 7);
    expect(bisect(E, 0, lo: 7, hi: 2), 7);
    expect(bisect(E, 1, lo: 7, hi: 2), 7);
    expect(bisect(E, 2, lo: 7, hi: 2), 7);
    expect(bisect(E, 3, lo: 7, hi: 2), 7);
    expect(bisect(E, 4, lo: 7, hi: 2), 7);
    expect(bisect(E, 5, lo: 7, hi: 2), 7);
    expect(bisect(E, 6, lo: 7, hi: 2), 7);
    expect(bisect(E, 7, lo: 7, hi: 2), 7);
    expect(bisect(E, 8, lo: 7, hi: 2), 7);
  });

  test('bisect for A lo=8 hi=2', () {
    expect(bisect(A, -2, lo: 8, hi: 2), 8);
    expect(bisect(A, -1, lo: 8, hi: 2), 8);
    expect(bisect(A, 0, lo: 8, hi: 2), 8);
    expect(bisect(A, 1, lo: 8, hi: 2), 8);
    expect(bisect(A, 2, lo: 8, hi: 2), 8);
    expect(bisect(A, 3, lo: 8, hi: 2), 8);
    expect(bisect(A, 4, lo: 8, hi: 2), 8);
    expect(bisect(A, 5, lo: 8, hi: 2), 8);
    expect(bisect(A, 6, lo: 8, hi: 2), 8);
    expect(bisect(A, 7, lo: 8, hi: 2), 8);
    expect(bisect(A, 8, lo: 8, hi: 2), 8);
  });

  test('bisect for B lo=8 hi=2', () {
    expect(bisect(B, -2, lo: 8, hi: 2), 8);
    expect(bisect(B, -1, lo: 8, hi: 2), 8);
    expect(bisect(B, 0, lo: 8, hi: 2), 8);
    expect(bisect(B, 1, lo: 8, hi: 2), 8);
    expect(bisect(B, 2, lo: 8, hi: 2), 8);
    expect(bisect(B, 3, lo: 8, hi: 2), 8);
    expect(bisect(B, 4, lo: 8, hi: 2), 8);
    expect(bisect(B, 5, lo: 8, hi: 2), 8);
    expect(bisect(B, 6, lo: 8, hi: 2), 8);
    expect(bisect(B, 7, lo: 8, hi: 2), 8);
    expect(bisect(B, 8, lo: 8, hi: 2), 8);
  });

  test('bisect for C lo=8 hi=2', () {
    expect(bisect(C, -2, lo: 8, hi: 2), 8);
    expect(bisect(C, -1, lo: 8, hi: 2), 8);
    expect(bisect(C, 0, lo: 8, hi: 2), 8);
    expect(bisect(C, 1, lo: 8, hi: 2), 8);
    expect(bisect(C, 2, lo: 8, hi: 2), 8);
    expect(bisect(C, 3, lo: 8, hi: 2), 8);
    expect(bisect(C, 4, lo: 8, hi: 2), 8);
    expect(bisect(C, 5, lo: 8, hi: 2), 8);
    expect(bisect(C, 6, lo: 8, hi: 2), 8);
    expect(bisect(C, 7, lo: 8, hi: 2), 8);
    expect(bisect(C, 8, lo: 8, hi: 2), 8);
  });

  test('bisect for D lo=8 hi=2', () {
    expect(bisect(D, -2, lo: 8, hi: 2), 8);
    expect(bisect(D, -1, lo: 8, hi: 2), 8);
    expect(bisect(D, 0, lo: 8, hi: 2), 8);
    expect(bisect(D, 1, lo: 8, hi: 2), 8);
    expect(bisect(D, 2, lo: 8, hi: 2), 8);
    expect(bisect(D, 3, lo: 8, hi: 2), 8);
    expect(bisect(D, 4, lo: 8, hi: 2), 8);
    expect(bisect(D, 5, lo: 8, hi: 2), 8);
    expect(bisect(D, 6, lo: 8, hi: 2), 8);
    expect(bisect(D, 7, lo: 8, hi: 2), 8);
    expect(bisect(D, 8, lo: 8, hi: 2), 8);
  });

  test('bisect for E lo=8 hi=2', () {
    expect(bisect(E, -2, lo: 8, hi: 2), 8);
    expect(bisect(E, -1, lo: 8, hi: 2), 8);
    expect(bisect(E, 0, lo: 8, hi: 2), 8);
    expect(bisect(E, 1, lo: 8, hi: 2), 8);
    expect(bisect(E, 2, lo: 8, hi: 2), 8);
    expect(bisect(E, 3, lo: 8, hi: 2), 8);
    expect(bisect(E, 4, lo: 8, hi: 2), 8);
    expect(bisect(E, 5, lo: 8, hi: 2), 8);
    expect(bisect(E, 6, lo: 8, hi: 2), 8);
    expect(bisect(E, 7, lo: 8, hi: 2), 8);
    expect(bisect(E, 8, lo: 8, hi: 2), 8);
  });

  test('bisect for A lo=9 hi=2', () {
    expect(bisect(A, -2, lo: 9, hi: 2), 9);
    expect(bisect(A, -1, lo: 9, hi: 2), 9);
    expect(bisect(A, 0, lo: 9, hi: 2), 9);
    expect(bisect(A, 1, lo: 9, hi: 2), 9);
    expect(bisect(A, 2, lo: 9, hi: 2), 9);
    expect(bisect(A, 3, lo: 9, hi: 2), 9);
    expect(bisect(A, 4, lo: 9, hi: 2), 9);
    expect(bisect(A, 5, lo: 9, hi: 2), 9);
    expect(bisect(A, 6, lo: 9, hi: 2), 9);
    expect(bisect(A, 7, lo: 9, hi: 2), 9);
    expect(bisect(A, 8, lo: 9, hi: 2), 9);
  });

  test('bisect for B lo=9 hi=2', () {
    expect(bisect(B, -2, lo: 9, hi: 2), 9);
    expect(bisect(B, -1, lo: 9, hi: 2), 9);
    expect(bisect(B, 0, lo: 9, hi: 2), 9);
    expect(bisect(B, 1, lo: 9, hi: 2), 9);
    expect(bisect(B, 2, lo: 9, hi: 2), 9);
    expect(bisect(B, 3, lo: 9, hi: 2), 9);
    expect(bisect(B, 4, lo: 9, hi: 2), 9);
    expect(bisect(B, 5, lo: 9, hi: 2), 9);
    expect(bisect(B, 6, lo: 9, hi: 2), 9);
    expect(bisect(B, 7, lo: 9, hi: 2), 9);
    expect(bisect(B, 8, lo: 9, hi: 2), 9);
  });

  test('bisect for C lo=9 hi=2', () {
    expect(bisect(C, -2, lo: 9, hi: 2), 9);
    expect(bisect(C, -1, lo: 9, hi: 2), 9);
    expect(bisect(C, 0, lo: 9, hi: 2), 9);
    expect(bisect(C, 1, lo: 9, hi: 2), 9);
    expect(bisect(C, 2, lo: 9, hi: 2), 9);
    expect(bisect(C, 3, lo: 9, hi: 2), 9);
    expect(bisect(C, 4, lo: 9, hi: 2), 9);
    expect(bisect(C, 5, lo: 9, hi: 2), 9);
    expect(bisect(C, 6, lo: 9, hi: 2), 9);
    expect(bisect(C, 7, lo: 9, hi: 2), 9);
    expect(bisect(C, 8, lo: 9, hi: 2), 9);
  });

  test('bisect for D lo=9 hi=2', () {
    expect(bisect(D, -2, lo: 9, hi: 2), 9);
    expect(bisect(D, -1, lo: 9, hi: 2), 9);
    expect(bisect(D, 0, lo: 9, hi: 2), 9);
    expect(bisect(D, 1, lo: 9, hi: 2), 9);
    expect(bisect(D, 2, lo: 9, hi: 2), 9);
    expect(bisect(D, 3, lo: 9, hi: 2), 9);
    expect(bisect(D, 4, lo: 9, hi: 2), 9);
    expect(bisect(D, 5, lo: 9, hi: 2), 9);
    expect(bisect(D, 6, lo: 9, hi: 2), 9);
    expect(bisect(D, 7, lo: 9, hi: 2), 9);
    expect(bisect(D, 8, lo: 9, hi: 2), 9);
  });

  test('bisect for E lo=9 hi=2', () {
    expect(bisect(E, -2, lo: 9, hi: 2), 9);
    expect(bisect(E, -1, lo: 9, hi: 2), 9);
    expect(bisect(E, 0, lo: 9, hi: 2), 9);
    expect(bisect(E, 1, lo: 9, hi: 2), 9);
    expect(bisect(E, 2, lo: 9, hi: 2), 9);
    expect(bisect(E, 3, lo: 9, hi: 2), 9);
    expect(bisect(E, 4, lo: 9, hi: 2), 9);
    expect(bisect(E, 5, lo: 9, hi: 2), 9);
    expect(bisect(E, 6, lo: 9, hi: 2), 9);
    expect(bisect(E, 7, lo: 9, hi: 2), 9);
    expect(bisect(E, 8, lo: 9, hi: 2), 9);
  });

  test('bisect for A lo=None hi=3', () {
    expect(() => bisect(A, -2, hi: 3), throwsRangeError);
    expect(() => bisect(A, -1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 3, hi: 3), throwsRangeError);
    expect(() => bisect(A, 4, hi: 3), throwsRangeError);
    expect(() => bisect(A, 5, hi: 3), throwsRangeError);
    expect(() => bisect(A, 6, hi: 3), throwsRangeError);
    expect(() => bisect(A, 7, hi: 3), throwsRangeError);
    expect(() => bisect(A, 8, hi: 3), throwsRangeError);
  });

  test('bisect for B lo=None hi=3', () {
    expect(() => bisect(B, -2, hi: 3), throwsRangeError);
    expect(() => bisect(B, -1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 3, hi: 3), throwsRangeError);
    expect(() => bisect(B, 4, hi: 3), throwsRangeError);
    expect(() => bisect(B, 5, hi: 3), throwsRangeError);
    expect(() => bisect(B, 6, hi: 3), throwsRangeError);
    expect(() => bisect(B, 7, hi: 3), throwsRangeError);
    expect(() => bisect(B, 8, hi: 3), throwsRangeError);
  });

  test('bisect for C lo=None hi=3', () {
    expect(bisect(C, -2, hi: 3), 0);
    expect(bisect(C, -1, hi: 3), 0);
    expect(bisect(C, 0, hi: 3), 0);
    expect(bisect(C, 1, hi: 3), 0);
    expect(bisect(C, 2, hi: 3), 0);
    expect(bisect(C, 3, hi: 3), 0);
    expect(bisect(C, 4, hi: 3), 1);
    expect(() => bisect(C, 5, hi: 3), throwsRangeError);
    expect(() => bisect(C, 6, hi: 3), throwsRangeError);
    expect(() => bisect(C, 7, hi: 3), throwsRangeError);
    expect(() => bisect(C, 8, hi: 3), throwsRangeError);
  });

  test('bisect for D lo=None hi=3', () {
    expect(bisect(D, -2, hi: 3), 0);
    expect(bisect(D, -1, hi: 3), 0);
    expect(bisect(D, 0, hi: 3), 0);
    expect(bisect(D, 1, hi: 3), 0);
    expect(bisect(D, 2, hi: 3), 0);
    expect(bisect(D, 3, hi: 3), 1);
    expect(bisect(D, 4, hi: 3), 2);
    expect(bisect(D, 5, hi: 3), 3);
    expect(bisect(D, 6, hi: 3), 3);
    expect(bisect(D, 7, hi: 3), 3);
    expect(bisect(D, 8, hi: 3), 3);
  });

  test('bisect for E lo=None hi=3', () {
    expect(bisect(E, -2, hi: 3), 0);
    expect(bisect(E, -1, hi: 3), 0);
    expect(bisect(E, 0, hi: 3), 1);
    expect(bisect(E, 1, hi: 3), 2);
    expect(bisect(E, 2, hi: 3), 3);
    expect(bisect(E, 3, hi: 3), 3);
    expect(bisect(E, 4, hi: 3), 3);
    expect(bisect(E, 5, hi: 3), 3);
    expect(bisect(E, 6, hi: 3), 3);
    expect(bisect(E, 7, hi: 3), 3);
    expect(bisect(E, 8, hi: 3), 3);
  });

  test('bisect for A lo=0 hi=3', () {
    expect(() => bisect(A, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect for B lo=0 hi=3', () {
    expect(() => bisect(B, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect for C lo=0 hi=3', () {
    expect(bisect(C, -2, lo: 0, hi: 3), 0);
    expect(bisect(C, -1, lo: 0, hi: 3), 0);
    expect(bisect(C, 0, lo: 0, hi: 3), 0);
    expect(bisect(C, 1, lo: 0, hi: 3), 0);
    expect(bisect(C, 2, lo: 0, hi: 3), 0);
    expect(bisect(C, 3, lo: 0, hi: 3), 0);
    expect(bisect(C, 4, lo: 0, hi: 3), 1);
    expect(() => bisect(C, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(C, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(C, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => bisect(C, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('bisect for D lo=0 hi=3', () {
    expect(bisect(D, -2, lo: 0, hi: 3), 0);
    expect(bisect(D, -1, lo: 0, hi: 3), 0);
    expect(bisect(D, 0, lo: 0, hi: 3), 0);
    expect(bisect(D, 1, lo: 0, hi: 3), 0);
    expect(bisect(D, 2, lo: 0, hi: 3), 0);
    expect(bisect(D, 3, lo: 0, hi: 3), 1);
    expect(bisect(D, 4, lo: 0, hi: 3), 2);
    expect(bisect(D, 5, lo: 0, hi: 3), 3);
    expect(bisect(D, 6, lo: 0, hi: 3), 3);
    expect(bisect(D, 7, lo: 0, hi: 3), 3);
    expect(bisect(D, 8, lo: 0, hi: 3), 3);
  });

  test('bisect for E lo=0 hi=3', () {
    expect(bisect(E, -2, lo: 0, hi: 3), 0);
    expect(bisect(E, -1, lo: 0, hi: 3), 0);
    expect(bisect(E, 0, lo: 0, hi: 3), 1);
    expect(bisect(E, 1, lo: 0, hi: 3), 2);
    expect(bisect(E, 2, lo: 0, hi: 3), 3);
    expect(bisect(E, 3, lo: 0, hi: 3), 3);
    expect(bisect(E, 4, lo: 0, hi: 3), 3);
    expect(bisect(E, 5, lo: 0, hi: 3), 3);
    expect(bisect(E, 6, lo: 0, hi: 3), 3);
    expect(bisect(E, 7, lo: 0, hi: 3), 3);
    expect(bisect(E, 8, lo: 0, hi: 3), 3);
  });

  test('bisect for A lo=1 hi=3', () {
    expect(() => bisect(A, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect for B lo=1 hi=3', () {
    expect(() => bisect(B, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect for C lo=1 hi=3', () {
    expect(() => bisect(C, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => bisect(C, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('bisect for D lo=1 hi=3', () {
    expect(bisect(D, -2, lo: 1, hi: 3), 1);
    expect(bisect(D, -1, lo: 1, hi: 3), 1);
    expect(bisect(D, 0, lo: 1, hi: 3), 1);
    expect(bisect(D, 1, lo: 1, hi: 3), 1);
    expect(bisect(D, 2, lo: 1, hi: 3), 1);
    expect(bisect(D, 3, lo: 1, hi: 3), 1);
    expect(bisect(D, 4, lo: 1, hi: 3), 2);
    expect(bisect(D, 5, lo: 1, hi: 3), 3);
    expect(bisect(D, 6, lo: 1, hi: 3), 3);
    expect(bisect(D, 7, lo: 1, hi: 3), 3);
    expect(bisect(D, 8, lo: 1, hi: 3), 3);
  });

  test('bisect for E lo=1 hi=3', () {
    expect(bisect(E, -2, lo: 1, hi: 3), 1);
    expect(bisect(E, -1, lo: 1, hi: 3), 1);
    expect(bisect(E, 0, lo: 1, hi: 3), 1);
    expect(bisect(E, 1, lo: 1, hi: 3), 2);
    expect(bisect(E, 2, lo: 1, hi: 3), 3);
    expect(bisect(E, 3, lo: 1, hi: 3), 3);
    expect(bisect(E, 4, lo: 1, hi: 3), 3);
    expect(bisect(E, 5, lo: 1, hi: 3), 3);
    expect(bisect(E, 6, lo: 1, hi: 3), 3);
    expect(bisect(E, 7, lo: 1, hi: 3), 3);
    expect(bisect(E, 8, lo: 1, hi: 3), 3);
  });

  test('bisect for A lo=2 hi=3', () {
    expect(() => bisect(A, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(A, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect for B lo=2 hi=3', () {
    expect(() => bisect(B, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(B, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect for C lo=2 hi=3', () {
    expect(() => bisect(C, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => bisect(C, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('bisect for D lo=2 hi=3', () {
    expect(bisect(D, -2, lo: 2, hi: 3), 2);
    expect(bisect(D, -1, lo: 2, hi: 3), 2);
    expect(bisect(D, 0, lo: 2, hi: 3), 2);
    expect(bisect(D, 1, lo: 2, hi: 3), 2);
    expect(bisect(D, 2, lo: 2, hi: 3), 2);
    expect(bisect(D, 3, lo: 2, hi: 3), 2);
    expect(bisect(D, 4, lo: 2, hi: 3), 2);
    expect(bisect(D, 5, lo: 2, hi: 3), 3);
    expect(bisect(D, 6, lo: 2, hi: 3), 3);
    expect(bisect(D, 7, lo: 2, hi: 3), 3);
    expect(bisect(D, 8, lo: 2, hi: 3), 3);
  });

  test('bisect for E lo=2 hi=3', () {
    expect(bisect(E, -2, lo: 2, hi: 3), 2);
    expect(bisect(E, -1, lo: 2, hi: 3), 2);
    expect(bisect(E, 0, lo: 2, hi: 3), 2);
    expect(bisect(E, 1, lo: 2, hi: 3), 2);
    expect(bisect(E, 2, lo: 2, hi: 3), 3);
    expect(bisect(E, 3, lo: 2, hi: 3), 3);
    expect(bisect(E, 4, lo: 2, hi: 3), 3);
    expect(bisect(E, 5, lo: 2, hi: 3), 3);
    expect(bisect(E, 6, lo: 2, hi: 3), 3);
    expect(bisect(E, 7, lo: 2, hi: 3), 3);
    expect(bisect(E, 8, lo: 2, hi: 3), 3);
  });

  test('bisect for A lo=3 hi=3', () {
    expect(bisect(A, -2, lo: 3, hi: 3), 3);
    expect(bisect(A, -1, lo: 3, hi: 3), 3);
    expect(bisect(A, 0, lo: 3, hi: 3), 3);
    expect(bisect(A, 1, lo: 3, hi: 3), 3);
    expect(bisect(A, 2, lo: 3, hi: 3), 3);
    expect(bisect(A, 3, lo: 3, hi: 3), 3);
    expect(bisect(A, 4, lo: 3, hi: 3), 3);
    expect(bisect(A, 5, lo: 3, hi: 3), 3);
    expect(bisect(A, 6, lo: 3, hi: 3), 3);
    expect(bisect(A, 7, lo: 3, hi: 3), 3);
    expect(bisect(A, 8, lo: 3, hi: 3), 3);
  });

  test('bisect for B lo=3 hi=3', () {
    expect(bisect(B, -2, lo: 3, hi: 3), 3);
    expect(bisect(B, -1, lo: 3, hi: 3), 3);
    expect(bisect(B, 0, lo: 3, hi: 3), 3);
    expect(bisect(B, 1, lo: 3, hi: 3), 3);
    expect(bisect(B, 2, lo: 3, hi: 3), 3);
    expect(bisect(B, 3, lo: 3, hi: 3), 3);
    expect(bisect(B, 4, lo: 3, hi: 3), 3);
    expect(bisect(B, 5, lo: 3, hi: 3), 3);
    expect(bisect(B, 6, lo: 3, hi: 3), 3);
    expect(bisect(B, 7, lo: 3, hi: 3), 3);
    expect(bisect(B, 8, lo: 3, hi: 3), 3);
  });

  test('bisect for C lo=3 hi=3', () {
    expect(bisect(C, -2, lo: 3, hi: 3), 3);
    expect(bisect(C, -1, lo: 3, hi: 3), 3);
    expect(bisect(C, 0, lo: 3, hi: 3), 3);
    expect(bisect(C, 1, lo: 3, hi: 3), 3);
    expect(bisect(C, 2, lo: 3, hi: 3), 3);
    expect(bisect(C, 3, lo: 3, hi: 3), 3);
    expect(bisect(C, 4, lo: 3, hi: 3), 3);
    expect(bisect(C, 5, lo: 3, hi: 3), 3);
    expect(bisect(C, 6, lo: 3, hi: 3), 3);
    expect(bisect(C, 7, lo: 3, hi: 3), 3);
    expect(bisect(C, 8, lo: 3, hi: 3), 3);
  });

  test('bisect for D lo=3 hi=3', () {
    expect(bisect(D, -2, lo: 3, hi: 3), 3);
    expect(bisect(D, -1, lo: 3, hi: 3), 3);
    expect(bisect(D, 0, lo: 3, hi: 3), 3);
    expect(bisect(D, 1, lo: 3, hi: 3), 3);
    expect(bisect(D, 2, lo: 3, hi: 3), 3);
    expect(bisect(D, 3, lo: 3, hi: 3), 3);
    expect(bisect(D, 4, lo: 3, hi: 3), 3);
    expect(bisect(D, 5, lo: 3, hi: 3), 3);
    expect(bisect(D, 6, lo: 3, hi: 3), 3);
    expect(bisect(D, 7, lo: 3, hi: 3), 3);
    expect(bisect(D, 8, lo: 3, hi: 3), 3);
  });

  test('bisect for E lo=3 hi=3', () {
    expect(bisect(E, -2, lo: 3, hi: 3), 3);
    expect(bisect(E, -1, lo: 3, hi: 3), 3);
    expect(bisect(E, 0, lo: 3, hi: 3), 3);
    expect(bisect(E, 1, lo: 3, hi: 3), 3);
    expect(bisect(E, 2, lo: 3, hi: 3), 3);
    expect(bisect(E, 3, lo: 3, hi: 3), 3);
    expect(bisect(E, 4, lo: 3, hi: 3), 3);
    expect(bisect(E, 5, lo: 3, hi: 3), 3);
    expect(bisect(E, 6, lo: 3, hi: 3), 3);
    expect(bisect(E, 7, lo: 3, hi: 3), 3);
    expect(bisect(E, 8, lo: 3, hi: 3), 3);
  });

  test('bisect for A lo=4 hi=3', () {
    expect(bisect(A, -2, lo: 4, hi: 3), 4);
    expect(bisect(A, -1, lo: 4, hi: 3), 4);
    expect(bisect(A, 0, lo: 4, hi: 3), 4);
    expect(bisect(A, 1, lo: 4, hi: 3), 4);
    expect(bisect(A, 2, lo: 4, hi: 3), 4);
    expect(bisect(A, 3, lo: 4, hi: 3), 4);
    expect(bisect(A, 4, lo: 4, hi: 3), 4);
    expect(bisect(A, 5, lo: 4, hi: 3), 4);
    expect(bisect(A, 6, lo: 4, hi: 3), 4);
    expect(bisect(A, 7, lo: 4, hi: 3), 4);
    expect(bisect(A, 8, lo: 4, hi: 3), 4);
  });

  test('bisect for B lo=4 hi=3', () {
    expect(bisect(B, -2, lo: 4, hi: 3), 4);
    expect(bisect(B, -1, lo: 4, hi: 3), 4);
    expect(bisect(B, 0, lo: 4, hi: 3), 4);
    expect(bisect(B, 1, lo: 4, hi: 3), 4);
    expect(bisect(B, 2, lo: 4, hi: 3), 4);
    expect(bisect(B, 3, lo: 4, hi: 3), 4);
    expect(bisect(B, 4, lo: 4, hi: 3), 4);
    expect(bisect(B, 5, lo: 4, hi: 3), 4);
    expect(bisect(B, 6, lo: 4, hi: 3), 4);
    expect(bisect(B, 7, lo: 4, hi: 3), 4);
    expect(bisect(B, 8, lo: 4, hi: 3), 4);
  });

  test('bisect for C lo=4 hi=3', () {
    expect(bisect(C, -2, lo: 4, hi: 3), 4);
    expect(bisect(C, -1, lo: 4, hi: 3), 4);
    expect(bisect(C, 0, lo: 4, hi: 3), 4);
    expect(bisect(C, 1, lo: 4, hi: 3), 4);
    expect(bisect(C, 2, lo: 4, hi: 3), 4);
    expect(bisect(C, 3, lo: 4, hi: 3), 4);
    expect(bisect(C, 4, lo: 4, hi: 3), 4);
    expect(bisect(C, 5, lo: 4, hi: 3), 4);
    expect(bisect(C, 6, lo: 4, hi: 3), 4);
    expect(bisect(C, 7, lo: 4, hi: 3), 4);
    expect(bisect(C, 8, lo: 4, hi: 3), 4);
  });

  test('bisect for D lo=4 hi=3', () {
    expect(bisect(D, -2, lo: 4, hi: 3), 4);
    expect(bisect(D, -1, lo: 4, hi: 3), 4);
    expect(bisect(D, 0, lo: 4, hi: 3), 4);
    expect(bisect(D, 1, lo: 4, hi: 3), 4);
    expect(bisect(D, 2, lo: 4, hi: 3), 4);
    expect(bisect(D, 3, lo: 4, hi: 3), 4);
    expect(bisect(D, 4, lo: 4, hi: 3), 4);
    expect(bisect(D, 5, lo: 4, hi: 3), 4);
    expect(bisect(D, 6, lo: 4, hi: 3), 4);
    expect(bisect(D, 7, lo: 4, hi: 3), 4);
    expect(bisect(D, 8, lo: 4, hi: 3), 4);
  });

  test('bisect for E lo=4 hi=3', () {
    expect(bisect(E, -2, lo: 4, hi: 3), 4);
    expect(bisect(E, -1, lo: 4, hi: 3), 4);
    expect(bisect(E, 0, lo: 4, hi: 3), 4);
    expect(bisect(E, 1, lo: 4, hi: 3), 4);
    expect(bisect(E, 2, lo: 4, hi: 3), 4);
    expect(bisect(E, 3, lo: 4, hi: 3), 4);
    expect(bisect(E, 4, lo: 4, hi: 3), 4);
    expect(bisect(E, 5, lo: 4, hi: 3), 4);
    expect(bisect(E, 6, lo: 4, hi: 3), 4);
    expect(bisect(E, 7, lo: 4, hi: 3), 4);
    expect(bisect(E, 8, lo: 4, hi: 3), 4);
  });

  test('bisect for A lo=5 hi=3', () {
    expect(bisect(A, -2, lo: 5, hi: 3), 5);
    expect(bisect(A, -1, lo: 5, hi: 3), 5);
    expect(bisect(A, 0, lo: 5, hi: 3), 5);
    expect(bisect(A, 1, lo: 5, hi: 3), 5);
    expect(bisect(A, 2, lo: 5, hi: 3), 5);
    expect(bisect(A, 3, lo: 5, hi: 3), 5);
    expect(bisect(A, 4, lo: 5, hi: 3), 5);
    expect(bisect(A, 5, lo: 5, hi: 3), 5);
    expect(bisect(A, 6, lo: 5, hi: 3), 5);
    expect(bisect(A, 7, lo: 5, hi: 3), 5);
    expect(bisect(A, 8, lo: 5, hi: 3), 5);
  });

  test('bisect for B lo=5 hi=3', () {
    expect(bisect(B, -2, lo: 5, hi: 3), 5);
    expect(bisect(B, -1, lo: 5, hi: 3), 5);
    expect(bisect(B, 0, lo: 5, hi: 3), 5);
    expect(bisect(B, 1, lo: 5, hi: 3), 5);
    expect(bisect(B, 2, lo: 5, hi: 3), 5);
    expect(bisect(B, 3, lo: 5, hi: 3), 5);
    expect(bisect(B, 4, lo: 5, hi: 3), 5);
    expect(bisect(B, 5, lo: 5, hi: 3), 5);
    expect(bisect(B, 6, lo: 5, hi: 3), 5);
    expect(bisect(B, 7, lo: 5, hi: 3), 5);
    expect(bisect(B, 8, lo: 5, hi: 3), 5);
  });

  test('bisect for C lo=5 hi=3', () {
    expect(bisect(C, -2, lo: 5, hi: 3), 5);
    expect(bisect(C, -1, lo: 5, hi: 3), 5);
    expect(bisect(C, 0, lo: 5, hi: 3), 5);
    expect(bisect(C, 1, lo: 5, hi: 3), 5);
    expect(bisect(C, 2, lo: 5, hi: 3), 5);
    expect(bisect(C, 3, lo: 5, hi: 3), 5);
    expect(bisect(C, 4, lo: 5, hi: 3), 5);
    expect(bisect(C, 5, lo: 5, hi: 3), 5);
    expect(bisect(C, 6, lo: 5, hi: 3), 5);
    expect(bisect(C, 7, lo: 5, hi: 3), 5);
    expect(bisect(C, 8, lo: 5, hi: 3), 5);
  });

  test('bisect for D lo=5 hi=3', () {
    expect(bisect(D, -2, lo: 5, hi: 3), 5);
    expect(bisect(D, -1, lo: 5, hi: 3), 5);
    expect(bisect(D, 0, lo: 5, hi: 3), 5);
    expect(bisect(D, 1, lo: 5, hi: 3), 5);
    expect(bisect(D, 2, lo: 5, hi: 3), 5);
    expect(bisect(D, 3, lo: 5, hi: 3), 5);
    expect(bisect(D, 4, lo: 5, hi: 3), 5);
    expect(bisect(D, 5, lo: 5, hi: 3), 5);
    expect(bisect(D, 6, lo: 5, hi: 3), 5);
    expect(bisect(D, 7, lo: 5, hi: 3), 5);
    expect(bisect(D, 8, lo: 5, hi: 3), 5);
  });

  test('bisect for E lo=5 hi=3', () {
    expect(bisect(E, -2, lo: 5, hi: 3), 5);
    expect(bisect(E, -1, lo: 5, hi: 3), 5);
    expect(bisect(E, 0, lo: 5, hi: 3), 5);
    expect(bisect(E, 1, lo: 5, hi: 3), 5);
    expect(bisect(E, 2, lo: 5, hi: 3), 5);
    expect(bisect(E, 3, lo: 5, hi: 3), 5);
    expect(bisect(E, 4, lo: 5, hi: 3), 5);
    expect(bisect(E, 5, lo: 5, hi: 3), 5);
    expect(bisect(E, 6, lo: 5, hi: 3), 5);
    expect(bisect(E, 7, lo: 5, hi: 3), 5);
    expect(bisect(E, 8, lo: 5, hi: 3), 5);
  });

  test('bisect for A lo=6 hi=3', () {
    expect(bisect(A, -2, lo: 6, hi: 3), 6);
    expect(bisect(A, -1, lo: 6, hi: 3), 6);
    expect(bisect(A, 0, lo: 6, hi: 3), 6);
    expect(bisect(A, 1, lo: 6, hi: 3), 6);
    expect(bisect(A, 2, lo: 6, hi: 3), 6);
    expect(bisect(A, 3, lo: 6, hi: 3), 6);
    expect(bisect(A, 4, lo: 6, hi: 3), 6);
    expect(bisect(A, 5, lo: 6, hi: 3), 6);
    expect(bisect(A, 6, lo: 6, hi: 3), 6);
    expect(bisect(A, 7, lo: 6, hi: 3), 6);
    expect(bisect(A, 8, lo: 6, hi: 3), 6);
  });

  test('bisect for B lo=6 hi=3', () {
    expect(bisect(B, -2, lo: 6, hi: 3), 6);
    expect(bisect(B, -1, lo: 6, hi: 3), 6);
    expect(bisect(B, 0, lo: 6, hi: 3), 6);
    expect(bisect(B, 1, lo: 6, hi: 3), 6);
    expect(bisect(B, 2, lo: 6, hi: 3), 6);
    expect(bisect(B, 3, lo: 6, hi: 3), 6);
    expect(bisect(B, 4, lo: 6, hi: 3), 6);
    expect(bisect(B, 5, lo: 6, hi: 3), 6);
    expect(bisect(B, 6, lo: 6, hi: 3), 6);
    expect(bisect(B, 7, lo: 6, hi: 3), 6);
    expect(bisect(B, 8, lo: 6, hi: 3), 6);
  });

  test('bisect for C lo=6 hi=3', () {
    expect(bisect(C, -2, lo: 6, hi: 3), 6);
    expect(bisect(C, -1, lo: 6, hi: 3), 6);
    expect(bisect(C, 0, lo: 6, hi: 3), 6);
    expect(bisect(C, 1, lo: 6, hi: 3), 6);
    expect(bisect(C, 2, lo: 6, hi: 3), 6);
    expect(bisect(C, 3, lo: 6, hi: 3), 6);
    expect(bisect(C, 4, lo: 6, hi: 3), 6);
    expect(bisect(C, 5, lo: 6, hi: 3), 6);
    expect(bisect(C, 6, lo: 6, hi: 3), 6);
    expect(bisect(C, 7, lo: 6, hi: 3), 6);
    expect(bisect(C, 8, lo: 6, hi: 3), 6);
  });

  test('bisect for D lo=6 hi=3', () {
    expect(bisect(D, -2, lo: 6, hi: 3), 6);
    expect(bisect(D, -1, lo: 6, hi: 3), 6);
    expect(bisect(D, 0, lo: 6, hi: 3), 6);
    expect(bisect(D, 1, lo: 6, hi: 3), 6);
    expect(bisect(D, 2, lo: 6, hi: 3), 6);
    expect(bisect(D, 3, lo: 6, hi: 3), 6);
    expect(bisect(D, 4, lo: 6, hi: 3), 6);
    expect(bisect(D, 5, lo: 6, hi: 3), 6);
    expect(bisect(D, 6, lo: 6, hi: 3), 6);
    expect(bisect(D, 7, lo: 6, hi: 3), 6);
    expect(bisect(D, 8, lo: 6, hi: 3), 6);
  });

  test('bisect for E lo=6 hi=3', () {
    expect(bisect(E, -2, lo: 6, hi: 3), 6);
    expect(bisect(E, -1, lo: 6, hi: 3), 6);
    expect(bisect(E, 0, lo: 6, hi: 3), 6);
    expect(bisect(E, 1, lo: 6, hi: 3), 6);
    expect(bisect(E, 2, lo: 6, hi: 3), 6);
    expect(bisect(E, 3, lo: 6, hi: 3), 6);
    expect(bisect(E, 4, lo: 6, hi: 3), 6);
    expect(bisect(E, 5, lo: 6, hi: 3), 6);
    expect(bisect(E, 6, lo: 6, hi: 3), 6);
    expect(bisect(E, 7, lo: 6, hi: 3), 6);
    expect(bisect(E, 8, lo: 6, hi: 3), 6);
  });

  test('bisect for A lo=7 hi=3', () {
    expect(bisect(A, -2, lo: 7, hi: 3), 7);
    expect(bisect(A, -1, lo: 7, hi: 3), 7);
    expect(bisect(A, 0, lo: 7, hi: 3), 7);
    expect(bisect(A, 1, lo: 7, hi: 3), 7);
    expect(bisect(A, 2, lo: 7, hi: 3), 7);
    expect(bisect(A, 3, lo: 7, hi: 3), 7);
    expect(bisect(A, 4, lo: 7, hi: 3), 7);
    expect(bisect(A, 5, lo: 7, hi: 3), 7);
    expect(bisect(A, 6, lo: 7, hi: 3), 7);
    expect(bisect(A, 7, lo: 7, hi: 3), 7);
    expect(bisect(A, 8, lo: 7, hi: 3), 7);
  });

  test('bisect for B lo=7 hi=3', () {
    expect(bisect(B, -2, lo: 7, hi: 3), 7);
    expect(bisect(B, -1, lo: 7, hi: 3), 7);
    expect(bisect(B, 0, lo: 7, hi: 3), 7);
    expect(bisect(B, 1, lo: 7, hi: 3), 7);
    expect(bisect(B, 2, lo: 7, hi: 3), 7);
    expect(bisect(B, 3, lo: 7, hi: 3), 7);
    expect(bisect(B, 4, lo: 7, hi: 3), 7);
    expect(bisect(B, 5, lo: 7, hi: 3), 7);
    expect(bisect(B, 6, lo: 7, hi: 3), 7);
    expect(bisect(B, 7, lo: 7, hi: 3), 7);
    expect(bisect(B, 8, lo: 7, hi: 3), 7);
  });

  test('bisect for C lo=7 hi=3', () {
    expect(bisect(C, -2, lo: 7, hi: 3), 7);
    expect(bisect(C, -1, lo: 7, hi: 3), 7);
    expect(bisect(C, 0, lo: 7, hi: 3), 7);
    expect(bisect(C, 1, lo: 7, hi: 3), 7);
    expect(bisect(C, 2, lo: 7, hi: 3), 7);
    expect(bisect(C, 3, lo: 7, hi: 3), 7);
    expect(bisect(C, 4, lo: 7, hi: 3), 7);
    expect(bisect(C, 5, lo: 7, hi: 3), 7);
    expect(bisect(C, 6, lo: 7, hi: 3), 7);
    expect(bisect(C, 7, lo: 7, hi: 3), 7);
    expect(bisect(C, 8, lo: 7, hi: 3), 7);
  });

  test('bisect for D lo=7 hi=3', () {
    expect(bisect(D, -2, lo: 7, hi: 3), 7);
    expect(bisect(D, -1, lo: 7, hi: 3), 7);
    expect(bisect(D, 0, lo: 7, hi: 3), 7);
    expect(bisect(D, 1, lo: 7, hi: 3), 7);
    expect(bisect(D, 2, lo: 7, hi: 3), 7);
    expect(bisect(D, 3, lo: 7, hi: 3), 7);
    expect(bisect(D, 4, lo: 7, hi: 3), 7);
    expect(bisect(D, 5, lo: 7, hi: 3), 7);
    expect(bisect(D, 6, lo: 7, hi: 3), 7);
    expect(bisect(D, 7, lo: 7, hi: 3), 7);
    expect(bisect(D, 8, lo: 7, hi: 3), 7);
  });

  test('bisect for E lo=7 hi=3', () {
    expect(bisect(E, -2, lo: 7, hi: 3), 7);
    expect(bisect(E, -1, lo: 7, hi: 3), 7);
    expect(bisect(E, 0, lo: 7, hi: 3), 7);
    expect(bisect(E, 1, lo: 7, hi: 3), 7);
    expect(bisect(E, 2, lo: 7, hi: 3), 7);
    expect(bisect(E, 3, lo: 7, hi: 3), 7);
    expect(bisect(E, 4, lo: 7, hi: 3), 7);
    expect(bisect(E, 5, lo: 7, hi: 3), 7);
    expect(bisect(E, 6, lo: 7, hi: 3), 7);
    expect(bisect(E, 7, lo: 7, hi: 3), 7);
    expect(bisect(E, 8, lo: 7, hi: 3), 7);
  });

  test('bisect for A lo=8 hi=3', () {
    expect(bisect(A, -2, lo: 8, hi: 3), 8);
    expect(bisect(A, -1, lo: 8, hi: 3), 8);
    expect(bisect(A, 0, lo: 8, hi: 3), 8);
    expect(bisect(A, 1, lo: 8, hi: 3), 8);
    expect(bisect(A, 2, lo: 8, hi: 3), 8);
    expect(bisect(A, 3, lo: 8, hi: 3), 8);
    expect(bisect(A, 4, lo: 8, hi: 3), 8);
    expect(bisect(A, 5, lo: 8, hi: 3), 8);
    expect(bisect(A, 6, lo: 8, hi: 3), 8);
    expect(bisect(A, 7, lo: 8, hi: 3), 8);
    expect(bisect(A, 8, lo: 8, hi: 3), 8);
  });

  test('bisect for B lo=8 hi=3', () {
    expect(bisect(B, -2, lo: 8, hi: 3), 8);
    expect(bisect(B, -1, lo: 8, hi: 3), 8);
    expect(bisect(B, 0, lo: 8, hi: 3), 8);
    expect(bisect(B, 1, lo: 8, hi: 3), 8);
    expect(bisect(B, 2, lo: 8, hi: 3), 8);
    expect(bisect(B, 3, lo: 8, hi: 3), 8);
    expect(bisect(B, 4, lo: 8, hi: 3), 8);
    expect(bisect(B, 5, lo: 8, hi: 3), 8);
    expect(bisect(B, 6, lo: 8, hi: 3), 8);
    expect(bisect(B, 7, lo: 8, hi: 3), 8);
    expect(bisect(B, 8, lo: 8, hi: 3), 8);
  });

  test('bisect for C lo=8 hi=3', () {
    expect(bisect(C, -2, lo: 8, hi: 3), 8);
    expect(bisect(C, -1, lo: 8, hi: 3), 8);
    expect(bisect(C, 0, lo: 8, hi: 3), 8);
    expect(bisect(C, 1, lo: 8, hi: 3), 8);
    expect(bisect(C, 2, lo: 8, hi: 3), 8);
    expect(bisect(C, 3, lo: 8, hi: 3), 8);
    expect(bisect(C, 4, lo: 8, hi: 3), 8);
    expect(bisect(C, 5, lo: 8, hi: 3), 8);
    expect(bisect(C, 6, lo: 8, hi: 3), 8);
    expect(bisect(C, 7, lo: 8, hi: 3), 8);
    expect(bisect(C, 8, lo: 8, hi: 3), 8);
  });

  test('bisect for D lo=8 hi=3', () {
    expect(bisect(D, -2, lo: 8, hi: 3), 8);
    expect(bisect(D, -1, lo: 8, hi: 3), 8);
    expect(bisect(D, 0, lo: 8, hi: 3), 8);
    expect(bisect(D, 1, lo: 8, hi: 3), 8);
    expect(bisect(D, 2, lo: 8, hi: 3), 8);
    expect(bisect(D, 3, lo: 8, hi: 3), 8);
    expect(bisect(D, 4, lo: 8, hi: 3), 8);
    expect(bisect(D, 5, lo: 8, hi: 3), 8);
    expect(bisect(D, 6, lo: 8, hi: 3), 8);
    expect(bisect(D, 7, lo: 8, hi: 3), 8);
    expect(bisect(D, 8, lo: 8, hi: 3), 8);
  });

  test('bisect for E lo=8 hi=3', () {
    expect(bisect(E, -2, lo: 8, hi: 3), 8);
    expect(bisect(E, -1, lo: 8, hi: 3), 8);
    expect(bisect(E, 0, lo: 8, hi: 3), 8);
    expect(bisect(E, 1, lo: 8, hi: 3), 8);
    expect(bisect(E, 2, lo: 8, hi: 3), 8);
    expect(bisect(E, 3, lo: 8, hi: 3), 8);
    expect(bisect(E, 4, lo: 8, hi: 3), 8);
    expect(bisect(E, 5, lo: 8, hi: 3), 8);
    expect(bisect(E, 6, lo: 8, hi: 3), 8);
    expect(bisect(E, 7, lo: 8, hi: 3), 8);
    expect(bisect(E, 8, lo: 8, hi: 3), 8);
  });

  test('bisect for A lo=9 hi=3', () {
    expect(bisect(A, -2, lo: 9, hi: 3), 9);
    expect(bisect(A, -1, lo: 9, hi: 3), 9);
    expect(bisect(A, 0, lo: 9, hi: 3), 9);
    expect(bisect(A, 1, lo: 9, hi: 3), 9);
    expect(bisect(A, 2, lo: 9, hi: 3), 9);
    expect(bisect(A, 3, lo: 9, hi: 3), 9);
    expect(bisect(A, 4, lo: 9, hi: 3), 9);
    expect(bisect(A, 5, lo: 9, hi: 3), 9);
    expect(bisect(A, 6, lo: 9, hi: 3), 9);
    expect(bisect(A, 7, lo: 9, hi: 3), 9);
    expect(bisect(A, 8, lo: 9, hi: 3), 9);
  });

  test('bisect for B lo=9 hi=3', () {
    expect(bisect(B, -2, lo: 9, hi: 3), 9);
    expect(bisect(B, -1, lo: 9, hi: 3), 9);
    expect(bisect(B, 0, lo: 9, hi: 3), 9);
    expect(bisect(B, 1, lo: 9, hi: 3), 9);
    expect(bisect(B, 2, lo: 9, hi: 3), 9);
    expect(bisect(B, 3, lo: 9, hi: 3), 9);
    expect(bisect(B, 4, lo: 9, hi: 3), 9);
    expect(bisect(B, 5, lo: 9, hi: 3), 9);
    expect(bisect(B, 6, lo: 9, hi: 3), 9);
    expect(bisect(B, 7, lo: 9, hi: 3), 9);
    expect(bisect(B, 8, lo: 9, hi: 3), 9);
  });

  test('bisect for C lo=9 hi=3', () {
    expect(bisect(C, -2, lo: 9, hi: 3), 9);
    expect(bisect(C, -1, lo: 9, hi: 3), 9);
    expect(bisect(C, 0, lo: 9, hi: 3), 9);
    expect(bisect(C, 1, lo: 9, hi: 3), 9);
    expect(bisect(C, 2, lo: 9, hi: 3), 9);
    expect(bisect(C, 3, lo: 9, hi: 3), 9);
    expect(bisect(C, 4, lo: 9, hi: 3), 9);
    expect(bisect(C, 5, lo: 9, hi: 3), 9);
    expect(bisect(C, 6, lo: 9, hi: 3), 9);
    expect(bisect(C, 7, lo: 9, hi: 3), 9);
    expect(bisect(C, 8, lo: 9, hi: 3), 9);
  });

  test('bisect for D lo=9 hi=3', () {
    expect(bisect(D, -2, lo: 9, hi: 3), 9);
    expect(bisect(D, -1, lo: 9, hi: 3), 9);
    expect(bisect(D, 0, lo: 9, hi: 3), 9);
    expect(bisect(D, 1, lo: 9, hi: 3), 9);
    expect(bisect(D, 2, lo: 9, hi: 3), 9);
    expect(bisect(D, 3, lo: 9, hi: 3), 9);
    expect(bisect(D, 4, lo: 9, hi: 3), 9);
    expect(bisect(D, 5, lo: 9, hi: 3), 9);
    expect(bisect(D, 6, lo: 9, hi: 3), 9);
    expect(bisect(D, 7, lo: 9, hi: 3), 9);
    expect(bisect(D, 8, lo: 9, hi: 3), 9);
  });

  test('bisect for E lo=9 hi=3', () {
    expect(bisect(E, -2, lo: 9, hi: 3), 9);
    expect(bisect(E, -1, lo: 9, hi: 3), 9);
    expect(bisect(E, 0, lo: 9, hi: 3), 9);
    expect(bisect(E, 1, lo: 9, hi: 3), 9);
    expect(bisect(E, 2, lo: 9, hi: 3), 9);
    expect(bisect(E, 3, lo: 9, hi: 3), 9);
    expect(bisect(E, 4, lo: 9, hi: 3), 9);
    expect(bisect(E, 5, lo: 9, hi: 3), 9);
    expect(bisect(E, 6, lo: 9, hi: 3), 9);
    expect(bisect(E, 7, lo: 9, hi: 3), 9);
    expect(bisect(E, 8, lo: 9, hi: 3), 9);
  });

  test('bisect for A lo=None hi=4', () {
    expect(() => bisect(A, -2, hi: 4), throwsRangeError);
    expect(() => bisect(A, -1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 4, hi: 4), throwsRangeError);
    expect(() => bisect(A, 5, hi: 4), throwsRangeError);
    expect(() => bisect(A, 6, hi: 4), throwsRangeError);
    expect(() => bisect(A, 7, hi: 4), throwsRangeError);
    expect(() => bisect(A, 8, hi: 4), throwsRangeError);
  });

  test('bisect for B lo=None hi=4', () {
    expect(() => bisect(B, -2, hi: 4), throwsRangeError);
    expect(() => bisect(B, -1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 4, hi: 4), throwsRangeError);
    expect(() => bisect(B, 5, hi: 4), throwsRangeError);
    expect(() => bisect(B, 6, hi: 4), throwsRangeError);
    expect(() => bisect(B, 7, hi: 4), throwsRangeError);
    expect(() => bisect(B, 8, hi: 4), throwsRangeError);
  });

  test('bisect for C lo=None hi=4', () {
    expect(() => bisect(C, -2, hi: 4), throwsRangeError);
    expect(() => bisect(C, -1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 4, hi: 4), throwsRangeError);
    expect(() => bisect(C, 5, hi: 4), throwsRangeError);
    expect(() => bisect(C, 6, hi: 4), throwsRangeError);
    expect(() => bisect(C, 7, hi: 4), throwsRangeError);
    expect(() => bisect(C, 8, hi: 4), throwsRangeError);
  });

  test('bisect for D lo=None hi=4', () {
    expect(bisect(D, -2, hi: 4), 0);
    expect(bisect(D, -1, hi: 4), 0);
    expect(bisect(D, 0, hi: 4), 0);
    expect(bisect(D, 1, hi: 4), 0);
    expect(bisect(D, 2, hi: 4), 0);
    expect(bisect(D, 3, hi: 4), 1);
    expect(bisect(D, 4, hi: 4), 2);
    expect(() => bisect(D, 5, hi: 4), throwsRangeError);
    expect(() => bisect(D, 6, hi: 4), throwsRangeError);
    expect(() => bisect(D, 7, hi: 4), throwsRangeError);
    expect(() => bisect(D, 8, hi: 4), throwsRangeError);
  });

  test('bisect for E lo=None hi=4', () {
    expect(bisect(E, -2, hi: 4), 0);
    expect(bisect(E, -1, hi: 4), 0);
    expect(bisect(E, 0, hi: 4), 1);
    expect(bisect(E, 1, hi: 4), 2);
    expect(bisect(E, 2, hi: 4), 4);
    expect(bisect(E, 3, hi: 4), 4);
    expect(bisect(E, 4, hi: 4), 4);
    expect(bisect(E, 5, hi: 4), 4);
    expect(bisect(E, 6, hi: 4), 4);
    expect(bisect(E, 7, hi: 4), 4);
    expect(bisect(E, 8, hi: 4), 4);
  });

  test('bisect for A lo=0 hi=4', () {
    expect(() => bisect(A, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect for B lo=0 hi=4', () {
    expect(() => bisect(B, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect for C lo=0 hi=4', () {
    expect(() => bisect(C, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(C, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect for D lo=0 hi=4', () {
    expect(bisect(D, -2, lo: 0, hi: 4), 0);
    expect(bisect(D, -1, lo: 0, hi: 4), 0);
    expect(bisect(D, 0, lo: 0, hi: 4), 0);
    expect(bisect(D, 1, lo: 0, hi: 4), 0);
    expect(bisect(D, 2, lo: 0, hi: 4), 0);
    expect(bisect(D, 3, lo: 0, hi: 4), 1);
    expect(bisect(D, 4, lo: 0, hi: 4), 2);
    expect(() => bisect(D, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(D, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(D, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => bisect(D, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('bisect for E lo=0 hi=4', () {
    expect(bisect(E, -2, lo: 0, hi: 4), 0);
    expect(bisect(E, -1, lo: 0, hi: 4), 0);
    expect(bisect(E, 0, lo: 0, hi: 4), 1);
    expect(bisect(E, 1, lo: 0, hi: 4), 2);
    expect(bisect(E, 2, lo: 0, hi: 4), 4);
    expect(bisect(E, 3, lo: 0, hi: 4), 4);
    expect(bisect(E, 4, lo: 0, hi: 4), 4);
    expect(bisect(E, 5, lo: 0, hi: 4), 4);
    expect(bisect(E, 6, lo: 0, hi: 4), 4);
    expect(bisect(E, 7, lo: 0, hi: 4), 4);
    expect(bisect(E, 8, lo: 0, hi: 4), 4);
  });

  test('bisect for A lo=1 hi=4', () {
    expect(() => bisect(A, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect for B lo=1 hi=4', () {
    expect(() => bisect(B, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect for C lo=1 hi=4', () {
    expect(() => bisect(C, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(C, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect for D lo=1 hi=4', () {
    expect(bisect(D, -2, lo: 1, hi: 4), 1);
    expect(bisect(D, -1, lo: 1, hi: 4), 1);
    expect(bisect(D, 0, lo: 1, hi: 4), 1);
    expect(bisect(D, 1, lo: 1, hi: 4), 1);
    expect(bisect(D, 2, lo: 1, hi: 4), 1);
    expect(bisect(D, 3, lo: 1, hi: 4), 1);
    expect(bisect(D, 4, lo: 1, hi: 4), 2);
    expect(() => bisect(D, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(D, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(D, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => bisect(D, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('bisect for E lo=1 hi=4', () {
    expect(bisect(E, -2, lo: 1, hi: 4), 1);
    expect(bisect(E, -1, lo: 1, hi: 4), 1);
    expect(bisect(E, 0, lo: 1, hi: 4), 1);
    expect(bisect(E, 1, lo: 1, hi: 4), 2);
    expect(bisect(E, 2, lo: 1, hi: 4), 4);
    expect(bisect(E, 3, lo: 1, hi: 4), 4);
    expect(bisect(E, 4, lo: 1, hi: 4), 4);
    expect(bisect(E, 5, lo: 1, hi: 4), 4);
    expect(bisect(E, 6, lo: 1, hi: 4), 4);
    expect(bisect(E, 7, lo: 1, hi: 4), 4);
    expect(bisect(E, 8, lo: 1, hi: 4), 4);
  });

  test('bisect for A lo=2 hi=4', () {
    expect(() => bisect(A, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(A, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect for B lo=2 hi=4', () {
    expect(() => bisect(B, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(B, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect for C lo=2 hi=4', () {
    expect(() => bisect(C, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(C, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect for D lo=2 hi=4', () {
    expect(() => bisect(D, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => bisect(D, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('bisect for E lo=2 hi=4', () {
    expect(bisect(E, -2, lo: 2, hi: 4), 2);
    expect(bisect(E, -1, lo: 2, hi: 4), 2);
    expect(bisect(E, 0, lo: 2, hi: 4), 2);
    expect(bisect(E, 1, lo: 2, hi: 4), 2);
    expect(bisect(E, 2, lo: 2, hi: 4), 4);
    expect(bisect(E, 3, lo: 2, hi: 4), 4);
    expect(bisect(E, 4, lo: 2, hi: 4), 4);
    expect(bisect(E, 5, lo: 2, hi: 4), 4);
    expect(bisect(E, 6, lo: 2, hi: 4), 4);
    expect(bisect(E, 7, lo: 2, hi: 4), 4);
    expect(bisect(E, 8, lo: 2, hi: 4), 4);
  });

  test('bisect for A lo=3 hi=4', () {
    expect(() => bisect(A, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(A, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect for B lo=3 hi=4', () {
    expect(() => bisect(B, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(B, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect for C lo=3 hi=4', () {
    expect(() => bisect(C, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(C, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect for D lo=3 hi=4', () {
    expect(() => bisect(D, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => bisect(D, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('bisect for E lo=3 hi=4', () {
    expect(bisect(E, -2, lo: 3, hi: 4), 3);
    expect(bisect(E, -1, lo: 3, hi: 4), 3);
    expect(bisect(E, 0, lo: 3, hi: 4), 3);
    expect(bisect(E, 1, lo: 3, hi: 4), 3);
    expect(bisect(E, 2, lo: 3, hi: 4), 4);
    expect(bisect(E, 3, lo: 3, hi: 4), 4);
    expect(bisect(E, 4, lo: 3, hi: 4), 4);
    expect(bisect(E, 5, lo: 3, hi: 4), 4);
    expect(bisect(E, 6, lo: 3, hi: 4), 4);
    expect(bisect(E, 7, lo: 3, hi: 4), 4);
    expect(bisect(E, 8, lo: 3, hi: 4), 4);
  });

  test('bisect for A lo=4 hi=4', () {
    expect(bisect(A, -2, lo: 4, hi: 4), 4);
    expect(bisect(A, -1, lo: 4, hi: 4), 4);
    expect(bisect(A, 0, lo: 4, hi: 4), 4);
    expect(bisect(A, 1, lo: 4, hi: 4), 4);
    expect(bisect(A, 2, lo: 4, hi: 4), 4);
    expect(bisect(A, 3, lo: 4, hi: 4), 4);
    expect(bisect(A, 4, lo: 4, hi: 4), 4);
    expect(bisect(A, 5, lo: 4, hi: 4), 4);
    expect(bisect(A, 6, lo: 4, hi: 4), 4);
    expect(bisect(A, 7, lo: 4, hi: 4), 4);
    expect(bisect(A, 8, lo: 4, hi: 4), 4);
  });

  test('bisect for B lo=4 hi=4', () {
    expect(bisect(B, -2, lo: 4, hi: 4), 4);
    expect(bisect(B, -1, lo: 4, hi: 4), 4);
    expect(bisect(B, 0, lo: 4, hi: 4), 4);
    expect(bisect(B, 1, lo: 4, hi: 4), 4);
    expect(bisect(B, 2, lo: 4, hi: 4), 4);
    expect(bisect(B, 3, lo: 4, hi: 4), 4);
    expect(bisect(B, 4, lo: 4, hi: 4), 4);
    expect(bisect(B, 5, lo: 4, hi: 4), 4);
    expect(bisect(B, 6, lo: 4, hi: 4), 4);
    expect(bisect(B, 7, lo: 4, hi: 4), 4);
    expect(bisect(B, 8, lo: 4, hi: 4), 4);
  });

  test('bisect for C lo=4 hi=4', () {
    expect(bisect(C, -2, lo: 4, hi: 4), 4);
    expect(bisect(C, -1, lo: 4, hi: 4), 4);
    expect(bisect(C, 0, lo: 4, hi: 4), 4);
    expect(bisect(C, 1, lo: 4, hi: 4), 4);
    expect(bisect(C, 2, lo: 4, hi: 4), 4);
    expect(bisect(C, 3, lo: 4, hi: 4), 4);
    expect(bisect(C, 4, lo: 4, hi: 4), 4);
    expect(bisect(C, 5, lo: 4, hi: 4), 4);
    expect(bisect(C, 6, lo: 4, hi: 4), 4);
    expect(bisect(C, 7, lo: 4, hi: 4), 4);
    expect(bisect(C, 8, lo: 4, hi: 4), 4);
  });

  test('bisect for D lo=4 hi=4', () {
    expect(bisect(D, -2, lo: 4, hi: 4), 4);
    expect(bisect(D, -1, lo: 4, hi: 4), 4);
    expect(bisect(D, 0, lo: 4, hi: 4), 4);
    expect(bisect(D, 1, lo: 4, hi: 4), 4);
    expect(bisect(D, 2, lo: 4, hi: 4), 4);
    expect(bisect(D, 3, lo: 4, hi: 4), 4);
    expect(bisect(D, 4, lo: 4, hi: 4), 4);
    expect(bisect(D, 5, lo: 4, hi: 4), 4);
    expect(bisect(D, 6, lo: 4, hi: 4), 4);
    expect(bisect(D, 7, lo: 4, hi: 4), 4);
    expect(bisect(D, 8, lo: 4, hi: 4), 4);
  });

  test('bisect for E lo=4 hi=4', () {
    expect(bisect(E, -2, lo: 4, hi: 4), 4);
    expect(bisect(E, -1, lo: 4, hi: 4), 4);
    expect(bisect(E, 0, lo: 4, hi: 4), 4);
    expect(bisect(E, 1, lo: 4, hi: 4), 4);
    expect(bisect(E, 2, lo: 4, hi: 4), 4);
    expect(bisect(E, 3, lo: 4, hi: 4), 4);
    expect(bisect(E, 4, lo: 4, hi: 4), 4);
    expect(bisect(E, 5, lo: 4, hi: 4), 4);
    expect(bisect(E, 6, lo: 4, hi: 4), 4);
    expect(bisect(E, 7, lo: 4, hi: 4), 4);
    expect(bisect(E, 8, lo: 4, hi: 4), 4);
  });

  test('bisect for A lo=5 hi=4', () {
    expect(bisect(A, -2, lo: 5, hi: 4), 5);
    expect(bisect(A, -1, lo: 5, hi: 4), 5);
    expect(bisect(A, 0, lo: 5, hi: 4), 5);
    expect(bisect(A, 1, lo: 5, hi: 4), 5);
    expect(bisect(A, 2, lo: 5, hi: 4), 5);
    expect(bisect(A, 3, lo: 5, hi: 4), 5);
    expect(bisect(A, 4, lo: 5, hi: 4), 5);
    expect(bisect(A, 5, lo: 5, hi: 4), 5);
    expect(bisect(A, 6, lo: 5, hi: 4), 5);
    expect(bisect(A, 7, lo: 5, hi: 4), 5);
    expect(bisect(A, 8, lo: 5, hi: 4), 5);
  });

  test('bisect for B lo=5 hi=4', () {
    expect(bisect(B, -2, lo: 5, hi: 4), 5);
    expect(bisect(B, -1, lo: 5, hi: 4), 5);
    expect(bisect(B, 0, lo: 5, hi: 4), 5);
    expect(bisect(B, 1, lo: 5, hi: 4), 5);
    expect(bisect(B, 2, lo: 5, hi: 4), 5);
    expect(bisect(B, 3, lo: 5, hi: 4), 5);
    expect(bisect(B, 4, lo: 5, hi: 4), 5);
    expect(bisect(B, 5, lo: 5, hi: 4), 5);
    expect(bisect(B, 6, lo: 5, hi: 4), 5);
    expect(bisect(B, 7, lo: 5, hi: 4), 5);
    expect(bisect(B, 8, lo: 5, hi: 4), 5);
  });

  test('bisect for C lo=5 hi=4', () {
    expect(bisect(C, -2, lo: 5, hi: 4), 5);
    expect(bisect(C, -1, lo: 5, hi: 4), 5);
    expect(bisect(C, 0, lo: 5, hi: 4), 5);
    expect(bisect(C, 1, lo: 5, hi: 4), 5);
    expect(bisect(C, 2, lo: 5, hi: 4), 5);
    expect(bisect(C, 3, lo: 5, hi: 4), 5);
    expect(bisect(C, 4, lo: 5, hi: 4), 5);
    expect(bisect(C, 5, lo: 5, hi: 4), 5);
    expect(bisect(C, 6, lo: 5, hi: 4), 5);
    expect(bisect(C, 7, lo: 5, hi: 4), 5);
    expect(bisect(C, 8, lo: 5, hi: 4), 5);
  });

  test('bisect for D lo=5 hi=4', () {
    expect(bisect(D, -2, lo: 5, hi: 4), 5);
    expect(bisect(D, -1, lo: 5, hi: 4), 5);
    expect(bisect(D, 0, lo: 5, hi: 4), 5);
    expect(bisect(D, 1, lo: 5, hi: 4), 5);
    expect(bisect(D, 2, lo: 5, hi: 4), 5);
    expect(bisect(D, 3, lo: 5, hi: 4), 5);
    expect(bisect(D, 4, lo: 5, hi: 4), 5);
    expect(bisect(D, 5, lo: 5, hi: 4), 5);
    expect(bisect(D, 6, lo: 5, hi: 4), 5);
    expect(bisect(D, 7, lo: 5, hi: 4), 5);
    expect(bisect(D, 8, lo: 5, hi: 4), 5);
  });

  test('bisect for E lo=5 hi=4', () {
    expect(bisect(E, -2, lo: 5, hi: 4), 5);
    expect(bisect(E, -1, lo: 5, hi: 4), 5);
    expect(bisect(E, 0, lo: 5, hi: 4), 5);
    expect(bisect(E, 1, lo: 5, hi: 4), 5);
    expect(bisect(E, 2, lo: 5, hi: 4), 5);
    expect(bisect(E, 3, lo: 5, hi: 4), 5);
    expect(bisect(E, 4, lo: 5, hi: 4), 5);
    expect(bisect(E, 5, lo: 5, hi: 4), 5);
    expect(bisect(E, 6, lo: 5, hi: 4), 5);
    expect(bisect(E, 7, lo: 5, hi: 4), 5);
    expect(bisect(E, 8, lo: 5, hi: 4), 5);
  });

  test('bisect for A lo=6 hi=4', () {
    expect(bisect(A, -2, lo: 6, hi: 4), 6);
    expect(bisect(A, -1, lo: 6, hi: 4), 6);
    expect(bisect(A, 0, lo: 6, hi: 4), 6);
    expect(bisect(A, 1, lo: 6, hi: 4), 6);
    expect(bisect(A, 2, lo: 6, hi: 4), 6);
    expect(bisect(A, 3, lo: 6, hi: 4), 6);
    expect(bisect(A, 4, lo: 6, hi: 4), 6);
    expect(bisect(A, 5, lo: 6, hi: 4), 6);
    expect(bisect(A, 6, lo: 6, hi: 4), 6);
    expect(bisect(A, 7, lo: 6, hi: 4), 6);
    expect(bisect(A, 8, lo: 6, hi: 4), 6);
  });

  test('bisect for B lo=6 hi=4', () {
    expect(bisect(B, -2, lo: 6, hi: 4), 6);
    expect(bisect(B, -1, lo: 6, hi: 4), 6);
    expect(bisect(B, 0, lo: 6, hi: 4), 6);
    expect(bisect(B, 1, lo: 6, hi: 4), 6);
    expect(bisect(B, 2, lo: 6, hi: 4), 6);
    expect(bisect(B, 3, lo: 6, hi: 4), 6);
    expect(bisect(B, 4, lo: 6, hi: 4), 6);
    expect(bisect(B, 5, lo: 6, hi: 4), 6);
    expect(bisect(B, 6, lo: 6, hi: 4), 6);
    expect(bisect(B, 7, lo: 6, hi: 4), 6);
    expect(bisect(B, 8, lo: 6, hi: 4), 6);
  });

  test('bisect for C lo=6 hi=4', () {
    expect(bisect(C, -2, lo: 6, hi: 4), 6);
    expect(bisect(C, -1, lo: 6, hi: 4), 6);
    expect(bisect(C, 0, lo: 6, hi: 4), 6);
    expect(bisect(C, 1, lo: 6, hi: 4), 6);
    expect(bisect(C, 2, lo: 6, hi: 4), 6);
    expect(bisect(C, 3, lo: 6, hi: 4), 6);
    expect(bisect(C, 4, lo: 6, hi: 4), 6);
    expect(bisect(C, 5, lo: 6, hi: 4), 6);
    expect(bisect(C, 6, lo: 6, hi: 4), 6);
    expect(bisect(C, 7, lo: 6, hi: 4), 6);
    expect(bisect(C, 8, lo: 6, hi: 4), 6);
  });

  test('bisect for D lo=6 hi=4', () {
    expect(bisect(D, -2, lo: 6, hi: 4), 6);
    expect(bisect(D, -1, lo: 6, hi: 4), 6);
    expect(bisect(D, 0, lo: 6, hi: 4), 6);
    expect(bisect(D, 1, lo: 6, hi: 4), 6);
    expect(bisect(D, 2, lo: 6, hi: 4), 6);
    expect(bisect(D, 3, lo: 6, hi: 4), 6);
    expect(bisect(D, 4, lo: 6, hi: 4), 6);
    expect(bisect(D, 5, lo: 6, hi: 4), 6);
    expect(bisect(D, 6, lo: 6, hi: 4), 6);
    expect(bisect(D, 7, lo: 6, hi: 4), 6);
    expect(bisect(D, 8, lo: 6, hi: 4), 6);
  });

  test('bisect for E lo=6 hi=4', () {
    expect(bisect(E, -2, lo: 6, hi: 4), 6);
    expect(bisect(E, -1, lo: 6, hi: 4), 6);
    expect(bisect(E, 0, lo: 6, hi: 4), 6);
    expect(bisect(E, 1, lo: 6, hi: 4), 6);
    expect(bisect(E, 2, lo: 6, hi: 4), 6);
    expect(bisect(E, 3, lo: 6, hi: 4), 6);
    expect(bisect(E, 4, lo: 6, hi: 4), 6);
    expect(bisect(E, 5, lo: 6, hi: 4), 6);
    expect(bisect(E, 6, lo: 6, hi: 4), 6);
    expect(bisect(E, 7, lo: 6, hi: 4), 6);
    expect(bisect(E, 8, lo: 6, hi: 4), 6);
  });

  test('bisect for A lo=7 hi=4', () {
    expect(bisect(A, -2, lo: 7, hi: 4), 7);
    expect(bisect(A, -1, lo: 7, hi: 4), 7);
    expect(bisect(A, 0, lo: 7, hi: 4), 7);
    expect(bisect(A, 1, lo: 7, hi: 4), 7);
    expect(bisect(A, 2, lo: 7, hi: 4), 7);
    expect(bisect(A, 3, lo: 7, hi: 4), 7);
    expect(bisect(A, 4, lo: 7, hi: 4), 7);
    expect(bisect(A, 5, lo: 7, hi: 4), 7);
    expect(bisect(A, 6, lo: 7, hi: 4), 7);
    expect(bisect(A, 7, lo: 7, hi: 4), 7);
    expect(bisect(A, 8, lo: 7, hi: 4), 7);
  });

  test('bisect for B lo=7 hi=4', () {
    expect(bisect(B, -2, lo: 7, hi: 4), 7);
    expect(bisect(B, -1, lo: 7, hi: 4), 7);
    expect(bisect(B, 0, lo: 7, hi: 4), 7);
    expect(bisect(B, 1, lo: 7, hi: 4), 7);
    expect(bisect(B, 2, lo: 7, hi: 4), 7);
    expect(bisect(B, 3, lo: 7, hi: 4), 7);
    expect(bisect(B, 4, lo: 7, hi: 4), 7);
    expect(bisect(B, 5, lo: 7, hi: 4), 7);
    expect(bisect(B, 6, lo: 7, hi: 4), 7);
    expect(bisect(B, 7, lo: 7, hi: 4), 7);
    expect(bisect(B, 8, lo: 7, hi: 4), 7);
  });

  test('bisect for C lo=7 hi=4', () {
    expect(bisect(C, -2, lo: 7, hi: 4), 7);
    expect(bisect(C, -1, lo: 7, hi: 4), 7);
    expect(bisect(C, 0, lo: 7, hi: 4), 7);
    expect(bisect(C, 1, lo: 7, hi: 4), 7);
    expect(bisect(C, 2, lo: 7, hi: 4), 7);
    expect(bisect(C, 3, lo: 7, hi: 4), 7);
    expect(bisect(C, 4, lo: 7, hi: 4), 7);
    expect(bisect(C, 5, lo: 7, hi: 4), 7);
    expect(bisect(C, 6, lo: 7, hi: 4), 7);
    expect(bisect(C, 7, lo: 7, hi: 4), 7);
    expect(bisect(C, 8, lo: 7, hi: 4), 7);
  });

  test('bisect for D lo=7 hi=4', () {
    expect(bisect(D, -2, lo: 7, hi: 4), 7);
    expect(bisect(D, -1, lo: 7, hi: 4), 7);
    expect(bisect(D, 0, lo: 7, hi: 4), 7);
    expect(bisect(D, 1, lo: 7, hi: 4), 7);
    expect(bisect(D, 2, lo: 7, hi: 4), 7);
    expect(bisect(D, 3, lo: 7, hi: 4), 7);
    expect(bisect(D, 4, lo: 7, hi: 4), 7);
    expect(bisect(D, 5, lo: 7, hi: 4), 7);
    expect(bisect(D, 6, lo: 7, hi: 4), 7);
    expect(bisect(D, 7, lo: 7, hi: 4), 7);
    expect(bisect(D, 8, lo: 7, hi: 4), 7);
  });

  test('bisect for E lo=7 hi=4', () {
    expect(bisect(E, -2, lo: 7, hi: 4), 7);
    expect(bisect(E, -1, lo: 7, hi: 4), 7);
    expect(bisect(E, 0, lo: 7, hi: 4), 7);
    expect(bisect(E, 1, lo: 7, hi: 4), 7);
    expect(bisect(E, 2, lo: 7, hi: 4), 7);
    expect(bisect(E, 3, lo: 7, hi: 4), 7);
    expect(bisect(E, 4, lo: 7, hi: 4), 7);
    expect(bisect(E, 5, lo: 7, hi: 4), 7);
    expect(bisect(E, 6, lo: 7, hi: 4), 7);
    expect(bisect(E, 7, lo: 7, hi: 4), 7);
    expect(bisect(E, 8, lo: 7, hi: 4), 7);
  });

  test('bisect for A lo=8 hi=4', () {
    expect(bisect(A, -2, lo: 8, hi: 4), 8);
    expect(bisect(A, -1, lo: 8, hi: 4), 8);
    expect(bisect(A, 0, lo: 8, hi: 4), 8);
    expect(bisect(A, 1, lo: 8, hi: 4), 8);
    expect(bisect(A, 2, lo: 8, hi: 4), 8);
    expect(bisect(A, 3, lo: 8, hi: 4), 8);
    expect(bisect(A, 4, lo: 8, hi: 4), 8);
    expect(bisect(A, 5, lo: 8, hi: 4), 8);
    expect(bisect(A, 6, lo: 8, hi: 4), 8);
    expect(bisect(A, 7, lo: 8, hi: 4), 8);
    expect(bisect(A, 8, lo: 8, hi: 4), 8);
  });

  test('bisect for B lo=8 hi=4', () {
    expect(bisect(B, -2, lo: 8, hi: 4), 8);
    expect(bisect(B, -1, lo: 8, hi: 4), 8);
    expect(bisect(B, 0, lo: 8, hi: 4), 8);
    expect(bisect(B, 1, lo: 8, hi: 4), 8);
    expect(bisect(B, 2, lo: 8, hi: 4), 8);
    expect(bisect(B, 3, lo: 8, hi: 4), 8);
    expect(bisect(B, 4, lo: 8, hi: 4), 8);
    expect(bisect(B, 5, lo: 8, hi: 4), 8);
    expect(bisect(B, 6, lo: 8, hi: 4), 8);
    expect(bisect(B, 7, lo: 8, hi: 4), 8);
    expect(bisect(B, 8, lo: 8, hi: 4), 8);
  });

  test('bisect for C lo=8 hi=4', () {
    expect(bisect(C, -2, lo: 8, hi: 4), 8);
    expect(bisect(C, -1, lo: 8, hi: 4), 8);
    expect(bisect(C, 0, lo: 8, hi: 4), 8);
    expect(bisect(C, 1, lo: 8, hi: 4), 8);
    expect(bisect(C, 2, lo: 8, hi: 4), 8);
    expect(bisect(C, 3, lo: 8, hi: 4), 8);
    expect(bisect(C, 4, lo: 8, hi: 4), 8);
    expect(bisect(C, 5, lo: 8, hi: 4), 8);
    expect(bisect(C, 6, lo: 8, hi: 4), 8);
    expect(bisect(C, 7, lo: 8, hi: 4), 8);
    expect(bisect(C, 8, lo: 8, hi: 4), 8);
  });

  test('bisect for D lo=8 hi=4', () {
    expect(bisect(D, -2, lo: 8, hi: 4), 8);
    expect(bisect(D, -1, lo: 8, hi: 4), 8);
    expect(bisect(D, 0, lo: 8, hi: 4), 8);
    expect(bisect(D, 1, lo: 8, hi: 4), 8);
    expect(bisect(D, 2, lo: 8, hi: 4), 8);
    expect(bisect(D, 3, lo: 8, hi: 4), 8);
    expect(bisect(D, 4, lo: 8, hi: 4), 8);
    expect(bisect(D, 5, lo: 8, hi: 4), 8);
    expect(bisect(D, 6, lo: 8, hi: 4), 8);
    expect(bisect(D, 7, lo: 8, hi: 4), 8);
    expect(bisect(D, 8, lo: 8, hi: 4), 8);
  });

  test('bisect for E lo=8 hi=4', () {
    expect(bisect(E, -2, lo: 8, hi: 4), 8);
    expect(bisect(E, -1, lo: 8, hi: 4), 8);
    expect(bisect(E, 0, lo: 8, hi: 4), 8);
    expect(bisect(E, 1, lo: 8, hi: 4), 8);
    expect(bisect(E, 2, lo: 8, hi: 4), 8);
    expect(bisect(E, 3, lo: 8, hi: 4), 8);
    expect(bisect(E, 4, lo: 8, hi: 4), 8);
    expect(bisect(E, 5, lo: 8, hi: 4), 8);
    expect(bisect(E, 6, lo: 8, hi: 4), 8);
    expect(bisect(E, 7, lo: 8, hi: 4), 8);
    expect(bisect(E, 8, lo: 8, hi: 4), 8);
  });

  test('bisect for A lo=9 hi=4', () {
    expect(bisect(A, -2, lo: 9, hi: 4), 9);
    expect(bisect(A, -1, lo: 9, hi: 4), 9);
    expect(bisect(A, 0, lo: 9, hi: 4), 9);
    expect(bisect(A, 1, lo: 9, hi: 4), 9);
    expect(bisect(A, 2, lo: 9, hi: 4), 9);
    expect(bisect(A, 3, lo: 9, hi: 4), 9);
    expect(bisect(A, 4, lo: 9, hi: 4), 9);
    expect(bisect(A, 5, lo: 9, hi: 4), 9);
    expect(bisect(A, 6, lo: 9, hi: 4), 9);
    expect(bisect(A, 7, lo: 9, hi: 4), 9);
    expect(bisect(A, 8, lo: 9, hi: 4), 9);
  });

  test('bisect for B lo=9 hi=4', () {
    expect(bisect(B, -2, lo: 9, hi: 4), 9);
    expect(bisect(B, -1, lo: 9, hi: 4), 9);
    expect(bisect(B, 0, lo: 9, hi: 4), 9);
    expect(bisect(B, 1, lo: 9, hi: 4), 9);
    expect(bisect(B, 2, lo: 9, hi: 4), 9);
    expect(bisect(B, 3, lo: 9, hi: 4), 9);
    expect(bisect(B, 4, lo: 9, hi: 4), 9);
    expect(bisect(B, 5, lo: 9, hi: 4), 9);
    expect(bisect(B, 6, lo: 9, hi: 4), 9);
    expect(bisect(B, 7, lo: 9, hi: 4), 9);
    expect(bisect(B, 8, lo: 9, hi: 4), 9);
  });

  test('bisect for C lo=9 hi=4', () {
    expect(bisect(C, -2, lo: 9, hi: 4), 9);
    expect(bisect(C, -1, lo: 9, hi: 4), 9);
    expect(bisect(C, 0, lo: 9, hi: 4), 9);
    expect(bisect(C, 1, lo: 9, hi: 4), 9);
    expect(bisect(C, 2, lo: 9, hi: 4), 9);
    expect(bisect(C, 3, lo: 9, hi: 4), 9);
    expect(bisect(C, 4, lo: 9, hi: 4), 9);
    expect(bisect(C, 5, lo: 9, hi: 4), 9);
    expect(bisect(C, 6, lo: 9, hi: 4), 9);
    expect(bisect(C, 7, lo: 9, hi: 4), 9);
    expect(bisect(C, 8, lo: 9, hi: 4), 9);
  });

  test('bisect for D lo=9 hi=4', () {
    expect(bisect(D, -2, lo: 9, hi: 4), 9);
    expect(bisect(D, -1, lo: 9, hi: 4), 9);
    expect(bisect(D, 0, lo: 9, hi: 4), 9);
    expect(bisect(D, 1, lo: 9, hi: 4), 9);
    expect(bisect(D, 2, lo: 9, hi: 4), 9);
    expect(bisect(D, 3, lo: 9, hi: 4), 9);
    expect(bisect(D, 4, lo: 9, hi: 4), 9);
    expect(bisect(D, 5, lo: 9, hi: 4), 9);
    expect(bisect(D, 6, lo: 9, hi: 4), 9);
    expect(bisect(D, 7, lo: 9, hi: 4), 9);
    expect(bisect(D, 8, lo: 9, hi: 4), 9);
  });

  test('bisect for E lo=9 hi=4', () {
    expect(bisect(E, -2, lo: 9, hi: 4), 9);
    expect(bisect(E, -1, lo: 9, hi: 4), 9);
    expect(bisect(E, 0, lo: 9, hi: 4), 9);
    expect(bisect(E, 1, lo: 9, hi: 4), 9);
    expect(bisect(E, 2, lo: 9, hi: 4), 9);
    expect(bisect(E, 3, lo: 9, hi: 4), 9);
    expect(bisect(E, 4, lo: 9, hi: 4), 9);
    expect(bisect(E, 5, lo: 9, hi: 4), 9);
    expect(bisect(E, 6, lo: 9, hi: 4), 9);
    expect(bisect(E, 7, lo: 9, hi: 4), 9);
    expect(bisect(E, 8, lo: 9, hi: 4), 9);
  });

  test('bisect for A lo=None hi=5', () {
    expect(() => bisect(A, -2, hi: 5), throwsRangeError);
    expect(() => bisect(A, -1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 5, hi: 5), throwsRangeError);
    expect(() => bisect(A, 6, hi: 5), throwsRangeError);
    expect(() => bisect(A, 7, hi: 5), throwsRangeError);
    expect(() => bisect(A, 8, hi: 5), throwsRangeError);
  });

  test('bisect for B lo=None hi=5', () {
    expect(() => bisect(B, -2, hi: 5), throwsRangeError);
    expect(() => bisect(B, -1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 5, hi: 5), throwsRangeError);
    expect(() => bisect(B, 6, hi: 5), throwsRangeError);
    expect(() => bisect(B, 7, hi: 5), throwsRangeError);
    expect(() => bisect(B, 8, hi: 5), throwsRangeError);
  });

  test('bisect for C lo=None hi=5', () {
    expect(() => bisect(C, -2, hi: 5), throwsRangeError);
    expect(() => bisect(C, -1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 5, hi: 5), throwsRangeError);
    expect(() => bisect(C, 6, hi: 5), throwsRangeError);
    expect(() => bisect(C, 7, hi: 5), throwsRangeError);
    expect(() => bisect(C, 8, hi: 5), throwsRangeError);
  });

  test('bisect for D lo=None hi=5', () {
    expect(bisect(D, -2, hi: 5), 0);
    expect(bisect(D, -1, hi: 5), 0);
    expect(bisect(D, 0, hi: 5), 0);
    expect(bisect(D, 1, hi: 5), 0);
    expect(bisect(D, 2, hi: 5), 0);
    expect(bisect(D, 3, hi: 5), 1);
    expect(bisect(D, 4, hi: 5), 2);
    expect(() => bisect(D, 5, hi: 5), throwsRangeError);
    expect(() => bisect(D, 6, hi: 5), throwsRangeError);
    expect(() => bisect(D, 7, hi: 5), throwsRangeError);
    expect(() => bisect(D, 8, hi: 5), throwsRangeError);
  });

  test('bisect for E lo=None hi=5', () {
    expect(bisect(E, -2, hi: 5), 0);
    expect(bisect(E, -1, hi: 5), 0);
    expect(bisect(E, 0, hi: 5), 1);
    expect(bisect(E, 1, hi: 5), 2);
    expect(bisect(E, 2, hi: 5), 5);
    expect(bisect(E, 3, hi: 5), 5);
    expect(bisect(E, 4, hi: 5), 5);
    expect(bisect(E, 5, hi: 5), 5);
    expect(bisect(E, 6, hi: 5), 5);
    expect(bisect(E, 7, hi: 5), 5);
    expect(bisect(E, 8, hi: 5), 5);
  });

  test('bisect for A lo=0 hi=5', () {
    expect(() => bisect(A, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect for B lo=0 hi=5', () {
    expect(() => bisect(B, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect for C lo=0 hi=5', () {
    expect(() => bisect(C, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(C, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect for D lo=0 hi=5', () {
    expect(bisect(D, -2, lo: 0, hi: 5), 0);
    expect(bisect(D, -1, lo: 0, hi: 5), 0);
    expect(bisect(D, 0, lo: 0, hi: 5), 0);
    expect(bisect(D, 1, lo: 0, hi: 5), 0);
    expect(bisect(D, 2, lo: 0, hi: 5), 0);
    expect(bisect(D, 3, lo: 0, hi: 5), 1);
    expect(bisect(D, 4, lo: 0, hi: 5), 2);
    expect(() => bisect(D, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(D, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(D, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => bisect(D, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('bisect for E lo=0 hi=5', () {
    expect(bisect(E, -2, lo: 0, hi: 5), 0);
    expect(bisect(E, -1, lo: 0, hi: 5), 0);
    expect(bisect(E, 0, lo: 0, hi: 5), 1);
    expect(bisect(E, 1, lo: 0, hi: 5), 2);
    expect(bisect(E, 2, lo: 0, hi: 5), 5);
    expect(bisect(E, 3, lo: 0, hi: 5), 5);
    expect(bisect(E, 4, lo: 0, hi: 5), 5);
    expect(bisect(E, 5, lo: 0, hi: 5), 5);
    expect(bisect(E, 6, lo: 0, hi: 5), 5);
    expect(bisect(E, 7, lo: 0, hi: 5), 5);
    expect(bisect(E, 8, lo: 0, hi: 5), 5);
  });

  test('bisect for A lo=1 hi=5', () {
    expect(() => bisect(A, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect for B lo=1 hi=5', () {
    expect(() => bisect(B, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect for C lo=1 hi=5', () {
    expect(() => bisect(C, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(C, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect for D lo=1 hi=5', () {
    expect(() => bisect(D, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => bisect(D, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('bisect for E lo=1 hi=5', () {
    expect(bisect(E, -2, lo: 1, hi: 5), 1);
    expect(bisect(E, -1, lo: 1, hi: 5), 1);
    expect(bisect(E, 0, lo: 1, hi: 5), 1);
    expect(bisect(E, 1, lo: 1, hi: 5), 2);
    expect(bisect(E, 2, lo: 1, hi: 5), 5);
    expect(bisect(E, 3, lo: 1, hi: 5), 5);
    expect(bisect(E, 4, lo: 1, hi: 5), 5);
    expect(bisect(E, 5, lo: 1, hi: 5), 5);
    expect(bisect(E, 6, lo: 1, hi: 5), 5);
    expect(bisect(E, 7, lo: 1, hi: 5), 5);
    expect(bisect(E, 8, lo: 1, hi: 5), 5);
  });

  test('bisect for A lo=2 hi=5', () {
    expect(() => bisect(A, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(A, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect for B lo=2 hi=5', () {
    expect(() => bisect(B, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(B, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect for C lo=2 hi=5', () {
    expect(() => bisect(C, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(C, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect for D lo=2 hi=5', () {
    expect(() => bisect(D, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => bisect(D, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('bisect for E lo=2 hi=5', () {
    expect(bisect(E, -2, lo: 2, hi: 5), 2);
    expect(bisect(E, -1, lo: 2, hi: 5), 2);
    expect(bisect(E, 0, lo: 2, hi: 5), 2);
    expect(bisect(E, 1, lo: 2, hi: 5), 2);
    expect(bisect(E, 2, lo: 2, hi: 5), 5);
    expect(bisect(E, 3, lo: 2, hi: 5), 5);
    expect(bisect(E, 4, lo: 2, hi: 5), 5);
    expect(bisect(E, 5, lo: 2, hi: 5), 5);
    expect(bisect(E, 6, lo: 2, hi: 5), 5);
    expect(bisect(E, 7, lo: 2, hi: 5), 5);
    expect(bisect(E, 8, lo: 2, hi: 5), 5);
  });

  test('bisect for A lo=3 hi=5', () {
    expect(() => bisect(A, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(A, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect for B lo=3 hi=5', () {
    expect(() => bisect(B, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(B, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect for C lo=3 hi=5', () {
    expect(() => bisect(C, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(C, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect for D lo=3 hi=5', () {
    expect(() => bisect(D, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => bisect(D, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('bisect for E lo=3 hi=5', () {
    expect(bisect(E, -2, lo: 3, hi: 5), 3);
    expect(bisect(E, -1, lo: 3, hi: 5), 3);
    expect(bisect(E, 0, lo: 3, hi: 5), 3);
    expect(bisect(E, 1, lo: 3, hi: 5), 3);
    expect(bisect(E, 2, lo: 3, hi: 5), 5);
    expect(bisect(E, 3, lo: 3, hi: 5), 5);
    expect(bisect(E, 4, lo: 3, hi: 5), 5);
    expect(bisect(E, 5, lo: 3, hi: 5), 5);
    expect(bisect(E, 6, lo: 3, hi: 5), 5);
    expect(bisect(E, 7, lo: 3, hi: 5), 5);
    expect(bisect(E, 8, lo: 3, hi: 5), 5);
  });

  test('bisect for A lo=4 hi=5', () {
    expect(() => bisect(A, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(A, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect for B lo=4 hi=5', () {
    expect(() => bisect(B, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(B, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect for C lo=4 hi=5', () {
    expect(() => bisect(C, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(C, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect for D lo=4 hi=5', () {
    expect(() => bisect(D, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => bisect(D, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('bisect for E lo=4 hi=5', () {
    expect(bisect(E, -2, lo: 4, hi: 5), 4);
    expect(bisect(E, -1, lo: 4, hi: 5), 4);
    expect(bisect(E, 0, lo: 4, hi: 5), 4);
    expect(bisect(E, 1, lo: 4, hi: 5), 4);
    expect(bisect(E, 2, lo: 4, hi: 5), 5);
    expect(bisect(E, 3, lo: 4, hi: 5), 5);
    expect(bisect(E, 4, lo: 4, hi: 5), 5);
    expect(bisect(E, 5, lo: 4, hi: 5), 5);
    expect(bisect(E, 6, lo: 4, hi: 5), 5);
    expect(bisect(E, 7, lo: 4, hi: 5), 5);
    expect(bisect(E, 8, lo: 4, hi: 5), 5);
  });

  test('bisect for A lo=5 hi=5', () {
    expect(bisect(A, -2, lo: 5, hi: 5), 5);
    expect(bisect(A, -1, lo: 5, hi: 5), 5);
    expect(bisect(A, 0, lo: 5, hi: 5), 5);
    expect(bisect(A, 1, lo: 5, hi: 5), 5);
    expect(bisect(A, 2, lo: 5, hi: 5), 5);
    expect(bisect(A, 3, lo: 5, hi: 5), 5);
    expect(bisect(A, 4, lo: 5, hi: 5), 5);
    expect(bisect(A, 5, lo: 5, hi: 5), 5);
    expect(bisect(A, 6, lo: 5, hi: 5), 5);
    expect(bisect(A, 7, lo: 5, hi: 5), 5);
    expect(bisect(A, 8, lo: 5, hi: 5), 5);
  });

  test('bisect for B lo=5 hi=5', () {
    expect(bisect(B, -2, lo: 5, hi: 5), 5);
    expect(bisect(B, -1, lo: 5, hi: 5), 5);
    expect(bisect(B, 0, lo: 5, hi: 5), 5);
    expect(bisect(B, 1, lo: 5, hi: 5), 5);
    expect(bisect(B, 2, lo: 5, hi: 5), 5);
    expect(bisect(B, 3, lo: 5, hi: 5), 5);
    expect(bisect(B, 4, lo: 5, hi: 5), 5);
    expect(bisect(B, 5, lo: 5, hi: 5), 5);
    expect(bisect(B, 6, lo: 5, hi: 5), 5);
    expect(bisect(B, 7, lo: 5, hi: 5), 5);
    expect(bisect(B, 8, lo: 5, hi: 5), 5);
  });

  test('bisect for C lo=5 hi=5', () {
    expect(bisect(C, -2, lo: 5, hi: 5), 5);
    expect(bisect(C, -1, lo: 5, hi: 5), 5);
    expect(bisect(C, 0, lo: 5, hi: 5), 5);
    expect(bisect(C, 1, lo: 5, hi: 5), 5);
    expect(bisect(C, 2, lo: 5, hi: 5), 5);
    expect(bisect(C, 3, lo: 5, hi: 5), 5);
    expect(bisect(C, 4, lo: 5, hi: 5), 5);
    expect(bisect(C, 5, lo: 5, hi: 5), 5);
    expect(bisect(C, 6, lo: 5, hi: 5), 5);
    expect(bisect(C, 7, lo: 5, hi: 5), 5);
    expect(bisect(C, 8, lo: 5, hi: 5), 5);
  });

  test('bisect for D lo=5 hi=5', () {
    expect(bisect(D, -2, lo: 5, hi: 5), 5);
    expect(bisect(D, -1, lo: 5, hi: 5), 5);
    expect(bisect(D, 0, lo: 5, hi: 5), 5);
    expect(bisect(D, 1, lo: 5, hi: 5), 5);
    expect(bisect(D, 2, lo: 5, hi: 5), 5);
    expect(bisect(D, 3, lo: 5, hi: 5), 5);
    expect(bisect(D, 4, lo: 5, hi: 5), 5);
    expect(bisect(D, 5, lo: 5, hi: 5), 5);
    expect(bisect(D, 6, lo: 5, hi: 5), 5);
    expect(bisect(D, 7, lo: 5, hi: 5), 5);
    expect(bisect(D, 8, lo: 5, hi: 5), 5);
  });

  test('bisect for E lo=5 hi=5', () {
    expect(bisect(E, -2, lo: 5, hi: 5), 5);
    expect(bisect(E, -1, lo: 5, hi: 5), 5);
    expect(bisect(E, 0, lo: 5, hi: 5), 5);
    expect(bisect(E, 1, lo: 5, hi: 5), 5);
    expect(bisect(E, 2, lo: 5, hi: 5), 5);
    expect(bisect(E, 3, lo: 5, hi: 5), 5);
    expect(bisect(E, 4, lo: 5, hi: 5), 5);
    expect(bisect(E, 5, lo: 5, hi: 5), 5);
    expect(bisect(E, 6, lo: 5, hi: 5), 5);
    expect(bisect(E, 7, lo: 5, hi: 5), 5);
    expect(bisect(E, 8, lo: 5, hi: 5), 5);
  });

  test('bisect for A lo=6 hi=5', () {
    expect(bisect(A, -2, lo: 6, hi: 5), 6);
    expect(bisect(A, -1, lo: 6, hi: 5), 6);
    expect(bisect(A, 0, lo: 6, hi: 5), 6);
    expect(bisect(A, 1, lo: 6, hi: 5), 6);
    expect(bisect(A, 2, lo: 6, hi: 5), 6);
    expect(bisect(A, 3, lo: 6, hi: 5), 6);
    expect(bisect(A, 4, lo: 6, hi: 5), 6);
    expect(bisect(A, 5, lo: 6, hi: 5), 6);
    expect(bisect(A, 6, lo: 6, hi: 5), 6);
    expect(bisect(A, 7, lo: 6, hi: 5), 6);
    expect(bisect(A, 8, lo: 6, hi: 5), 6);
  });

  test('bisect for B lo=6 hi=5', () {
    expect(bisect(B, -2, lo: 6, hi: 5), 6);
    expect(bisect(B, -1, lo: 6, hi: 5), 6);
    expect(bisect(B, 0, lo: 6, hi: 5), 6);
    expect(bisect(B, 1, lo: 6, hi: 5), 6);
    expect(bisect(B, 2, lo: 6, hi: 5), 6);
    expect(bisect(B, 3, lo: 6, hi: 5), 6);
    expect(bisect(B, 4, lo: 6, hi: 5), 6);
    expect(bisect(B, 5, lo: 6, hi: 5), 6);
    expect(bisect(B, 6, lo: 6, hi: 5), 6);
    expect(bisect(B, 7, lo: 6, hi: 5), 6);
    expect(bisect(B, 8, lo: 6, hi: 5), 6);
  });

  test('bisect for C lo=6 hi=5', () {
    expect(bisect(C, -2, lo: 6, hi: 5), 6);
    expect(bisect(C, -1, lo: 6, hi: 5), 6);
    expect(bisect(C, 0, lo: 6, hi: 5), 6);
    expect(bisect(C, 1, lo: 6, hi: 5), 6);
    expect(bisect(C, 2, lo: 6, hi: 5), 6);
    expect(bisect(C, 3, lo: 6, hi: 5), 6);
    expect(bisect(C, 4, lo: 6, hi: 5), 6);
    expect(bisect(C, 5, lo: 6, hi: 5), 6);
    expect(bisect(C, 6, lo: 6, hi: 5), 6);
    expect(bisect(C, 7, lo: 6, hi: 5), 6);
    expect(bisect(C, 8, lo: 6, hi: 5), 6);
  });

  test('bisect for D lo=6 hi=5', () {
    expect(bisect(D, -2, lo: 6, hi: 5), 6);
    expect(bisect(D, -1, lo: 6, hi: 5), 6);
    expect(bisect(D, 0, lo: 6, hi: 5), 6);
    expect(bisect(D, 1, lo: 6, hi: 5), 6);
    expect(bisect(D, 2, lo: 6, hi: 5), 6);
    expect(bisect(D, 3, lo: 6, hi: 5), 6);
    expect(bisect(D, 4, lo: 6, hi: 5), 6);
    expect(bisect(D, 5, lo: 6, hi: 5), 6);
    expect(bisect(D, 6, lo: 6, hi: 5), 6);
    expect(bisect(D, 7, lo: 6, hi: 5), 6);
    expect(bisect(D, 8, lo: 6, hi: 5), 6);
  });

  test('bisect for E lo=6 hi=5', () {
    expect(bisect(E, -2, lo: 6, hi: 5), 6);
    expect(bisect(E, -1, lo: 6, hi: 5), 6);
    expect(bisect(E, 0, lo: 6, hi: 5), 6);
    expect(bisect(E, 1, lo: 6, hi: 5), 6);
    expect(bisect(E, 2, lo: 6, hi: 5), 6);
    expect(bisect(E, 3, lo: 6, hi: 5), 6);
    expect(bisect(E, 4, lo: 6, hi: 5), 6);
    expect(bisect(E, 5, lo: 6, hi: 5), 6);
    expect(bisect(E, 6, lo: 6, hi: 5), 6);
    expect(bisect(E, 7, lo: 6, hi: 5), 6);
    expect(bisect(E, 8, lo: 6, hi: 5), 6);
  });

  test('bisect for A lo=7 hi=5', () {
    expect(bisect(A, -2, lo: 7, hi: 5), 7);
    expect(bisect(A, -1, lo: 7, hi: 5), 7);
    expect(bisect(A, 0, lo: 7, hi: 5), 7);
    expect(bisect(A, 1, lo: 7, hi: 5), 7);
    expect(bisect(A, 2, lo: 7, hi: 5), 7);
    expect(bisect(A, 3, lo: 7, hi: 5), 7);
    expect(bisect(A, 4, lo: 7, hi: 5), 7);
    expect(bisect(A, 5, lo: 7, hi: 5), 7);
    expect(bisect(A, 6, lo: 7, hi: 5), 7);
    expect(bisect(A, 7, lo: 7, hi: 5), 7);
    expect(bisect(A, 8, lo: 7, hi: 5), 7);
  });

  test('bisect for B lo=7 hi=5', () {
    expect(bisect(B, -2, lo: 7, hi: 5), 7);
    expect(bisect(B, -1, lo: 7, hi: 5), 7);
    expect(bisect(B, 0, lo: 7, hi: 5), 7);
    expect(bisect(B, 1, lo: 7, hi: 5), 7);
    expect(bisect(B, 2, lo: 7, hi: 5), 7);
    expect(bisect(B, 3, lo: 7, hi: 5), 7);
    expect(bisect(B, 4, lo: 7, hi: 5), 7);
    expect(bisect(B, 5, lo: 7, hi: 5), 7);
    expect(bisect(B, 6, lo: 7, hi: 5), 7);
    expect(bisect(B, 7, lo: 7, hi: 5), 7);
    expect(bisect(B, 8, lo: 7, hi: 5), 7);
  });

  test('bisect for C lo=7 hi=5', () {
    expect(bisect(C, -2, lo: 7, hi: 5), 7);
    expect(bisect(C, -1, lo: 7, hi: 5), 7);
    expect(bisect(C, 0, lo: 7, hi: 5), 7);
    expect(bisect(C, 1, lo: 7, hi: 5), 7);
    expect(bisect(C, 2, lo: 7, hi: 5), 7);
    expect(bisect(C, 3, lo: 7, hi: 5), 7);
    expect(bisect(C, 4, lo: 7, hi: 5), 7);
    expect(bisect(C, 5, lo: 7, hi: 5), 7);
    expect(bisect(C, 6, lo: 7, hi: 5), 7);
    expect(bisect(C, 7, lo: 7, hi: 5), 7);
    expect(bisect(C, 8, lo: 7, hi: 5), 7);
  });

  test('bisect for D lo=7 hi=5', () {
    expect(bisect(D, -2, lo: 7, hi: 5), 7);
    expect(bisect(D, -1, lo: 7, hi: 5), 7);
    expect(bisect(D, 0, lo: 7, hi: 5), 7);
    expect(bisect(D, 1, lo: 7, hi: 5), 7);
    expect(bisect(D, 2, lo: 7, hi: 5), 7);
    expect(bisect(D, 3, lo: 7, hi: 5), 7);
    expect(bisect(D, 4, lo: 7, hi: 5), 7);
    expect(bisect(D, 5, lo: 7, hi: 5), 7);
    expect(bisect(D, 6, lo: 7, hi: 5), 7);
    expect(bisect(D, 7, lo: 7, hi: 5), 7);
    expect(bisect(D, 8, lo: 7, hi: 5), 7);
  });

  test('bisect for E lo=7 hi=5', () {
    expect(bisect(E, -2, lo: 7, hi: 5), 7);
    expect(bisect(E, -1, lo: 7, hi: 5), 7);
    expect(bisect(E, 0, lo: 7, hi: 5), 7);
    expect(bisect(E, 1, lo: 7, hi: 5), 7);
    expect(bisect(E, 2, lo: 7, hi: 5), 7);
    expect(bisect(E, 3, lo: 7, hi: 5), 7);
    expect(bisect(E, 4, lo: 7, hi: 5), 7);
    expect(bisect(E, 5, lo: 7, hi: 5), 7);
    expect(bisect(E, 6, lo: 7, hi: 5), 7);
    expect(bisect(E, 7, lo: 7, hi: 5), 7);
    expect(bisect(E, 8, lo: 7, hi: 5), 7);
  });

  test('bisect for A lo=8 hi=5', () {
    expect(bisect(A, -2, lo: 8, hi: 5), 8);
    expect(bisect(A, -1, lo: 8, hi: 5), 8);
    expect(bisect(A, 0, lo: 8, hi: 5), 8);
    expect(bisect(A, 1, lo: 8, hi: 5), 8);
    expect(bisect(A, 2, lo: 8, hi: 5), 8);
    expect(bisect(A, 3, lo: 8, hi: 5), 8);
    expect(bisect(A, 4, lo: 8, hi: 5), 8);
    expect(bisect(A, 5, lo: 8, hi: 5), 8);
    expect(bisect(A, 6, lo: 8, hi: 5), 8);
    expect(bisect(A, 7, lo: 8, hi: 5), 8);
    expect(bisect(A, 8, lo: 8, hi: 5), 8);
  });

  test('bisect for B lo=8 hi=5', () {
    expect(bisect(B, -2, lo: 8, hi: 5), 8);
    expect(bisect(B, -1, lo: 8, hi: 5), 8);
    expect(bisect(B, 0, lo: 8, hi: 5), 8);
    expect(bisect(B, 1, lo: 8, hi: 5), 8);
    expect(bisect(B, 2, lo: 8, hi: 5), 8);
    expect(bisect(B, 3, lo: 8, hi: 5), 8);
    expect(bisect(B, 4, lo: 8, hi: 5), 8);
    expect(bisect(B, 5, lo: 8, hi: 5), 8);
    expect(bisect(B, 6, lo: 8, hi: 5), 8);
    expect(bisect(B, 7, lo: 8, hi: 5), 8);
    expect(bisect(B, 8, lo: 8, hi: 5), 8);
  });

  test('bisect for C lo=8 hi=5', () {
    expect(bisect(C, -2, lo: 8, hi: 5), 8);
    expect(bisect(C, -1, lo: 8, hi: 5), 8);
    expect(bisect(C, 0, lo: 8, hi: 5), 8);
    expect(bisect(C, 1, lo: 8, hi: 5), 8);
    expect(bisect(C, 2, lo: 8, hi: 5), 8);
    expect(bisect(C, 3, lo: 8, hi: 5), 8);
    expect(bisect(C, 4, lo: 8, hi: 5), 8);
    expect(bisect(C, 5, lo: 8, hi: 5), 8);
    expect(bisect(C, 6, lo: 8, hi: 5), 8);
    expect(bisect(C, 7, lo: 8, hi: 5), 8);
    expect(bisect(C, 8, lo: 8, hi: 5), 8);
  });

  test('bisect for D lo=8 hi=5', () {
    expect(bisect(D, -2, lo: 8, hi: 5), 8);
    expect(bisect(D, -1, lo: 8, hi: 5), 8);
    expect(bisect(D, 0, lo: 8, hi: 5), 8);
    expect(bisect(D, 1, lo: 8, hi: 5), 8);
    expect(bisect(D, 2, lo: 8, hi: 5), 8);
    expect(bisect(D, 3, lo: 8, hi: 5), 8);
    expect(bisect(D, 4, lo: 8, hi: 5), 8);
    expect(bisect(D, 5, lo: 8, hi: 5), 8);
    expect(bisect(D, 6, lo: 8, hi: 5), 8);
    expect(bisect(D, 7, lo: 8, hi: 5), 8);
    expect(bisect(D, 8, lo: 8, hi: 5), 8);
  });

  test('bisect for E lo=8 hi=5', () {
    expect(bisect(E, -2, lo: 8, hi: 5), 8);
    expect(bisect(E, -1, lo: 8, hi: 5), 8);
    expect(bisect(E, 0, lo: 8, hi: 5), 8);
    expect(bisect(E, 1, lo: 8, hi: 5), 8);
    expect(bisect(E, 2, lo: 8, hi: 5), 8);
    expect(bisect(E, 3, lo: 8, hi: 5), 8);
    expect(bisect(E, 4, lo: 8, hi: 5), 8);
    expect(bisect(E, 5, lo: 8, hi: 5), 8);
    expect(bisect(E, 6, lo: 8, hi: 5), 8);
    expect(bisect(E, 7, lo: 8, hi: 5), 8);
    expect(bisect(E, 8, lo: 8, hi: 5), 8);
  });

  test('bisect for A lo=9 hi=5', () {
    expect(bisect(A, -2, lo: 9, hi: 5), 9);
    expect(bisect(A, -1, lo: 9, hi: 5), 9);
    expect(bisect(A, 0, lo: 9, hi: 5), 9);
    expect(bisect(A, 1, lo: 9, hi: 5), 9);
    expect(bisect(A, 2, lo: 9, hi: 5), 9);
    expect(bisect(A, 3, lo: 9, hi: 5), 9);
    expect(bisect(A, 4, lo: 9, hi: 5), 9);
    expect(bisect(A, 5, lo: 9, hi: 5), 9);
    expect(bisect(A, 6, lo: 9, hi: 5), 9);
    expect(bisect(A, 7, lo: 9, hi: 5), 9);
    expect(bisect(A, 8, lo: 9, hi: 5), 9);
  });

  test('bisect for B lo=9 hi=5', () {
    expect(bisect(B, -2, lo: 9, hi: 5), 9);
    expect(bisect(B, -1, lo: 9, hi: 5), 9);
    expect(bisect(B, 0, lo: 9, hi: 5), 9);
    expect(bisect(B, 1, lo: 9, hi: 5), 9);
    expect(bisect(B, 2, lo: 9, hi: 5), 9);
    expect(bisect(B, 3, lo: 9, hi: 5), 9);
    expect(bisect(B, 4, lo: 9, hi: 5), 9);
    expect(bisect(B, 5, lo: 9, hi: 5), 9);
    expect(bisect(B, 6, lo: 9, hi: 5), 9);
    expect(bisect(B, 7, lo: 9, hi: 5), 9);
    expect(bisect(B, 8, lo: 9, hi: 5), 9);
  });

  test('bisect for C lo=9 hi=5', () {
    expect(bisect(C, -2, lo: 9, hi: 5), 9);
    expect(bisect(C, -1, lo: 9, hi: 5), 9);
    expect(bisect(C, 0, lo: 9, hi: 5), 9);
    expect(bisect(C, 1, lo: 9, hi: 5), 9);
    expect(bisect(C, 2, lo: 9, hi: 5), 9);
    expect(bisect(C, 3, lo: 9, hi: 5), 9);
    expect(bisect(C, 4, lo: 9, hi: 5), 9);
    expect(bisect(C, 5, lo: 9, hi: 5), 9);
    expect(bisect(C, 6, lo: 9, hi: 5), 9);
    expect(bisect(C, 7, lo: 9, hi: 5), 9);
    expect(bisect(C, 8, lo: 9, hi: 5), 9);
  });

  test('bisect for D lo=9 hi=5', () {
    expect(bisect(D, -2, lo: 9, hi: 5), 9);
    expect(bisect(D, -1, lo: 9, hi: 5), 9);
    expect(bisect(D, 0, lo: 9, hi: 5), 9);
    expect(bisect(D, 1, lo: 9, hi: 5), 9);
    expect(bisect(D, 2, lo: 9, hi: 5), 9);
    expect(bisect(D, 3, lo: 9, hi: 5), 9);
    expect(bisect(D, 4, lo: 9, hi: 5), 9);
    expect(bisect(D, 5, lo: 9, hi: 5), 9);
    expect(bisect(D, 6, lo: 9, hi: 5), 9);
    expect(bisect(D, 7, lo: 9, hi: 5), 9);
    expect(bisect(D, 8, lo: 9, hi: 5), 9);
  });

  test('bisect for E lo=9 hi=5', () {
    expect(bisect(E, -2, lo: 9, hi: 5), 9);
    expect(bisect(E, -1, lo: 9, hi: 5), 9);
    expect(bisect(E, 0, lo: 9, hi: 5), 9);
    expect(bisect(E, 1, lo: 9, hi: 5), 9);
    expect(bisect(E, 2, lo: 9, hi: 5), 9);
    expect(bisect(E, 3, lo: 9, hi: 5), 9);
    expect(bisect(E, 4, lo: 9, hi: 5), 9);
    expect(bisect(E, 5, lo: 9, hi: 5), 9);
    expect(bisect(E, 6, lo: 9, hi: 5), 9);
    expect(bisect(E, 7, lo: 9, hi: 5), 9);
    expect(bisect(E, 8, lo: 9, hi: 5), 9);
  });

  test('bisect for A lo=None hi=6', () {
    expect(() => bisect(A, -2, hi: 6), throwsRangeError);
    expect(() => bisect(A, -1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 6, hi: 6), throwsRangeError);
    expect(() => bisect(A, 7, hi: 6), throwsRangeError);
    expect(() => bisect(A, 8, hi: 6), throwsRangeError);
  });

  test('bisect for B lo=None hi=6', () {
    expect(() => bisect(B, -2, hi: 6), throwsRangeError);
    expect(() => bisect(B, -1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 6, hi: 6), throwsRangeError);
    expect(() => bisect(B, 7, hi: 6), throwsRangeError);
    expect(() => bisect(B, 8, hi: 6), throwsRangeError);
  });

  test('bisect for C lo=None hi=6', () {
    expect(() => bisect(C, -2, hi: 6), throwsRangeError);
    expect(() => bisect(C, -1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 6, hi: 6), throwsRangeError);
    expect(() => bisect(C, 7, hi: 6), throwsRangeError);
    expect(() => bisect(C, 8, hi: 6), throwsRangeError);
  });

  test('bisect for D lo=None hi=6', () {
    expect(() => bisect(D, -2, hi: 6), throwsRangeError);
    expect(() => bisect(D, -1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 6, hi: 6), throwsRangeError);
    expect(() => bisect(D, 7, hi: 6), throwsRangeError);
    expect(() => bisect(D, 8, hi: 6), throwsRangeError);
  });

  test('bisect for E lo=None hi=6', () {
    expect(bisect(E, -2, hi: 6), 0);
    expect(bisect(E, -1, hi: 6), 0);
    expect(bisect(E, 0, hi: 6), 1);
    expect(bisect(E, 1, hi: 6), 2);
    expect(bisect(E, 2, hi: 6), 6);
    expect(bisect(E, 3, hi: 6), 6);
    expect(bisect(E, 4, hi: 6), 6);
    expect(bisect(E, 5, hi: 6), 6);
    expect(bisect(E, 6, hi: 6), 6);
    expect(bisect(E, 7, hi: 6), 6);
    expect(bisect(E, 8, hi: 6), 6);
  });

  test('bisect for A lo=0 hi=6', () {
    expect(() => bisect(A, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect for B lo=0 hi=6', () {
    expect(() => bisect(B, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect for C lo=0 hi=6', () {
    expect(() => bisect(C, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(C, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect for D lo=0 hi=6', () {
    expect(() => bisect(D, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => bisect(D, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('bisect for E lo=0 hi=6', () {
    expect(bisect(E, -2, lo: 0, hi: 6), 0);
    expect(bisect(E, -1, lo: 0, hi: 6), 0);
    expect(bisect(E, 0, lo: 0, hi: 6), 1);
    expect(bisect(E, 1, lo: 0, hi: 6), 2);
    expect(bisect(E, 2, lo: 0, hi: 6), 6);
    expect(bisect(E, 3, lo: 0, hi: 6), 6);
    expect(bisect(E, 4, lo: 0, hi: 6), 6);
    expect(bisect(E, 5, lo: 0, hi: 6), 6);
    expect(bisect(E, 6, lo: 0, hi: 6), 6);
    expect(bisect(E, 7, lo: 0, hi: 6), 6);
    expect(bisect(E, 8, lo: 0, hi: 6), 6);
  });

  test('bisect for A lo=1 hi=6', () {
    expect(() => bisect(A, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect for B lo=1 hi=6', () {
    expect(() => bisect(B, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect for C lo=1 hi=6', () {
    expect(() => bisect(C, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(C, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect for D lo=1 hi=6', () {
    expect(() => bisect(D, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => bisect(D, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('bisect for E lo=1 hi=6', () {
    expect(bisect(E, -2, lo: 1, hi: 6), 1);
    expect(bisect(E, -1, lo: 1, hi: 6), 1);
    expect(bisect(E, 0, lo: 1, hi: 6), 1);
    expect(bisect(E, 1, lo: 1, hi: 6), 2);
    expect(bisect(E, 2, lo: 1, hi: 6), 6);
    expect(bisect(E, 3, lo: 1, hi: 6), 6);
    expect(bisect(E, 4, lo: 1, hi: 6), 6);
    expect(bisect(E, 5, lo: 1, hi: 6), 6);
    expect(bisect(E, 6, lo: 1, hi: 6), 6);
    expect(bisect(E, 7, lo: 1, hi: 6), 6);
    expect(bisect(E, 8, lo: 1, hi: 6), 6);
  });

  test('bisect for A lo=2 hi=6', () {
    expect(() => bisect(A, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(A, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect for B lo=2 hi=6', () {
    expect(() => bisect(B, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(B, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect for C lo=2 hi=6', () {
    expect(() => bisect(C, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(C, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect for D lo=2 hi=6', () {
    expect(() => bisect(D, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => bisect(D, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('bisect for E lo=2 hi=6', () {
    expect(bisect(E, -2, lo: 2, hi: 6), 2);
    expect(bisect(E, -1, lo: 2, hi: 6), 2);
    expect(bisect(E, 0, lo: 2, hi: 6), 2);
    expect(bisect(E, 1, lo: 2, hi: 6), 2);
    expect(bisect(E, 2, lo: 2, hi: 6), 6);
    expect(bisect(E, 3, lo: 2, hi: 6), 6);
    expect(bisect(E, 4, lo: 2, hi: 6), 6);
    expect(bisect(E, 5, lo: 2, hi: 6), 6);
    expect(bisect(E, 6, lo: 2, hi: 6), 6);
    expect(bisect(E, 7, lo: 2, hi: 6), 6);
    expect(bisect(E, 8, lo: 2, hi: 6), 6);
  });

  test('bisect for A lo=3 hi=6', () {
    expect(() => bisect(A, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(A, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect for B lo=3 hi=6', () {
    expect(() => bisect(B, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(B, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect for C lo=3 hi=6', () {
    expect(() => bisect(C, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(C, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect for D lo=3 hi=6', () {
    expect(() => bisect(D, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => bisect(D, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('bisect for E lo=3 hi=6', () {
    expect(bisect(E, -2, lo: 3, hi: 6), 3);
    expect(bisect(E, -1, lo: 3, hi: 6), 3);
    expect(bisect(E, 0, lo: 3, hi: 6), 3);
    expect(bisect(E, 1, lo: 3, hi: 6), 3);
    expect(bisect(E, 2, lo: 3, hi: 6), 6);
    expect(bisect(E, 3, lo: 3, hi: 6), 6);
    expect(bisect(E, 4, lo: 3, hi: 6), 6);
    expect(bisect(E, 5, lo: 3, hi: 6), 6);
    expect(bisect(E, 6, lo: 3, hi: 6), 6);
    expect(bisect(E, 7, lo: 3, hi: 6), 6);
    expect(bisect(E, 8, lo: 3, hi: 6), 6);
  });

  test('bisect for A lo=4 hi=6', () {
    expect(() => bisect(A, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(A, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect for B lo=4 hi=6', () {
    expect(() => bisect(B, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(B, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect for C lo=4 hi=6', () {
    expect(() => bisect(C, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(C, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect for D lo=4 hi=6', () {
    expect(() => bisect(D, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => bisect(D, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('bisect for E lo=4 hi=6', () {
    expect(bisect(E, -2, lo: 4, hi: 6), 4);
    expect(bisect(E, -1, lo: 4, hi: 6), 4);
    expect(bisect(E, 0, lo: 4, hi: 6), 4);
    expect(bisect(E, 1, lo: 4, hi: 6), 4);
    expect(bisect(E, 2, lo: 4, hi: 6), 6);
    expect(bisect(E, 3, lo: 4, hi: 6), 6);
    expect(bisect(E, 4, lo: 4, hi: 6), 6);
    expect(bisect(E, 5, lo: 4, hi: 6), 6);
    expect(bisect(E, 6, lo: 4, hi: 6), 6);
    expect(bisect(E, 7, lo: 4, hi: 6), 6);
    expect(bisect(E, 8, lo: 4, hi: 6), 6);
  });

  test('bisect for A lo=5 hi=6', () {
    expect(() => bisect(A, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(A, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect for B lo=5 hi=6', () {
    expect(() => bisect(B, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(B, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect for C lo=5 hi=6', () {
    expect(() => bisect(C, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(C, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect for D lo=5 hi=6', () {
    expect(() => bisect(D, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => bisect(D, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('bisect for E lo=5 hi=6', () {
    expect(bisect(E, -2, lo: 5, hi: 6), 5);
    expect(bisect(E, -1, lo: 5, hi: 6), 5);
    expect(bisect(E, 0, lo: 5, hi: 6), 5);
    expect(bisect(E, 1, lo: 5, hi: 6), 5);
    expect(bisect(E, 2, lo: 5, hi: 6), 6);
    expect(bisect(E, 3, lo: 5, hi: 6), 6);
    expect(bisect(E, 4, lo: 5, hi: 6), 6);
    expect(bisect(E, 5, lo: 5, hi: 6), 6);
    expect(bisect(E, 6, lo: 5, hi: 6), 6);
    expect(bisect(E, 7, lo: 5, hi: 6), 6);
    expect(bisect(E, 8, lo: 5, hi: 6), 6);
  });

  test('bisect for A lo=6 hi=6', () {
    expect(bisect(A, -2, lo: 6, hi: 6), 6);
    expect(bisect(A, -1, lo: 6, hi: 6), 6);
    expect(bisect(A, 0, lo: 6, hi: 6), 6);
    expect(bisect(A, 1, lo: 6, hi: 6), 6);
    expect(bisect(A, 2, lo: 6, hi: 6), 6);
    expect(bisect(A, 3, lo: 6, hi: 6), 6);
    expect(bisect(A, 4, lo: 6, hi: 6), 6);
    expect(bisect(A, 5, lo: 6, hi: 6), 6);
    expect(bisect(A, 6, lo: 6, hi: 6), 6);
    expect(bisect(A, 7, lo: 6, hi: 6), 6);
    expect(bisect(A, 8, lo: 6, hi: 6), 6);
  });

  test('bisect for B lo=6 hi=6', () {
    expect(bisect(B, -2, lo: 6, hi: 6), 6);
    expect(bisect(B, -1, lo: 6, hi: 6), 6);
    expect(bisect(B, 0, lo: 6, hi: 6), 6);
    expect(bisect(B, 1, lo: 6, hi: 6), 6);
    expect(bisect(B, 2, lo: 6, hi: 6), 6);
    expect(bisect(B, 3, lo: 6, hi: 6), 6);
    expect(bisect(B, 4, lo: 6, hi: 6), 6);
    expect(bisect(B, 5, lo: 6, hi: 6), 6);
    expect(bisect(B, 6, lo: 6, hi: 6), 6);
    expect(bisect(B, 7, lo: 6, hi: 6), 6);
    expect(bisect(B, 8, lo: 6, hi: 6), 6);
  });

  test('bisect for C lo=6 hi=6', () {
    expect(bisect(C, -2, lo: 6, hi: 6), 6);
    expect(bisect(C, -1, lo: 6, hi: 6), 6);
    expect(bisect(C, 0, lo: 6, hi: 6), 6);
    expect(bisect(C, 1, lo: 6, hi: 6), 6);
    expect(bisect(C, 2, lo: 6, hi: 6), 6);
    expect(bisect(C, 3, lo: 6, hi: 6), 6);
    expect(bisect(C, 4, lo: 6, hi: 6), 6);
    expect(bisect(C, 5, lo: 6, hi: 6), 6);
    expect(bisect(C, 6, lo: 6, hi: 6), 6);
    expect(bisect(C, 7, lo: 6, hi: 6), 6);
    expect(bisect(C, 8, lo: 6, hi: 6), 6);
  });

  test('bisect for D lo=6 hi=6', () {
    expect(bisect(D, -2, lo: 6, hi: 6), 6);
    expect(bisect(D, -1, lo: 6, hi: 6), 6);
    expect(bisect(D, 0, lo: 6, hi: 6), 6);
    expect(bisect(D, 1, lo: 6, hi: 6), 6);
    expect(bisect(D, 2, lo: 6, hi: 6), 6);
    expect(bisect(D, 3, lo: 6, hi: 6), 6);
    expect(bisect(D, 4, lo: 6, hi: 6), 6);
    expect(bisect(D, 5, lo: 6, hi: 6), 6);
    expect(bisect(D, 6, lo: 6, hi: 6), 6);
    expect(bisect(D, 7, lo: 6, hi: 6), 6);
    expect(bisect(D, 8, lo: 6, hi: 6), 6);
  });

  test('bisect for E lo=6 hi=6', () {
    expect(bisect(E, -2, lo: 6, hi: 6), 6);
    expect(bisect(E, -1, lo: 6, hi: 6), 6);
    expect(bisect(E, 0, lo: 6, hi: 6), 6);
    expect(bisect(E, 1, lo: 6, hi: 6), 6);
    expect(bisect(E, 2, lo: 6, hi: 6), 6);
    expect(bisect(E, 3, lo: 6, hi: 6), 6);
    expect(bisect(E, 4, lo: 6, hi: 6), 6);
    expect(bisect(E, 5, lo: 6, hi: 6), 6);
    expect(bisect(E, 6, lo: 6, hi: 6), 6);
    expect(bisect(E, 7, lo: 6, hi: 6), 6);
    expect(bisect(E, 8, lo: 6, hi: 6), 6);
  });

  test('bisect for A lo=7 hi=6', () {
    expect(bisect(A, -2, lo: 7, hi: 6), 7);
    expect(bisect(A, -1, lo: 7, hi: 6), 7);
    expect(bisect(A, 0, lo: 7, hi: 6), 7);
    expect(bisect(A, 1, lo: 7, hi: 6), 7);
    expect(bisect(A, 2, lo: 7, hi: 6), 7);
    expect(bisect(A, 3, lo: 7, hi: 6), 7);
    expect(bisect(A, 4, lo: 7, hi: 6), 7);
    expect(bisect(A, 5, lo: 7, hi: 6), 7);
    expect(bisect(A, 6, lo: 7, hi: 6), 7);
    expect(bisect(A, 7, lo: 7, hi: 6), 7);
    expect(bisect(A, 8, lo: 7, hi: 6), 7);
  });

  test('bisect for B lo=7 hi=6', () {
    expect(bisect(B, -2, lo: 7, hi: 6), 7);
    expect(bisect(B, -1, lo: 7, hi: 6), 7);
    expect(bisect(B, 0, lo: 7, hi: 6), 7);
    expect(bisect(B, 1, lo: 7, hi: 6), 7);
    expect(bisect(B, 2, lo: 7, hi: 6), 7);
    expect(bisect(B, 3, lo: 7, hi: 6), 7);
    expect(bisect(B, 4, lo: 7, hi: 6), 7);
    expect(bisect(B, 5, lo: 7, hi: 6), 7);
    expect(bisect(B, 6, lo: 7, hi: 6), 7);
    expect(bisect(B, 7, lo: 7, hi: 6), 7);
    expect(bisect(B, 8, lo: 7, hi: 6), 7);
  });

  test('bisect for C lo=7 hi=6', () {
    expect(bisect(C, -2, lo: 7, hi: 6), 7);
    expect(bisect(C, -1, lo: 7, hi: 6), 7);
    expect(bisect(C, 0, lo: 7, hi: 6), 7);
    expect(bisect(C, 1, lo: 7, hi: 6), 7);
    expect(bisect(C, 2, lo: 7, hi: 6), 7);
    expect(bisect(C, 3, lo: 7, hi: 6), 7);
    expect(bisect(C, 4, lo: 7, hi: 6), 7);
    expect(bisect(C, 5, lo: 7, hi: 6), 7);
    expect(bisect(C, 6, lo: 7, hi: 6), 7);
    expect(bisect(C, 7, lo: 7, hi: 6), 7);
    expect(bisect(C, 8, lo: 7, hi: 6), 7);
  });

  test('bisect for D lo=7 hi=6', () {
    expect(bisect(D, -2, lo: 7, hi: 6), 7);
    expect(bisect(D, -1, lo: 7, hi: 6), 7);
    expect(bisect(D, 0, lo: 7, hi: 6), 7);
    expect(bisect(D, 1, lo: 7, hi: 6), 7);
    expect(bisect(D, 2, lo: 7, hi: 6), 7);
    expect(bisect(D, 3, lo: 7, hi: 6), 7);
    expect(bisect(D, 4, lo: 7, hi: 6), 7);
    expect(bisect(D, 5, lo: 7, hi: 6), 7);
    expect(bisect(D, 6, lo: 7, hi: 6), 7);
    expect(bisect(D, 7, lo: 7, hi: 6), 7);
    expect(bisect(D, 8, lo: 7, hi: 6), 7);
  });

  test('bisect for E lo=7 hi=6', () {
    expect(bisect(E, -2, lo: 7, hi: 6), 7);
    expect(bisect(E, -1, lo: 7, hi: 6), 7);
    expect(bisect(E, 0, lo: 7, hi: 6), 7);
    expect(bisect(E, 1, lo: 7, hi: 6), 7);
    expect(bisect(E, 2, lo: 7, hi: 6), 7);
    expect(bisect(E, 3, lo: 7, hi: 6), 7);
    expect(bisect(E, 4, lo: 7, hi: 6), 7);
    expect(bisect(E, 5, lo: 7, hi: 6), 7);
    expect(bisect(E, 6, lo: 7, hi: 6), 7);
    expect(bisect(E, 7, lo: 7, hi: 6), 7);
    expect(bisect(E, 8, lo: 7, hi: 6), 7);
  });

  test('bisect for A lo=8 hi=6', () {
    expect(bisect(A, -2, lo: 8, hi: 6), 8);
    expect(bisect(A, -1, lo: 8, hi: 6), 8);
    expect(bisect(A, 0, lo: 8, hi: 6), 8);
    expect(bisect(A, 1, lo: 8, hi: 6), 8);
    expect(bisect(A, 2, lo: 8, hi: 6), 8);
    expect(bisect(A, 3, lo: 8, hi: 6), 8);
    expect(bisect(A, 4, lo: 8, hi: 6), 8);
    expect(bisect(A, 5, lo: 8, hi: 6), 8);
    expect(bisect(A, 6, lo: 8, hi: 6), 8);
    expect(bisect(A, 7, lo: 8, hi: 6), 8);
    expect(bisect(A, 8, lo: 8, hi: 6), 8);
  });

  test('bisect for B lo=8 hi=6', () {
    expect(bisect(B, -2, lo: 8, hi: 6), 8);
    expect(bisect(B, -1, lo: 8, hi: 6), 8);
    expect(bisect(B, 0, lo: 8, hi: 6), 8);
    expect(bisect(B, 1, lo: 8, hi: 6), 8);
    expect(bisect(B, 2, lo: 8, hi: 6), 8);
    expect(bisect(B, 3, lo: 8, hi: 6), 8);
    expect(bisect(B, 4, lo: 8, hi: 6), 8);
    expect(bisect(B, 5, lo: 8, hi: 6), 8);
    expect(bisect(B, 6, lo: 8, hi: 6), 8);
    expect(bisect(B, 7, lo: 8, hi: 6), 8);
    expect(bisect(B, 8, lo: 8, hi: 6), 8);
  });

  test('bisect for C lo=8 hi=6', () {
    expect(bisect(C, -2, lo: 8, hi: 6), 8);
    expect(bisect(C, -1, lo: 8, hi: 6), 8);
    expect(bisect(C, 0, lo: 8, hi: 6), 8);
    expect(bisect(C, 1, lo: 8, hi: 6), 8);
    expect(bisect(C, 2, lo: 8, hi: 6), 8);
    expect(bisect(C, 3, lo: 8, hi: 6), 8);
    expect(bisect(C, 4, lo: 8, hi: 6), 8);
    expect(bisect(C, 5, lo: 8, hi: 6), 8);
    expect(bisect(C, 6, lo: 8, hi: 6), 8);
    expect(bisect(C, 7, lo: 8, hi: 6), 8);
    expect(bisect(C, 8, lo: 8, hi: 6), 8);
  });

  test('bisect for D lo=8 hi=6', () {
    expect(bisect(D, -2, lo: 8, hi: 6), 8);
    expect(bisect(D, -1, lo: 8, hi: 6), 8);
    expect(bisect(D, 0, lo: 8, hi: 6), 8);
    expect(bisect(D, 1, lo: 8, hi: 6), 8);
    expect(bisect(D, 2, lo: 8, hi: 6), 8);
    expect(bisect(D, 3, lo: 8, hi: 6), 8);
    expect(bisect(D, 4, lo: 8, hi: 6), 8);
    expect(bisect(D, 5, lo: 8, hi: 6), 8);
    expect(bisect(D, 6, lo: 8, hi: 6), 8);
    expect(bisect(D, 7, lo: 8, hi: 6), 8);
    expect(bisect(D, 8, lo: 8, hi: 6), 8);
  });

  test('bisect for E lo=8 hi=6', () {
    expect(bisect(E, -2, lo: 8, hi: 6), 8);
    expect(bisect(E, -1, lo: 8, hi: 6), 8);
    expect(bisect(E, 0, lo: 8, hi: 6), 8);
    expect(bisect(E, 1, lo: 8, hi: 6), 8);
    expect(bisect(E, 2, lo: 8, hi: 6), 8);
    expect(bisect(E, 3, lo: 8, hi: 6), 8);
    expect(bisect(E, 4, lo: 8, hi: 6), 8);
    expect(bisect(E, 5, lo: 8, hi: 6), 8);
    expect(bisect(E, 6, lo: 8, hi: 6), 8);
    expect(bisect(E, 7, lo: 8, hi: 6), 8);
    expect(bisect(E, 8, lo: 8, hi: 6), 8);
  });

  test('bisect for A lo=9 hi=6', () {
    expect(bisect(A, -2, lo: 9, hi: 6), 9);
    expect(bisect(A, -1, lo: 9, hi: 6), 9);
    expect(bisect(A, 0, lo: 9, hi: 6), 9);
    expect(bisect(A, 1, lo: 9, hi: 6), 9);
    expect(bisect(A, 2, lo: 9, hi: 6), 9);
    expect(bisect(A, 3, lo: 9, hi: 6), 9);
    expect(bisect(A, 4, lo: 9, hi: 6), 9);
    expect(bisect(A, 5, lo: 9, hi: 6), 9);
    expect(bisect(A, 6, lo: 9, hi: 6), 9);
    expect(bisect(A, 7, lo: 9, hi: 6), 9);
    expect(bisect(A, 8, lo: 9, hi: 6), 9);
  });

  test('bisect for B lo=9 hi=6', () {
    expect(bisect(B, -2, lo: 9, hi: 6), 9);
    expect(bisect(B, -1, lo: 9, hi: 6), 9);
    expect(bisect(B, 0, lo: 9, hi: 6), 9);
    expect(bisect(B, 1, lo: 9, hi: 6), 9);
    expect(bisect(B, 2, lo: 9, hi: 6), 9);
    expect(bisect(B, 3, lo: 9, hi: 6), 9);
    expect(bisect(B, 4, lo: 9, hi: 6), 9);
    expect(bisect(B, 5, lo: 9, hi: 6), 9);
    expect(bisect(B, 6, lo: 9, hi: 6), 9);
    expect(bisect(B, 7, lo: 9, hi: 6), 9);
    expect(bisect(B, 8, lo: 9, hi: 6), 9);
  });

  test('bisect for C lo=9 hi=6', () {
    expect(bisect(C, -2, lo: 9, hi: 6), 9);
    expect(bisect(C, -1, lo: 9, hi: 6), 9);
    expect(bisect(C, 0, lo: 9, hi: 6), 9);
    expect(bisect(C, 1, lo: 9, hi: 6), 9);
    expect(bisect(C, 2, lo: 9, hi: 6), 9);
    expect(bisect(C, 3, lo: 9, hi: 6), 9);
    expect(bisect(C, 4, lo: 9, hi: 6), 9);
    expect(bisect(C, 5, lo: 9, hi: 6), 9);
    expect(bisect(C, 6, lo: 9, hi: 6), 9);
    expect(bisect(C, 7, lo: 9, hi: 6), 9);
    expect(bisect(C, 8, lo: 9, hi: 6), 9);
  });

  test('bisect for D lo=9 hi=6', () {
    expect(bisect(D, -2, lo: 9, hi: 6), 9);
    expect(bisect(D, -1, lo: 9, hi: 6), 9);
    expect(bisect(D, 0, lo: 9, hi: 6), 9);
    expect(bisect(D, 1, lo: 9, hi: 6), 9);
    expect(bisect(D, 2, lo: 9, hi: 6), 9);
    expect(bisect(D, 3, lo: 9, hi: 6), 9);
    expect(bisect(D, 4, lo: 9, hi: 6), 9);
    expect(bisect(D, 5, lo: 9, hi: 6), 9);
    expect(bisect(D, 6, lo: 9, hi: 6), 9);
    expect(bisect(D, 7, lo: 9, hi: 6), 9);
    expect(bisect(D, 8, lo: 9, hi: 6), 9);
  });

  test('bisect for E lo=9 hi=6', () {
    expect(bisect(E, -2, lo: 9, hi: 6), 9);
    expect(bisect(E, -1, lo: 9, hi: 6), 9);
    expect(bisect(E, 0, lo: 9, hi: 6), 9);
    expect(bisect(E, 1, lo: 9, hi: 6), 9);
    expect(bisect(E, 2, lo: 9, hi: 6), 9);
    expect(bisect(E, 3, lo: 9, hi: 6), 9);
    expect(bisect(E, 4, lo: 9, hi: 6), 9);
    expect(bisect(E, 5, lo: 9, hi: 6), 9);
    expect(bisect(E, 6, lo: 9, hi: 6), 9);
    expect(bisect(E, 7, lo: 9, hi: 6), 9);
    expect(bisect(E, 8, lo: 9, hi: 6), 9);
  });

  test('bisect for A lo=None hi=7', () {
    expect(() => bisect(A, -2, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=None hi=7', () {
    expect(() => bisect(B, -2, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=None hi=7', () {
    expect(() => bisect(C, -2, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=None hi=7', () {
    expect(() => bisect(D, -2, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=None hi=7', () {
    expect(bisect(E, -2, hi: 7), 0);
    expect(bisect(E, -1, hi: 7), 0);
    expect(bisect(E, 0, hi: 7), 1);
    expect(bisect(E, 1, hi: 7), 2);
    expect(bisect(E, 2, hi: 7), 6);
    expect(bisect(E, 3, hi: 7), 7);
    expect(bisect(E, 4, hi: 7), 7);
    expect(bisect(E, 5, hi: 7), 7);
    expect(bisect(E, 6, hi: 7), 7);
    expect(bisect(E, 7, hi: 7), 7);
    expect(bisect(E, 8, hi: 7), 7);
  });

  test('bisect for A lo=0 hi=7', () {
    expect(() => bisect(A, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=0 hi=7', () {
    expect(() => bisect(B, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=0 hi=7', () {
    expect(() => bisect(C, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=0 hi=7', () {
    expect(() => bisect(D, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=0 hi=7', () {
    expect(bisect(E, -2, lo: 0, hi: 7), 0);
    expect(bisect(E, -1, lo: 0, hi: 7), 0);
    expect(bisect(E, 0, lo: 0, hi: 7), 1);
    expect(bisect(E, 1, lo: 0, hi: 7), 2);
    expect(bisect(E, 2, lo: 0, hi: 7), 6);
    expect(bisect(E, 3, lo: 0, hi: 7), 7);
    expect(bisect(E, 4, lo: 0, hi: 7), 7);
    expect(bisect(E, 5, lo: 0, hi: 7), 7);
    expect(bisect(E, 6, lo: 0, hi: 7), 7);
    expect(bisect(E, 7, lo: 0, hi: 7), 7);
    expect(bisect(E, 8, lo: 0, hi: 7), 7);
  });

  test('bisect for A lo=1 hi=7', () {
    expect(() => bisect(A, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=1 hi=7', () {
    expect(() => bisect(B, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=1 hi=7', () {
    expect(() => bisect(C, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=1 hi=7', () {
    expect(() => bisect(D, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=1 hi=7', () {
    expect(bisect(E, -2, lo: 1, hi: 7), 1);
    expect(bisect(E, -1, lo: 1, hi: 7), 1);
    expect(bisect(E, 0, lo: 1, hi: 7), 1);
    expect(bisect(E, 1, lo: 1, hi: 7), 2);
    expect(bisect(E, 2, lo: 1, hi: 7), 6);
    expect(bisect(E, 3, lo: 1, hi: 7), 7);
    expect(bisect(E, 4, lo: 1, hi: 7), 7);
    expect(bisect(E, 5, lo: 1, hi: 7), 7);
    expect(bisect(E, 6, lo: 1, hi: 7), 7);
    expect(bisect(E, 7, lo: 1, hi: 7), 7);
    expect(bisect(E, 8, lo: 1, hi: 7), 7);
  });

  test('bisect for A lo=2 hi=7', () {
    expect(() => bisect(A, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=2 hi=7', () {
    expect(() => bisect(B, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=2 hi=7', () {
    expect(() => bisect(C, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=2 hi=7', () {
    expect(() => bisect(D, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=2 hi=7', () {
    expect(bisect(E, -2, lo: 2, hi: 7), 2);
    expect(bisect(E, -1, lo: 2, hi: 7), 2);
    expect(bisect(E, 0, lo: 2, hi: 7), 2);
    expect(bisect(E, 1, lo: 2, hi: 7), 2);
    expect(bisect(E, 2, lo: 2, hi: 7), 6);
    expect(bisect(E, 3, lo: 2, hi: 7), 7);
    expect(bisect(E, 4, lo: 2, hi: 7), 7);
    expect(bisect(E, 5, lo: 2, hi: 7), 7);
    expect(bisect(E, 6, lo: 2, hi: 7), 7);
    expect(bisect(E, 7, lo: 2, hi: 7), 7);
    expect(bisect(E, 8, lo: 2, hi: 7), 7);
  });

  test('bisect for A lo=3 hi=7', () {
    expect(() => bisect(A, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=3 hi=7', () {
    expect(() => bisect(B, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=3 hi=7', () {
    expect(() => bisect(C, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=3 hi=7', () {
    expect(() => bisect(D, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=3 hi=7', () {
    expect(bisect(E, -2, lo: 3, hi: 7), 3);
    expect(bisect(E, -1, lo: 3, hi: 7), 3);
    expect(bisect(E, 0, lo: 3, hi: 7), 3);
    expect(bisect(E, 1, lo: 3, hi: 7), 3);
    expect(bisect(E, 2, lo: 3, hi: 7), 6);
    expect(bisect(E, 3, lo: 3, hi: 7), 7);
    expect(bisect(E, 4, lo: 3, hi: 7), 7);
    expect(bisect(E, 5, lo: 3, hi: 7), 7);
    expect(bisect(E, 6, lo: 3, hi: 7), 7);
    expect(bisect(E, 7, lo: 3, hi: 7), 7);
    expect(bisect(E, 8, lo: 3, hi: 7), 7);
  });

  test('bisect for A lo=4 hi=7', () {
    expect(() => bisect(A, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=4 hi=7', () {
    expect(() => bisect(B, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=4 hi=7', () {
    expect(() => bisect(C, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=4 hi=7', () {
    expect(() => bisect(D, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=4 hi=7', () {
    expect(bisect(E, -2, lo: 4, hi: 7), 4);
    expect(bisect(E, -1, lo: 4, hi: 7), 4);
    expect(bisect(E, 0, lo: 4, hi: 7), 4);
    expect(bisect(E, 1, lo: 4, hi: 7), 4);
    expect(bisect(E, 2, lo: 4, hi: 7), 6);
    expect(bisect(E, 3, lo: 4, hi: 7), 7);
    expect(bisect(E, 4, lo: 4, hi: 7), 7);
    expect(bisect(E, 5, lo: 4, hi: 7), 7);
    expect(bisect(E, 6, lo: 4, hi: 7), 7);
    expect(bisect(E, 7, lo: 4, hi: 7), 7);
    expect(bisect(E, 8, lo: 4, hi: 7), 7);
  });

  test('bisect for A lo=5 hi=7', () {
    expect(() => bisect(A, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=5 hi=7', () {
    expect(() => bisect(B, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=5 hi=7', () {
    expect(() => bisect(C, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=5 hi=7', () {
    expect(() => bisect(D, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=5 hi=7', () {
    expect(bisect(E, -2, lo: 5, hi: 7), 5);
    expect(bisect(E, -1, lo: 5, hi: 7), 5);
    expect(bisect(E, 0, lo: 5, hi: 7), 5);
    expect(bisect(E, 1, lo: 5, hi: 7), 5);
    expect(bisect(E, 2, lo: 5, hi: 7), 6);
    expect(bisect(E, 3, lo: 5, hi: 7), 7);
    expect(bisect(E, 4, lo: 5, hi: 7), 7);
    expect(bisect(E, 5, lo: 5, hi: 7), 7);
    expect(bisect(E, 6, lo: 5, hi: 7), 7);
    expect(bisect(E, 7, lo: 5, hi: 7), 7);
    expect(bisect(E, 8, lo: 5, hi: 7), 7);
  });

  test('bisect for A lo=6 hi=7', () {
    expect(() => bisect(A, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(A, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect for B lo=6 hi=7', () {
    expect(() => bisect(B, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(B, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect for C lo=6 hi=7', () {
    expect(() => bisect(C, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(C, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect for D lo=6 hi=7', () {
    expect(() => bisect(D, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => bisect(D, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('bisect for E lo=6 hi=7', () {
    expect(bisect(E, -2, lo: 6, hi: 7), 6);
    expect(bisect(E, -1, lo: 6, hi: 7), 6);
    expect(bisect(E, 0, lo: 6, hi: 7), 6);
    expect(bisect(E, 1, lo: 6, hi: 7), 6);
    expect(bisect(E, 2, lo: 6, hi: 7), 6);
    expect(bisect(E, 3, lo: 6, hi: 7), 7);
    expect(bisect(E, 4, lo: 6, hi: 7), 7);
    expect(bisect(E, 5, lo: 6, hi: 7), 7);
    expect(bisect(E, 6, lo: 6, hi: 7), 7);
    expect(bisect(E, 7, lo: 6, hi: 7), 7);
    expect(bisect(E, 8, lo: 6, hi: 7), 7);
  });

  test('bisect for A lo=7 hi=7', () {
    expect(bisect(A, -2, lo: 7, hi: 7), 7);
    expect(bisect(A, -1, lo: 7, hi: 7), 7);
    expect(bisect(A, 0, lo: 7, hi: 7), 7);
    expect(bisect(A, 1, lo: 7, hi: 7), 7);
    expect(bisect(A, 2, lo: 7, hi: 7), 7);
    expect(bisect(A, 3, lo: 7, hi: 7), 7);
    expect(bisect(A, 4, lo: 7, hi: 7), 7);
    expect(bisect(A, 5, lo: 7, hi: 7), 7);
    expect(bisect(A, 6, lo: 7, hi: 7), 7);
    expect(bisect(A, 7, lo: 7, hi: 7), 7);
    expect(bisect(A, 8, lo: 7, hi: 7), 7);
  });

  test('bisect for B lo=7 hi=7', () {
    expect(bisect(B, -2, lo: 7, hi: 7), 7);
    expect(bisect(B, -1, lo: 7, hi: 7), 7);
    expect(bisect(B, 0, lo: 7, hi: 7), 7);
    expect(bisect(B, 1, lo: 7, hi: 7), 7);
    expect(bisect(B, 2, lo: 7, hi: 7), 7);
    expect(bisect(B, 3, lo: 7, hi: 7), 7);
    expect(bisect(B, 4, lo: 7, hi: 7), 7);
    expect(bisect(B, 5, lo: 7, hi: 7), 7);
    expect(bisect(B, 6, lo: 7, hi: 7), 7);
    expect(bisect(B, 7, lo: 7, hi: 7), 7);
    expect(bisect(B, 8, lo: 7, hi: 7), 7);
  });

  test('bisect for C lo=7 hi=7', () {
    expect(bisect(C, -2, lo: 7, hi: 7), 7);
    expect(bisect(C, -1, lo: 7, hi: 7), 7);
    expect(bisect(C, 0, lo: 7, hi: 7), 7);
    expect(bisect(C, 1, lo: 7, hi: 7), 7);
    expect(bisect(C, 2, lo: 7, hi: 7), 7);
    expect(bisect(C, 3, lo: 7, hi: 7), 7);
    expect(bisect(C, 4, lo: 7, hi: 7), 7);
    expect(bisect(C, 5, lo: 7, hi: 7), 7);
    expect(bisect(C, 6, lo: 7, hi: 7), 7);
    expect(bisect(C, 7, lo: 7, hi: 7), 7);
    expect(bisect(C, 8, lo: 7, hi: 7), 7);
  });

  test('bisect for D lo=7 hi=7', () {
    expect(bisect(D, -2, lo: 7, hi: 7), 7);
    expect(bisect(D, -1, lo: 7, hi: 7), 7);
    expect(bisect(D, 0, lo: 7, hi: 7), 7);
    expect(bisect(D, 1, lo: 7, hi: 7), 7);
    expect(bisect(D, 2, lo: 7, hi: 7), 7);
    expect(bisect(D, 3, lo: 7, hi: 7), 7);
    expect(bisect(D, 4, lo: 7, hi: 7), 7);
    expect(bisect(D, 5, lo: 7, hi: 7), 7);
    expect(bisect(D, 6, lo: 7, hi: 7), 7);
    expect(bisect(D, 7, lo: 7, hi: 7), 7);
    expect(bisect(D, 8, lo: 7, hi: 7), 7);
  });

  test('bisect for E lo=7 hi=7', () {
    expect(bisect(E, -2, lo: 7, hi: 7), 7);
    expect(bisect(E, -1, lo: 7, hi: 7), 7);
    expect(bisect(E, 0, lo: 7, hi: 7), 7);
    expect(bisect(E, 1, lo: 7, hi: 7), 7);
    expect(bisect(E, 2, lo: 7, hi: 7), 7);
    expect(bisect(E, 3, lo: 7, hi: 7), 7);
    expect(bisect(E, 4, lo: 7, hi: 7), 7);
    expect(bisect(E, 5, lo: 7, hi: 7), 7);
    expect(bisect(E, 6, lo: 7, hi: 7), 7);
    expect(bisect(E, 7, lo: 7, hi: 7), 7);
    expect(bisect(E, 8, lo: 7, hi: 7), 7);
  });

  test('bisect for A lo=8 hi=7', () {
    expect(bisect(A, -2, lo: 8, hi: 7), 8);
    expect(bisect(A, -1, lo: 8, hi: 7), 8);
    expect(bisect(A, 0, lo: 8, hi: 7), 8);
    expect(bisect(A, 1, lo: 8, hi: 7), 8);
    expect(bisect(A, 2, lo: 8, hi: 7), 8);
    expect(bisect(A, 3, lo: 8, hi: 7), 8);
    expect(bisect(A, 4, lo: 8, hi: 7), 8);
    expect(bisect(A, 5, lo: 8, hi: 7), 8);
    expect(bisect(A, 6, lo: 8, hi: 7), 8);
    expect(bisect(A, 7, lo: 8, hi: 7), 8);
    expect(bisect(A, 8, lo: 8, hi: 7), 8);
  });

  test('bisect for B lo=8 hi=7', () {
    expect(bisect(B, -2, lo: 8, hi: 7), 8);
    expect(bisect(B, -1, lo: 8, hi: 7), 8);
    expect(bisect(B, 0, lo: 8, hi: 7), 8);
    expect(bisect(B, 1, lo: 8, hi: 7), 8);
    expect(bisect(B, 2, lo: 8, hi: 7), 8);
    expect(bisect(B, 3, lo: 8, hi: 7), 8);
    expect(bisect(B, 4, lo: 8, hi: 7), 8);
    expect(bisect(B, 5, lo: 8, hi: 7), 8);
    expect(bisect(B, 6, lo: 8, hi: 7), 8);
    expect(bisect(B, 7, lo: 8, hi: 7), 8);
    expect(bisect(B, 8, lo: 8, hi: 7), 8);
  });

  test('bisect for C lo=8 hi=7', () {
    expect(bisect(C, -2, lo: 8, hi: 7), 8);
    expect(bisect(C, -1, lo: 8, hi: 7), 8);
    expect(bisect(C, 0, lo: 8, hi: 7), 8);
    expect(bisect(C, 1, lo: 8, hi: 7), 8);
    expect(bisect(C, 2, lo: 8, hi: 7), 8);
    expect(bisect(C, 3, lo: 8, hi: 7), 8);
    expect(bisect(C, 4, lo: 8, hi: 7), 8);
    expect(bisect(C, 5, lo: 8, hi: 7), 8);
    expect(bisect(C, 6, lo: 8, hi: 7), 8);
    expect(bisect(C, 7, lo: 8, hi: 7), 8);
    expect(bisect(C, 8, lo: 8, hi: 7), 8);
  });

  test('bisect for D lo=8 hi=7', () {
    expect(bisect(D, -2, lo: 8, hi: 7), 8);
    expect(bisect(D, -1, lo: 8, hi: 7), 8);
    expect(bisect(D, 0, lo: 8, hi: 7), 8);
    expect(bisect(D, 1, lo: 8, hi: 7), 8);
    expect(bisect(D, 2, lo: 8, hi: 7), 8);
    expect(bisect(D, 3, lo: 8, hi: 7), 8);
    expect(bisect(D, 4, lo: 8, hi: 7), 8);
    expect(bisect(D, 5, lo: 8, hi: 7), 8);
    expect(bisect(D, 6, lo: 8, hi: 7), 8);
    expect(bisect(D, 7, lo: 8, hi: 7), 8);
    expect(bisect(D, 8, lo: 8, hi: 7), 8);
  });

  test('bisect for E lo=8 hi=7', () {
    expect(bisect(E, -2, lo: 8, hi: 7), 8);
    expect(bisect(E, -1, lo: 8, hi: 7), 8);
    expect(bisect(E, 0, lo: 8, hi: 7), 8);
    expect(bisect(E, 1, lo: 8, hi: 7), 8);
    expect(bisect(E, 2, lo: 8, hi: 7), 8);
    expect(bisect(E, 3, lo: 8, hi: 7), 8);
    expect(bisect(E, 4, lo: 8, hi: 7), 8);
    expect(bisect(E, 5, lo: 8, hi: 7), 8);
    expect(bisect(E, 6, lo: 8, hi: 7), 8);
    expect(bisect(E, 7, lo: 8, hi: 7), 8);
    expect(bisect(E, 8, lo: 8, hi: 7), 8);
  });

  test('bisect for A lo=9 hi=7', () {
    expect(bisect(A, -2, lo: 9, hi: 7), 9);
    expect(bisect(A, -1, lo: 9, hi: 7), 9);
    expect(bisect(A, 0, lo: 9, hi: 7), 9);
    expect(bisect(A, 1, lo: 9, hi: 7), 9);
    expect(bisect(A, 2, lo: 9, hi: 7), 9);
    expect(bisect(A, 3, lo: 9, hi: 7), 9);
    expect(bisect(A, 4, lo: 9, hi: 7), 9);
    expect(bisect(A, 5, lo: 9, hi: 7), 9);
    expect(bisect(A, 6, lo: 9, hi: 7), 9);
    expect(bisect(A, 7, lo: 9, hi: 7), 9);
    expect(bisect(A, 8, lo: 9, hi: 7), 9);
  });

  test('bisect for B lo=9 hi=7', () {
    expect(bisect(B, -2, lo: 9, hi: 7), 9);
    expect(bisect(B, -1, lo: 9, hi: 7), 9);
    expect(bisect(B, 0, lo: 9, hi: 7), 9);
    expect(bisect(B, 1, lo: 9, hi: 7), 9);
    expect(bisect(B, 2, lo: 9, hi: 7), 9);
    expect(bisect(B, 3, lo: 9, hi: 7), 9);
    expect(bisect(B, 4, lo: 9, hi: 7), 9);
    expect(bisect(B, 5, lo: 9, hi: 7), 9);
    expect(bisect(B, 6, lo: 9, hi: 7), 9);
    expect(bisect(B, 7, lo: 9, hi: 7), 9);
    expect(bisect(B, 8, lo: 9, hi: 7), 9);
  });

  test('bisect for C lo=9 hi=7', () {
    expect(bisect(C, -2, lo: 9, hi: 7), 9);
    expect(bisect(C, -1, lo: 9, hi: 7), 9);
    expect(bisect(C, 0, lo: 9, hi: 7), 9);
    expect(bisect(C, 1, lo: 9, hi: 7), 9);
    expect(bisect(C, 2, lo: 9, hi: 7), 9);
    expect(bisect(C, 3, lo: 9, hi: 7), 9);
    expect(bisect(C, 4, lo: 9, hi: 7), 9);
    expect(bisect(C, 5, lo: 9, hi: 7), 9);
    expect(bisect(C, 6, lo: 9, hi: 7), 9);
    expect(bisect(C, 7, lo: 9, hi: 7), 9);
    expect(bisect(C, 8, lo: 9, hi: 7), 9);
  });

  test('bisect for D lo=9 hi=7', () {
    expect(bisect(D, -2, lo: 9, hi: 7), 9);
    expect(bisect(D, -1, lo: 9, hi: 7), 9);
    expect(bisect(D, 0, lo: 9, hi: 7), 9);
    expect(bisect(D, 1, lo: 9, hi: 7), 9);
    expect(bisect(D, 2, lo: 9, hi: 7), 9);
    expect(bisect(D, 3, lo: 9, hi: 7), 9);
    expect(bisect(D, 4, lo: 9, hi: 7), 9);
    expect(bisect(D, 5, lo: 9, hi: 7), 9);
    expect(bisect(D, 6, lo: 9, hi: 7), 9);
    expect(bisect(D, 7, lo: 9, hi: 7), 9);
    expect(bisect(D, 8, lo: 9, hi: 7), 9);
  });

  test('bisect for E lo=9 hi=7', () {
    expect(bisect(E, -2, lo: 9, hi: 7), 9);
    expect(bisect(E, -1, lo: 9, hi: 7), 9);
    expect(bisect(E, 0, lo: 9, hi: 7), 9);
    expect(bisect(E, 1, lo: 9, hi: 7), 9);
    expect(bisect(E, 2, lo: 9, hi: 7), 9);
    expect(bisect(E, 3, lo: 9, hi: 7), 9);
    expect(bisect(E, 4, lo: 9, hi: 7), 9);
    expect(bisect(E, 5, lo: 9, hi: 7), 9);
    expect(bisect(E, 6, lo: 9, hi: 7), 9);
    expect(bisect(E, 7, lo: 9, hi: 7), 9);
    expect(bisect(E, 8, lo: 9, hi: 7), 9);
  });

  test('bisect for A lo=None hi=8', () {
    expect(() => bisect(A, -2, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=None hi=8', () {
    expect(() => bisect(B, -2, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=None hi=8', () {
    expect(() => bisect(C, -2, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=None hi=8', () {
    expect(() => bisect(D, -2, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=None hi=8', () {
    expect(bisect(E, -2, hi: 8), 0);
    expect(bisect(E, -1, hi: 8), 0);
    expect(bisect(E, 0, hi: 8), 1);
    expect(bisect(E, 1, hi: 8), 2);
    expect(bisect(E, 2, hi: 8), 6);
    expect(bisect(E, 3, hi: 8), 8);
    expect(bisect(E, 4, hi: 8), 8);
    expect(bisect(E, 5, hi: 8), 8);
    expect(bisect(E, 6, hi: 8), 8);
    expect(bisect(E, 7, hi: 8), 8);
    expect(bisect(E, 8, hi: 8), 8);
  });

  test('bisect for A lo=0 hi=8', () {
    expect(() => bisect(A, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=0 hi=8', () {
    expect(() => bisect(B, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=0 hi=8', () {
    expect(() => bisect(C, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=0 hi=8', () {
    expect(() => bisect(D, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=0 hi=8', () {
    expect(bisect(E, -2, lo: 0, hi: 8), 0);
    expect(bisect(E, -1, lo: 0, hi: 8), 0);
    expect(bisect(E, 0, lo: 0, hi: 8), 1);
    expect(bisect(E, 1, lo: 0, hi: 8), 2);
    expect(bisect(E, 2, lo: 0, hi: 8), 6);
    expect(bisect(E, 3, lo: 0, hi: 8), 8);
    expect(bisect(E, 4, lo: 0, hi: 8), 8);
    expect(bisect(E, 5, lo: 0, hi: 8), 8);
    expect(bisect(E, 6, lo: 0, hi: 8), 8);
    expect(bisect(E, 7, lo: 0, hi: 8), 8);
    expect(bisect(E, 8, lo: 0, hi: 8), 8);
  });

  test('bisect for A lo=1 hi=8', () {
    expect(() => bisect(A, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=1 hi=8', () {
    expect(() => bisect(B, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=1 hi=8', () {
    expect(() => bisect(C, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=1 hi=8', () {
    expect(() => bisect(D, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=1 hi=8', () {
    expect(bisect(E, -2, lo: 1, hi: 8), 1);
    expect(bisect(E, -1, lo: 1, hi: 8), 1);
    expect(bisect(E, 0, lo: 1, hi: 8), 1);
    expect(bisect(E, 1, lo: 1, hi: 8), 2);
    expect(bisect(E, 2, lo: 1, hi: 8), 6);
    expect(bisect(E, 3, lo: 1, hi: 8), 8);
    expect(bisect(E, 4, lo: 1, hi: 8), 8);
    expect(bisect(E, 5, lo: 1, hi: 8), 8);
    expect(bisect(E, 6, lo: 1, hi: 8), 8);
    expect(bisect(E, 7, lo: 1, hi: 8), 8);
    expect(bisect(E, 8, lo: 1, hi: 8), 8);
  });

  test('bisect for A lo=2 hi=8', () {
    expect(() => bisect(A, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=2 hi=8', () {
    expect(() => bisect(B, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=2 hi=8', () {
    expect(() => bisect(C, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=2 hi=8', () {
    expect(() => bisect(D, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=2 hi=8', () {
    expect(bisect(E, -2, lo: 2, hi: 8), 2);
    expect(bisect(E, -1, lo: 2, hi: 8), 2);
    expect(bisect(E, 0, lo: 2, hi: 8), 2);
    expect(bisect(E, 1, lo: 2, hi: 8), 2);
    expect(bisect(E, 2, lo: 2, hi: 8), 6);
    expect(bisect(E, 3, lo: 2, hi: 8), 8);
    expect(bisect(E, 4, lo: 2, hi: 8), 8);
    expect(bisect(E, 5, lo: 2, hi: 8), 8);
    expect(bisect(E, 6, lo: 2, hi: 8), 8);
    expect(bisect(E, 7, lo: 2, hi: 8), 8);
    expect(bisect(E, 8, lo: 2, hi: 8), 8);
  });

  test('bisect for A lo=3 hi=8', () {
    expect(() => bisect(A, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=3 hi=8', () {
    expect(() => bisect(B, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=3 hi=8', () {
    expect(() => bisect(C, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=3 hi=8', () {
    expect(() => bisect(D, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=3 hi=8', () {
    expect(bisect(E, -2, lo: 3, hi: 8), 3);
    expect(bisect(E, -1, lo: 3, hi: 8), 3);
    expect(bisect(E, 0, lo: 3, hi: 8), 3);
    expect(bisect(E, 1, lo: 3, hi: 8), 3);
    expect(bisect(E, 2, lo: 3, hi: 8), 6);
    expect(bisect(E, 3, lo: 3, hi: 8), 8);
    expect(bisect(E, 4, lo: 3, hi: 8), 8);
    expect(bisect(E, 5, lo: 3, hi: 8), 8);
    expect(bisect(E, 6, lo: 3, hi: 8), 8);
    expect(bisect(E, 7, lo: 3, hi: 8), 8);
    expect(bisect(E, 8, lo: 3, hi: 8), 8);
  });

  test('bisect for A lo=4 hi=8', () {
    expect(() => bisect(A, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=4 hi=8', () {
    expect(() => bisect(B, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=4 hi=8', () {
    expect(() => bisect(C, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=4 hi=8', () {
    expect(() => bisect(D, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=4 hi=8', () {
    expect(bisect(E, -2, lo: 4, hi: 8), 4);
    expect(bisect(E, -1, lo: 4, hi: 8), 4);
    expect(bisect(E, 0, lo: 4, hi: 8), 4);
    expect(bisect(E, 1, lo: 4, hi: 8), 4);
    expect(bisect(E, 2, lo: 4, hi: 8), 6);
    expect(bisect(E, 3, lo: 4, hi: 8), 8);
    expect(bisect(E, 4, lo: 4, hi: 8), 8);
    expect(bisect(E, 5, lo: 4, hi: 8), 8);
    expect(bisect(E, 6, lo: 4, hi: 8), 8);
    expect(bisect(E, 7, lo: 4, hi: 8), 8);
    expect(bisect(E, 8, lo: 4, hi: 8), 8);
  });

  test('bisect for A lo=5 hi=8', () {
    expect(() => bisect(A, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=5 hi=8', () {
    expect(() => bisect(B, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=5 hi=8', () {
    expect(() => bisect(C, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=5 hi=8', () {
    expect(() => bisect(D, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=5 hi=8', () {
    expect(bisect(E, -2, lo: 5, hi: 8), 5);
    expect(bisect(E, -1, lo: 5, hi: 8), 5);
    expect(bisect(E, 0, lo: 5, hi: 8), 5);
    expect(bisect(E, 1, lo: 5, hi: 8), 5);
    expect(bisect(E, 2, lo: 5, hi: 8), 6);
    expect(bisect(E, 3, lo: 5, hi: 8), 8);
    expect(bisect(E, 4, lo: 5, hi: 8), 8);
    expect(bisect(E, 5, lo: 5, hi: 8), 8);
    expect(bisect(E, 6, lo: 5, hi: 8), 8);
    expect(bisect(E, 7, lo: 5, hi: 8), 8);
    expect(bisect(E, 8, lo: 5, hi: 8), 8);
  });

  test('bisect for A lo=6 hi=8', () {
    expect(() => bisect(A, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=6 hi=8', () {
    expect(() => bisect(B, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=6 hi=8', () {
    expect(() => bisect(C, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=6 hi=8', () {
    expect(() => bisect(D, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=6 hi=8', () {
    expect(bisect(E, -2, lo: 6, hi: 8), 6);
    expect(bisect(E, -1, lo: 6, hi: 8), 6);
    expect(bisect(E, 0, lo: 6, hi: 8), 6);
    expect(bisect(E, 1, lo: 6, hi: 8), 6);
    expect(bisect(E, 2, lo: 6, hi: 8), 6);
    expect(bisect(E, 3, lo: 6, hi: 8), 8);
    expect(bisect(E, 4, lo: 6, hi: 8), 8);
    expect(bisect(E, 5, lo: 6, hi: 8), 8);
    expect(bisect(E, 6, lo: 6, hi: 8), 8);
    expect(bisect(E, 7, lo: 6, hi: 8), 8);
    expect(bisect(E, 8, lo: 6, hi: 8), 8);
  });

  test('bisect for A lo=7 hi=8', () {
    expect(() => bisect(A, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(A, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect for B lo=7 hi=8', () {
    expect(() => bisect(B, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(B, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect for C lo=7 hi=8', () {
    expect(() => bisect(C, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(C, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect for D lo=7 hi=8', () {
    expect(() => bisect(D, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => bisect(D, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('bisect for E lo=7 hi=8', () {
    expect(bisect(E, -2, lo: 7, hi: 8), 7);
    expect(bisect(E, -1, lo: 7, hi: 8), 7);
    expect(bisect(E, 0, lo: 7, hi: 8), 7);
    expect(bisect(E, 1, lo: 7, hi: 8), 7);
    expect(bisect(E, 2, lo: 7, hi: 8), 7);
    expect(bisect(E, 3, lo: 7, hi: 8), 8);
    expect(bisect(E, 4, lo: 7, hi: 8), 8);
    expect(bisect(E, 5, lo: 7, hi: 8), 8);
    expect(bisect(E, 6, lo: 7, hi: 8), 8);
    expect(bisect(E, 7, lo: 7, hi: 8), 8);
    expect(bisect(E, 8, lo: 7, hi: 8), 8);
  });

  test('bisect for A lo=8 hi=8', () {
    expect(bisect(A, -2, lo: 8, hi: 8), 8);
    expect(bisect(A, -1, lo: 8, hi: 8), 8);
    expect(bisect(A, 0, lo: 8, hi: 8), 8);
    expect(bisect(A, 1, lo: 8, hi: 8), 8);
    expect(bisect(A, 2, lo: 8, hi: 8), 8);
    expect(bisect(A, 3, lo: 8, hi: 8), 8);
    expect(bisect(A, 4, lo: 8, hi: 8), 8);
    expect(bisect(A, 5, lo: 8, hi: 8), 8);
    expect(bisect(A, 6, lo: 8, hi: 8), 8);
    expect(bisect(A, 7, lo: 8, hi: 8), 8);
    expect(bisect(A, 8, lo: 8, hi: 8), 8);
  });

  test('bisect for B lo=8 hi=8', () {
    expect(bisect(B, -2, lo: 8, hi: 8), 8);
    expect(bisect(B, -1, lo: 8, hi: 8), 8);
    expect(bisect(B, 0, lo: 8, hi: 8), 8);
    expect(bisect(B, 1, lo: 8, hi: 8), 8);
    expect(bisect(B, 2, lo: 8, hi: 8), 8);
    expect(bisect(B, 3, lo: 8, hi: 8), 8);
    expect(bisect(B, 4, lo: 8, hi: 8), 8);
    expect(bisect(B, 5, lo: 8, hi: 8), 8);
    expect(bisect(B, 6, lo: 8, hi: 8), 8);
    expect(bisect(B, 7, lo: 8, hi: 8), 8);
    expect(bisect(B, 8, lo: 8, hi: 8), 8);
  });

  test('bisect for C lo=8 hi=8', () {
    expect(bisect(C, -2, lo: 8, hi: 8), 8);
    expect(bisect(C, -1, lo: 8, hi: 8), 8);
    expect(bisect(C, 0, lo: 8, hi: 8), 8);
    expect(bisect(C, 1, lo: 8, hi: 8), 8);
    expect(bisect(C, 2, lo: 8, hi: 8), 8);
    expect(bisect(C, 3, lo: 8, hi: 8), 8);
    expect(bisect(C, 4, lo: 8, hi: 8), 8);
    expect(bisect(C, 5, lo: 8, hi: 8), 8);
    expect(bisect(C, 6, lo: 8, hi: 8), 8);
    expect(bisect(C, 7, lo: 8, hi: 8), 8);
    expect(bisect(C, 8, lo: 8, hi: 8), 8);
  });

  test('bisect for D lo=8 hi=8', () {
    expect(bisect(D, -2, lo: 8, hi: 8), 8);
    expect(bisect(D, -1, lo: 8, hi: 8), 8);
    expect(bisect(D, 0, lo: 8, hi: 8), 8);
    expect(bisect(D, 1, lo: 8, hi: 8), 8);
    expect(bisect(D, 2, lo: 8, hi: 8), 8);
    expect(bisect(D, 3, lo: 8, hi: 8), 8);
    expect(bisect(D, 4, lo: 8, hi: 8), 8);
    expect(bisect(D, 5, lo: 8, hi: 8), 8);
    expect(bisect(D, 6, lo: 8, hi: 8), 8);
    expect(bisect(D, 7, lo: 8, hi: 8), 8);
    expect(bisect(D, 8, lo: 8, hi: 8), 8);
  });

  test('bisect for E lo=8 hi=8', () {
    expect(bisect(E, -2, lo: 8, hi: 8), 8);
    expect(bisect(E, -1, lo: 8, hi: 8), 8);
    expect(bisect(E, 0, lo: 8, hi: 8), 8);
    expect(bisect(E, 1, lo: 8, hi: 8), 8);
    expect(bisect(E, 2, lo: 8, hi: 8), 8);
    expect(bisect(E, 3, lo: 8, hi: 8), 8);
    expect(bisect(E, 4, lo: 8, hi: 8), 8);
    expect(bisect(E, 5, lo: 8, hi: 8), 8);
    expect(bisect(E, 6, lo: 8, hi: 8), 8);
    expect(bisect(E, 7, lo: 8, hi: 8), 8);
    expect(bisect(E, 8, lo: 8, hi: 8), 8);
  });

  test('bisect for A lo=9 hi=8', () {
    expect(bisect(A, -2, lo: 9, hi: 8), 9);
    expect(bisect(A, -1, lo: 9, hi: 8), 9);
    expect(bisect(A, 0, lo: 9, hi: 8), 9);
    expect(bisect(A, 1, lo: 9, hi: 8), 9);
    expect(bisect(A, 2, lo: 9, hi: 8), 9);
    expect(bisect(A, 3, lo: 9, hi: 8), 9);
    expect(bisect(A, 4, lo: 9, hi: 8), 9);
    expect(bisect(A, 5, lo: 9, hi: 8), 9);
    expect(bisect(A, 6, lo: 9, hi: 8), 9);
    expect(bisect(A, 7, lo: 9, hi: 8), 9);
    expect(bisect(A, 8, lo: 9, hi: 8), 9);
  });

  test('bisect for B lo=9 hi=8', () {
    expect(bisect(B, -2, lo: 9, hi: 8), 9);
    expect(bisect(B, -1, lo: 9, hi: 8), 9);
    expect(bisect(B, 0, lo: 9, hi: 8), 9);
    expect(bisect(B, 1, lo: 9, hi: 8), 9);
    expect(bisect(B, 2, lo: 9, hi: 8), 9);
    expect(bisect(B, 3, lo: 9, hi: 8), 9);
    expect(bisect(B, 4, lo: 9, hi: 8), 9);
    expect(bisect(B, 5, lo: 9, hi: 8), 9);
    expect(bisect(B, 6, lo: 9, hi: 8), 9);
    expect(bisect(B, 7, lo: 9, hi: 8), 9);
    expect(bisect(B, 8, lo: 9, hi: 8), 9);
  });

  test('bisect for C lo=9 hi=8', () {
    expect(bisect(C, -2, lo: 9, hi: 8), 9);
    expect(bisect(C, -1, lo: 9, hi: 8), 9);
    expect(bisect(C, 0, lo: 9, hi: 8), 9);
    expect(bisect(C, 1, lo: 9, hi: 8), 9);
    expect(bisect(C, 2, lo: 9, hi: 8), 9);
    expect(bisect(C, 3, lo: 9, hi: 8), 9);
    expect(bisect(C, 4, lo: 9, hi: 8), 9);
    expect(bisect(C, 5, lo: 9, hi: 8), 9);
    expect(bisect(C, 6, lo: 9, hi: 8), 9);
    expect(bisect(C, 7, lo: 9, hi: 8), 9);
    expect(bisect(C, 8, lo: 9, hi: 8), 9);
  });

  test('bisect for D lo=9 hi=8', () {
    expect(bisect(D, -2, lo: 9, hi: 8), 9);
    expect(bisect(D, -1, lo: 9, hi: 8), 9);
    expect(bisect(D, 0, lo: 9, hi: 8), 9);
    expect(bisect(D, 1, lo: 9, hi: 8), 9);
    expect(bisect(D, 2, lo: 9, hi: 8), 9);
    expect(bisect(D, 3, lo: 9, hi: 8), 9);
    expect(bisect(D, 4, lo: 9, hi: 8), 9);
    expect(bisect(D, 5, lo: 9, hi: 8), 9);
    expect(bisect(D, 6, lo: 9, hi: 8), 9);
    expect(bisect(D, 7, lo: 9, hi: 8), 9);
    expect(bisect(D, 8, lo: 9, hi: 8), 9);
  });

  test('bisect for E lo=9 hi=8', () {
    expect(bisect(E, -2, lo: 9, hi: 8), 9);
    expect(bisect(E, -1, lo: 9, hi: 8), 9);
    expect(bisect(E, 0, lo: 9, hi: 8), 9);
    expect(bisect(E, 1, lo: 9, hi: 8), 9);
    expect(bisect(E, 2, lo: 9, hi: 8), 9);
    expect(bisect(E, 3, lo: 9, hi: 8), 9);
    expect(bisect(E, 4, lo: 9, hi: 8), 9);
    expect(bisect(E, 5, lo: 9, hi: 8), 9);
    expect(bisect(E, 6, lo: 9, hi: 8), 9);
    expect(bisect(E, 7, lo: 9, hi: 8), 9);
    expect(bisect(E, 8, lo: 9, hi: 8), 9);
  });

  test('bisect for A lo=None hi=9', () {
    expect(() => bisect(A, -2, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=None hi=9', () {
    expect(() => bisect(B, -2, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=None hi=9', () {
    expect(() => bisect(C, -2, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=None hi=9', () {
    expect(() => bisect(D, -2, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=None hi=9', () {
    expect(bisect(E, -2, hi: 9), 0);
    expect(bisect(E, -1, hi: 9), 0);
    expect(bisect(E, 0, hi: 9), 1);
    expect(bisect(E, 1, hi: 9), 2);
    expect(bisect(E, 2, hi: 9), 6);
    expect(bisect(E, 3, hi: 9), 8);
    expect(bisect(E, 4, hi: 9), 8);
    expect(bisect(E, 5, hi: 9), 9);
    expect(bisect(E, 6, hi: 9), 9);
    expect(bisect(E, 7, hi: 9), 9);
    expect(bisect(E, 8, hi: 9), 9);
  });

  test('bisect for A lo=0 hi=9', () {
    expect(() => bisect(A, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=0 hi=9', () {
    expect(() => bisect(B, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=0 hi=9', () {
    expect(() => bisect(C, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=0 hi=9', () {
    expect(() => bisect(D, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=0 hi=9', () {
    expect(bisect(E, -2, lo: 0, hi: 9), 0);
    expect(bisect(E, -1, lo: 0, hi: 9), 0);
    expect(bisect(E, 0, lo: 0, hi: 9), 1);
    expect(bisect(E, 1, lo: 0, hi: 9), 2);
    expect(bisect(E, 2, lo: 0, hi: 9), 6);
    expect(bisect(E, 3, lo: 0, hi: 9), 8);
    expect(bisect(E, 4, lo: 0, hi: 9), 8);
    expect(bisect(E, 5, lo: 0, hi: 9), 9);
    expect(bisect(E, 6, lo: 0, hi: 9), 9);
    expect(bisect(E, 7, lo: 0, hi: 9), 9);
    expect(bisect(E, 8, lo: 0, hi: 9), 9);
  });

  test('bisect for A lo=1 hi=9', () {
    expect(() => bisect(A, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=1 hi=9', () {
    expect(() => bisect(B, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=1 hi=9', () {
    expect(() => bisect(C, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=1 hi=9', () {
    expect(() => bisect(D, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=1 hi=9', () {
    expect(bisect(E, -2, lo: 1, hi: 9), 1);
    expect(bisect(E, -1, lo: 1, hi: 9), 1);
    expect(bisect(E, 0, lo: 1, hi: 9), 1);
    expect(bisect(E, 1, lo: 1, hi: 9), 2);
    expect(bisect(E, 2, lo: 1, hi: 9), 6);
    expect(bisect(E, 3, lo: 1, hi: 9), 8);
    expect(bisect(E, 4, lo: 1, hi: 9), 8);
    expect(bisect(E, 5, lo: 1, hi: 9), 9);
    expect(bisect(E, 6, lo: 1, hi: 9), 9);
    expect(bisect(E, 7, lo: 1, hi: 9), 9);
    expect(bisect(E, 8, lo: 1, hi: 9), 9);
  });

  test('bisect for A lo=2 hi=9', () {
    expect(() => bisect(A, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=2 hi=9', () {
    expect(() => bisect(B, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=2 hi=9', () {
    expect(() => bisect(C, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=2 hi=9', () {
    expect(() => bisect(D, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=2 hi=9', () {
    expect(bisect(E, -2, lo: 2, hi: 9), 2);
    expect(bisect(E, -1, lo: 2, hi: 9), 2);
    expect(bisect(E, 0, lo: 2, hi: 9), 2);
    expect(bisect(E, 1, lo: 2, hi: 9), 2);
    expect(bisect(E, 2, lo: 2, hi: 9), 6);
    expect(bisect(E, 3, lo: 2, hi: 9), 8);
    expect(bisect(E, 4, lo: 2, hi: 9), 8);
    expect(bisect(E, 5, lo: 2, hi: 9), 9);
    expect(bisect(E, 6, lo: 2, hi: 9), 9);
    expect(bisect(E, 7, lo: 2, hi: 9), 9);
    expect(bisect(E, 8, lo: 2, hi: 9), 9);
  });

  test('bisect for A lo=3 hi=9', () {
    expect(() => bisect(A, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=3 hi=9', () {
    expect(() => bisect(B, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=3 hi=9', () {
    expect(() => bisect(C, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=3 hi=9', () {
    expect(() => bisect(D, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=3 hi=9', () {
    expect(bisect(E, -2, lo: 3, hi: 9), 3);
    expect(bisect(E, -1, lo: 3, hi: 9), 3);
    expect(bisect(E, 0, lo: 3, hi: 9), 3);
    expect(bisect(E, 1, lo: 3, hi: 9), 3);
    expect(bisect(E, 2, lo: 3, hi: 9), 6);
    expect(bisect(E, 3, lo: 3, hi: 9), 8);
    expect(bisect(E, 4, lo: 3, hi: 9), 8);
    expect(bisect(E, 5, lo: 3, hi: 9), 9);
    expect(bisect(E, 6, lo: 3, hi: 9), 9);
    expect(bisect(E, 7, lo: 3, hi: 9), 9);
    expect(bisect(E, 8, lo: 3, hi: 9), 9);
  });

  test('bisect for A lo=4 hi=9', () {
    expect(() => bisect(A, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=4 hi=9', () {
    expect(() => bisect(B, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=4 hi=9', () {
    expect(() => bisect(C, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=4 hi=9', () {
    expect(() => bisect(D, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=4 hi=9', () {
    expect(bisect(E, -2, lo: 4, hi: 9), 4);
    expect(bisect(E, -1, lo: 4, hi: 9), 4);
    expect(bisect(E, 0, lo: 4, hi: 9), 4);
    expect(bisect(E, 1, lo: 4, hi: 9), 4);
    expect(bisect(E, 2, lo: 4, hi: 9), 6);
    expect(bisect(E, 3, lo: 4, hi: 9), 8);
    expect(bisect(E, 4, lo: 4, hi: 9), 8);
    expect(bisect(E, 5, lo: 4, hi: 9), 9);
    expect(bisect(E, 6, lo: 4, hi: 9), 9);
    expect(bisect(E, 7, lo: 4, hi: 9), 9);
    expect(bisect(E, 8, lo: 4, hi: 9), 9);
  });

  test('bisect for A lo=5 hi=9', () {
    expect(() => bisect(A, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=5 hi=9', () {
    expect(() => bisect(B, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=5 hi=9', () {
    expect(() => bisect(C, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=5 hi=9', () {
    expect(() => bisect(D, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=5 hi=9', () {
    expect(bisect(E, -2, lo: 5, hi: 9), 5);
    expect(bisect(E, -1, lo: 5, hi: 9), 5);
    expect(bisect(E, 0, lo: 5, hi: 9), 5);
    expect(bisect(E, 1, lo: 5, hi: 9), 5);
    expect(bisect(E, 2, lo: 5, hi: 9), 6);
    expect(bisect(E, 3, lo: 5, hi: 9), 8);
    expect(bisect(E, 4, lo: 5, hi: 9), 8);
    expect(bisect(E, 5, lo: 5, hi: 9), 9);
    expect(bisect(E, 6, lo: 5, hi: 9), 9);
    expect(bisect(E, 7, lo: 5, hi: 9), 9);
    expect(bisect(E, 8, lo: 5, hi: 9), 9);
  });

  test('bisect for A lo=6 hi=9', () {
    expect(() => bisect(A, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=6 hi=9', () {
    expect(() => bisect(B, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=6 hi=9', () {
    expect(() => bisect(C, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=6 hi=9', () {
    expect(() => bisect(D, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=6 hi=9', () {
    expect(bisect(E, -2, lo: 6, hi: 9), 6);
    expect(bisect(E, -1, lo: 6, hi: 9), 6);
    expect(bisect(E, 0, lo: 6, hi: 9), 6);
    expect(bisect(E, 1, lo: 6, hi: 9), 6);
    expect(bisect(E, 2, lo: 6, hi: 9), 6);
    expect(bisect(E, 3, lo: 6, hi: 9), 8);
    expect(bisect(E, 4, lo: 6, hi: 9), 8);
    expect(bisect(E, 5, lo: 6, hi: 9), 9);
    expect(bisect(E, 6, lo: 6, hi: 9), 9);
    expect(bisect(E, 7, lo: 6, hi: 9), 9);
    expect(bisect(E, 8, lo: 6, hi: 9), 9);
  });

  test('bisect for A lo=7 hi=9', () {
    expect(() => bisect(A, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=7 hi=9', () {
    expect(() => bisect(B, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=7 hi=9', () {
    expect(() => bisect(C, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=7 hi=9', () {
    expect(() => bisect(D, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=7 hi=9', () {
    expect(bisect(E, -2, lo: 7, hi: 9), 7);
    expect(bisect(E, -1, lo: 7, hi: 9), 7);
    expect(bisect(E, 0, lo: 7, hi: 9), 7);
    expect(bisect(E, 1, lo: 7, hi: 9), 7);
    expect(bisect(E, 2, lo: 7, hi: 9), 7);
    expect(bisect(E, 3, lo: 7, hi: 9), 8);
    expect(bisect(E, 4, lo: 7, hi: 9), 8);
    expect(bisect(E, 5, lo: 7, hi: 9), 9);
    expect(bisect(E, 6, lo: 7, hi: 9), 9);
    expect(bisect(E, 7, lo: 7, hi: 9), 9);
    expect(bisect(E, 8, lo: 7, hi: 9), 9);
  });

  test('bisect for A lo=8 hi=9', () {
    expect(() => bisect(A, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(A, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect for B lo=8 hi=9', () {
    expect(() => bisect(B, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(B, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect for C lo=8 hi=9', () {
    expect(() => bisect(C, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(C, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect for D lo=8 hi=9', () {
    expect(() => bisect(D, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => bisect(D, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('bisect for E lo=8 hi=9', () {
    expect(bisect(E, -2, lo: 8, hi: 9), 8);
    expect(bisect(E, -1, lo: 8, hi: 9), 8);
    expect(bisect(E, 0, lo: 8, hi: 9), 8);
    expect(bisect(E, 1, lo: 8, hi: 9), 8);
    expect(bisect(E, 2, lo: 8, hi: 9), 8);
    expect(bisect(E, 3, lo: 8, hi: 9), 8);
    expect(bisect(E, 4, lo: 8, hi: 9), 8);
    expect(bisect(E, 5, lo: 8, hi: 9), 9);
    expect(bisect(E, 6, lo: 8, hi: 9), 9);
    expect(bisect(E, 7, lo: 8, hi: 9), 9);
    expect(bisect(E, 8, lo: 8, hi: 9), 9);
  });

  test('bisect for A lo=9 hi=9', () {
    expect(bisect(A, -2, lo: 9, hi: 9), 9);
    expect(bisect(A, -1, lo: 9, hi: 9), 9);
    expect(bisect(A, 0, lo: 9, hi: 9), 9);
    expect(bisect(A, 1, lo: 9, hi: 9), 9);
    expect(bisect(A, 2, lo: 9, hi: 9), 9);
    expect(bisect(A, 3, lo: 9, hi: 9), 9);
    expect(bisect(A, 4, lo: 9, hi: 9), 9);
    expect(bisect(A, 5, lo: 9, hi: 9), 9);
    expect(bisect(A, 6, lo: 9, hi: 9), 9);
    expect(bisect(A, 7, lo: 9, hi: 9), 9);
    expect(bisect(A, 8, lo: 9, hi: 9), 9);
  });

  test('bisect for B lo=9 hi=9', () {
    expect(bisect(B, -2, lo: 9, hi: 9), 9);
    expect(bisect(B, -1, lo: 9, hi: 9), 9);
    expect(bisect(B, 0, lo: 9, hi: 9), 9);
    expect(bisect(B, 1, lo: 9, hi: 9), 9);
    expect(bisect(B, 2, lo: 9, hi: 9), 9);
    expect(bisect(B, 3, lo: 9, hi: 9), 9);
    expect(bisect(B, 4, lo: 9, hi: 9), 9);
    expect(bisect(B, 5, lo: 9, hi: 9), 9);
    expect(bisect(B, 6, lo: 9, hi: 9), 9);
    expect(bisect(B, 7, lo: 9, hi: 9), 9);
    expect(bisect(B, 8, lo: 9, hi: 9), 9);
  });

  test('bisect for C lo=9 hi=9', () {
    expect(bisect(C, -2, lo: 9, hi: 9), 9);
    expect(bisect(C, -1, lo: 9, hi: 9), 9);
    expect(bisect(C, 0, lo: 9, hi: 9), 9);
    expect(bisect(C, 1, lo: 9, hi: 9), 9);
    expect(bisect(C, 2, lo: 9, hi: 9), 9);
    expect(bisect(C, 3, lo: 9, hi: 9), 9);
    expect(bisect(C, 4, lo: 9, hi: 9), 9);
    expect(bisect(C, 5, lo: 9, hi: 9), 9);
    expect(bisect(C, 6, lo: 9, hi: 9), 9);
    expect(bisect(C, 7, lo: 9, hi: 9), 9);
    expect(bisect(C, 8, lo: 9, hi: 9), 9);
  });

  test('bisect for D lo=9 hi=9', () {
    expect(bisect(D, -2, lo: 9, hi: 9), 9);
    expect(bisect(D, -1, lo: 9, hi: 9), 9);
    expect(bisect(D, 0, lo: 9, hi: 9), 9);
    expect(bisect(D, 1, lo: 9, hi: 9), 9);
    expect(bisect(D, 2, lo: 9, hi: 9), 9);
    expect(bisect(D, 3, lo: 9, hi: 9), 9);
    expect(bisect(D, 4, lo: 9, hi: 9), 9);
    expect(bisect(D, 5, lo: 9, hi: 9), 9);
    expect(bisect(D, 6, lo: 9, hi: 9), 9);
    expect(bisect(D, 7, lo: 9, hi: 9), 9);
    expect(bisect(D, 8, lo: 9, hi: 9), 9);
  });

  test('bisect for E lo=9 hi=9', () {
    expect(bisect(E, -2, lo: 9, hi: 9), 9);
    expect(bisect(E, -1, lo: 9, hi: 9), 9);
    expect(bisect(E, 0, lo: 9, hi: 9), 9);
    expect(bisect(E, 1, lo: 9, hi: 9), 9);
    expect(bisect(E, 2, lo: 9, hi: 9), 9);
    expect(bisect(E, 3, lo: 9, hi: 9), 9);
    expect(bisect(E, 4, lo: 9, hi: 9), 9);
    expect(bisect(E, 5, lo: 9, hi: 9), 9);
    expect(bisect(E, 6, lo: 9, hi: 9), 9);
    expect(bisect(E, 7, lo: 9, hi: 9), 9);
    expect(bisect(E, 8, lo: 9, hi: 9), 9);
  });

  test('index for A lo=None hi=None', () {
    expect(() => index(A, -2), throwsArgumentError);
    expect(() => index(A, -1), throwsArgumentError);
    expect(() => index(A, 0), throwsArgumentError);
    expect(() => index(A, 1), throwsArgumentError);
    expect(() => index(A, 2), throwsArgumentError);
    expect(() => index(A, 3), throwsArgumentError);
    expect(() => index(A, 4), throwsArgumentError);
    expect(() => index(A, 5), throwsArgumentError);
    expect(() => index(A, 6), throwsArgumentError);
    expect(() => index(A, 7), throwsArgumentError);
    expect(() => index(A, 8), throwsArgumentError);
  });

  test('index for B lo=None hi=None', () {
    expect(() => index(B, -2), throwsArgumentError);
    expect(() => index(B, -1), throwsArgumentError);
    expect(() => index(B, 0), throwsArgumentError);
    expect(() => index(B, 1), throwsArgumentError);
    expect(() => index(B, 2), throwsArgumentError);
    expect(() => index(B, 3), throwsArgumentError);
    expect(index(B, 4), 0);
    expect(() => index(B, 5), throwsArgumentError);
    expect(() => index(B, 6), throwsArgumentError);
    expect(() => index(B, 7), throwsArgumentError);
    expect(() => index(B, 8), throwsArgumentError);
  });

  test('index for C lo=None hi=None', () {
    expect(() => index(C, -2), throwsArgumentError);
    expect(() => index(C, -1), throwsArgumentError);
    expect(() => index(C, 0), throwsArgumentError);
    expect(() => index(C, 1), throwsArgumentError);
    expect(() => index(C, 2), throwsArgumentError);
    expect(() => index(C, 3), throwsArgumentError);
    expect(index(C, 4), 0);
    expect(index(C, 5), 1);
    expect(() => index(C, 6), throwsArgumentError);
    expect(() => index(C, 7), throwsArgumentError);
    expect(() => index(C, 8), throwsArgumentError);
  });

  test('index for D lo=None hi=None', () {
    expect(() => index(D, -2), throwsArgumentError);
    expect(() => index(D, -1), throwsArgumentError);
    expect(() => index(D, 0), throwsArgumentError);
    expect(() => index(D, 1), throwsArgumentError);
    expect(() => index(D, 2), throwsArgumentError);
    expect(index(D, 3), 0);
    expect(index(D, 4), 1);
    expect(index(D, 5), 2);
    expect(() => index(D, 6), throwsArgumentError);
    expect(() => index(D, 7), throwsArgumentError);
    expect(() => index(D, 8), throwsArgumentError);
  });

  test('index for E lo=None hi=None', () {
    expect(() => index(E, -2), throwsArgumentError);
    expect(() => index(E, -1), throwsArgumentError);
    expect(index(E, 0), 0);
    expect(index(E, 1), 1);
    expect(index(E, 2), 2);
    expect(index(E, 3), 6);
    expect(() => index(E, 4), throwsArgumentError);
    expect(index(E, 5), 8);
    expect(index(E, 6), 9);
    expect(() => index(E, 7), throwsArgumentError);
    expect(() => index(E, 8), throwsArgumentError);
  });

  test('index for A lo=0 hi=None', () {
    expect(() => index(A, -2, lo: 0), throwsArgumentError);
    expect(() => index(A, -1, lo: 0), throwsArgumentError);
    expect(() => index(A, 0, lo: 0), throwsArgumentError);
    expect(() => index(A, 1, lo: 0), throwsArgumentError);
    expect(() => index(A, 2, lo: 0), throwsArgumentError);
    expect(() => index(A, 3, lo: 0), throwsArgumentError);
    expect(() => index(A, 4, lo: 0), throwsArgumentError);
    expect(() => index(A, 5, lo: 0), throwsArgumentError);
    expect(() => index(A, 6, lo: 0), throwsArgumentError);
    expect(() => index(A, 7, lo: 0), throwsArgumentError);
    expect(() => index(A, 8, lo: 0), throwsArgumentError);
  });

  test('index for B lo=0 hi=None', () {
    expect(() => index(B, -2, lo: 0), throwsArgumentError);
    expect(() => index(B, -1, lo: 0), throwsArgumentError);
    expect(() => index(B, 0, lo: 0), throwsArgumentError);
    expect(() => index(B, 1, lo: 0), throwsArgumentError);
    expect(() => index(B, 2, lo: 0), throwsArgumentError);
    expect(() => index(B, 3, lo: 0), throwsArgumentError);
    expect(index(B, 4, lo: 0), 0);
    expect(() => index(B, 5, lo: 0), throwsArgumentError);
    expect(() => index(B, 6, lo: 0), throwsArgumentError);
    expect(() => index(B, 7, lo: 0), throwsArgumentError);
    expect(() => index(B, 8, lo: 0), throwsArgumentError);
  });

  test('index for C lo=0 hi=None', () {
    expect(() => index(C, -2, lo: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 0), throwsArgumentError);
    expect(index(C, 4, lo: 0), 0);
    expect(index(C, 5, lo: 0), 1);
    expect(() => index(C, 6, lo: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 0), throwsArgumentError);
  });

  test('index for D lo=0 hi=None', () {
    expect(() => index(D, -2, lo: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 0), throwsArgumentError);
    expect(index(D, 3, lo: 0), 0);
    expect(index(D, 4, lo: 0), 1);
    expect(index(D, 5, lo: 0), 2);
    expect(() => index(D, 6, lo: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 0), throwsArgumentError);
  });

  test('index for E lo=0 hi=None', () {
    expect(() => index(E, -2, lo: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 0), throwsArgumentError);
    expect(index(E, 0, lo: 0), 0);
    expect(index(E, 1, lo: 0), 1);
    expect(index(E, 2, lo: 0), 2);
    expect(index(E, 3, lo: 0), 6);
    expect(() => index(E, 4, lo: 0), throwsArgumentError);
    expect(index(E, 5, lo: 0), 8);
    expect(index(E, 6, lo: 0), 9);
    expect(() => index(E, 7, lo: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 0), throwsArgumentError);
  });

  test('index for A lo=1 hi=None', () {
    expect(() => index(A, -2, lo: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 1), throwsRangeError);
  });

  test('index for B lo=1 hi=None', () {
    expect(() => index(B, -2, lo: 1), throwsArgumentError);
    expect(() => index(B, -1, lo: 1), throwsArgumentError);
    expect(() => index(B, 0, lo: 1), throwsArgumentError);
    expect(() => index(B, 1, lo: 1), throwsArgumentError);
    expect(() => index(B, 2, lo: 1), throwsArgumentError);
    expect(() => index(B, 3, lo: 1), throwsArgumentError);
    expect(() => index(B, 4, lo: 1), throwsArgumentError);
    expect(() => index(B, 5, lo: 1), throwsArgumentError);
    expect(() => index(B, 6, lo: 1), throwsArgumentError);
    expect(() => index(B, 7, lo: 1), throwsArgumentError);
    expect(() => index(B, 8, lo: 1), throwsArgumentError);
  });

  test('index for C lo=1 hi=None', () {
    expect(() => index(C, -2, lo: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 1), throwsArgumentError);
    expect(() => index(C, 4, lo: 1), throwsArgumentError);
    expect(index(C, 5, lo: 1), 1);
    expect(() => index(C, 6, lo: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 1), throwsArgumentError);
  });

  test('index for D lo=1 hi=None', () {
    expect(() => index(D, -2, lo: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 1), throwsArgumentError);
    expect(index(D, 4, lo: 1), 1);
    expect(index(D, 5, lo: 1), 2);
    expect(() => index(D, 6, lo: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 1), throwsArgumentError);
  });

  test('index for E lo=1 hi=None', () {
    expect(() => index(E, -2, lo: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 1), throwsArgumentError);
    expect(index(E, 1, lo: 1), 1);
    expect(index(E, 2, lo: 1), 2);
    expect(index(E, 3, lo: 1), 6);
    expect(() => index(E, 4, lo: 1), throwsArgumentError);
    expect(index(E, 5, lo: 1), 8);
    expect(index(E, 6, lo: 1), 9);
    expect(() => index(E, 7, lo: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 1), throwsArgumentError);
  });

  test('index for A lo=2 hi=None', () {
    expect(() => index(A, -2, lo: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 2), throwsRangeError);
  });

  test('index for B lo=2 hi=None', () {
    expect(() => index(B, -2, lo: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 2), throwsRangeError);
  });

  test('index for C lo=2 hi=None', () {
    expect(() => index(C, -2, lo: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 2), throwsArgumentError);
    expect(() => index(C, 4, lo: 2), throwsArgumentError);
    expect(() => index(C, 5, lo: 2), throwsArgumentError);
    expect(() => index(C, 6, lo: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 2), throwsArgumentError);
  });

  test('index for D lo=2 hi=None', () {
    expect(() => index(D, -2, lo: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 2), throwsArgumentError);
    expect(() => index(D, 4, lo: 2), throwsArgumentError);
    expect(index(D, 5, lo: 2), 2);
    expect(() => index(D, 6, lo: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 2), throwsArgumentError);
  });

  test('index for E lo=2 hi=None', () {
    expect(() => index(E, -2, lo: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 2), throwsArgumentError);
    expect(index(E, 2, lo: 2), 2);
    expect(index(E, 3, lo: 2), 6);
    expect(() => index(E, 4, lo: 2), throwsArgumentError);
    expect(index(E, 5, lo: 2), 8);
    expect(index(E, 6, lo: 2), 9);
    expect(() => index(E, 7, lo: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 2), throwsArgumentError);
  });

  test('index for A lo=3 hi=None', () {
    expect(() => index(A, -2, lo: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 3), throwsRangeError);
  });

  test('index for B lo=3 hi=None', () {
    expect(() => index(B, -2, lo: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 3), throwsRangeError);
  });

  test('index for C lo=3 hi=None', () {
    expect(() => index(C, -2, lo: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 3), throwsRangeError);
  });

  test('index for D lo=3 hi=None', () {
    expect(() => index(D, -2, lo: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 3), throwsArgumentError);
    expect(() => index(D, 4, lo: 3), throwsArgumentError);
    expect(() => index(D, 5, lo: 3), throwsArgumentError);
    expect(() => index(D, 6, lo: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 3), throwsArgumentError);
  });

  test('index for E lo=3 hi=None', () {
    expect(() => index(E, -2, lo: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 3), throwsArgumentError);
    expect(index(E, 2, lo: 3), 3);
    expect(index(E, 3, lo: 3), 6);
    expect(() => index(E, 4, lo: 3), throwsArgumentError);
    expect(index(E, 5, lo: 3), 8);
    expect(index(E, 6, lo: 3), 9);
    expect(() => index(E, 7, lo: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 3), throwsArgumentError);
  });

  test('index for A lo=4 hi=None', () {
    expect(() => index(A, -2, lo: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 4), throwsRangeError);
  });

  test('index for B lo=4 hi=None', () {
    expect(() => index(B, -2, lo: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 4), throwsRangeError);
  });

  test('index for C lo=4 hi=None', () {
    expect(() => index(C, -2, lo: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 4), throwsRangeError);
  });

  test('index for D lo=4 hi=None', () {
    expect(() => index(D, -2, lo: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 4), throwsRangeError);
  });

  test('index for E lo=4 hi=None', () {
    expect(() => index(E, -2, lo: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 4), throwsArgumentError);
    expect(index(E, 2, lo: 4), 4);
    expect(index(E, 3, lo: 4), 6);
    expect(() => index(E, 4, lo: 4), throwsArgumentError);
    expect(index(E, 5, lo: 4), 8);
    expect(index(E, 6, lo: 4), 9);
    expect(() => index(E, 7, lo: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 4), throwsArgumentError);
  });

  test('index for A lo=5 hi=None', () {
    expect(() => index(A, -2, lo: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 5), throwsRangeError);
  });

  test('index for B lo=5 hi=None', () {
    expect(() => index(B, -2, lo: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 5), throwsRangeError);
  });

  test('index for C lo=5 hi=None', () {
    expect(() => index(C, -2, lo: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 5), throwsRangeError);
  });

  test('index for D lo=5 hi=None', () {
    expect(() => index(D, -2, lo: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 5), throwsRangeError);
  });

  test('index for E lo=5 hi=None', () {
    expect(() => index(E, -2, lo: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 5), throwsArgumentError);
    expect(index(E, 2, lo: 5), 5);
    expect(index(E, 3, lo: 5), 6);
    expect(() => index(E, 4, lo: 5), throwsArgumentError);
    expect(index(E, 5, lo: 5), 8);
    expect(index(E, 6, lo: 5), 9);
    expect(() => index(E, 7, lo: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 5), throwsArgumentError);
  });

  test('index for A lo=6 hi=None', () {
    expect(() => index(A, -2, lo: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 6), throwsRangeError);
  });

  test('index for B lo=6 hi=None', () {
    expect(() => index(B, -2, lo: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 6), throwsRangeError);
  });

  test('index for C lo=6 hi=None', () {
    expect(() => index(C, -2, lo: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 6), throwsRangeError);
  });

  test('index for D lo=6 hi=None', () {
    expect(() => index(D, -2, lo: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 6), throwsRangeError);
  });

  test('index for E lo=6 hi=None', () {
    expect(() => index(E, -2, lo: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 6), throwsArgumentError);
    expect(index(E, 3, lo: 6), 6);
    expect(() => index(E, 4, lo: 6), throwsArgumentError);
    expect(index(E, 5, lo: 6), 8);
    expect(index(E, 6, lo: 6), 9);
    expect(() => index(E, 7, lo: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 6), throwsArgumentError);
  });

  test('index for A lo=7 hi=None', () {
    expect(() => index(A, -2, lo: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 7), throwsRangeError);
  });

  test('index for B lo=7 hi=None', () {
    expect(() => index(B, -2, lo: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 7), throwsRangeError);
  });

  test('index for C lo=7 hi=None', () {
    expect(() => index(C, -2, lo: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 7), throwsRangeError);
  });

  test('index for D lo=7 hi=None', () {
    expect(() => index(D, -2, lo: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 7), throwsRangeError);
  });

  test('index for E lo=7 hi=None', () {
    expect(() => index(E, -2, lo: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 7), throwsArgumentError);
    expect(index(E, 3, lo: 7), 7);
    expect(() => index(E, 4, lo: 7), throwsArgumentError);
    expect(index(E, 5, lo: 7), 8);
    expect(index(E, 6, lo: 7), 9);
    expect(() => index(E, 7, lo: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 7), throwsArgumentError);
  });

  test('index for A lo=8 hi=None', () {
    expect(() => index(A, -2, lo: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 8), throwsRangeError);
  });

  test('index for B lo=8 hi=None', () {
    expect(() => index(B, -2, lo: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 8), throwsRangeError);
  });

  test('index for C lo=8 hi=None', () {
    expect(() => index(C, -2, lo: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 8), throwsRangeError);
  });

  test('index for D lo=8 hi=None', () {
    expect(() => index(D, -2, lo: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 8), throwsRangeError);
  });

  test('index for E lo=8 hi=None', () {
    expect(() => index(E, -2, lo: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 8), throwsArgumentError);
    expect(() => index(E, 3, lo: 8), throwsArgumentError);
    expect(() => index(E, 4, lo: 8), throwsArgumentError);
    expect(index(E, 5, lo: 8), 8);
    expect(index(E, 6, lo: 8), 9);
    expect(() => index(E, 7, lo: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 8), throwsArgumentError);
  });

  test('index for A lo=9 hi=None', () {
    expect(() => index(A, -2, lo: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 9), throwsRangeError);
  });

  test('index for B lo=9 hi=None', () {
    expect(() => index(B, -2, lo: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 9), throwsRangeError);
  });

  test('index for C lo=9 hi=None', () {
    expect(() => index(C, -2, lo: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 9), throwsRangeError);
  });

  test('index for D lo=9 hi=None', () {
    expect(() => index(D, -2, lo: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 9), throwsRangeError);
  });

  test('index for E lo=9 hi=None', () {
    expect(() => index(E, -2, lo: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 9), throwsArgumentError);
    expect(() => index(E, 3, lo: 9), throwsArgumentError);
    expect(() => index(E, 4, lo: 9), throwsArgumentError);
    expect(() => index(E, 5, lo: 9), throwsArgumentError);
    expect(index(E, 6, lo: 9), 9);
    expect(() => index(E, 7, lo: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 9), throwsArgumentError);
  });

  test('index for A lo=None hi=0', () {
    expect(() => index(A, -2, hi: 0), throwsArgumentError);
    expect(() => index(A, -1, hi: 0), throwsArgumentError);
    expect(() => index(A, 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 1, hi: 0), throwsArgumentError);
    expect(() => index(A, 2, hi: 0), throwsArgumentError);
    expect(() => index(A, 3, hi: 0), throwsArgumentError);
    expect(() => index(A, 4, hi: 0), throwsArgumentError);
    expect(() => index(A, 5, hi: 0), throwsArgumentError);
    expect(() => index(A, 6, hi: 0), throwsArgumentError);
    expect(() => index(A, 7, hi: 0), throwsArgumentError);
    expect(() => index(A, 8, hi: 0), throwsArgumentError);
  });

  test('index for B lo=None hi=0', () {
    expect(() => index(B, -2, hi: 0), throwsArgumentError);
    expect(() => index(B, -1, hi: 0), throwsArgumentError);
    expect(() => index(B, 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 2, hi: 0), throwsArgumentError);
    expect(() => index(B, 3, hi: 0), throwsArgumentError);
    expect(index(B, 4, hi: 0), 0);
    expect(() => index(B, 5, hi: 0), throwsArgumentError);
    expect(() => index(B, 6, hi: 0), throwsArgumentError);
    expect(() => index(B, 7, hi: 0), throwsArgumentError);
    expect(() => index(B, 8, hi: 0), throwsArgumentError);
  });

  test('index for C lo=None hi=0', () {
    expect(() => index(C, -2, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, hi: 0), throwsArgumentError);
    expect(index(C, 4, hi: 0), 0);
    expect(() => index(C, 5, hi: 0), throwsArgumentError);
    expect(() => index(C, 6, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, hi: 0), throwsArgumentError);
  });

  test('index for D lo=None hi=0', () {
    expect(() => index(D, -2, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, hi: 0), throwsArgumentError);
    expect(index(D, 3, hi: 0), 0);
    expect(() => index(D, 4, hi: 0), throwsArgumentError);
    expect(() => index(D, 5, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, hi: 0), throwsArgumentError);
  });

  test('index for E lo=None hi=0', () {
    expect(() => index(E, -2, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, hi: 0), throwsArgumentError);
    expect(index(E, 0, hi: 0), 0);
    expect(() => index(E, 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, hi: 0), throwsArgumentError);
  });

  test('index for A lo=0 hi=0', () {
    expect(() => index(A, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 4, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 8, lo: 0, hi: 0), throwsArgumentError);
  });

  test('index for B lo=0 hi=0', () {
    expect(() => index(B, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(index(B, 4, lo: 0, hi: 0), 0);
    expect(() => index(B, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 8, lo: 0, hi: 0), throwsArgumentError);
  });

  test('index for C lo=0 hi=0', () {
    expect(() => index(C, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 0), 0);
    expect(() => index(C, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 0, hi: 0), throwsArgumentError);
  });

  test('index for D lo=0 hi=0', () {
    expect(() => index(D, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 0), 0);
    expect(() => index(D, 4, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 0), throwsArgumentError);
  });

  test('index for E lo=0 hi=0', () {
    expect(() => index(E, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 0), 0);
    expect(() => index(E, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 0), throwsArgumentError);
  });

  test('index for A lo=1 hi=0', () {
    expect(() => index(A, -2, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 0), throwsRangeError);
  });

  test('index for B lo=1 hi=0', () {
    expect(() => index(B, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 4, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 5, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 8, lo: 1, hi: 0), throwsArgumentError);
  });

  test('index for C lo=1 hi=0', () {
    expect(() => index(C, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 4, lo: 1, hi: 0), throwsArgumentError);
    expect(index(C, 5, lo: 1, hi: 0), 1);
    expect(() => index(C, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 1, hi: 0), throwsArgumentError);
  });

  test('index for D lo=1 hi=0', () {
    expect(() => index(D, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 0), 1);
    expect(() => index(D, 5, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 0), throwsArgumentError);
  });

  test('index for E lo=1 hi=0', () {
    expect(() => index(E, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 0), 1);
    expect(() => index(E, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 0), throwsArgumentError);
  });

  test('index for A lo=2 hi=0', () {
    expect(() => index(A, -2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 0), throwsRangeError);
  });

  test('index for B lo=2 hi=0', () {
    expect(() => index(B, -2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 0), throwsRangeError);
  });

  test('index for C lo=2 hi=0', () {
    expect(() => index(C, -2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 4, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 5, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 6, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 2, hi: 0), throwsArgumentError);
  });

  test('index for D lo=2 hi=0', () {
    expect(() => index(D, -2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 0), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 0), 2);
    expect(() => index(D, 6, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 0), throwsArgumentError);
  });

  test('index for E lo=2 hi=0', () {
    expect(() => index(E, -2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 0), 2);
    expect(() => index(E, 3, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 0), throwsArgumentError);
  });

  test('index for A lo=3 hi=0', () {
    expect(() => index(A, -2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 0), throwsRangeError);
  });

  test('index for B lo=3 hi=0', () {
    expect(() => index(B, -2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 0), throwsRangeError);
  });

  test('index for C lo=3 hi=0', () {
    expect(() => index(C, -2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 0), throwsRangeError);
  });

  test('index for D lo=3 hi=0', () {
    expect(() => index(D, -2, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 0), throwsArgumentError);
  });

  test('index for E lo=3 hi=0', () {
    expect(() => index(E, -2, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 0), 3);
    expect(() => index(E, 3, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 0), throwsArgumentError);
  });

  test('index for A lo=4 hi=0', () {
    expect(() => index(A, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 0), throwsRangeError);
  });

  test('index for B lo=4 hi=0', () {
    expect(() => index(B, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 0), throwsRangeError);
  });

  test('index for C lo=4 hi=0', () {
    expect(() => index(C, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 0), throwsRangeError);
  });

  test('index for D lo=4 hi=0', () {
    expect(() => index(D, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 0), throwsRangeError);
  });

  test('index for E lo=4 hi=0', () {
    expect(() => index(E, -2, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 0), 4);
    expect(() => index(E, 3, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 0), throwsArgumentError);
  });

  test('index for A lo=5 hi=0', () {
    expect(() => index(A, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 0), throwsRangeError);
  });

  test('index for B lo=5 hi=0', () {
    expect(() => index(B, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 0), throwsRangeError);
  });

  test('index for C lo=5 hi=0', () {
    expect(() => index(C, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 0), throwsRangeError);
  });

  test('index for D lo=5 hi=0', () {
    expect(() => index(D, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 0), throwsRangeError);
  });

  test('index for E lo=5 hi=0', () {
    expect(() => index(E, -2, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 0), 5);
    expect(() => index(E, 3, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 0), throwsArgumentError);
  });

  test('index for A lo=6 hi=0', () {
    expect(() => index(A, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 0), throwsRangeError);
  });

  test('index for B lo=6 hi=0', () {
    expect(() => index(B, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 0), throwsRangeError);
  });

  test('index for C lo=6 hi=0', () {
    expect(() => index(C, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 0), throwsRangeError);
  });

  test('index for D lo=6 hi=0', () {
    expect(() => index(D, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 0), throwsRangeError);
  });

  test('index for E lo=6 hi=0', () {
    expect(() => index(E, -2, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 0), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 0), 6);
    expect(() => index(E, 4, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 0), throwsArgumentError);
  });

  test('index for A lo=7 hi=0', () {
    expect(() => index(A, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 0), throwsRangeError);
  });

  test('index for B lo=7 hi=0', () {
    expect(() => index(B, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 0), throwsRangeError);
  });

  test('index for C lo=7 hi=0', () {
    expect(() => index(C, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 0), throwsRangeError);
  });

  test('index for D lo=7 hi=0', () {
    expect(() => index(D, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 0), throwsRangeError);
  });

  test('index for E lo=7 hi=0', () {
    expect(() => index(E, -2, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 0), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 0), 7);
    expect(() => index(E, 4, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 0), throwsArgumentError);
  });

  test('index for A lo=8 hi=0', () {
    expect(() => index(A, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 0), throwsRangeError);
  });

  test('index for B lo=8 hi=0', () {
    expect(() => index(B, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 0), throwsRangeError);
  });

  test('index for C lo=8 hi=0', () {
    expect(() => index(C, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 0), throwsRangeError);
  });

  test('index for D lo=8 hi=0', () {
    expect(() => index(D, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 0), throwsRangeError);
  });

  test('index for E lo=8 hi=0', () {
    expect(() => index(E, -2, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 0), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 0), 8);
    expect(() => index(E, 6, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 0), throwsArgumentError);
  });

  test('index for A lo=9 hi=0', () {
    expect(() => index(A, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 0), throwsRangeError);
  });

  test('index for B lo=9 hi=0', () {
    expect(() => index(B, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 0), throwsRangeError);
  });

  test('index for C lo=9 hi=0', () {
    expect(() => index(C, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 0), throwsRangeError);
  });

  test('index for D lo=9 hi=0', () {
    expect(() => index(D, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 0), throwsRangeError);
  });

  test('index for E lo=9 hi=0', () {
    expect(() => index(E, -2, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 0), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 0), 9);
    expect(() => index(E, 7, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 0), throwsArgumentError);
  });

  test('index for A lo=None hi=1', () {
    expect(() => index(A, -2, hi: 1), throwsRangeError);
    expect(() => index(A, -1, hi: 1), throwsRangeError);
    expect(() => index(A, 0, hi: 1), throwsRangeError);
    expect(() => index(A, 1, hi: 1), throwsRangeError);
    expect(() => index(A, 2, hi: 1), throwsRangeError);
    expect(() => index(A, 3, hi: 1), throwsRangeError);
    expect(() => index(A, 4, hi: 1), throwsRangeError);
    expect(() => index(A, 5, hi: 1), throwsRangeError);
    expect(() => index(A, 6, hi: 1), throwsRangeError);
    expect(() => index(A, 7, hi: 1), throwsRangeError);
    expect(() => index(A, 8, hi: 1), throwsRangeError);
  });

  test('index for B lo=None hi=1', () {
    expect(() => index(B, -2, hi: 1), throwsArgumentError);
    expect(() => index(B, -1, hi: 1), throwsArgumentError);
    expect(() => index(B, 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 2, hi: 1), throwsArgumentError);
    expect(() => index(B, 3, hi: 1), throwsArgumentError);
    expect(index(B, 4, hi: 1), 0);
    expect(() => index(B, 5, hi: 1), throwsArgumentError);
    expect(() => index(B, 6, hi: 1), throwsArgumentError);
    expect(() => index(B, 7, hi: 1), throwsArgumentError);
    expect(() => index(B, 8, hi: 1), throwsArgumentError);
  });

  test('index for C lo=None hi=1', () {
    expect(() => index(C, -2, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, hi: 1), throwsArgumentError);
    expect(index(C, 4, hi: 1), 0);
    expect(index(C, 5, hi: 1), 1);
    expect(() => index(C, 6, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, hi: 1), throwsArgumentError);
  });

  test('index for D lo=None hi=1', () {
    expect(() => index(D, -2, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, hi: 1), throwsArgumentError);
    expect(index(D, 3, hi: 1), 0);
    expect(index(D, 4, hi: 1), 1);
    expect(() => index(D, 5, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, hi: 1), throwsArgumentError);
  });

  test('index for E lo=None hi=1', () {
    expect(() => index(E, -2, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, hi: 1), throwsArgumentError);
    expect(index(E, 0, hi: 1), 0);
    expect(index(E, 1, hi: 1), 1);
    expect(() => index(E, 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, hi: 1), throwsArgumentError);
  });

  test('index for A lo=0 hi=1', () {
    expect(() => index(A, -2, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 1), throwsRangeError);
  });

  test('index for B lo=0 hi=1', () {
    expect(() => index(B, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 0, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 3, lo: 0, hi: 1), throwsArgumentError);
    expect(index(B, 4, lo: 0, hi: 1), 0);
    expect(() => index(B, 5, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 8, lo: 0, hi: 1), throwsArgumentError);
  });

  test('index for C lo=0 hi=1', () {
    expect(() => index(C, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 1), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 1), 0);
    expect(index(C, 5, lo: 0, hi: 1), 1);
    expect(() => index(C, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 0, hi: 1), throwsArgumentError);
  });

  test('index for D lo=0 hi=1', () {
    expect(() => index(D, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 1), 0);
    expect(index(D, 4, lo: 0, hi: 1), 1);
    expect(() => index(D, 5, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 1), throwsArgumentError);
  });

  test('index for E lo=0 hi=1', () {
    expect(() => index(E, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 1), 0);
    expect(index(E, 1, lo: 0, hi: 1), 1);
    expect(() => index(E, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 1), throwsArgumentError);
  });

  test('index for A lo=1 hi=1', () {
    expect(() => index(A, -2, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 1), throwsRangeError);
  });

  test('index for B lo=1 hi=1', () {
    expect(() => index(B, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 4, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 5, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 8, lo: 1, hi: 1), throwsArgumentError);
  });

  test('index for C lo=1 hi=1', () {
    expect(() => index(C, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 4, lo: 1, hi: 1), throwsArgumentError);
    expect(index(C, 5, lo: 1, hi: 1), 1);
    expect(() => index(C, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 1, hi: 1), throwsArgumentError);
  });

  test('index for D lo=1 hi=1', () {
    expect(() => index(D, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 1), 1);
    expect(() => index(D, 5, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 1), throwsArgumentError);
  });

  test('index for E lo=1 hi=1', () {
    expect(() => index(E, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 1), 1);
    expect(() => index(E, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 1), throwsArgumentError);
  });

  test('index for A lo=2 hi=1', () {
    expect(() => index(A, -2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 1), throwsRangeError);
  });

  test('index for B lo=2 hi=1', () {
    expect(() => index(B, -2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 1), throwsRangeError);
  });

  test('index for C lo=2 hi=1', () {
    expect(() => index(C, -2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 4, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 5, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 6, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 2, hi: 1), throwsArgumentError);
  });

  test('index for D lo=2 hi=1', () {
    expect(() => index(D, -2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 1), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 1), 2);
    expect(() => index(D, 6, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 1), throwsArgumentError);
  });

  test('index for E lo=2 hi=1', () {
    expect(() => index(E, -2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 1), 2);
    expect(() => index(E, 3, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 1), throwsArgumentError);
  });

  test('index for A lo=3 hi=1', () {
    expect(() => index(A, -2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 1), throwsRangeError);
  });

  test('index for B lo=3 hi=1', () {
    expect(() => index(B, -2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 1), throwsRangeError);
  });

  test('index for C lo=3 hi=1', () {
    expect(() => index(C, -2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 1), throwsRangeError);
  });

  test('index for D lo=3 hi=1', () {
    expect(() => index(D, -2, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 1), throwsArgumentError);
  });

  test('index for E lo=3 hi=1', () {
    expect(() => index(E, -2, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 1), 3);
    expect(() => index(E, 3, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 1), throwsArgumentError);
  });

  test('index for A lo=4 hi=1', () {
    expect(() => index(A, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 1), throwsRangeError);
  });

  test('index for B lo=4 hi=1', () {
    expect(() => index(B, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 1), throwsRangeError);
  });

  test('index for C lo=4 hi=1', () {
    expect(() => index(C, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 1), throwsRangeError);
  });

  test('index for D lo=4 hi=1', () {
    expect(() => index(D, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 1), throwsRangeError);
  });

  test('index for E lo=4 hi=1', () {
    expect(() => index(E, -2, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 1), 4);
    expect(() => index(E, 3, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 1), throwsArgumentError);
  });

  test('index for A lo=5 hi=1', () {
    expect(() => index(A, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 1), throwsRangeError);
  });

  test('index for B lo=5 hi=1', () {
    expect(() => index(B, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 1), throwsRangeError);
  });

  test('index for C lo=5 hi=1', () {
    expect(() => index(C, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 1), throwsRangeError);
  });

  test('index for D lo=5 hi=1', () {
    expect(() => index(D, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 1), throwsRangeError);
  });

  test('index for E lo=5 hi=1', () {
    expect(() => index(E, -2, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 1), 5);
    expect(() => index(E, 3, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 1), throwsArgumentError);
  });

  test('index for A lo=6 hi=1', () {
    expect(() => index(A, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 1), throwsRangeError);
  });

  test('index for B lo=6 hi=1', () {
    expect(() => index(B, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 1), throwsRangeError);
  });

  test('index for C lo=6 hi=1', () {
    expect(() => index(C, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 1), throwsRangeError);
  });

  test('index for D lo=6 hi=1', () {
    expect(() => index(D, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 1), throwsRangeError);
  });

  test('index for E lo=6 hi=1', () {
    expect(() => index(E, -2, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 1), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 1), 6);
    expect(() => index(E, 4, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 1), throwsArgumentError);
  });

  test('index for A lo=7 hi=1', () {
    expect(() => index(A, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 1), throwsRangeError);
  });

  test('index for B lo=7 hi=1', () {
    expect(() => index(B, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 1), throwsRangeError);
  });

  test('index for C lo=7 hi=1', () {
    expect(() => index(C, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 1), throwsRangeError);
  });

  test('index for D lo=7 hi=1', () {
    expect(() => index(D, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 1), throwsRangeError);
  });

  test('index for E lo=7 hi=1', () {
    expect(() => index(E, -2, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 1), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 1), 7);
    expect(() => index(E, 4, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 1), throwsArgumentError);
  });

  test('index for A lo=8 hi=1', () {
    expect(() => index(A, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 1), throwsRangeError);
  });

  test('index for B lo=8 hi=1', () {
    expect(() => index(B, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 1), throwsRangeError);
  });

  test('index for C lo=8 hi=1', () {
    expect(() => index(C, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 1), throwsRangeError);
  });

  test('index for D lo=8 hi=1', () {
    expect(() => index(D, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 1), throwsRangeError);
  });

  test('index for E lo=8 hi=1', () {
    expect(() => index(E, -2, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 1), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 1), 8);
    expect(() => index(E, 6, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 1), throwsArgumentError);
  });

  test('index for A lo=9 hi=1', () {
    expect(() => index(A, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 1), throwsRangeError);
  });

  test('index for B lo=9 hi=1', () {
    expect(() => index(B, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 1), throwsRangeError);
  });

  test('index for C lo=9 hi=1', () {
    expect(() => index(C, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 1), throwsRangeError);
  });

  test('index for D lo=9 hi=1', () {
    expect(() => index(D, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 1), throwsRangeError);
  });

  test('index for E lo=9 hi=1', () {
    expect(() => index(E, -2, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 1), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 1), 9);
    expect(() => index(E, 7, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 1), throwsArgumentError);
  });

  test('index for A lo=None hi=2', () {
    expect(() => index(A, -2, hi: 2), throwsRangeError);
    expect(() => index(A, -1, hi: 2), throwsRangeError);
    expect(() => index(A, 0, hi: 2), throwsRangeError);
    expect(() => index(A, 1, hi: 2), throwsRangeError);
    expect(() => index(A, 2, hi: 2), throwsRangeError);
    expect(() => index(A, 3, hi: 2), throwsRangeError);
    expect(() => index(A, 4, hi: 2), throwsRangeError);
    expect(() => index(A, 5, hi: 2), throwsRangeError);
    expect(() => index(A, 6, hi: 2), throwsRangeError);
    expect(() => index(A, 7, hi: 2), throwsRangeError);
    expect(() => index(A, 8, hi: 2), throwsRangeError);
  });

  test('index for B lo=None hi=2', () {
    expect(() => index(B, -2, hi: 2), throwsRangeError);
    expect(() => index(B, -1, hi: 2), throwsRangeError);
    expect(() => index(B, 0, hi: 2), throwsRangeError);
    expect(() => index(B, 1, hi: 2), throwsRangeError);
    expect(() => index(B, 2, hi: 2), throwsRangeError);
    expect(() => index(B, 3, hi: 2), throwsRangeError);
    expect(() => index(B, 4, hi: 2), throwsRangeError);
    expect(() => index(B, 5, hi: 2), throwsRangeError);
    expect(() => index(B, 6, hi: 2), throwsRangeError);
    expect(() => index(B, 7, hi: 2), throwsRangeError);
    expect(() => index(B, 8, hi: 2), throwsRangeError);
  });

  test('index for C lo=None hi=2', () {
    expect(() => index(C, -2, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, hi: 2), throwsArgumentError);
    expect(index(C, 4, hi: 2), 0);
    expect(index(C, 5, hi: 2), 1);
    expect(() => index(C, 6, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, hi: 2), throwsArgumentError);
  });

  test('index for D lo=None hi=2', () {
    expect(() => index(D, -2, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, hi: 2), throwsArgumentError);
    expect(index(D, 3, hi: 2), 0);
    expect(index(D, 4, hi: 2), 1);
    expect(index(D, 5, hi: 2), 2);
    expect(() => index(D, 6, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, hi: 2), throwsArgumentError);
  });

  test('index for E lo=None hi=2', () {
    expect(() => index(E, -2, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, hi: 2), throwsArgumentError);
    expect(index(E, 0, hi: 2), 0);
    expect(index(E, 1, hi: 2), 1);
    expect(index(E, 2, hi: 2), 2);
    expect(() => index(E, 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, hi: 2), throwsArgumentError);
  });

  test('index for A lo=0 hi=2', () {
    expect(() => index(A, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('index for B lo=0 hi=2', () {
    expect(() => index(B, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 2), throwsRangeError);
  });

  test('index for C lo=0 hi=2', () {
    expect(() => index(C, -2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 2), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 2), 0);
    expect(index(C, 5, lo: 0, hi: 2), 1);
    expect(() => index(C, 6, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 0, hi: 2), throwsArgumentError);
  });

  test('index for D lo=0 hi=2', () {
    expect(() => index(D, -2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 2), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 2), 0);
    expect(index(D, 4, lo: 0, hi: 2), 1);
    expect(index(D, 5, lo: 0, hi: 2), 2);
    expect(() => index(D, 6, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 2), throwsArgumentError);
  });

  test('index for E lo=0 hi=2', () {
    expect(() => index(E, -2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 2), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 2), 0);
    expect(index(E, 1, lo: 0, hi: 2), 1);
    expect(index(E, 2, lo: 0, hi: 2), 2);
    expect(() => index(E, 3, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 2), throwsArgumentError);
  });

  test('index for A lo=1 hi=2', () {
    expect(() => index(A, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('index for B lo=1 hi=2', () {
    expect(() => index(B, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 2), throwsRangeError);
  });

  test('index for C lo=1 hi=2', () {
    expect(() => index(C, -2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 4, lo: 1, hi: 2), throwsArgumentError);
    expect(index(C, 5, lo: 1, hi: 2), 1);
    expect(() => index(C, 6, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 1, hi: 2), throwsArgumentError);
  });

  test('index for D lo=1 hi=2', () {
    expect(() => index(D, -2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 2), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 2), 1);
    expect(index(D, 5, lo: 1, hi: 2), 2);
    expect(() => index(D, 6, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 2), throwsArgumentError);
  });

  test('index for E lo=1 hi=2', () {
    expect(() => index(E, -2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 2), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 2), 1);
    expect(index(E, 2, lo: 1, hi: 2), 2);
    expect(() => index(E, 3, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 2), throwsArgumentError);
  });

  test('index for A lo=2 hi=2', () {
    expect(() => index(A, -2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 2), throwsRangeError);
  });

  test('index for B lo=2 hi=2', () {
    expect(() => index(B, -2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 2), throwsRangeError);
  });

  test('index for C lo=2 hi=2', () {
    expect(() => index(C, -2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 4, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 5, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 6, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 2, hi: 2), throwsArgumentError);
  });

  test('index for D lo=2 hi=2', () {
    expect(() => index(D, -2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 2), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 2), 2);
    expect(() => index(D, 6, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 2), throwsArgumentError);
  });

  test('index for E lo=2 hi=2', () {
    expect(() => index(E, -2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 2), 2);
    expect(() => index(E, 3, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 2), throwsArgumentError);
  });

  test('index for A lo=3 hi=2', () {
    expect(() => index(A, -2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 2), throwsRangeError);
  });

  test('index for B lo=3 hi=2', () {
    expect(() => index(B, -2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 2), throwsRangeError);
  });

  test('index for C lo=3 hi=2', () {
    expect(() => index(C, -2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 2), throwsRangeError);
  });

  test('index for D lo=3 hi=2', () {
    expect(() => index(D, -2, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 2), throwsArgumentError);
  });

  test('index for E lo=3 hi=2', () {
    expect(() => index(E, -2, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 2), 3);
    expect(() => index(E, 3, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 2), throwsArgumentError);
  });

  test('index for A lo=4 hi=2', () {
    expect(() => index(A, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 2), throwsRangeError);
  });

  test('index for B lo=4 hi=2', () {
    expect(() => index(B, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 2), throwsRangeError);
  });

  test('index for C lo=4 hi=2', () {
    expect(() => index(C, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 2), throwsRangeError);
  });

  test('index for D lo=4 hi=2', () {
    expect(() => index(D, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 2), throwsRangeError);
  });

  test('index for E lo=4 hi=2', () {
    expect(() => index(E, -2, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 2), 4);
    expect(() => index(E, 3, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 2), throwsArgumentError);
  });

  test('index for A lo=5 hi=2', () {
    expect(() => index(A, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 2), throwsRangeError);
  });

  test('index for B lo=5 hi=2', () {
    expect(() => index(B, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 2), throwsRangeError);
  });

  test('index for C lo=5 hi=2', () {
    expect(() => index(C, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 2), throwsRangeError);
  });

  test('index for D lo=5 hi=2', () {
    expect(() => index(D, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 2), throwsRangeError);
  });

  test('index for E lo=5 hi=2', () {
    expect(() => index(E, -2, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 2), 5);
    expect(() => index(E, 3, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 2), throwsArgumentError);
  });

  test('index for A lo=6 hi=2', () {
    expect(() => index(A, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 2), throwsRangeError);
  });

  test('index for B lo=6 hi=2', () {
    expect(() => index(B, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 2), throwsRangeError);
  });

  test('index for C lo=6 hi=2', () {
    expect(() => index(C, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 2), throwsRangeError);
  });

  test('index for D lo=6 hi=2', () {
    expect(() => index(D, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 2), throwsRangeError);
  });

  test('index for E lo=6 hi=2', () {
    expect(() => index(E, -2, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 2), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 2), 6);
    expect(() => index(E, 4, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 2), throwsArgumentError);
  });

  test('index for A lo=7 hi=2', () {
    expect(() => index(A, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 2), throwsRangeError);
  });

  test('index for B lo=7 hi=2', () {
    expect(() => index(B, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 2), throwsRangeError);
  });

  test('index for C lo=7 hi=2', () {
    expect(() => index(C, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 2), throwsRangeError);
  });

  test('index for D lo=7 hi=2', () {
    expect(() => index(D, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 2), throwsRangeError);
  });

  test('index for E lo=7 hi=2', () {
    expect(() => index(E, -2, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 2), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 2), 7);
    expect(() => index(E, 4, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 2), throwsArgumentError);
  });

  test('index for A lo=8 hi=2', () {
    expect(() => index(A, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 2), throwsRangeError);
  });

  test('index for B lo=8 hi=2', () {
    expect(() => index(B, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 2), throwsRangeError);
  });

  test('index for C lo=8 hi=2', () {
    expect(() => index(C, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 2), throwsRangeError);
  });

  test('index for D lo=8 hi=2', () {
    expect(() => index(D, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 2), throwsRangeError);
  });

  test('index for E lo=8 hi=2', () {
    expect(() => index(E, -2, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 2), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 2), 8);
    expect(() => index(E, 6, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 2), throwsArgumentError);
  });

  test('index for A lo=9 hi=2', () {
    expect(() => index(A, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 2), throwsRangeError);
  });

  test('index for B lo=9 hi=2', () {
    expect(() => index(B, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 2), throwsRangeError);
  });

  test('index for C lo=9 hi=2', () {
    expect(() => index(C, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 2), throwsRangeError);
  });

  test('index for D lo=9 hi=2', () {
    expect(() => index(D, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 2), throwsRangeError);
  });

  test('index for E lo=9 hi=2', () {
    expect(() => index(E, -2, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 2), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 2), 9);
    expect(() => index(E, 7, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 2), throwsArgumentError);
  });

  test('index for A lo=None hi=3', () {
    expect(() => index(A, -2, hi: 3), throwsRangeError);
    expect(() => index(A, -1, hi: 3), throwsRangeError);
    expect(() => index(A, 0, hi: 3), throwsRangeError);
    expect(() => index(A, 1, hi: 3), throwsRangeError);
    expect(() => index(A, 2, hi: 3), throwsRangeError);
    expect(() => index(A, 3, hi: 3), throwsRangeError);
    expect(() => index(A, 4, hi: 3), throwsRangeError);
    expect(() => index(A, 5, hi: 3), throwsRangeError);
    expect(() => index(A, 6, hi: 3), throwsRangeError);
    expect(() => index(A, 7, hi: 3), throwsRangeError);
    expect(() => index(A, 8, hi: 3), throwsRangeError);
  });

  test('index for B lo=None hi=3', () {
    expect(() => index(B, -2, hi: 3), throwsRangeError);
    expect(() => index(B, -1, hi: 3), throwsRangeError);
    expect(() => index(B, 0, hi: 3), throwsRangeError);
    expect(() => index(B, 1, hi: 3), throwsRangeError);
    expect(() => index(B, 2, hi: 3), throwsRangeError);
    expect(() => index(B, 3, hi: 3), throwsRangeError);
    expect(() => index(B, 4, hi: 3), throwsRangeError);
    expect(() => index(B, 5, hi: 3), throwsRangeError);
    expect(() => index(B, 6, hi: 3), throwsRangeError);
    expect(() => index(B, 7, hi: 3), throwsRangeError);
    expect(() => index(B, 8, hi: 3), throwsRangeError);
  });

  test('index for C lo=None hi=3', () {
    expect(() => index(C, -2, hi: 3), throwsArgumentError);
    expect(() => index(C, -1, hi: 3), throwsArgumentError);
    expect(() => index(C, 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 1, hi: 3), throwsArgumentError);
    expect(() => index(C, 2, hi: 3), throwsArgumentError);
    expect(() => index(C, 3, hi: 3), throwsArgumentError);
    expect(index(C, 4, hi: 3), 0);
    expect(index(C, 5, hi: 3), 1);
    expect(() => index(C, 6, hi: 3), throwsRangeError);
    expect(() => index(C, 7, hi: 3), throwsRangeError);
    expect(() => index(C, 8, hi: 3), throwsRangeError);
  });

  test('index for D lo=None hi=3', () {
    expect(() => index(D, -2, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, hi: 3), throwsArgumentError);
    expect(index(D, 3, hi: 3), 0);
    expect(index(D, 4, hi: 3), 1);
    expect(index(D, 5, hi: 3), 2);
    expect(() => index(D, 6, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, hi: 3), throwsArgumentError);
  });

  test('index for E lo=None hi=3', () {
    expect(() => index(E, -2, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, hi: 3), throwsArgumentError);
    expect(index(E, 0, hi: 3), 0);
    expect(index(E, 1, hi: 3), 1);
    expect(index(E, 2, hi: 3), 2);
    expect(() => index(E, 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, hi: 3), throwsArgumentError);
  });

  test('index for A lo=0 hi=3', () {
    expect(() => index(A, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('index for B lo=0 hi=3', () {
    expect(() => index(B, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('index for C lo=0 hi=3', () {
    expect(() => index(C, -2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 3), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 3), 0);
    expect(index(C, 5, lo: 0, hi: 3), 1);
    expect(() => index(C, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 3), throwsRangeError);
  });

  test('index for D lo=0 hi=3', () {
    expect(() => index(D, -2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 3), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 3), 0);
    expect(index(D, 4, lo: 0, hi: 3), 1);
    expect(index(D, 5, lo: 0, hi: 3), 2);
    expect(() => index(D, 6, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 3), throwsArgumentError);
  });

  test('index for E lo=0 hi=3', () {
    expect(() => index(E, -2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 3), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 3), 0);
    expect(index(E, 1, lo: 0, hi: 3), 1);
    expect(index(E, 2, lo: 0, hi: 3), 2);
    expect(() => index(E, 3, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 3), throwsArgumentError);
  });

  test('index for A lo=1 hi=3', () {
    expect(() => index(A, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('index for B lo=1 hi=3', () {
    expect(() => index(B, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('index for C lo=1 hi=3', () {
    expect(() => index(C, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 3), throwsRangeError);
  });

  test('index for D lo=1 hi=3', () {
    expect(() => index(D, -2, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 3), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 3), 1);
    expect(index(D, 5, lo: 1, hi: 3), 2);
    expect(() => index(D, 6, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 3), throwsArgumentError);
  });

  test('index for E lo=1 hi=3', () {
    expect(() => index(E, -2, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 3), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 3), 1);
    expect(index(E, 2, lo: 1, hi: 3), 2);
    expect(() => index(E, 3, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 3), throwsArgumentError);
  });

  test('index for A lo=2 hi=3', () {
    expect(() => index(A, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('index for B lo=2 hi=3', () {
    expect(() => index(B, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('index for C lo=2 hi=3', () {
    expect(() => index(C, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 3), throwsRangeError);
  });

  test('index for D lo=2 hi=3', () {
    expect(() => index(D, -2, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 3), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 3), 2);
    expect(() => index(D, 6, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 3), throwsArgumentError);
  });

  test('index for E lo=2 hi=3', () {
    expect(() => index(E, -2, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 3), 2);
    expect(() => index(E, 3, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 3), throwsArgumentError);
  });

  test('index for A lo=3 hi=3', () {
    expect(() => index(A, -2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 3), throwsRangeError);
  });

  test('index for B lo=3 hi=3', () {
    expect(() => index(B, -2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 3), throwsRangeError);
  });

  test('index for C lo=3 hi=3', () {
    expect(() => index(C, -2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 3), throwsRangeError);
  });

  test('index for D lo=3 hi=3', () {
    expect(() => index(D, -2, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 3), throwsArgumentError);
  });

  test('index for E lo=3 hi=3', () {
    expect(() => index(E, -2, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 3), 3);
    expect(() => index(E, 3, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 3), throwsArgumentError);
  });

  test('index for A lo=4 hi=3', () {
    expect(() => index(A, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 3), throwsRangeError);
  });

  test('index for B lo=4 hi=3', () {
    expect(() => index(B, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 3), throwsRangeError);
  });

  test('index for C lo=4 hi=3', () {
    expect(() => index(C, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 3), throwsRangeError);
  });

  test('index for D lo=4 hi=3', () {
    expect(() => index(D, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 3), throwsRangeError);
  });

  test('index for E lo=4 hi=3', () {
    expect(() => index(E, -2, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 3), 4);
    expect(() => index(E, 3, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 3), throwsArgumentError);
  });

  test('index for A lo=5 hi=3', () {
    expect(() => index(A, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 3), throwsRangeError);
  });

  test('index for B lo=5 hi=3', () {
    expect(() => index(B, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 3), throwsRangeError);
  });

  test('index for C lo=5 hi=3', () {
    expect(() => index(C, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 3), throwsRangeError);
  });

  test('index for D lo=5 hi=3', () {
    expect(() => index(D, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 3), throwsRangeError);
  });

  test('index for E lo=5 hi=3', () {
    expect(() => index(E, -2, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 3), 5);
    expect(() => index(E, 3, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 3), throwsArgumentError);
  });

  test('index for A lo=6 hi=3', () {
    expect(() => index(A, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 3), throwsRangeError);
  });

  test('index for B lo=6 hi=3', () {
    expect(() => index(B, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 3), throwsRangeError);
  });

  test('index for C lo=6 hi=3', () {
    expect(() => index(C, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 3), throwsRangeError);
  });

  test('index for D lo=6 hi=3', () {
    expect(() => index(D, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 3), throwsRangeError);
  });

  test('index for E lo=6 hi=3', () {
    expect(() => index(E, -2, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 3), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 3), 6);
    expect(() => index(E, 4, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 3), throwsArgumentError);
  });

  test('index for A lo=7 hi=3', () {
    expect(() => index(A, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 3), throwsRangeError);
  });

  test('index for B lo=7 hi=3', () {
    expect(() => index(B, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 3), throwsRangeError);
  });

  test('index for C lo=7 hi=3', () {
    expect(() => index(C, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 3), throwsRangeError);
  });

  test('index for D lo=7 hi=3', () {
    expect(() => index(D, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 3), throwsRangeError);
  });

  test('index for E lo=7 hi=3', () {
    expect(() => index(E, -2, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 3), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 3), 7);
    expect(() => index(E, 4, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 3), throwsArgumentError);
  });

  test('index for A lo=8 hi=3', () {
    expect(() => index(A, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 3), throwsRangeError);
  });

  test('index for B lo=8 hi=3', () {
    expect(() => index(B, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 3), throwsRangeError);
  });

  test('index for C lo=8 hi=3', () {
    expect(() => index(C, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 3), throwsRangeError);
  });

  test('index for D lo=8 hi=3', () {
    expect(() => index(D, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 3), throwsRangeError);
  });

  test('index for E lo=8 hi=3', () {
    expect(() => index(E, -2, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 3), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 3), 8);
    expect(() => index(E, 6, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 3), throwsArgumentError);
  });

  test('index for A lo=9 hi=3', () {
    expect(() => index(A, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 3), throwsRangeError);
  });

  test('index for B lo=9 hi=3', () {
    expect(() => index(B, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 3), throwsRangeError);
  });

  test('index for C lo=9 hi=3', () {
    expect(() => index(C, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 3), throwsRangeError);
  });

  test('index for D lo=9 hi=3', () {
    expect(() => index(D, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 3), throwsRangeError);
  });

  test('index for E lo=9 hi=3', () {
    expect(() => index(E, -2, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 3), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 3), 9);
    expect(() => index(E, 7, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 3), throwsArgumentError);
  });

  test('index for A lo=None hi=4', () {
    expect(() => index(A, -2, hi: 4), throwsRangeError);
    expect(() => index(A, -1, hi: 4), throwsRangeError);
    expect(() => index(A, 0, hi: 4), throwsRangeError);
    expect(() => index(A, 1, hi: 4), throwsRangeError);
    expect(() => index(A, 2, hi: 4), throwsRangeError);
    expect(() => index(A, 3, hi: 4), throwsRangeError);
    expect(() => index(A, 4, hi: 4), throwsRangeError);
    expect(() => index(A, 5, hi: 4), throwsRangeError);
    expect(() => index(A, 6, hi: 4), throwsRangeError);
    expect(() => index(A, 7, hi: 4), throwsRangeError);
    expect(() => index(A, 8, hi: 4), throwsRangeError);
  });

  test('index for B lo=None hi=4', () {
    expect(() => index(B, -2, hi: 4), throwsRangeError);
    expect(() => index(B, -1, hi: 4), throwsRangeError);
    expect(() => index(B, 0, hi: 4), throwsRangeError);
    expect(() => index(B, 1, hi: 4), throwsRangeError);
    expect(() => index(B, 2, hi: 4), throwsRangeError);
    expect(() => index(B, 3, hi: 4), throwsRangeError);
    expect(() => index(B, 4, hi: 4), throwsRangeError);
    expect(() => index(B, 5, hi: 4), throwsRangeError);
    expect(() => index(B, 6, hi: 4), throwsRangeError);
    expect(() => index(B, 7, hi: 4), throwsRangeError);
    expect(() => index(B, 8, hi: 4), throwsRangeError);
  });

  test('index for C lo=None hi=4', () {
    expect(() => index(C, -2, hi: 4), throwsRangeError);
    expect(() => index(C, -1, hi: 4), throwsRangeError);
    expect(() => index(C, 0, hi: 4), throwsRangeError);
    expect(() => index(C, 1, hi: 4), throwsRangeError);
    expect(() => index(C, 2, hi: 4), throwsRangeError);
    expect(() => index(C, 3, hi: 4), throwsRangeError);
    expect(() => index(C, 4, hi: 4), throwsRangeError);
    expect(() => index(C, 5, hi: 4), throwsRangeError);
    expect(() => index(C, 6, hi: 4), throwsRangeError);
    expect(() => index(C, 7, hi: 4), throwsRangeError);
    expect(() => index(C, 8, hi: 4), throwsRangeError);
  });

  test('index for D lo=None hi=4', () {
    expect(() => index(D, -2, hi: 4), throwsArgumentError);
    expect(() => index(D, -1, hi: 4), throwsArgumentError);
    expect(() => index(D, 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 2, hi: 4), throwsArgumentError);
    expect(index(D, 3, hi: 4), 0);
    expect(index(D, 4, hi: 4), 1);
    expect(index(D, 5, hi: 4), 2);
    expect(() => index(D, 6, hi: 4), throwsRangeError);
    expect(() => index(D, 7, hi: 4), throwsRangeError);
    expect(() => index(D, 8, hi: 4), throwsRangeError);
  });

  test('index for E lo=None hi=4', () {
    expect(() => index(E, -2, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, hi: 4), throwsArgumentError);
    expect(index(E, 0, hi: 4), 0);
    expect(index(E, 1, hi: 4), 1);
    expect(index(E, 2, hi: 4), 2);
    expect(() => index(E, 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, hi: 4), throwsArgumentError);
  });

  test('index for A lo=0 hi=4', () {
    expect(() => index(A, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('index for B lo=0 hi=4', () {
    expect(() => index(B, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('index for C lo=0 hi=4', () {
    expect(() => index(C, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('index for D lo=0 hi=4', () {
    expect(() => index(D, -2, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 4), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 4), 0);
    expect(index(D, 4, lo: 0, hi: 4), 1);
    expect(index(D, 5, lo: 0, hi: 4), 2);
    expect(() => index(D, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 4), throwsRangeError);
  });

  test('index for E lo=0 hi=4', () {
    expect(() => index(E, -2, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 4), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 4), 0);
    expect(index(E, 1, lo: 0, hi: 4), 1);
    expect(index(E, 2, lo: 0, hi: 4), 2);
    expect(() => index(E, 3, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 4), throwsArgumentError);
  });

  test('index for A lo=1 hi=4', () {
    expect(() => index(A, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('index for B lo=1 hi=4', () {
    expect(() => index(B, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('index for C lo=1 hi=4', () {
    expect(() => index(C, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('index for D lo=1 hi=4', () {
    expect(() => index(D, -2, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 4), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 4), 1);
    expect(index(D, 5, lo: 1, hi: 4), 2);
    expect(() => index(D, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 4), throwsRangeError);
  });

  test('index for E lo=1 hi=4', () {
    expect(() => index(E, -2, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 4), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 4), 1);
    expect(index(E, 2, lo: 1, hi: 4), 2);
    expect(() => index(E, 3, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 4), throwsArgumentError);
  });

  test('index for A lo=2 hi=4', () {
    expect(() => index(A, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('index for B lo=2 hi=4', () {
    expect(() => index(B, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('index for C lo=2 hi=4', () {
    expect(() => index(C, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('index for D lo=2 hi=4', () {
    expect(() => index(D, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 4), throwsRangeError);
  });

  test('index for E lo=2 hi=4', () {
    expect(() => index(E, -2, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 4), 2);
    expect(() => index(E, 3, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 4), throwsArgumentError);
  });

  test('index for A lo=3 hi=4', () {
    expect(() => index(A, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('index for B lo=3 hi=4', () {
    expect(() => index(B, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('index for C lo=3 hi=4', () {
    expect(() => index(C, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('index for D lo=3 hi=4', () {
    expect(() => index(D, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 4), throwsRangeError);
  });

  test('index for E lo=3 hi=4', () {
    expect(() => index(E, -2, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 4), 3);
    expect(() => index(E, 3, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 4), throwsArgumentError);
  });

  test('index for A lo=4 hi=4', () {
    expect(() => index(A, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 4), throwsRangeError);
  });

  test('index for B lo=4 hi=4', () {
    expect(() => index(B, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 4), throwsRangeError);
  });

  test('index for C lo=4 hi=4', () {
    expect(() => index(C, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 4), throwsRangeError);
  });

  test('index for D lo=4 hi=4', () {
    expect(() => index(D, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 4), throwsRangeError);
  });

  test('index for E lo=4 hi=4', () {
    expect(() => index(E, -2, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 4), 4);
    expect(() => index(E, 3, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 4), throwsArgumentError);
  });

  test('index for A lo=5 hi=4', () {
    expect(() => index(A, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 4), throwsRangeError);
  });

  test('index for B lo=5 hi=4', () {
    expect(() => index(B, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 4), throwsRangeError);
  });

  test('index for C lo=5 hi=4', () {
    expect(() => index(C, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 4), throwsRangeError);
  });

  test('index for D lo=5 hi=4', () {
    expect(() => index(D, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 4), throwsRangeError);
  });

  test('index for E lo=5 hi=4', () {
    expect(() => index(E, -2, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 4), 5);
    expect(() => index(E, 3, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 4), throwsArgumentError);
  });

  test('index for A lo=6 hi=4', () {
    expect(() => index(A, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 4), throwsRangeError);
  });

  test('index for B lo=6 hi=4', () {
    expect(() => index(B, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 4), throwsRangeError);
  });

  test('index for C lo=6 hi=4', () {
    expect(() => index(C, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 4), throwsRangeError);
  });

  test('index for D lo=6 hi=4', () {
    expect(() => index(D, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 4), throwsRangeError);
  });

  test('index for E lo=6 hi=4', () {
    expect(() => index(E, -2, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 4), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 4), 6);
    expect(() => index(E, 4, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 4), throwsArgumentError);
  });

  test('index for A lo=7 hi=4', () {
    expect(() => index(A, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 4), throwsRangeError);
  });

  test('index for B lo=7 hi=4', () {
    expect(() => index(B, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 4), throwsRangeError);
  });

  test('index for C lo=7 hi=4', () {
    expect(() => index(C, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 4), throwsRangeError);
  });

  test('index for D lo=7 hi=4', () {
    expect(() => index(D, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 4), throwsRangeError);
  });

  test('index for E lo=7 hi=4', () {
    expect(() => index(E, -2, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 4), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 4), 7);
    expect(() => index(E, 4, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 4), throwsArgumentError);
  });

  test('index for A lo=8 hi=4', () {
    expect(() => index(A, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 4), throwsRangeError);
  });

  test('index for B lo=8 hi=4', () {
    expect(() => index(B, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 4), throwsRangeError);
  });

  test('index for C lo=8 hi=4', () {
    expect(() => index(C, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 4), throwsRangeError);
  });

  test('index for D lo=8 hi=4', () {
    expect(() => index(D, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 4), throwsRangeError);
  });

  test('index for E lo=8 hi=4', () {
    expect(() => index(E, -2, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 4), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 4), 8);
    expect(() => index(E, 6, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 4), throwsArgumentError);
  });

  test('index for A lo=9 hi=4', () {
    expect(() => index(A, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 4), throwsRangeError);
  });

  test('index for B lo=9 hi=4', () {
    expect(() => index(B, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 4), throwsRangeError);
  });

  test('index for C lo=9 hi=4', () {
    expect(() => index(C, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 4), throwsRangeError);
  });

  test('index for D lo=9 hi=4', () {
    expect(() => index(D, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 4), throwsRangeError);
  });

  test('index for E lo=9 hi=4', () {
    expect(() => index(E, -2, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 4), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 4), 9);
    expect(() => index(E, 7, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 4), throwsArgumentError);
  });

  test('index for A lo=None hi=5', () {
    expect(() => index(A, -2, hi: 5), throwsRangeError);
    expect(() => index(A, -1, hi: 5), throwsRangeError);
    expect(() => index(A, 0, hi: 5), throwsRangeError);
    expect(() => index(A, 1, hi: 5), throwsRangeError);
    expect(() => index(A, 2, hi: 5), throwsRangeError);
    expect(() => index(A, 3, hi: 5), throwsRangeError);
    expect(() => index(A, 4, hi: 5), throwsRangeError);
    expect(() => index(A, 5, hi: 5), throwsRangeError);
    expect(() => index(A, 6, hi: 5), throwsRangeError);
    expect(() => index(A, 7, hi: 5), throwsRangeError);
    expect(() => index(A, 8, hi: 5), throwsRangeError);
  });

  test('index for B lo=None hi=5', () {
    expect(() => index(B, -2, hi: 5), throwsRangeError);
    expect(() => index(B, -1, hi: 5), throwsRangeError);
    expect(() => index(B, 0, hi: 5), throwsRangeError);
    expect(() => index(B, 1, hi: 5), throwsRangeError);
    expect(() => index(B, 2, hi: 5), throwsRangeError);
    expect(() => index(B, 3, hi: 5), throwsRangeError);
    expect(() => index(B, 4, hi: 5), throwsRangeError);
    expect(() => index(B, 5, hi: 5), throwsRangeError);
    expect(() => index(B, 6, hi: 5), throwsRangeError);
    expect(() => index(B, 7, hi: 5), throwsRangeError);
    expect(() => index(B, 8, hi: 5), throwsRangeError);
  });

  test('index for C lo=None hi=5', () {
    expect(() => index(C, -2, hi: 5), throwsRangeError);
    expect(() => index(C, -1, hi: 5), throwsRangeError);
    expect(() => index(C, 0, hi: 5), throwsRangeError);
    expect(() => index(C, 1, hi: 5), throwsRangeError);
    expect(() => index(C, 2, hi: 5), throwsRangeError);
    expect(() => index(C, 3, hi: 5), throwsRangeError);
    expect(() => index(C, 4, hi: 5), throwsRangeError);
    expect(() => index(C, 5, hi: 5), throwsRangeError);
    expect(() => index(C, 6, hi: 5), throwsRangeError);
    expect(() => index(C, 7, hi: 5), throwsRangeError);
    expect(() => index(C, 8, hi: 5), throwsRangeError);
  });

  test('index for D lo=None hi=5', () {
    expect(() => index(D, -2, hi: 5), throwsArgumentError);
    expect(() => index(D, -1, hi: 5), throwsArgumentError);
    expect(() => index(D, 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 1, hi: 5), throwsArgumentError);
    expect(() => index(D, 2, hi: 5), throwsArgumentError);
    expect(index(D, 3, hi: 5), 0);
    expect(index(D, 4, hi: 5), 1);
    expect(index(D, 5, hi: 5), 2);
    expect(() => index(D, 6, hi: 5), throwsRangeError);
    expect(() => index(D, 7, hi: 5), throwsRangeError);
    expect(() => index(D, 8, hi: 5), throwsRangeError);
  });

  test('index for E lo=None hi=5', () {
    expect(() => index(E, -2, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, hi: 5), throwsArgumentError);
    expect(index(E, 0, hi: 5), 0);
    expect(index(E, 1, hi: 5), 1);
    expect(index(E, 2, hi: 5), 2);
    expect(() => index(E, 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, hi: 5), throwsArgumentError);
  });

  test('index for A lo=0 hi=5', () {
    expect(() => index(A, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('index for B lo=0 hi=5', () {
    expect(() => index(B, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('index for C lo=0 hi=5', () {
    expect(() => index(C, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('index for D lo=0 hi=5', () {
    expect(() => index(D, -2, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 5), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 5), 0);
    expect(index(D, 4, lo: 0, hi: 5), 1);
    expect(index(D, 5, lo: 0, hi: 5), 2);
    expect(() => index(D, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 5), throwsRangeError);
  });

  test('index for E lo=0 hi=5', () {
    expect(() => index(E, -2, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 5), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 5), 0);
    expect(index(E, 1, lo: 0, hi: 5), 1);
    expect(index(E, 2, lo: 0, hi: 5), 2);
    expect(() => index(E, 3, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 5), throwsArgumentError);
  });

  test('index for A lo=1 hi=5', () {
    expect(() => index(A, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('index for B lo=1 hi=5', () {
    expect(() => index(B, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('index for C lo=1 hi=5', () {
    expect(() => index(C, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('index for D lo=1 hi=5', () {
    expect(() => index(D, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 5), throwsRangeError);
  });

  test('index for E lo=1 hi=5', () {
    expect(() => index(E, -2, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 5), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 5), 1);
    expect(index(E, 2, lo: 1, hi: 5), 2);
    expect(() => index(E, 3, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 5), throwsArgumentError);
  });

  test('index for A lo=2 hi=5', () {
    expect(() => index(A, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('index for B lo=2 hi=5', () {
    expect(() => index(B, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('index for C lo=2 hi=5', () {
    expect(() => index(C, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('index for D lo=2 hi=5', () {
    expect(() => index(D, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 5), throwsRangeError);
  });

  test('index for E lo=2 hi=5', () {
    expect(() => index(E, -2, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 5), 2);
    expect(() => index(E, 3, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 5), throwsArgumentError);
  });

  test('index for A lo=3 hi=5', () {
    expect(() => index(A, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('index for B lo=3 hi=5', () {
    expect(() => index(B, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('index for C lo=3 hi=5', () {
    expect(() => index(C, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('index for D lo=3 hi=5', () {
    expect(() => index(D, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 5), throwsRangeError);
  });

  test('index for E lo=3 hi=5', () {
    expect(() => index(E, -2, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 5), 3);
    expect(() => index(E, 3, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 5), throwsArgumentError);
  });

  test('index for A lo=4 hi=5', () {
    expect(() => index(A, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('index for B lo=4 hi=5', () {
    expect(() => index(B, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('index for C lo=4 hi=5', () {
    expect(() => index(C, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('index for D lo=4 hi=5', () {
    expect(() => index(D, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 5), throwsRangeError);
  });

  test('index for E lo=4 hi=5', () {
    expect(() => index(E, -2, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 5), 4);
    expect(() => index(E, 3, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 5), throwsArgumentError);
  });

  test('index for A lo=5 hi=5', () {
    expect(() => index(A, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 5), throwsRangeError);
  });

  test('index for B lo=5 hi=5', () {
    expect(() => index(B, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 5), throwsRangeError);
  });

  test('index for C lo=5 hi=5', () {
    expect(() => index(C, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 5), throwsRangeError);
  });

  test('index for D lo=5 hi=5', () {
    expect(() => index(D, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 5), throwsRangeError);
  });

  test('index for E lo=5 hi=5', () {
    expect(() => index(E, -2, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 5), 5);
    expect(() => index(E, 3, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 5), throwsArgumentError);
  });

  test('index for A lo=6 hi=5', () {
    expect(() => index(A, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 5), throwsRangeError);
  });

  test('index for B lo=6 hi=5', () {
    expect(() => index(B, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 5), throwsRangeError);
  });

  test('index for C lo=6 hi=5', () {
    expect(() => index(C, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 5), throwsRangeError);
  });

  test('index for D lo=6 hi=5', () {
    expect(() => index(D, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 5), throwsRangeError);
  });

  test('index for E lo=6 hi=5', () {
    expect(() => index(E, -2, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 5), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 5), 6);
    expect(() => index(E, 4, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 5), throwsArgumentError);
  });

  test('index for A lo=7 hi=5', () {
    expect(() => index(A, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 5), throwsRangeError);
  });

  test('index for B lo=7 hi=5', () {
    expect(() => index(B, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 5), throwsRangeError);
  });

  test('index for C lo=7 hi=5', () {
    expect(() => index(C, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 5), throwsRangeError);
  });

  test('index for D lo=7 hi=5', () {
    expect(() => index(D, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 5), throwsRangeError);
  });

  test('index for E lo=7 hi=5', () {
    expect(() => index(E, -2, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 5), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 5), 7);
    expect(() => index(E, 4, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 5), throwsArgumentError);
  });

  test('index for A lo=8 hi=5', () {
    expect(() => index(A, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 5), throwsRangeError);
  });

  test('index for B lo=8 hi=5', () {
    expect(() => index(B, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 5), throwsRangeError);
  });

  test('index for C lo=8 hi=5', () {
    expect(() => index(C, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 5), throwsRangeError);
  });

  test('index for D lo=8 hi=5', () {
    expect(() => index(D, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 5), throwsRangeError);
  });

  test('index for E lo=8 hi=5', () {
    expect(() => index(E, -2, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 5), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 5), 8);
    expect(() => index(E, 6, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 5), throwsArgumentError);
  });

  test('index for A lo=9 hi=5', () {
    expect(() => index(A, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 5), throwsRangeError);
  });

  test('index for B lo=9 hi=5', () {
    expect(() => index(B, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 5), throwsRangeError);
  });

  test('index for C lo=9 hi=5', () {
    expect(() => index(C, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 5), throwsRangeError);
  });

  test('index for D lo=9 hi=5', () {
    expect(() => index(D, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 5), throwsRangeError);
  });

  test('index for E lo=9 hi=5', () {
    expect(() => index(E, -2, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 5), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 5), 9);
    expect(() => index(E, 7, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 5), throwsArgumentError);
  });

  test('index for A lo=None hi=6', () {
    expect(() => index(A, -2, hi: 6), throwsRangeError);
    expect(() => index(A, -1, hi: 6), throwsRangeError);
    expect(() => index(A, 0, hi: 6), throwsRangeError);
    expect(() => index(A, 1, hi: 6), throwsRangeError);
    expect(() => index(A, 2, hi: 6), throwsRangeError);
    expect(() => index(A, 3, hi: 6), throwsRangeError);
    expect(() => index(A, 4, hi: 6), throwsRangeError);
    expect(() => index(A, 5, hi: 6), throwsRangeError);
    expect(() => index(A, 6, hi: 6), throwsRangeError);
    expect(() => index(A, 7, hi: 6), throwsRangeError);
    expect(() => index(A, 8, hi: 6), throwsRangeError);
  });

  test('index for B lo=None hi=6', () {
    expect(() => index(B, -2, hi: 6), throwsRangeError);
    expect(() => index(B, -1, hi: 6), throwsRangeError);
    expect(() => index(B, 0, hi: 6), throwsRangeError);
    expect(() => index(B, 1, hi: 6), throwsRangeError);
    expect(() => index(B, 2, hi: 6), throwsRangeError);
    expect(() => index(B, 3, hi: 6), throwsRangeError);
    expect(() => index(B, 4, hi: 6), throwsRangeError);
    expect(() => index(B, 5, hi: 6), throwsRangeError);
    expect(() => index(B, 6, hi: 6), throwsRangeError);
    expect(() => index(B, 7, hi: 6), throwsRangeError);
    expect(() => index(B, 8, hi: 6), throwsRangeError);
  });

  test('index for C lo=None hi=6', () {
    expect(() => index(C, -2, hi: 6), throwsRangeError);
    expect(() => index(C, -1, hi: 6), throwsRangeError);
    expect(() => index(C, 0, hi: 6), throwsRangeError);
    expect(() => index(C, 1, hi: 6), throwsRangeError);
    expect(() => index(C, 2, hi: 6), throwsRangeError);
    expect(() => index(C, 3, hi: 6), throwsRangeError);
    expect(() => index(C, 4, hi: 6), throwsRangeError);
    expect(() => index(C, 5, hi: 6), throwsRangeError);
    expect(() => index(C, 6, hi: 6), throwsRangeError);
    expect(() => index(C, 7, hi: 6), throwsRangeError);
    expect(() => index(C, 8, hi: 6), throwsRangeError);
  });

  test('index for D lo=None hi=6', () {
    expect(() => index(D, -2, hi: 6), throwsRangeError);
    expect(() => index(D, -1, hi: 6), throwsRangeError);
    expect(() => index(D, 0, hi: 6), throwsRangeError);
    expect(() => index(D, 1, hi: 6), throwsRangeError);
    expect(() => index(D, 2, hi: 6), throwsRangeError);
    expect(() => index(D, 3, hi: 6), throwsRangeError);
    expect(() => index(D, 4, hi: 6), throwsRangeError);
    expect(() => index(D, 5, hi: 6), throwsRangeError);
    expect(() => index(D, 6, hi: 6), throwsRangeError);
    expect(() => index(D, 7, hi: 6), throwsRangeError);
    expect(() => index(D, 8, hi: 6), throwsRangeError);
  });

  test('index for E lo=None hi=6', () {
    expect(() => index(E, -2, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, hi: 6), throwsArgumentError);
    expect(index(E, 0, hi: 6), 0);
    expect(index(E, 1, hi: 6), 1);
    expect(index(E, 2, hi: 6), 2);
    expect(index(E, 3, hi: 6), 6);
    expect(() => index(E, 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, hi: 6), throwsArgumentError);
  });

  test('index for A lo=0 hi=6', () {
    expect(() => index(A, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('index for B lo=0 hi=6', () {
    expect(() => index(B, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('index for C lo=0 hi=6', () {
    expect(() => index(C, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('index for D lo=0 hi=6', () {
    expect(() => index(D, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 6), throwsRangeError);
  });

  test('index for E lo=0 hi=6', () {
    expect(() => index(E, -2, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 6), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 6), 0);
    expect(index(E, 1, lo: 0, hi: 6), 1);
    expect(index(E, 2, lo: 0, hi: 6), 2);
    expect(index(E, 3, lo: 0, hi: 6), 6);
    expect(() => index(E, 4, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 6), throwsArgumentError);
  });

  test('index for A lo=1 hi=6', () {
    expect(() => index(A, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('index for B lo=1 hi=6', () {
    expect(() => index(B, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('index for C lo=1 hi=6', () {
    expect(() => index(C, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('index for D lo=1 hi=6', () {
    expect(() => index(D, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 6), throwsRangeError);
  });

  test('index for E lo=1 hi=6', () {
    expect(() => index(E, -2, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 6), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 6), 1);
    expect(index(E, 2, lo: 1, hi: 6), 2);
    expect(index(E, 3, lo: 1, hi: 6), 6);
    expect(() => index(E, 4, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 6), throwsArgumentError);
  });

  test('index for A lo=2 hi=6', () {
    expect(() => index(A, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('index for B lo=2 hi=6', () {
    expect(() => index(B, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('index for C lo=2 hi=6', () {
    expect(() => index(C, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('index for D lo=2 hi=6', () {
    expect(() => index(D, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 6), throwsRangeError);
  });

  test('index for E lo=2 hi=6', () {
    expect(() => index(E, -2, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 6), 2);
    expect(index(E, 3, lo: 2, hi: 6), 6);
    expect(() => index(E, 4, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 6), throwsArgumentError);
  });

  test('index for A lo=3 hi=6', () {
    expect(() => index(A, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('index for B lo=3 hi=6', () {
    expect(() => index(B, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('index for C lo=3 hi=6', () {
    expect(() => index(C, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('index for D lo=3 hi=6', () {
    expect(() => index(D, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 6), throwsRangeError);
  });

  test('index for E lo=3 hi=6', () {
    expect(() => index(E, -2, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 6), 3);
    expect(index(E, 3, lo: 3, hi: 6), 6);
    expect(() => index(E, 4, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 6), throwsArgumentError);
  });

  test('index for A lo=4 hi=6', () {
    expect(() => index(A, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('index for B lo=4 hi=6', () {
    expect(() => index(B, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('index for C lo=4 hi=6', () {
    expect(() => index(C, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('index for D lo=4 hi=6', () {
    expect(() => index(D, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 6), throwsRangeError);
  });

  test('index for E lo=4 hi=6', () {
    expect(() => index(E, -2, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 6), 4);
    expect(index(E, 3, lo: 4, hi: 6), 6);
    expect(() => index(E, 4, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 6), throwsArgumentError);
  });

  test('index for A lo=5 hi=6', () {
    expect(() => index(A, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('index for B lo=5 hi=6', () {
    expect(() => index(B, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('index for C lo=5 hi=6', () {
    expect(() => index(C, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('index for D lo=5 hi=6', () {
    expect(() => index(D, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 6), throwsRangeError);
  });

  test('index for E lo=5 hi=6', () {
    expect(() => index(E, -2, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 6), 5);
    expect(index(E, 3, lo: 5, hi: 6), 6);
    expect(() => index(E, 4, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 6), throwsArgumentError);
  });

  test('index for A lo=6 hi=6', () {
    expect(() => index(A, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 6), throwsRangeError);
  });

  test('index for B lo=6 hi=6', () {
    expect(() => index(B, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 6), throwsRangeError);
  });

  test('index for C lo=6 hi=6', () {
    expect(() => index(C, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 6), throwsRangeError);
  });

  test('index for D lo=6 hi=6', () {
    expect(() => index(D, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 6), throwsRangeError);
  });

  test('index for E lo=6 hi=6', () {
    expect(() => index(E, -2, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 6), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 6), 6);
    expect(() => index(E, 4, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 6), throwsArgumentError);
  });

  test('index for A lo=7 hi=6', () {
    expect(() => index(A, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 6), throwsRangeError);
  });

  test('index for B lo=7 hi=6', () {
    expect(() => index(B, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 6), throwsRangeError);
  });

  test('index for C lo=7 hi=6', () {
    expect(() => index(C, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 6), throwsRangeError);
  });

  test('index for D lo=7 hi=6', () {
    expect(() => index(D, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 6), throwsRangeError);
  });

  test('index for E lo=7 hi=6', () {
    expect(() => index(E, -2, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 6), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 6), 7);
    expect(() => index(E, 4, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 6), throwsArgumentError);
  });

  test('index for A lo=8 hi=6', () {
    expect(() => index(A, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 6), throwsRangeError);
  });

  test('index for B lo=8 hi=6', () {
    expect(() => index(B, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 6), throwsRangeError);
  });

  test('index for C lo=8 hi=6', () {
    expect(() => index(C, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 6), throwsRangeError);
  });

  test('index for D lo=8 hi=6', () {
    expect(() => index(D, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 6), throwsRangeError);
  });

  test('index for E lo=8 hi=6', () {
    expect(() => index(E, -2, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 6), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 6), 8);
    expect(() => index(E, 6, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 6), throwsArgumentError);
  });

  test('index for A lo=9 hi=6', () {
    expect(() => index(A, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 6), throwsRangeError);
  });

  test('index for B lo=9 hi=6', () {
    expect(() => index(B, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 6), throwsRangeError);
  });

  test('index for C lo=9 hi=6', () {
    expect(() => index(C, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 6), throwsRangeError);
  });

  test('index for D lo=9 hi=6', () {
    expect(() => index(D, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 6), throwsRangeError);
  });

  test('index for E lo=9 hi=6', () {
    expect(() => index(E, -2, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 6), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 6), 9);
    expect(() => index(E, 7, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 6), throwsArgumentError);
  });

  test('index for A lo=None hi=7', () {
    expect(() => index(A, -2, hi: 7), throwsRangeError);
    expect(() => index(A, -1, hi: 7), throwsRangeError);
    expect(() => index(A, 0, hi: 7), throwsRangeError);
    expect(() => index(A, 1, hi: 7), throwsRangeError);
    expect(() => index(A, 2, hi: 7), throwsRangeError);
    expect(() => index(A, 3, hi: 7), throwsRangeError);
    expect(() => index(A, 4, hi: 7), throwsRangeError);
    expect(() => index(A, 5, hi: 7), throwsRangeError);
    expect(() => index(A, 6, hi: 7), throwsRangeError);
    expect(() => index(A, 7, hi: 7), throwsRangeError);
    expect(() => index(A, 8, hi: 7), throwsRangeError);
  });

  test('index for B lo=None hi=7', () {
    expect(() => index(B, -2, hi: 7), throwsRangeError);
    expect(() => index(B, -1, hi: 7), throwsRangeError);
    expect(() => index(B, 0, hi: 7), throwsRangeError);
    expect(() => index(B, 1, hi: 7), throwsRangeError);
    expect(() => index(B, 2, hi: 7), throwsRangeError);
    expect(() => index(B, 3, hi: 7), throwsRangeError);
    expect(() => index(B, 4, hi: 7), throwsRangeError);
    expect(() => index(B, 5, hi: 7), throwsRangeError);
    expect(() => index(B, 6, hi: 7), throwsRangeError);
    expect(() => index(B, 7, hi: 7), throwsRangeError);
    expect(() => index(B, 8, hi: 7), throwsRangeError);
  });

  test('index for C lo=None hi=7', () {
    expect(() => index(C, -2, hi: 7), throwsRangeError);
    expect(() => index(C, -1, hi: 7), throwsRangeError);
    expect(() => index(C, 0, hi: 7), throwsRangeError);
    expect(() => index(C, 1, hi: 7), throwsRangeError);
    expect(() => index(C, 2, hi: 7), throwsRangeError);
    expect(() => index(C, 3, hi: 7), throwsRangeError);
    expect(() => index(C, 4, hi: 7), throwsRangeError);
    expect(() => index(C, 5, hi: 7), throwsRangeError);
    expect(() => index(C, 6, hi: 7), throwsRangeError);
    expect(() => index(C, 7, hi: 7), throwsRangeError);
    expect(() => index(C, 8, hi: 7), throwsRangeError);
  });

  test('index for D lo=None hi=7', () {
    expect(() => index(D, -2, hi: 7), throwsRangeError);
    expect(() => index(D, -1, hi: 7), throwsRangeError);
    expect(() => index(D, 0, hi: 7), throwsRangeError);
    expect(() => index(D, 1, hi: 7), throwsRangeError);
    expect(() => index(D, 2, hi: 7), throwsRangeError);
    expect(() => index(D, 3, hi: 7), throwsRangeError);
    expect(() => index(D, 4, hi: 7), throwsRangeError);
    expect(() => index(D, 5, hi: 7), throwsRangeError);
    expect(() => index(D, 6, hi: 7), throwsRangeError);
    expect(() => index(D, 7, hi: 7), throwsRangeError);
    expect(() => index(D, 8, hi: 7), throwsRangeError);
  });

  test('index for E lo=None hi=7', () {
    expect(() => index(E, -2, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, hi: 7), throwsArgumentError);
    expect(index(E, 0, hi: 7), 0);
    expect(index(E, 1, hi: 7), 1);
    expect(index(E, 2, hi: 7), 2);
    expect(index(E, 3, hi: 7), 6);
    expect(() => index(E, 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, hi: 7), throwsArgumentError);
  });

  test('index for A lo=0 hi=7', () {
    expect(() => index(A, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('index for B lo=0 hi=7', () {
    expect(() => index(B, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('index for C lo=0 hi=7', () {
    expect(() => index(C, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('index for D lo=0 hi=7', () {
    expect(() => index(D, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 7), throwsRangeError);
  });

  test('index for E lo=0 hi=7', () {
    expect(() => index(E, -2, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 7), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 7), 0);
    expect(index(E, 1, lo: 0, hi: 7), 1);
    expect(index(E, 2, lo: 0, hi: 7), 2);
    expect(index(E, 3, lo: 0, hi: 7), 6);
    expect(() => index(E, 4, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 7), throwsArgumentError);
  });

  test('index for A lo=1 hi=7', () {
    expect(() => index(A, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('index for B lo=1 hi=7', () {
    expect(() => index(B, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('index for C lo=1 hi=7', () {
    expect(() => index(C, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('index for D lo=1 hi=7', () {
    expect(() => index(D, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 7), throwsRangeError);
  });

  test('index for E lo=1 hi=7', () {
    expect(() => index(E, -2, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 7), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 7), 1);
    expect(index(E, 2, lo: 1, hi: 7), 2);
    expect(index(E, 3, lo: 1, hi: 7), 6);
    expect(() => index(E, 4, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 7), throwsArgumentError);
  });

  test('index for A lo=2 hi=7', () {
    expect(() => index(A, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('index for B lo=2 hi=7', () {
    expect(() => index(B, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('index for C lo=2 hi=7', () {
    expect(() => index(C, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('index for D lo=2 hi=7', () {
    expect(() => index(D, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 7), throwsRangeError);
  });

  test('index for E lo=2 hi=7', () {
    expect(() => index(E, -2, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 7), 2);
    expect(index(E, 3, lo: 2, hi: 7), 6);
    expect(() => index(E, 4, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 7), throwsArgumentError);
  });

  test('index for A lo=3 hi=7', () {
    expect(() => index(A, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('index for B lo=3 hi=7', () {
    expect(() => index(B, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('index for C lo=3 hi=7', () {
    expect(() => index(C, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('index for D lo=3 hi=7', () {
    expect(() => index(D, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 7), throwsRangeError);
  });

  test('index for E lo=3 hi=7', () {
    expect(() => index(E, -2, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 7), 3);
    expect(index(E, 3, lo: 3, hi: 7), 6);
    expect(() => index(E, 4, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 7), throwsArgumentError);
  });

  test('index for A lo=4 hi=7', () {
    expect(() => index(A, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('index for B lo=4 hi=7', () {
    expect(() => index(B, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('index for C lo=4 hi=7', () {
    expect(() => index(C, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('index for D lo=4 hi=7', () {
    expect(() => index(D, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 7), throwsRangeError);
  });

  test('index for E lo=4 hi=7', () {
    expect(() => index(E, -2, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 7), 4);
    expect(index(E, 3, lo: 4, hi: 7), 6);
    expect(() => index(E, 4, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 7), throwsArgumentError);
  });

  test('index for A lo=5 hi=7', () {
    expect(() => index(A, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('index for B lo=5 hi=7', () {
    expect(() => index(B, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('index for C lo=5 hi=7', () {
    expect(() => index(C, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('index for D lo=5 hi=7', () {
    expect(() => index(D, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 7), throwsRangeError);
  });

  test('index for E lo=5 hi=7', () {
    expect(() => index(E, -2, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 7), 5);
    expect(index(E, 3, lo: 5, hi: 7), 6);
    expect(() => index(E, 4, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 7), throwsArgumentError);
  });

  test('index for A lo=6 hi=7', () {
    expect(() => index(A, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('index for B lo=6 hi=7', () {
    expect(() => index(B, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('index for C lo=6 hi=7', () {
    expect(() => index(C, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('index for D lo=6 hi=7', () {
    expect(() => index(D, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 7), throwsRangeError);
  });

  test('index for E lo=6 hi=7', () {
    expect(() => index(E, -2, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 7), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 7), 6);
    expect(() => index(E, 4, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 7), throwsArgumentError);
  });

  test('index for A lo=7 hi=7', () {
    expect(() => index(A, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 7), throwsRangeError);
  });

  test('index for B lo=7 hi=7', () {
    expect(() => index(B, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 7), throwsRangeError);
  });

  test('index for C lo=7 hi=7', () {
    expect(() => index(C, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 7), throwsRangeError);
  });

  test('index for D lo=7 hi=7', () {
    expect(() => index(D, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 7), throwsRangeError);
  });

  test('index for E lo=7 hi=7', () {
    expect(() => index(E, -2, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 7), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 7), 7);
    expect(() => index(E, 4, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 7), throwsArgumentError);
  });

  test('index for A lo=8 hi=7', () {
    expect(() => index(A, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 7), throwsRangeError);
  });

  test('index for B lo=8 hi=7', () {
    expect(() => index(B, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 7), throwsRangeError);
  });

  test('index for C lo=8 hi=7', () {
    expect(() => index(C, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 7), throwsRangeError);
  });

  test('index for D lo=8 hi=7', () {
    expect(() => index(D, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 7), throwsRangeError);
  });

  test('index for E lo=8 hi=7', () {
    expect(() => index(E, -2, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 7), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 7), 8);
    expect(() => index(E, 6, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 7), throwsArgumentError);
  });

  test('index for A lo=9 hi=7', () {
    expect(() => index(A, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 7), throwsRangeError);
  });

  test('index for B lo=9 hi=7', () {
    expect(() => index(B, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 7), throwsRangeError);
  });

  test('index for C lo=9 hi=7', () {
    expect(() => index(C, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 7), throwsRangeError);
  });

  test('index for D lo=9 hi=7', () {
    expect(() => index(D, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 7), throwsRangeError);
  });

  test('index for E lo=9 hi=7', () {
    expect(() => index(E, -2, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 7), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 7), 9);
    expect(() => index(E, 7, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 7), throwsArgumentError);
  });

  test('index for A lo=None hi=8', () {
    expect(() => index(A, -2, hi: 8), throwsRangeError);
    expect(() => index(A, -1, hi: 8), throwsRangeError);
    expect(() => index(A, 0, hi: 8), throwsRangeError);
    expect(() => index(A, 1, hi: 8), throwsRangeError);
    expect(() => index(A, 2, hi: 8), throwsRangeError);
    expect(() => index(A, 3, hi: 8), throwsRangeError);
    expect(() => index(A, 4, hi: 8), throwsRangeError);
    expect(() => index(A, 5, hi: 8), throwsRangeError);
    expect(() => index(A, 6, hi: 8), throwsRangeError);
    expect(() => index(A, 7, hi: 8), throwsRangeError);
    expect(() => index(A, 8, hi: 8), throwsRangeError);
  });

  test('index for B lo=None hi=8', () {
    expect(() => index(B, -2, hi: 8), throwsRangeError);
    expect(() => index(B, -1, hi: 8), throwsRangeError);
    expect(() => index(B, 0, hi: 8), throwsRangeError);
    expect(() => index(B, 1, hi: 8), throwsRangeError);
    expect(() => index(B, 2, hi: 8), throwsRangeError);
    expect(() => index(B, 3, hi: 8), throwsRangeError);
    expect(() => index(B, 4, hi: 8), throwsRangeError);
    expect(() => index(B, 5, hi: 8), throwsRangeError);
    expect(() => index(B, 6, hi: 8), throwsRangeError);
    expect(() => index(B, 7, hi: 8), throwsRangeError);
    expect(() => index(B, 8, hi: 8), throwsRangeError);
  });

  test('index for C lo=None hi=8', () {
    expect(() => index(C, -2, hi: 8), throwsRangeError);
    expect(() => index(C, -1, hi: 8), throwsRangeError);
    expect(() => index(C, 0, hi: 8), throwsRangeError);
    expect(() => index(C, 1, hi: 8), throwsRangeError);
    expect(() => index(C, 2, hi: 8), throwsRangeError);
    expect(() => index(C, 3, hi: 8), throwsRangeError);
    expect(() => index(C, 4, hi: 8), throwsRangeError);
    expect(() => index(C, 5, hi: 8), throwsRangeError);
    expect(() => index(C, 6, hi: 8), throwsRangeError);
    expect(() => index(C, 7, hi: 8), throwsRangeError);
    expect(() => index(C, 8, hi: 8), throwsRangeError);
  });

  test('index for D lo=None hi=8', () {
    expect(() => index(D, -2, hi: 8), throwsRangeError);
    expect(() => index(D, -1, hi: 8), throwsRangeError);
    expect(() => index(D, 0, hi: 8), throwsRangeError);
    expect(() => index(D, 1, hi: 8), throwsRangeError);
    expect(() => index(D, 2, hi: 8), throwsRangeError);
    expect(() => index(D, 3, hi: 8), throwsRangeError);
    expect(() => index(D, 4, hi: 8), throwsRangeError);
    expect(() => index(D, 5, hi: 8), throwsRangeError);
    expect(() => index(D, 6, hi: 8), throwsRangeError);
    expect(() => index(D, 7, hi: 8), throwsRangeError);
    expect(() => index(D, 8, hi: 8), throwsRangeError);
  });

  test('index for E lo=None hi=8', () {
    expect(() => index(E, -2, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, hi: 8), throwsArgumentError);
    expect(index(E, 0, hi: 8), 0);
    expect(index(E, 1, hi: 8), 1);
    expect(index(E, 2, hi: 8), 2);
    expect(index(E, 3, hi: 8), 6);
    expect(() => index(E, 4, hi: 8), throwsArgumentError);
    expect(index(E, 5, hi: 8), 8);
    expect(() => index(E, 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, hi: 8), throwsArgumentError);
  });

  test('index for A lo=0 hi=8', () {
    expect(() => index(A, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('index for B lo=0 hi=8', () {
    expect(() => index(B, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('index for C lo=0 hi=8', () {
    expect(() => index(C, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('index for D lo=0 hi=8', () {
    expect(() => index(D, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 8), throwsRangeError);
  });

  test('index for E lo=0 hi=8', () {
    expect(() => index(E, -2, lo: 0, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 8), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 8), 0);
    expect(index(E, 1, lo: 0, hi: 8), 1);
    expect(index(E, 2, lo: 0, hi: 8), 2);
    expect(index(E, 3, lo: 0, hi: 8), 6);
    expect(() => index(E, 4, lo: 0, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 0, hi: 8), 8);
    expect(() => index(E, 6, lo: 0, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 8), throwsArgumentError);
  });

  test('index for A lo=1 hi=8', () {
    expect(() => index(A, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('index for B lo=1 hi=8', () {
    expect(() => index(B, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('index for C lo=1 hi=8', () {
    expect(() => index(C, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('index for D lo=1 hi=8', () {
    expect(() => index(D, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 8), throwsRangeError);
  });

  test('index for E lo=1 hi=8', () {
    expect(() => index(E, -2, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 8), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 8), 1);
    expect(index(E, 2, lo: 1, hi: 8), 2);
    expect(index(E, 3, lo: 1, hi: 8), 6);
    expect(() => index(E, 4, lo: 1, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 1, hi: 8), 8);
    expect(() => index(E, 6, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 8), throwsArgumentError);
  });

  test('index for A lo=2 hi=8', () {
    expect(() => index(A, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('index for B lo=2 hi=8', () {
    expect(() => index(B, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('index for C lo=2 hi=8', () {
    expect(() => index(C, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('index for D lo=2 hi=8', () {
    expect(() => index(D, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 8), throwsRangeError);
  });

  test('index for E lo=2 hi=8', () {
    expect(() => index(E, -2, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 8), 2);
    expect(index(E, 3, lo: 2, hi: 8), 6);
    expect(() => index(E, 4, lo: 2, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 2, hi: 8), 8);
    expect(() => index(E, 6, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 8), throwsArgumentError);
  });

  test('index for A lo=3 hi=8', () {
    expect(() => index(A, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('index for B lo=3 hi=8', () {
    expect(() => index(B, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('index for C lo=3 hi=8', () {
    expect(() => index(C, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('index for D lo=3 hi=8', () {
    expect(() => index(D, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 8), throwsRangeError);
  });

  test('index for E lo=3 hi=8', () {
    expect(() => index(E, -2, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 8), 3);
    expect(index(E, 3, lo: 3, hi: 8), 6);
    expect(() => index(E, 4, lo: 3, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 3, hi: 8), 8);
    expect(() => index(E, 6, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 8), throwsArgumentError);
  });

  test('index for A lo=4 hi=8', () {
    expect(() => index(A, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('index for B lo=4 hi=8', () {
    expect(() => index(B, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('index for C lo=4 hi=8', () {
    expect(() => index(C, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('index for D lo=4 hi=8', () {
    expect(() => index(D, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 8), throwsRangeError);
  });

  test('index for E lo=4 hi=8', () {
    expect(() => index(E, -2, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 8), 4);
    expect(index(E, 3, lo: 4, hi: 8), 6);
    expect(() => index(E, 4, lo: 4, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 4, hi: 8), 8);
    expect(() => index(E, 6, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 8), throwsArgumentError);
  });

  test('index for A lo=5 hi=8', () {
    expect(() => index(A, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('index for B lo=5 hi=8', () {
    expect(() => index(B, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('index for C lo=5 hi=8', () {
    expect(() => index(C, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('index for D lo=5 hi=8', () {
    expect(() => index(D, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 8), throwsRangeError);
  });

  test('index for E lo=5 hi=8', () {
    expect(() => index(E, -2, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 8), 5);
    expect(index(E, 3, lo: 5, hi: 8), 6);
    expect(() => index(E, 4, lo: 5, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 5, hi: 8), 8);
    expect(() => index(E, 6, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 8), throwsArgumentError);
  });

  test('index for A lo=6 hi=8', () {
    expect(() => index(A, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('index for B lo=6 hi=8', () {
    expect(() => index(B, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('index for C lo=6 hi=8', () {
    expect(() => index(C, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('index for D lo=6 hi=8', () {
    expect(() => index(D, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 8), throwsRangeError);
  });

  test('index for E lo=6 hi=8', () {
    expect(() => index(E, -2, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 8), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 8), 6);
    expect(() => index(E, 4, lo: 6, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 6, hi: 8), 8);
    expect(() => index(E, 6, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 8), throwsArgumentError);
  });

  test('index for A lo=7 hi=8', () {
    expect(() => index(A, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('index for B lo=7 hi=8', () {
    expect(() => index(B, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('index for C lo=7 hi=8', () {
    expect(() => index(C, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('index for D lo=7 hi=8', () {
    expect(() => index(D, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 8), throwsRangeError);
  });

  test('index for E lo=7 hi=8', () {
    expect(() => index(E, -2, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 8), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 8), 7);
    expect(() => index(E, 4, lo: 7, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 7, hi: 8), 8);
    expect(() => index(E, 6, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 8), throwsArgumentError);
  });

  test('index for A lo=8 hi=8', () {
    expect(() => index(A, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 8), throwsRangeError);
  });

  test('index for B lo=8 hi=8', () {
    expect(() => index(B, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 8), throwsRangeError);
  });

  test('index for C lo=8 hi=8', () {
    expect(() => index(C, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 8), throwsRangeError);
  });

  test('index for D lo=8 hi=8', () {
    expect(() => index(D, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 8), throwsRangeError);
  });

  test('index for E lo=8 hi=8', () {
    expect(() => index(E, -2, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 8), 8);
    expect(() => index(E, 6, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 8), throwsArgumentError);
  });

  test('index for A lo=9 hi=8', () {
    expect(() => index(A, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 8), throwsRangeError);
  });

  test('index for B lo=9 hi=8', () {
    expect(() => index(B, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 8), throwsRangeError);
  });

  test('index for C lo=9 hi=8', () {
    expect(() => index(C, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 8), throwsRangeError);
  });

  test('index for D lo=9 hi=8', () {
    expect(() => index(D, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 8), throwsRangeError);
  });

  test('index for E lo=9 hi=8', () {
    expect(() => index(E, -2, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 8), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 8), 9);
    expect(() => index(E, 7, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 8), throwsArgumentError);
  });

  test('index for A lo=None hi=9', () {
    expect(() => index(A, -2, hi: 9), throwsRangeError);
    expect(() => index(A, -1, hi: 9), throwsRangeError);
    expect(() => index(A, 0, hi: 9), throwsRangeError);
    expect(() => index(A, 1, hi: 9), throwsRangeError);
    expect(() => index(A, 2, hi: 9), throwsRangeError);
    expect(() => index(A, 3, hi: 9), throwsRangeError);
    expect(() => index(A, 4, hi: 9), throwsRangeError);
    expect(() => index(A, 5, hi: 9), throwsRangeError);
    expect(() => index(A, 6, hi: 9), throwsRangeError);
    expect(() => index(A, 7, hi: 9), throwsRangeError);
    expect(() => index(A, 8, hi: 9), throwsRangeError);
  });

  test('index for B lo=None hi=9', () {
    expect(() => index(B, -2, hi: 9), throwsRangeError);
    expect(() => index(B, -1, hi: 9), throwsRangeError);
    expect(() => index(B, 0, hi: 9), throwsRangeError);
    expect(() => index(B, 1, hi: 9), throwsRangeError);
    expect(() => index(B, 2, hi: 9), throwsRangeError);
    expect(() => index(B, 3, hi: 9), throwsRangeError);
    expect(() => index(B, 4, hi: 9), throwsRangeError);
    expect(() => index(B, 5, hi: 9), throwsRangeError);
    expect(() => index(B, 6, hi: 9), throwsRangeError);
    expect(() => index(B, 7, hi: 9), throwsRangeError);
    expect(() => index(B, 8, hi: 9), throwsRangeError);
  });

  test('index for C lo=None hi=9', () {
    expect(() => index(C, -2, hi: 9), throwsRangeError);
    expect(() => index(C, -1, hi: 9), throwsRangeError);
    expect(() => index(C, 0, hi: 9), throwsRangeError);
    expect(() => index(C, 1, hi: 9), throwsRangeError);
    expect(() => index(C, 2, hi: 9), throwsRangeError);
    expect(() => index(C, 3, hi: 9), throwsRangeError);
    expect(() => index(C, 4, hi: 9), throwsRangeError);
    expect(() => index(C, 5, hi: 9), throwsRangeError);
    expect(() => index(C, 6, hi: 9), throwsRangeError);
    expect(() => index(C, 7, hi: 9), throwsRangeError);
    expect(() => index(C, 8, hi: 9), throwsRangeError);
  });

  test('index for D lo=None hi=9', () {
    expect(() => index(D, -2, hi: 9), throwsRangeError);
    expect(() => index(D, -1, hi: 9), throwsRangeError);
    expect(() => index(D, 0, hi: 9), throwsRangeError);
    expect(() => index(D, 1, hi: 9), throwsRangeError);
    expect(() => index(D, 2, hi: 9), throwsRangeError);
    expect(() => index(D, 3, hi: 9), throwsRangeError);
    expect(() => index(D, 4, hi: 9), throwsRangeError);
    expect(() => index(D, 5, hi: 9), throwsRangeError);
    expect(() => index(D, 6, hi: 9), throwsRangeError);
    expect(() => index(D, 7, hi: 9), throwsRangeError);
    expect(() => index(D, 8, hi: 9), throwsRangeError);
  });

  test('index for E lo=None hi=9', () {
    expect(() => index(E, -2, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, hi: 9), throwsArgumentError);
    expect(index(E, 0, hi: 9), 0);
    expect(index(E, 1, hi: 9), 1);
    expect(index(E, 2, hi: 9), 2);
    expect(index(E, 3, hi: 9), 6);
    expect(() => index(E, 4, hi: 9), throwsArgumentError);
    expect(index(E, 5, hi: 9), 8);
    expect(index(E, 6, hi: 9), 9);
    expect(() => index(E, 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, hi: 9), throwsArgumentError);
  });

  test('index for A lo=0 hi=9', () {
    expect(() => index(A, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('index for B lo=0 hi=9', () {
    expect(() => index(B, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('index for C lo=0 hi=9', () {
    expect(() => index(C, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('index for D lo=0 hi=9', () {
    expect(() => index(D, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 9), throwsRangeError);
  });

  test('index for E lo=0 hi=9', () {
    expect(() => index(E, -2, lo: 0, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 9), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 9), 0);
    expect(index(E, 1, lo: 0, hi: 9), 1);
    expect(index(E, 2, lo: 0, hi: 9), 2);
    expect(index(E, 3, lo: 0, hi: 9), 6);
    expect(() => index(E, 4, lo: 0, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 0, hi: 9), 8);
    expect(index(E, 6, lo: 0, hi: 9), 9);
    expect(() => index(E, 7, lo: 0, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 9), throwsArgumentError);
  });

  test('index for A lo=1 hi=9', () {
    expect(() => index(A, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('index for B lo=1 hi=9', () {
    expect(() => index(B, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('index for C lo=1 hi=9', () {
    expect(() => index(C, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('index for D lo=1 hi=9', () {
    expect(() => index(D, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 9), throwsRangeError);
  });

  test('index for E lo=1 hi=9', () {
    expect(() => index(E, -2, lo: 1, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 9), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 9), 1);
    expect(index(E, 2, lo: 1, hi: 9), 2);
    expect(index(E, 3, lo: 1, hi: 9), 6);
    expect(() => index(E, 4, lo: 1, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 1, hi: 9), 8);
    expect(index(E, 6, lo: 1, hi: 9), 9);
    expect(() => index(E, 7, lo: 1, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 9), throwsArgumentError);
  });

  test('index for A lo=2 hi=9', () {
    expect(() => index(A, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('index for B lo=2 hi=9', () {
    expect(() => index(B, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('index for C lo=2 hi=9', () {
    expect(() => index(C, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('index for D lo=2 hi=9', () {
    expect(() => index(D, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 9), throwsRangeError);
  });

  test('index for E lo=2 hi=9', () {
    expect(() => index(E, -2, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 9), 2);
    expect(index(E, 3, lo: 2, hi: 9), 6);
    expect(() => index(E, 4, lo: 2, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 2, hi: 9), 8);
    expect(index(E, 6, lo: 2, hi: 9), 9);
    expect(() => index(E, 7, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 9), throwsArgumentError);
  });

  test('index for A lo=3 hi=9', () {
    expect(() => index(A, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('index for B lo=3 hi=9', () {
    expect(() => index(B, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('index for C lo=3 hi=9', () {
    expect(() => index(C, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('index for D lo=3 hi=9', () {
    expect(() => index(D, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 9), throwsRangeError);
  });

  test('index for E lo=3 hi=9', () {
    expect(() => index(E, -2, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 9), 3);
    expect(index(E, 3, lo: 3, hi: 9), 6);
    expect(() => index(E, 4, lo: 3, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 3, hi: 9), 8);
    expect(index(E, 6, lo: 3, hi: 9), 9);
    expect(() => index(E, 7, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 9), throwsArgumentError);
  });

  test('index for A lo=4 hi=9', () {
    expect(() => index(A, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('index for B lo=4 hi=9', () {
    expect(() => index(B, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('index for C lo=4 hi=9', () {
    expect(() => index(C, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('index for D lo=4 hi=9', () {
    expect(() => index(D, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 9), throwsRangeError);
  });

  test('index for E lo=4 hi=9', () {
    expect(() => index(E, -2, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 9), 4);
    expect(index(E, 3, lo: 4, hi: 9), 6);
    expect(() => index(E, 4, lo: 4, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 4, hi: 9), 8);
    expect(index(E, 6, lo: 4, hi: 9), 9);
    expect(() => index(E, 7, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 9), throwsArgumentError);
  });

  test('index for A lo=5 hi=9', () {
    expect(() => index(A, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('index for B lo=5 hi=9', () {
    expect(() => index(B, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('index for C lo=5 hi=9', () {
    expect(() => index(C, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('index for D lo=5 hi=9', () {
    expect(() => index(D, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 9), throwsRangeError);
  });

  test('index for E lo=5 hi=9', () {
    expect(() => index(E, -2, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 9), 5);
    expect(index(E, 3, lo: 5, hi: 9), 6);
    expect(() => index(E, 4, lo: 5, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 5, hi: 9), 8);
    expect(index(E, 6, lo: 5, hi: 9), 9);
    expect(() => index(E, 7, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 9), throwsArgumentError);
  });

  test('index for A lo=6 hi=9', () {
    expect(() => index(A, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('index for B lo=6 hi=9', () {
    expect(() => index(B, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('index for C lo=6 hi=9', () {
    expect(() => index(C, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('index for D lo=6 hi=9', () {
    expect(() => index(D, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 9), throwsRangeError);
  });

  test('index for E lo=6 hi=9', () {
    expect(() => index(E, -2, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 9), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 9), 6);
    expect(() => index(E, 4, lo: 6, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 6, hi: 9), 8);
    expect(index(E, 6, lo: 6, hi: 9), 9);
    expect(() => index(E, 7, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 9), throwsArgumentError);
  });

  test('index for A lo=7 hi=9', () {
    expect(() => index(A, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('index for B lo=7 hi=9', () {
    expect(() => index(B, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('index for C lo=7 hi=9', () {
    expect(() => index(C, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('index for D lo=7 hi=9', () {
    expect(() => index(D, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 9), throwsRangeError);
  });

  test('index for E lo=7 hi=9', () {
    expect(() => index(E, -2, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 9), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 9), 7);
    expect(() => index(E, 4, lo: 7, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 7, hi: 9), 8);
    expect(index(E, 6, lo: 7, hi: 9), 9);
    expect(() => index(E, 7, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 9), throwsArgumentError);
  });

  test('index for A lo=8 hi=9', () {
    expect(() => index(A, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('index for B lo=8 hi=9', () {
    expect(() => index(B, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('index for C lo=8 hi=9', () {
    expect(() => index(C, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('index for D lo=8 hi=9', () {
    expect(() => index(D, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 9), throwsRangeError);
  });

  test('index for E lo=8 hi=9', () {
    expect(() => index(E, -2, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 9), 8);
    expect(index(E, 6, lo: 8, hi: 9), 9);
    expect(() => index(E, 7, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 9), throwsArgumentError);
  });

  test('index for A lo=9 hi=9', () {
    expect(() => index(A, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 9), throwsRangeError);
  });

  test('index for B lo=9 hi=9', () {
    expect(() => index(B, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 9), throwsRangeError);
  });

  test('index for C lo=9 hi=9', () {
    expect(() => index(C, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 9), throwsRangeError);
  });

  test('index for D lo=9 hi=9', () {
    expect(() => index(D, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 9), throwsRangeError);
  });

  test('index for E lo=9 hi=9', () {
    expect(() => index(E, -2, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 9), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 9), 9);
    expect(() => index(E, 7, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 9), throwsArgumentError);
  });

  test('find_lt for A lo=None hi=None', () {
    expect(() => find_lt(A, -2), throwsArgumentError);
    expect(() => find_lt(A, -1), throwsArgumentError);
    expect(() => find_lt(A, 0), throwsArgumentError);
    expect(() => find_lt(A, 1), throwsArgumentError);
    expect(() => find_lt(A, 2), throwsArgumentError);
    expect(() => find_lt(A, 3), throwsArgumentError);
    expect(() => find_lt(A, 4), throwsArgumentError);
    expect(() => find_lt(A, 5), throwsArgumentError);
    expect(() => find_lt(A, 6), throwsArgumentError);
    expect(() => find_lt(A, 7), throwsArgumentError);
    expect(() => find_lt(A, 8), throwsArgumentError);
  });

  test('find_lt for B lo=None hi=None', () {
    expect(() => find_lt(B, -2), throwsArgumentError);
    expect(() => find_lt(B, -1), throwsArgumentError);
    expect(() => find_lt(B, 0), throwsArgumentError);
    expect(() => find_lt(B, 1), throwsArgumentError);
    expect(() => find_lt(B, 2), throwsArgumentError);
    expect(() => find_lt(B, 3), throwsArgumentError);
    expect(() => find_lt(B, 4), throwsArgumentError);
    expect(find_lt(B, 5), 4);
    expect(find_lt(B, 6), 4);
    expect(find_lt(B, 7), 4);
    expect(find_lt(B, 8), 4);
  });

  test('find_lt for C lo=None hi=None', () {
    expect(() => find_lt(C, -2), throwsArgumentError);
    expect(() => find_lt(C, -1), throwsArgumentError);
    expect(() => find_lt(C, 0), throwsArgumentError);
    expect(() => find_lt(C, 1), throwsArgumentError);
    expect(() => find_lt(C, 2), throwsArgumentError);
    expect(() => find_lt(C, 3), throwsArgumentError);
    expect(() => find_lt(C, 4), throwsArgumentError);
    expect(find_lt(C, 5), 4);
    expect(find_lt(C, 6), 5);
    expect(find_lt(C, 7), 5);
    expect(find_lt(C, 8), 5);
  });

  test('find_lt for D lo=None hi=None', () {
    expect(() => find_lt(D, -2), throwsArgumentError);
    expect(() => find_lt(D, -1), throwsArgumentError);
    expect(() => find_lt(D, 0), throwsArgumentError);
    expect(() => find_lt(D, 1), throwsArgumentError);
    expect(() => find_lt(D, 2), throwsArgumentError);
    expect(() => find_lt(D, 3), throwsArgumentError);
    expect(find_lt(D, 4), 3);
    expect(find_lt(D, 5), 4);
    expect(find_lt(D, 6), 5);
    expect(find_lt(D, 7), 5);
    expect(find_lt(D, 8), 5);
  });

  test('find_lt for E lo=None hi=None', () {
    expect(() => find_lt(E, -2), throwsArgumentError);
    expect(() => find_lt(E, -1), throwsArgumentError);
    expect(() => find_lt(E, 0), throwsArgumentError);
    expect(find_lt(E, 1), 0);
    expect(find_lt(E, 2), 1);
    expect(find_lt(E, 3), 2);
    expect(find_lt(E, 4), 3);
    expect(find_lt(E, 5), 3);
    expect(find_lt(E, 6), 5);
    expect(find_lt(E, 7), 6);
    expect(find_lt(E, 8), 6);
  });

  test('find_le for A lo=None hi=None', () {
    expect(() => find_le(A, -2), throwsArgumentError);
    expect(() => find_le(A, -1), throwsArgumentError);
    expect(() => find_le(A, 0), throwsArgumentError);
    expect(() => find_le(A, 1), throwsArgumentError);
    expect(() => find_le(A, 2), throwsArgumentError);
    expect(() => find_le(A, 3), throwsArgumentError);
    expect(() => find_le(A, 4), throwsArgumentError);
    expect(() => find_le(A, 5), throwsArgumentError);
    expect(() => find_le(A, 6), throwsArgumentError);
    expect(() => find_le(A, 7), throwsArgumentError);
    expect(() => find_le(A, 8), throwsArgumentError);
  });

  test('find_le for B lo=None hi=None', () {
    expect(() => find_le(B, -2), throwsArgumentError);
    expect(() => find_le(B, -1), throwsArgumentError);
    expect(() => find_le(B, 0), throwsArgumentError);
    expect(() => find_le(B, 1), throwsArgumentError);
    expect(() => find_le(B, 2), throwsArgumentError);
    expect(() => find_le(B, 3), throwsArgumentError);
    expect(find_le(B, 4), 4);
    expect(find_le(B, 5), 4);
    expect(find_le(B, 6), 4);
    expect(find_le(B, 7), 4);
    expect(find_le(B, 8), 4);
  });

  test('find_le for C lo=None hi=None', () {
    expect(() => find_le(C, -2), throwsArgumentError);
    expect(() => find_le(C, -1), throwsArgumentError);
    expect(() => find_le(C, 0), throwsArgumentError);
    expect(() => find_le(C, 1), throwsArgumentError);
    expect(() => find_le(C, 2), throwsArgumentError);
    expect(() => find_le(C, 3), throwsArgumentError);
    expect(find_le(C, 4), 4);
    expect(find_le(C, 5), 5);
    expect(find_le(C, 6), 5);
    expect(find_le(C, 7), 5);
    expect(find_le(C, 8), 5);
  });

  test('find_le for D lo=None hi=None', () {
    expect(() => find_le(D, -2), throwsArgumentError);
    expect(() => find_le(D, -1), throwsArgumentError);
    expect(() => find_le(D, 0), throwsArgumentError);
    expect(() => find_le(D, 1), throwsArgumentError);
    expect(() => find_le(D, 2), throwsArgumentError);
    expect(find_le(D, 3), 3);
    expect(find_le(D, 4), 4);
    expect(find_le(D, 5), 5);
    expect(find_le(D, 6), 5);
    expect(find_le(D, 7), 5);
    expect(find_le(D, 8), 5);
  });

  test('find_le for E lo=None hi=None', () {
    expect(() => find_le(E, -2), throwsArgumentError);
    expect(() => find_le(E, -1), throwsArgumentError);
    expect(find_le(E, 0), 0);
    expect(find_le(E, 1), 1);
    expect(find_le(E, 2), 2);
    expect(find_le(E, 3), 3);
    expect(find_le(E, 4), 3);
    expect(find_le(E, 5), 5);
    expect(find_le(E, 6), 6);
    expect(find_le(E, 7), 6);
    expect(find_le(E, 8), 6);
  });

  test('find_gt for A lo=None hi=None', () {
    expect(() => find_gt(A, -2), throwsArgumentError);
    expect(() => find_gt(A, -1), throwsArgumentError);
    expect(() => find_gt(A, 0), throwsArgumentError);
    expect(() => find_gt(A, 1), throwsArgumentError);
    expect(() => find_gt(A, 2), throwsArgumentError);
    expect(() => find_gt(A, 3), throwsArgumentError);
    expect(() => find_gt(A, 4), throwsArgumentError);
    expect(() => find_gt(A, 5), throwsArgumentError);
    expect(() => find_gt(A, 6), throwsArgumentError);
    expect(() => find_gt(A, 7), throwsArgumentError);
    expect(() => find_gt(A, 8), throwsArgumentError);
  });

  test('find_gt for B lo=None hi=None', () {
    expect(find_gt(B, -2), 4);
    expect(find_gt(B, -1), 4);
    expect(find_gt(B, 0), 4);
    expect(find_gt(B, 1), 4);
    expect(find_gt(B, 2), 4);
    expect(find_gt(B, 3), 4);
    expect(() => find_gt(B, 4), throwsArgumentError);
    expect(() => find_gt(B, 5), throwsArgumentError);
    expect(() => find_gt(B, 6), throwsArgumentError);
    expect(() => find_gt(B, 7), throwsArgumentError);
    expect(() => find_gt(B, 8), throwsArgumentError);
  });

  test('find_gt for C lo=None hi=None', () {
    expect(find_gt(C, -2), 4);
    expect(find_gt(C, -1), 4);
    expect(find_gt(C, 0), 4);
    expect(find_gt(C, 1), 4);
    expect(find_gt(C, 2), 4);
    expect(find_gt(C, 3), 4);
    expect(find_gt(C, 4), 5);
    expect(() => find_gt(C, 5), throwsArgumentError);
    expect(() => find_gt(C, 6), throwsArgumentError);
    expect(() => find_gt(C, 7), throwsArgumentError);
    expect(() => find_gt(C, 8), throwsArgumentError);
  });

  test('find_gt for D lo=None hi=None', () {
    expect(find_gt(D, -2), 3);
    expect(find_gt(D, -1), 3);
    expect(find_gt(D, 0), 3);
    expect(find_gt(D, 1), 3);
    expect(find_gt(D, 2), 3);
    expect(find_gt(D, 3), 4);
    expect(find_gt(D, 4), 5);
    expect(() => find_gt(D, 5), throwsArgumentError);
    expect(() => find_gt(D, 6), throwsArgumentError);
    expect(() => find_gt(D, 7), throwsArgumentError);
    expect(() => find_gt(D, 8), throwsArgumentError);
  });

  test('find_gt for E lo=None hi=None', () {
    expect(find_gt(E, -2), 0);
    expect(find_gt(E, -1), 0);
    expect(find_gt(E, 0), 1);
    expect(find_gt(E, 1), 2);
    expect(find_gt(E, 2), 3);
    expect(find_gt(E, 3), 5);
    expect(find_gt(E, 4), 5);
    expect(find_gt(E, 5), 6);
    expect(() => find_gt(E, 6), throwsArgumentError);
    expect(() => find_gt(E, 7), throwsArgumentError);
    expect(() => find_gt(E, 8), throwsArgumentError);
  });

  test('find_ge for A lo=None hi=None', () {
    expect(() => find_ge(A, -2), throwsArgumentError);
    expect(() => find_ge(A, -1), throwsArgumentError);
    expect(() => find_ge(A, 0), throwsArgumentError);
    expect(() => find_ge(A, 1), throwsArgumentError);
    expect(() => find_ge(A, 2), throwsArgumentError);
    expect(() => find_ge(A, 3), throwsArgumentError);
    expect(() => find_ge(A, 4), throwsArgumentError);
    expect(() => find_ge(A, 5), throwsArgumentError);
    expect(() => find_ge(A, 6), throwsArgumentError);
    expect(() => find_ge(A, 7), throwsArgumentError);
    expect(() => find_ge(A, 8), throwsArgumentError);
  });

  test('find_ge for B lo=None hi=None', () {
    expect(find_ge(B, -2), 4);
    expect(find_ge(B, -1), 4);
    expect(find_ge(B, 0), 4);
    expect(find_ge(B, 1), 4);
    expect(find_ge(B, 2), 4);
    expect(find_ge(B, 3), 4);
    expect(find_ge(B, 4), 4);
    expect(() => find_ge(B, 5), throwsArgumentError);
    expect(() => find_ge(B, 6), throwsArgumentError);
    expect(() => find_ge(B, 7), throwsArgumentError);
    expect(() => find_ge(B, 8), throwsArgumentError);
  });

  test('find_ge for C lo=None hi=None', () {
    expect(find_ge(C, -2), 4);
    expect(find_ge(C, -1), 4);
    expect(find_ge(C, 0), 4);
    expect(find_ge(C, 1), 4);
    expect(find_ge(C, 2), 4);
    expect(find_ge(C, 3), 4);
    expect(find_ge(C, 4), 4);
    expect(find_ge(C, 5), 5);
    expect(() => find_ge(C, 6), throwsArgumentError);
    expect(() => find_ge(C, 7), throwsArgumentError);
    expect(() => find_ge(C, 8), throwsArgumentError);
  });

  test('find_ge for D lo=None hi=None', () {
    expect(find_ge(D, -2), 3);
    expect(find_ge(D, -1), 3);
    expect(find_ge(D, 0), 3);
    expect(find_ge(D, 1), 3);
    expect(find_ge(D, 2), 3);
    expect(find_ge(D, 3), 3);
    expect(find_ge(D, 4), 4);
    expect(find_ge(D, 5), 5);
    expect(() => find_ge(D, 6), throwsArgumentError);
    expect(() => find_ge(D, 7), throwsArgumentError);
    expect(() => find_ge(D, 8), throwsArgumentError);
  });

  test('find_ge for E lo=None hi=None', () {
    expect(find_ge(E, -2), 0);
    expect(find_ge(E, -1), 0);
    expect(find_ge(E, 0), 0);
    expect(find_ge(E, 1), 1);
    expect(find_ge(E, 2), 2);
    expect(find_ge(E, 3), 3);
    expect(find_ge(E, 4), 5);
    expect(find_ge(E, 5), 5);
    expect(find_ge(E, 6), 6);
    expect(() => find_ge(E, 7), throwsArgumentError);
    expect(() => find_ge(E, 8), throwsArgumentError);
  });

  test('bsearchGreaterThan for A lo=None hi=None', () {
    expect(() => A[A.bsearchGreaterThan(-2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(-1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(0)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(3)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(4)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(8)], throwsArgumentError);
  });

  test('bsearchGreaterThan for B lo=None hi=None', () {
    expect(B[B.bsearchGreaterThan(-2)], 4);
    expect(B[B.bsearchGreaterThan(-1)], 4);
    expect(B[B.bsearchGreaterThan(0)], 4);
    expect(B[B.bsearchGreaterThan(1)], 4);
    expect(B[B.bsearchGreaterThan(2)], 4);
    expect(B[B.bsearchGreaterThan(3)], 4);
    expect(() => B[B.bsearchGreaterThan(4)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(8)], throwsArgumentError);
  });

  test('bsearchGreaterThan for C lo=None hi=None', () {
    expect(C[C.bsearchGreaterThan(-2)], 4);
    expect(C[C.bsearchGreaterThan(-1)], 4);
    expect(C[C.bsearchGreaterThan(0)], 4);
    expect(C[C.bsearchGreaterThan(1)], 4);
    expect(C[C.bsearchGreaterThan(2)], 4);
    expect(C[C.bsearchGreaterThan(3)], 4);
    expect(C[C.bsearchGreaterThan(4)], 5);
    expect(() => C[C.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThan(8)], throwsArgumentError);
  });

  test('bsearchGreaterThan for D lo=None hi=None', () {
    expect(D[D.bsearchGreaterThan(-2)], 3);
    expect(D[D.bsearchGreaterThan(-1)], 3);
    expect(D[D.bsearchGreaterThan(0)], 3);
    expect(D[D.bsearchGreaterThan(1)], 3);
    expect(D[D.bsearchGreaterThan(2)], 3);
    expect(D[D.bsearchGreaterThan(3)], 4);
    expect(D[D.bsearchGreaterThan(4)], 5);
    expect(() => D[D.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThan(8)], throwsArgumentError);
  });

  test('bsearchGreaterThan for E lo=None hi=None', () {
    expect(E[E.bsearchGreaterThan(-2)], 0);
    expect(E[E.bsearchGreaterThan(-1)], 0);
    expect(E[E.bsearchGreaterThan(0)], 1);
    expect(E[E.bsearchGreaterThan(1)], 2);
    expect(E[E.bsearchGreaterThan(2)], 3);
    expect(E[E.bsearchGreaterThan(3)], 5);
    expect(E[E.bsearchGreaterThan(4)], 5);
    expect(E[E.bsearchGreaterThan(5)], 6);
    expect(() => E[E.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => E[E.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => E[E.bsearchGreaterThan(8)], throwsArgumentError);
  });

  test('bsearchLessThan for A lo=None hi=None', () {
    expect(() => A[A.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(0)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(3)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(4)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(5)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(6)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(7)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(8)], throwsArgumentError);
  });

  test('bsearchLessThan for B lo=None hi=None', () {
    expect(() => B[B.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(0)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(3)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(4)], throwsArgumentError);
    expect(B[B.bsearchLessThan(5)], 4);
    expect(B[B.bsearchLessThan(6)], 4);
    expect(B[B.bsearchLessThan(7)], 4);
    expect(B[B.bsearchLessThan(8)], 4);
  });

  test('bsearchLessThan for C lo=None hi=None', () {
    expect(() => C[C.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(0)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(3)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(4)], throwsArgumentError);
    expect(C[C.bsearchLessThan(5)], 4);
    expect(C[C.bsearchLessThan(6)], 5);
    expect(C[C.bsearchLessThan(7)], 5);
    expect(C[C.bsearchLessThan(8)], 5);
  });

  test('bsearchLessThan for D lo=None hi=None', () {
    expect(() => D[D.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(0)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(2)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(3)], throwsArgumentError);
    expect(D[D.bsearchLessThan(4)], 3);
    expect(D[D.bsearchLessThan(5)], 4);
    expect(D[D.bsearchLessThan(6)], 5);
    expect(D[D.bsearchLessThan(7)], 5);
    expect(D[D.bsearchLessThan(8)], 5);
  });

  test('bsearchLessThan for E lo=None hi=None', () {
    expect(() => E[E.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => E[E.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => E[E.bsearchLessThan(0)], throwsArgumentError);
    expect(E[E.bsearchLessThan(1)], 0);
    expect(E[E.bsearchLessThan(2)], 1);
    expect(E[E.bsearchLessThan(3)], 2);
    expect(E[E.bsearchLessThan(4)], 3);
    expect(E[E.bsearchLessThan(5)], 3);
    expect(E[E.bsearchLessThan(6)], 5);
    expect(E[E.bsearchLessThan(7)], 6);
    expect(E[E.bsearchLessThan(8)], 6);
  });

  test('bsearchLessThanOrEqualTo for A lo=None hi=None', () {
    expect(() => A[A.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(3)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(4)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(5)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(6)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(7)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(8)], throwsArgumentError);
  });

  test('bsearchLessThanOrEqualTo for B lo=None hi=None', () {
    expect(() => B[B.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(3)], throwsArgumentError);
    expect(B[B.bsearchLessThanOrEqualTo(4)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(5)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(6)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(7)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(8)], 4);
  });

  test('bsearchLessThanOrEqualTo for C lo=None hi=None', () {
    expect(() => C[C.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(3)], throwsArgumentError);
    expect(C[C.bsearchLessThanOrEqualTo(4)], 4);
    expect(C[C.bsearchLessThanOrEqualTo(5)], 5);
    expect(C[C.bsearchLessThanOrEqualTo(6)], 5);
    expect(C[C.bsearchLessThanOrEqualTo(7)], 5);
    expect(C[C.bsearchLessThanOrEqualTo(8)], 5);
  });

  test('bsearchLessThanOrEqualTo for D lo=None hi=None', () {
    expect(() => D[D.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(D[D.bsearchLessThanOrEqualTo(3)], 3);
    expect(D[D.bsearchLessThanOrEqualTo(4)], 4);
    expect(D[D.bsearchLessThanOrEqualTo(5)], 5);
    expect(D[D.bsearchLessThanOrEqualTo(6)], 5);
    expect(D[D.bsearchLessThanOrEqualTo(7)], 5);
    expect(D[D.bsearchLessThanOrEqualTo(8)], 5);
  });

  test('bsearchLessThanOrEqualTo for E lo=None hi=None', () {
    expect(() => E[E.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => E[E.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(E[E.bsearchLessThanOrEqualTo(0)], 0);
    expect(E[E.bsearchLessThanOrEqualTo(1)], 1);
    expect(E[E.bsearchLessThanOrEqualTo(2)], 2);
    expect(E[E.bsearchLessThanOrEqualTo(3)], 3);
    expect(E[E.bsearchLessThanOrEqualTo(4)], 3);
    expect(E[E.bsearchLessThanOrEqualTo(5)], 5);
    expect(E[E.bsearchLessThanOrEqualTo(6)], 6);
    expect(E[E.bsearchLessThanOrEqualTo(7)], 6);
    expect(E[E.bsearchLessThanOrEqualTo(8)], 6);
  });

  test('bsearchGreaterThanOrEqualTo for A lo=None hi=None', () {
    expect(() => A[A.bsearchGreaterThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(0)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(3)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(4)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(5)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });

  test('bsearchGreaterThanOrEqualTo for B lo=None hi=None', () {
    expect(B[B.bsearchGreaterThanOrEqualTo(-2)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(-1)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(0)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(1)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(2)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(3)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(4)], 4);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(5)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });

  test('bsearchGreaterThanOrEqualTo for C lo=None hi=None', () {
    expect(C[C.bsearchGreaterThanOrEqualTo(-2)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(-1)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(0)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(1)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(2)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(3)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(4)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(5)], 5);
    expect(() => C[C.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });

  test('bsearchGreaterThanOrEqualTo for D lo=None hi=None', () {
    expect(D[D.bsearchGreaterThanOrEqualTo(-2)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(-1)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(0)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(1)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(2)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(3)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(4)], 4);
    expect(D[D.bsearchGreaterThanOrEqualTo(5)], 5);
    expect(() => D[D.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });

  test('bsearchGreaterThanOrEqualTo for E lo=None hi=None', () {
    expect(E[E.bsearchGreaterThanOrEqualTo(-2)], 0);
    expect(E[E.bsearchGreaterThanOrEqualTo(-1)], 0);
    expect(E[E.bsearchGreaterThanOrEqualTo(0)], 0);
    expect(E[E.bsearchGreaterThanOrEqualTo(1)], 1);
    expect(E[E.bsearchGreaterThanOrEqualTo(2)], 2);
    expect(E[E.bsearchGreaterThanOrEqualTo(3)], 3);
    expect(E[E.bsearchGreaterThanOrEqualTo(4)], 5);
    expect(E[E.bsearchGreaterThanOrEqualTo(5)], 5);
    expect(E[E.bsearchGreaterThanOrEqualTo(6)], 6);
    expect(() => E[E.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => E[E.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });
}
