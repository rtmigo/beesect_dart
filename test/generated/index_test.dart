// Generated by bisect_test_generator_v3.py at 2021-11-16 02:05:42.610402
import 'package:bisection/bisection.dart';
import 'package:test/test.dart';

void main() {
  var A = [];
  var B = [4];
  var C = [4, 5];
  var D = [3, 4, 5];
  var E = [0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
  test('index for A lo=None hi=None', () {
    expect(() => index(A, -2), throwsArgumentError);
    expect(() => index(A, -1), throwsArgumentError);
    expect(() => index(A, 0), throwsArgumentError);
    expect(() => index(A, 1), throwsArgumentError);
    expect(() => index(A, 2), throwsArgumentError);
    expect(() => index(A, 3), throwsArgumentError);
    expect(() => index(A, 4), throwsArgumentError);
    expect(() => index(A, 5), throwsArgumentError);
    expect(() => index(A, 6), throwsArgumentError);
    expect(() => index(A, 7), throwsArgumentError);
    expect(() => index(A, 8), throwsArgumentError);
  });
  test('index for B lo=None hi=None', () {
    expect(() => index(B, -2), throwsArgumentError);
    expect(() => index(B, -1), throwsArgumentError);
    expect(() => index(B, 0), throwsArgumentError);
    expect(() => index(B, 1), throwsArgumentError);
    expect(() => index(B, 2), throwsArgumentError);
    expect(() => index(B, 3), throwsArgumentError);
    expect(index(B, 4), 0);
    expect(() => index(B, 5), throwsArgumentError);
    expect(() => index(B, 6), throwsArgumentError);
    expect(() => index(B, 7), throwsArgumentError);
    expect(() => index(B, 8), throwsArgumentError);
  });
  test('index for C lo=None hi=None', () {
    expect(() => index(C, -2), throwsArgumentError);
    expect(() => index(C, -1), throwsArgumentError);
    expect(() => index(C, 0), throwsArgumentError);
    expect(() => index(C, 1), throwsArgumentError);
    expect(() => index(C, 2), throwsArgumentError);
    expect(() => index(C, 3), throwsArgumentError);
    expect(index(C, 4), 0);
    expect(index(C, 5), 1);
    expect(() => index(C, 6), throwsArgumentError);
    expect(() => index(C, 7), throwsArgumentError);
    expect(() => index(C, 8), throwsArgumentError);
  });
  test('index for D lo=None hi=None', () {
    expect(() => index(D, -2), throwsArgumentError);
    expect(() => index(D, -1), throwsArgumentError);
    expect(() => index(D, 0), throwsArgumentError);
    expect(() => index(D, 1), throwsArgumentError);
    expect(() => index(D, 2), throwsArgumentError);
    expect(index(D, 3), 0);
    expect(index(D, 4), 1);
    expect(index(D, 5), 2);
    expect(() => index(D, 6), throwsArgumentError);
    expect(() => index(D, 7), throwsArgumentError);
    expect(() => index(D, 8), throwsArgumentError);
  });
  test('index for E lo=None hi=None', () {
    expect(() => index(E, -2), throwsArgumentError);
    expect(() => index(E, -1), throwsArgumentError);
    expect(index(E, 0), 0);
    expect(index(E, 1), 1);
    expect(index(E, 2), 2);
    expect(index(E, 3), 6);
    expect(() => index(E, 4), throwsArgumentError);
    expect(index(E, 5), 8);
    expect(index(E, 6), 9);
    expect(() => index(E, 7), throwsArgumentError);
    expect(() => index(E, 8), throwsArgumentError);
  });
  test('index for A lo=0 hi=None', () {
    expect(() => index(A, -2, lo: 0), throwsArgumentError);
    expect(() => index(A, -1, lo: 0), throwsArgumentError);
    expect(() => index(A, 0, lo: 0), throwsArgumentError);
    expect(() => index(A, 1, lo: 0), throwsArgumentError);
    expect(() => index(A, 2, lo: 0), throwsArgumentError);
    expect(() => index(A, 3, lo: 0), throwsArgumentError);
    expect(() => index(A, 4, lo: 0), throwsArgumentError);
    expect(() => index(A, 5, lo: 0), throwsArgumentError);
    expect(() => index(A, 6, lo: 0), throwsArgumentError);
    expect(() => index(A, 7, lo: 0), throwsArgumentError);
    expect(() => index(A, 8, lo: 0), throwsArgumentError);
  });
  test('index for B lo=0 hi=None', () {
    expect(() => index(B, -2, lo: 0), throwsArgumentError);
    expect(() => index(B, -1, lo: 0), throwsArgumentError);
    expect(() => index(B, 0, lo: 0), throwsArgumentError);
    expect(() => index(B, 1, lo: 0), throwsArgumentError);
    expect(() => index(B, 2, lo: 0), throwsArgumentError);
    expect(() => index(B, 3, lo: 0), throwsArgumentError);
    expect(index(B, 4, lo: 0), 0);
    expect(() => index(B, 5, lo: 0), throwsArgumentError);
    expect(() => index(B, 6, lo: 0), throwsArgumentError);
    expect(() => index(B, 7, lo: 0), throwsArgumentError);
    expect(() => index(B, 8, lo: 0), throwsArgumentError);
  });
  test('index for C lo=0 hi=None', () {
    expect(() => index(C, -2, lo: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 0), throwsArgumentError);
    expect(index(C, 4, lo: 0), 0);
    expect(index(C, 5, lo: 0), 1);
    expect(() => index(C, 6, lo: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 0), throwsArgumentError);
  });
  test('index for D lo=0 hi=None', () {
    expect(() => index(D, -2, lo: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 0), throwsArgumentError);
    expect(index(D, 3, lo: 0), 0);
    expect(index(D, 4, lo: 0), 1);
    expect(index(D, 5, lo: 0), 2);
    expect(() => index(D, 6, lo: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 0), throwsArgumentError);
  });
  test('index for E lo=0 hi=None', () {
    expect(() => index(E, -2, lo: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 0), throwsArgumentError);
    expect(index(E, 0, lo: 0), 0);
    expect(index(E, 1, lo: 0), 1);
    expect(index(E, 2, lo: 0), 2);
    expect(index(E, 3, lo: 0), 6);
    expect(() => index(E, 4, lo: 0), throwsArgumentError);
    expect(index(E, 5, lo: 0), 8);
    expect(index(E, 6, lo: 0), 9);
    expect(() => index(E, 7, lo: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 0), throwsArgumentError);
  });
  test('index for A lo=1 hi=None', () {
    expect(() => index(A, -2, lo: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 1), throwsRangeError);
  });
  test('index for B lo=1 hi=None', () {
    expect(() => index(B, -2, lo: 1), throwsArgumentError);
    expect(() => index(B, -1, lo: 1), throwsArgumentError);
    expect(() => index(B, 0, lo: 1), throwsArgumentError);
    expect(() => index(B, 1, lo: 1), throwsArgumentError);
    expect(() => index(B, 2, lo: 1), throwsArgumentError);
    expect(() => index(B, 3, lo: 1), throwsArgumentError);
    expect(() => index(B, 4, lo: 1), throwsArgumentError);
    expect(() => index(B, 5, lo: 1), throwsArgumentError);
    expect(() => index(B, 6, lo: 1), throwsArgumentError);
    expect(() => index(B, 7, lo: 1), throwsArgumentError);
    expect(() => index(B, 8, lo: 1), throwsArgumentError);
  });
  test('index for C lo=1 hi=None', () {
    expect(() => index(C, -2, lo: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 1), throwsArgumentError);
    expect(() => index(C, 4, lo: 1), throwsArgumentError);
    expect(index(C, 5, lo: 1), 1);
    expect(() => index(C, 6, lo: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 1), throwsArgumentError);
  });
  test('index for D lo=1 hi=None', () {
    expect(() => index(D, -2, lo: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 1), throwsArgumentError);
    expect(index(D, 4, lo: 1), 1);
    expect(index(D, 5, lo: 1), 2);
    expect(() => index(D, 6, lo: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 1), throwsArgumentError);
  });
  test('index for E lo=1 hi=None', () {
    expect(() => index(E, -2, lo: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 1), throwsArgumentError);
    expect(index(E, 1, lo: 1), 1);
    expect(index(E, 2, lo: 1), 2);
    expect(index(E, 3, lo: 1), 6);
    expect(() => index(E, 4, lo: 1), throwsArgumentError);
    expect(index(E, 5, lo: 1), 8);
    expect(index(E, 6, lo: 1), 9);
    expect(() => index(E, 7, lo: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 1), throwsArgumentError);
  });
  test('index for A lo=2 hi=None', () {
    expect(() => index(A, -2, lo: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 2), throwsRangeError);
  });
  test('index for B lo=2 hi=None', () {
    expect(() => index(B, -2, lo: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 2), throwsRangeError);
  });
  test('index for C lo=2 hi=None', () {
    expect(() => index(C, -2, lo: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 2), throwsArgumentError);
    expect(() => index(C, 4, lo: 2), throwsArgumentError);
    expect(() => index(C, 5, lo: 2), throwsArgumentError);
    expect(() => index(C, 6, lo: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 2), throwsArgumentError);
  });
  test('index for D lo=2 hi=None', () {
    expect(() => index(D, -2, lo: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 2), throwsArgumentError);
    expect(() => index(D, 4, lo: 2), throwsArgumentError);
    expect(index(D, 5, lo: 2), 2);
    expect(() => index(D, 6, lo: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 2), throwsArgumentError);
  });
  test('index for E lo=2 hi=None', () {
    expect(() => index(E, -2, lo: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 2), throwsArgumentError);
    expect(index(E, 2, lo: 2), 2);
    expect(index(E, 3, lo: 2), 6);
    expect(() => index(E, 4, lo: 2), throwsArgumentError);
    expect(index(E, 5, lo: 2), 8);
    expect(index(E, 6, lo: 2), 9);
    expect(() => index(E, 7, lo: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 2), throwsArgumentError);
  });
  test('index for A lo=3 hi=None', () {
    expect(() => index(A, -2, lo: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 3), throwsRangeError);
  });
  test('index for B lo=3 hi=None', () {
    expect(() => index(B, -2, lo: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 3), throwsRangeError);
  });
  test('index for C lo=3 hi=None', () {
    expect(() => index(C, -2, lo: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 3), throwsRangeError);
  });
  test('index for D lo=3 hi=None', () {
    expect(() => index(D, -2, lo: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 3), throwsArgumentError);
    expect(() => index(D, 4, lo: 3), throwsArgumentError);
    expect(() => index(D, 5, lo: 3), throwsArgumentError);
    expect(() => index(D, 6, lo: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 3), throwsArgumentError);
  });
  test('index for E lo=3 hi=None', () {
    expect(() => index(E, -2, lo: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 3), throwsArgumentError);
    expect(index(E, 2, lo: 3), 3);
    expect(index(E, 3, lo: 3), 6);
    expect(() => index(E, 4, lo: 3), throwsArgumentError);
    expect(index(E, 5, lo: 3), 8);
    expect(index(E, 6, lo: 3), 9);
    expect(() => index(E, 7, lo: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 3), throwsArgumentError);
  });
  test('index for A lo=4 hi=None', () {
    expect(() => index(A, -2, lo: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 4), throwsRangeError);
  });
  test('index for B lo=4 hi=None', () {
    expect(() => index(B, -2, lo: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 4), throwsRangeError);
  });
  test('index for C lo=4 hi=None', () {
    expect(() => index(C, -2, lo: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 4), throwsRangeError);
  });
  test('index for D lo=4 hi=None', () {
    expect(() => index(D, -2, lo: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 4), throwsRangeError);
  });
  test('index for E lo=4 hi=None', () {
    expect(() => index(E, -2, lo: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 4), throwsArgumentError);
    expect(index(E, 2, lo: 4), 4);
    expect(index(E, 3, lo: 4), 6);
    expect(() => index(E, 4, lo: 4), throwsArgumentError);
    expect(index(E, 5, lo: 4), 8);
    expect(index(E, 6, lo: 4), 9);
    expect(() => index(E, 7, lo: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 4), throwsArgumentError);
  });
  test('index for A lo=5 hi=None', () {
    expect(() => index(A, -2, lo: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 5), throwsRangeError);
  });
  test('index for B lo=5 hi=None', () {
    expect(() => index(B, -2, lo: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 5), throwsRangeError);
  });
  test('index for C lo=5 hi=None', () {
    expect(() => index(C, -2, lo: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 5), throwsRangeError);
  });
  test('index for D lo=5 hi=None', () {
    expect(() => index(D, -2, lo: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 5), throwsRangeError);
  });
  test('index for E lo=5 hi=None', () {
    expect(() => index(E, -2, lo: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 5), throwsArgumentError);
    expect(index(E, 2, lo: 5), 5);
    expect(index(E, 3, lo: 5), 6);
    expect(() => index(E, 4, lo: 5), throwsArgumentError);
    expect(index(E, 5, lo: 5), 8);
    expect(index(E, 6, lo: 5), 9);
    expect(() => index(E, 7, lo: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 5), throwsArgumentError);
  });
  test('index for A lo=6 hi=None', () {
    expect(() => index(A, -2, lo: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 6), throwsRangeError);
  });
  test('index for B lo=6 hi=None', () {
    expect(() => index(B, -2, lo: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 6), throwsRangeError);
  });
  test('index for C lo=6 hi=None', () {
    expect(() => index(C, -2, lo: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 6), throwsRangeError);
  });
  test('index for D lo=6 hi=None', () {
    expect(() => index(D, -2, lo: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 6), throwsRangeError);
  });
  test('index for E lo=6 hi=None', () {
    expect(() => index(E, -2, lo: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 6), throwsArgumentError);
    expect(index(E, 3, lo: 6), 6);
    expect(() => index(E, 4, lo: 6), throwsArgumentError);
    expect(index(E, 5, lo: 6), 8);
    expect(index(E, 6, lo: 6), 9);
    expect(() => index(E, 7, lo: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 6), throwsArgumentError);
  });
  test('index for A lo=7 hi=None', () {
    expect(() => index(A, -2, lo: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 7), throwsRangeError);
  });
  test('index for B lo=7 hi=None', () {
    expect(() => index(B, -2, lo: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 7), throwsRangeError);
  });
  test('index for C lo=7 hi=None', () {
    expect(() => index(C, -2, lo: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 7), throwsRangeError);
  });
  test('index for D lo=7 hi=None', () {
    expect(() => index(D, -2, lo: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 7), throwsRangeError);
  });
  test('index for E lo=7 hi=None', () {
    expect(() => index(E, -2, lo: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 7), throwsArgumentError);
    expect(index(E, 3, lo: 7), 7);
    expect(() => index(E, 4, lo: 7), throwsArgumentError);
    expect(index(E, 5, lo: 7), 8);
    expect(index(E, 6, lo: 7), 9);
    expect(() => index(E, 7, lo: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 7), throwsArgumentError);
  });
  test('index for A lo=8 hi=None', () {
    expect(() => index(A, -2, lo: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 8), throwsRangeError);
  });
  test('index for B lo=8 hi=None', () {
    expect(() => index(B, -2, lo: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 8), throwsRangeError);
  });
  test('index for C lo=8 hi=None', () {
    expect(() => index(C, -2, lo: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 8), throwsRangeError);
  });
  test('index for D lo=8 hi=None', () {
    expect(() => index(D, -2, lo: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 8), throwsRangeError);
  });
  test('index for E lo=8 hi=None', () {
    expect(() => index(E, -2, lo: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 8), throwsArgumentError);
    expect(() => index(E, 3, lo: 8), throwsArgumentError);
    expect(() => index(E, 4, lo: 8), throwsArgumentError);
    expect(index(E, 5, lo: 8), 8);
    expect(index(E, 6, lo: 8), 9);
    expect(() => index(E, 7, lo: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 8), throwsArgumentError);
  });
  test('index for A lo=9 hi=None', () {
    expect(() => index(A, -2, lo: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 9), throwsRangeError);
  });
  test('index for B lo=9 hi=None', () {
    expect(() => index(B, -2, lo: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 9), throwsRangeError);
  });
  test('index for C lo=9 hi=None', () {
    expect(() => index(C, -2, lo: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 9), throwsRangeError);
  });
  test('index for D lo=9 hi=None', () {
    expect(() => index(D, -2, lo: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 9), throwsRangeError);
  });
  test('index for E lo=9 hi=None', () {
    expect(() => index(E, -2, lo: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 9), throwsArgumentError);
    expect(() => index(E, 3, lo: 9), throwsArgumentError);
    expect(() => index(E, 4, lo: 9), throwsArgumentError);
    expect(() => index(E, 5, lo: 9), throwsArgumentError);
    expect(index(E, 6, lo: 9), 9);
    expect(() => index(E, 7, lo: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 9), throwsArgumentError);
  });
  test('index for A lo=None hi=0', () {
    expect(() => index(A, -2, hi: 0), throwsArgumentError);
    expect(() => index(A, -1, hi: 0), throwsArgumentError);
    expect(() => index(A, 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 1, hi: 0), throwsArgumentError);
    expect(() => index(A, 2, hi: 0), throwsArgumentError);
    expect(() => index(A, 3, hi: 0), throwsArgumentError);
    expect(() => index(A, 4, hi: 0), throwsArgumentError);
    expect(() => index(A, 5, hi: 0), throwsArgumentError);
    expect(() => index(A, 6, hi: 0), throwsArgumentError);
    expect(() => index(A, 7, hi: 0), throwsArgumentError);
    expect(() => index(A, 8, hi: 0), throwsArgumentError);
  });
  test('index for B lo=None hi=0', () {
    expect(() => index(B, -2, hi: 0), throwsArgumentError);
    expect(() => index(B, -1, hi: 0), throwsArgumentError);
    expect(() => index(B, 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 2, hi: 0), throwsArgumentError);
    expect(() => index(B, 3, hi: 0), throwsArgumentError);
    expect(index(B, 4, hi: 0), 0);
    expect(() => index(B, 5, hi: 0), throwsArgumentError);
    expect(() => index(B, 6, hi: 0), throwsArgumentError);
    expect(() => index(B, 7, hi: 0), throwsArgumentError);
    expect(() => index(B, 8, hi: 0), throwsArgumentError);
  });
  test('index for C lo=None hi=0', () {
    expect(() => index(C, -2, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, hi: 0), throwsArgumentError);
    expect(index(C, 4, hi: 0), 0);
    expect(() => index(C, 5, hi: 0), throwsArgumentError);
    expect(() => index(C, 6, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, hi: 0), throwsArgumentError);
  });
  test('index for D lo=None hi=0', () {
    expect(() => index(D, -2, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, hi: 0), throwsArgumentError);
    expect(index(D, 3, hi: 0), 0);
    expect(() => index(D, 4, hi: 0), throwsArgumentError);
    expect(() => index(D, 5, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, hi: 0), throwsArgumentError);
  });
  test('index for E lo=None hi=0', () {
    expect(() => index(E, -2, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, hi: 0), throwsArgumentError);
    expect(index(E, 0, hi: 0), 0);
    expect(() => index(E, 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, hi: 0), throwsArgumentError);
  });
  test('index for A lo=0 hi=0', () {
    expect(() => index(A, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 4, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(A, 8, lo: 0, hi: 0), throwsArgumentError);
  });
  test('index for B lo=0 hi=0', () {
    expect(() => index(B, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(index(B, 4, lo: 0, hi: 0), 0);
    expect(() => index(B, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(B, 8, lo: 0, hi: 0), throwsArgumentError);
  });
  test('index for C lo=0 hi=0', () {
    expect(() => index(C, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 0), 0);
    expect(() => index(C, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 0, hi: 0), throwsArgumentError);
  });
  test('index for D lo=0 hi=0', () {
    expect(() => index(D, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 0), 0);
    expect(() => index(D, 4, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 0), throwsArgumentError);
  });
  test('index for E lo=0 hi=0', () {
    expect(() => index(E, -2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 0), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 0), 0);
    expect(() => index(E, 1, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 0), throwsArgumentError);
  });
  test('index for A lo=1 hi=0', () {
    expect(() => index(A, -2, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 0), throwsRangeError);
  });
  test('index for B lo=1 hi=0', () {
    expect(() => index(B, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 4, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 5, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(B, 8, lo: 1, hi: 0), throwsArgumentError);
  });
  test('index for C lo=1 hi=0', () {
    expect(() => index(C, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 4, lo: 1, hi: 0), throwsArgumentError);
    expect(index(C, 5, lo: 1, hi: 0), 1);
    expect(() => index(C, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 1, hi: 0), throwsArgumentError);
  });
  test('index for D lo=1 hi=0', () {
    expect(() => index(D, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 0), 1);
    expect(() => index(D, 5, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 0), throwsArgumentError);
  });
  test('index for E lo=1 hi=0', () {
    expect(() => index(E, -2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 0), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 0), 1);
    expect(() => index(E, 2, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 0), throwsArgumentError);
  });
  test('index for A lo=2 hi=0', () {
    expect(() => index(A, -2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 0), throwsRangeError);
  });
  test('index for B lo=2 hi=0', () {
    expect(() => index(B, -2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 0), throwsRangeError);
  });
  test('index for C lo=2 hi=0', () {
    expect(() => index(C, -2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, -1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 0, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 3, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 4, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 5, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 6, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 7, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(C, 8, lo: 2, hi: 0), throwsArgumentError);
  });
  test('index for D lo=2 hi=0', () {
    expect(() => index(D, -2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 0), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 0), 2);
    expect(() => index(D, 6, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 0), throwsArgumentError);
  });
  test('index for E lo=2 hi=0', () {
    expect(() => index(E, -2, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 0), 2);
    expect(() => index(E, 3, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 0), throwsArgumentError);
  });
  test('index for A lo=3 hi=0', () {
    expect(() => index(A, -2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 0), throwsRangeError);
  });
  test('index for B lo=3 hi=0', () {
    expect(() => index(B, -2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 0), throwsRangeError);
  });
  test('index for C lo=3 hi=0', () {
    expect(() => index(C, -2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 0), throwsRangeError);
  });
  test('index for D lo=3 hi=0', () {
    expect(() => index(D, -2, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 0), throwsArgumentError);
  });
  test('index for E lo=3 hi=0', () {
    expect(() => index(E, -2, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 0), 3);
    expect(() => index(E, 3, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 0), throwsArgumentError);
  });
  test('index for A lo=4 hi=0', () {
    expect(() => index(A, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 0), throwsRangeError);
  });
  test('index for B lo=4 hi=0', () {
    expect(() => index(B, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 0), throwsRangeError);
  });
  test('index for C lo=4 hi=0', () {
    expect(() => index(C, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 0), throwsRangeError);
  });
  test('index for D lo=4 hi=0', () {
    expect(() => index(D, -2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 0), throwsRangeError);
  });
  test('index for E lo=4 hi=0', () {
    expect(() => index(E, -2, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 0), 4);
    expect(() => index(E, 3, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 0), throwsArgumentError);
  });
  test('index for A lo=5 hi=0', () {
    expect(() => index(A, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 0), throwsRangeError);
  });
  test('index for B lo=5 hi=0', () {
    expect(() => index(B, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 0), throwsRangeError);
  });
  test('index for C lo=5 hi=0', () {
    expect(() => index(C, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 0), throwsRangeError);
  });
  test('index for D lo=5 hi=0', () {
    expect(() => index(D, -2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 0), throwsRangeError);
  });
  test('index for E lo=5 hi=0', () {
    expect(() => index(E, -2, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 0), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 0), 5);
    expect(() => index(E, 3, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 0), throwsArgumentError);
  });
  test('index for A lo=6 hi=0', () {
    expect(() => index(A, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 0), throwsRangeError);
  });
  test('index for B lo=6 hi=0', () {
    expect(() => index(B, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 0), throwsRangeError);
  });
  test('index for C lo=6 hi=0', () {
    expect(() => index(C, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 0), throwsRangeError);
  });
  test('index for D lo=6 hi=0', () {
    expect(() => index(D, -2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 0), throwsRangeError);
  });
  test('index for E lo=6 hi=0', () {
    expect(() => index(E, -2, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 0), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 0), 6);
    expect(() => index(E, 4, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 0), throwsArgumentError);
  });
  test('index for A lo=7 hi=0', () {
    expect(() => index(A, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 0), throwsRangeError);
  });
  test('index for B lo=7 hi=0', () {
    expect(() => index(B, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 0), throwsRangeError);
  });
  test('index for C lo=7 hi=0', () {
    expect(() => index(C, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 0), throwsRangeError);
  });
  test('index for D lo=7 hi=0', () {
    expect(() => index(D, -2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 0), throwsRangeError);
  });
  test('index for E lo=7 hi=0', () {
    expect(() => index(E, -2, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 0), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 0), 7);
    expect(() => index(E, 4, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 0), throwsArgumentError);
  });
  test('index for A lo=8 hi=0', () {
    expect(() => index(A, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 0), throwsRangeError);
  });
  test('index for B lo=8 hi=0', () {
    expect(() => index(B, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 0), throwsRangeError);
  });
  test('index for C lo=8 hi=0', () {
    expect(() => index(C, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 0), throwsRangeError);
  });
  test('index for D lo=8 hi=0', () {
    expect(() => index(D, -2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 0), throwsRangeError);
  });
  test('index for E lo=8 hi=0', () {
    expect(() => index(E, -2, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 0), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 0), 8);
    expect(() => index(E, 6, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 0), throwsArgumentError);
  });
  test('index for A lo=9 hi=0', () {
    expect(() => index(A, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 0), throwsRangeError);
  });
  test('index for B lo=9 hi=0', () {
    expect(() => index(B, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 0), throwsRangeError);
  });
  test('index for C lo=9 hi=0', () {
    expect(() => index(C, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 0), throwsRangeError);
  });
  test('index for D lo=9 hi=0', () {
    expect(() => index(D, -2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 0), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 0), throwsRangeError);
  });
  test('index for E lo=9 hi=0', () {
    expect(() => index(E, -2, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 0), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 0), 9);
    expect(() => index(E, 7, lo: 9, hi: 0), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 0), throwsArgumentError);
  });
  test('index for A lo=None hi=1', () {
    expect(() => index(A, -2, hi: 1), throwsRangeError);
    expect(() => index(A, -1, hi: 1), throwsRangeError);
    expect(() => index(A, 0, hi: 1), throwsRangeError);
    expect(() => index(A, 1, hi: 1), throwsRangeError);
    expect(() => index(A, 2, hi: 1), throwsRangeError);
    expect(() => index(A, 3, hi: 1), throwsRangeError);
    expect(() => index(A, 4, hi: 1), throwsRangeError);
    expect(() => index(A, 5, hi: 1), throwsRangeError);
    expect(() => index(A, 6, hi: 1), throwsRangeError);
    expect(() => index(A, 7, hi: 1), throwsRangeError);
    expect(() => index(A, 8, hi: 1), throwsRangeError);
  });
  test('index for B lo=None hi=1', () {
    expect(() => index(B, -2, hi: 1), throwsArgumentError);
    expect(() => index(B, -1, hi: 1), throwsArgumentError);
    expect(() => index(B, 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 2, hi: 1), throwsArgumentError);
    expect(() => index(B, 3, hi: 1), throwsArgumentError);
    expect(index(B, 4, hi: 1), 0);
    expect(() => index(B, 5, hi: 1), throwsArgumentError);
    expect(() => index(B, 6, hi: 1), throwsArgumentError);
    expect(() => index(B, 7, hi: 1), throwsArgumentError);
    expect(() => index(B, 8, hi: 1), throwsArgumentError);
  });
  test('index for C lo=None hi=1', () {
    expect(() => index(C, -2, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, hi: 1), throwsArgumentError);
    expect(index(C, 4, hi: 1), 0);
    expect(index(C, 5, hi: 1), 1);
    expect(() => index(C, 6, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, hi: 1), throwsArgumentError);
  });
  test('index for D lo=None hi=1', () {
    expect(() => index(D, -2, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, hi: 1), throwsArgumentError);
    expect(index(D, 3, hi: 1), 0);
    expect(index(D, 4, hi: 1), 1);
    expect(() => index(D, 5, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, hi: 1), throwsArgumentError);
  });
  test('index for E lo=None hi=1', () {
    expect(() => index(E, -2, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, hi: 1), throwsArgumentError);
    expect(index(E, 0, hi: 1), 0);
    expect(index(E, 1, hi: 1), 1);
    expect(() => index(E, 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, hi: 1), throwsArgumentError);
  });
  test('index for A lo=0 hi=1', () {
    expect(() => index(A, -2, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 1), throwsRangeError);
  });
  test('index for B lo=0 hi=1', () {
    expect(() => index(B, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 0, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 3, lo: 0, hi: 1), throwsArgumentError);
    expect(index(B, 4, lo: 0, hi: 1), 0);
    expect(() => index(B, 5, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(B, 8, lo: 0, hi: 1), throwsArgumentError);
  });
  test('index for C lo=0 hi=1', () {
    expect(() => index(C, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 1), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 1), 0);
    expect(index(C, 5, lo: 0, hi: 1), 1);
    expect(() => index(C, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 0, hi: 1), throwsArgumentError);
  });
  test('index for D lo=0 hi=1', () {
    expect(() => index(D, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 1), 0);
    expect(index(D, 4, lo: 0, hi: 1), 1);
    expect(() => index(D, 5, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 1), throwsArgumentError);
  });
  test('index for E lo=0 hi=1', () {
    expect(() => index(E, -2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 1), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 1), 0);
    expect(index(E, 1, lo: 0, hi: 1), 1);
    expect(() => index(E, 2, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 1), throwsArgumentError);
  });
  test('index for A lo=1 hi=1', () {
    expect(() => index(A, -2, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 1), throwsRangeError);
  });
  test('index for B lo=1 hi=1', () {
    expect(() => index(B, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 4, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 5, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(B, 8, lo: 1, hi: 1), throwsArgumentError);
  });
  test('index for C lo=1 hi=1', () {
    expect(() => index(C, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 4, lo: 1, hi: 1), throwsArgumentError);
    expect(index(C, 5, lo: 1, hi: 1), 1);
    expect(() => index(C, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 1, hi: 1), throwsArgumentError);
  });
  test('index for D lo=1 hi=1', () {
    expect(() => index(D, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 1), 1);
    expect(() => index(D, 5, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 1), throwsArgumentError);
  });
  test('index for E lo=1 hi=1', () {
    expect(() => index(E, -2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 1), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 1), 1);
    expect(() => index(E, 2, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 1), throwsArgumentError);
  });
  test('index for A lo=2 hi=1', () {
    expect(() => index(A, -2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 1), throwsRangeError);
  });
  test('index for B lo=2 hi=1', () {
    expect(() => index(B, -2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 1), throwsRangeError);
  });
  test('index for C lo=2 hi=1', () {
    expect(() => index(C, -2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, -1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 0, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 3, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 4, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 5, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 6, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 7, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(C, 8, lo: 2, hi: 1), throwsArgumentError);
  });
  test('index for D lo=2 hi=1', () {
    expect(() => index(D, -2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 1), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 1), 2);
    expect(() => index(D, 6, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 1), throwsArgumentError);
  });
  test('index for E lo=2 hi=1', () {
    expect(() => index(E, -2, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 1), 2);
    expect(() => index(E, 3, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 1), throwsArgumentError);
  });
  test('index for A lo=3 hi=1', () {
    expect(() => index(A, -2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 1), throwsRangeError);
  });
  test('index for B lo=3 hi=1', () {
    expect(() => index(B, -2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 1), throwsRangeError);
  });
  test('index for C lo=3 hi=1', () {
    expect(() => index(C, -2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 1), throwsRangeError);
  });
  test('index for D lo=3 hi=1', () {
    expect(() => index(D, -2, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 1), throwsArgumentError);
  });
  test('index for E lo=3 hi=1', () {
    expect(() => index(E, -2, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 1), 3);
    expect(() => index(E, 3, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 1), throwsArgumentError);
  });
  test('index for A lo=4 hi=1', () {
    expect(() => index(A, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 1), throwsRangeError);
  });
  test('index for B lo=4 hi=1', () {
    expect(() => index(B, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 1), throwsRangeError);
  });
  test('index for C lo=4 hi=1', () {
    expect(() => index(C, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 1), throwsRangeError);
  });
  test('index for D lo=4 hi=1', () {
    expect(() => index(D, -2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 1), throwsRangeError);
  });
  test('index for E lo=4 hi=1', () {
    expect(() => index(E, -2, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 1), 4);
    expect(() => index(E, 3, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 1), throwsArgumentError);
  });
  test('index for A lo=5 hi=1', () {
    expect(() => index(A, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 1), throwsRangeError);
  });
  test('index for B lo=5 hi=1', () {
    expect(() => index(B, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 1), throwsRangeError);
  });
  test('index for C lo=5 hi=1', () {
    expect(() => index(C, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 1), throwsRangeError);
  });
  test('index for D lo=5 hi=1', () {
    expect(() => index(D, -2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 1), throwsRangeError);
  });
  test('index for E lo=5 hi=1', () {
    expect(() => index(E, -2, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 1), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 1), 5);
    expect(() => index(E, 3, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 1), throwsArgumentError);
  });
  test('index for A lo=6 hi=1', () {
    expect(() => index(A, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 1), throwsRangeError);
  });
  test('index for B lo=6 hi=1', () {
    expect(() => index(B, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 1), throwsRangeError);
  });
  test('index for C lo=6 hi=1', () {
    expect(() => index(C, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 1), throwsRangeError);
  });
  test('index for D lo=6 hi=1', () {
    expect(() => index(D, -2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 1), throwsRangeError);
  });
  test('index for E lo=6 hi=1', () {
    expect(() => index(E, -2, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 1), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 1), 6);
    expect(() => index(E, 4, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 1), throwsArgumentError);
  });
  test('index for A lo=7 hi=1', () {
    expect(() => index(A, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 1), throwsRangeError);
  });
  test('index for B lo=7 hi=1', () {
    expect(() => index(B, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 1), throwsRangeError);
  });
  test('index for C lo=7 hi=1', () {
    expect(() => index(C, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 1), throwsRangeError);
  });
  test('index for D lo=7 hi=1', () {
    expect(() => index(D, -2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 1), throwsRangeError);
  });
  test('index for E lo=7 hi=1', () {
    expect(() => index(E, -2, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 1), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 1), 7);
    expect(() => index(E, 4, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 1), throwsArgumentError);
  });
  test('index for A lo=8 hi=1', () {
    expect(() => index(A, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 1), throwsRangeError);
  });
  test('index for B lo=8 hi=1', () {
    expect(() => index(B, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 1), throwsRangeError);
  });
  test('index for C lo=8 hi=1', () {
    expect(() => index(C, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 1), throwsRangeError);
  });
  test('index for D lo=8 hi=1', () {
    expect(() => index(D, -2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 1), throwsRangeError);
  });
  test('index for E lo=8 hi=1', () {
    expect(() => index(E, -2, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 1), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 1), 8);
    expect(() => index(E, 6, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 1), throwsArgumentError);
  });
  test('index for A lo=9 hi=1', () {
    expect(() => index(A, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 1), throwsRangeError);
  });
  test('index for B lo=9 hi=1', () {
    expect(() => index(B, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 1), throwsRangeError);
  });
  test('index for C lo=9 hi=1', () {
    expect(() => index(C, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 1), throwsRangeError);
  });
  test('index for D lo=9 hi=1', () {
    expect(() => index(D, -2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 1), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 1), throwsRangeError);
  });
  test('index for E lo=9 hi=1', () {
    expect(() => index(E, -2, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 1), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 1), 9);
    expect(() => index(E, 7, lo: 9, hi: 1), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 1), throwsArgumentError);
  });
  test('index for A lo=None hi=2', () {
    expect(() => index(A, -2, hi: 2), throwsRangeError);
    expect(() => index(A, -1, hi: 2), throwsRangeError);
    expect(() => index(A, 0, hi: 2), throwsRangeError);
    expect(() => index(A, 1, hi: 2), throwsRangeError);
    expect(() => index(A, 2, hi: 2), throwsRangeError);
    expect(() => index(A, 3, hi: 2), throwsRangeError);
    expect(() => index(A, 4, hi: 2), throwsRangeError);
    expect(() => index(A, 5, hi: 2), throwsRangeError);
    expect(() => index(A, 6, hi: 2), throwsRangeError);
    expect(() => index(A, 7, hi: 2), throwsRangeError);
    expect(() => index(A, 8, hi: 2), throwsRangeError);
  });
  test('index for B lo=None hi=2', () {
    expect(() => index(B, -2, hi: 2), throwsRangeError);
    expect(() => index(B, -1, hi: 2), throwsRangeError);
    expect(() => index(B, 0, hi: 2), throwsRangeError);
    expect(() => index(B, 1, hi: 2), throwsRangeError);
    expect(() => index(B, 2, hi: 2), throwsRangeError);
    expect(() => index(B, 3, hi: 2), throwsRangeError);
    expect(() => index(B, 4, hi: 2), throwsRangeError);
    expect(() => index(B, 5, hi: 2), throwsRangeError);
    expect(() => index(B, 6, hi: 2), throwsRangeError);
    expect(() => index(B, 7, hi: 2), throwsRangeError);
    expect(() => index(B, 8, hi: 2), throwsRangeError);
  });
  test('index for C lo=None hi=2', () {
    expect(() => index(C, -2, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, hi: 2), throwsArgumentError);
    expect(index(C, 4, hi: 2), 0);
    expect(index(C, 5, hi: 2), 1);
    expect(() => index(C, 6, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, hi: 2), throwsArgumentError);
  });
  test('index for D lo=None hi=2', () {
    expect(() => index(D, -2, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, hi: 2), throwsArgumentError);
    expect(index(D, 3, hi: 2), 0);
    expect(index(D, 4, hi: 2), 1);
    expect(index(D, 5, hi: 2), 2);
    expect(() => index(D, 6, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, hi: 2), throwsArgumentError);
  });
  test('index for E lo=None hi=2', () {
    expect(() => index(E, -2, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, hi: 2), throwsArgumentError);
    expect(index(E, 0, hi: 2), 0);
    expect(index(E, 1, hi: 2), 1);
    expect(index(E, 2, hi: 2), 2);
    expect(() => index(E, 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, hi: 2), throwsArgumentError);
  });
  test('index for A lo=0 hi=2', () {
    expect(() => index(A, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 2), throwsRangeError);
  });
  test('index for B lo=0 hi=2', () {
    expect(() => index(B, -2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 2), throwsRangeError);
  });
  test('index for C lo=0 hi=2', () {
    expect(() => index(C, -2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 2), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 2), 0);
    expect(index(C, 5, lo: 0, hi: 2), 1);
    expect(() => index(C, 6, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 0, hi: 2), throwsArgumentError);
  });
  test('index for D lo=0 hi=2', () {
    expect(() => index(D, -2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 2), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 2), 0);
    expect(index(D, 4, lo: 0, hi: 2), 1);
    expect(index(D, 5, lo: 0, hi: 2), 2);
    expect(() => index(D, 6, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 2), throwsArgumentError);
  });
  test('index for E lo=0 hi=2', () {
    expect(() => index(E, -2, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 2), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 2), 0);
    expect(index(E, 1, lo: 0, hi: 2), 1);
    expect(index(E, 2, lo: 0, hi: 2), 2);
    expect(() => index(E, 3, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 2), throwsArgumentError);
  });
  test('index for A lo=1 hi=2', () {
    expect(() => index(A, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 2), throwsRangeError);
  });
  test('index for B lo=1 hi=2', () {
    expect(() => index(B, -2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 2), throwsRangeError);
  });
  test('index for C lo=1 hi=2', () {
    expect(() => index(C, -2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 4, lo: 1, hi: 2), throwsArgumentError);
    expect(index(C, 5, lo: 1, hi: 2), 1);
    expect(() => index(C, 6, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 1, hi: 2), throwsArgumentError);
  });
  test('index for D lo=1 hi=2', () {
    expect(() => index(D, -2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 2), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 2), 1);
    expect(index(D, 5, lo: 1, hi: 2), 2);
    expect(() => index(D, 6, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 2), throwsArgumentError);
  });
  test('index for E lo=1 hi=2', () {
    expect(() => index(E, -2, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 2), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 2), 1);
    expect(index(E, 2, lo: 1, hi: 2), 2);
    expect(() => index(E, 3, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 2), throwsArgumentError);
  });
  test('index for A lo=2 hi=2', () {
    expect(() => index(A, -2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 2), throwsRangeError);
  });
  test('index for B lo=2 hi=2', () {
    expect(() => index(B, -2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 2), throwsRangeError);
  });
  test('index for C lo=2 hi=2', () {
    expect(() => index(C, -2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, -1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 0, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 3, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 4, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 5, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 6, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 7, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(C, 8, lo: 2, hi: 2), throwsArgumentError);
  });
  test('index for D lo=2 hi=2', () {
    expect(() => index(D, -2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 2), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 2), 2);
    expect(() => index(D, 6, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 2), throwsArgumentError);
  });
  test('index for E lo=2 hi=2', () {
    expect(() => index(E, -2, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 2), 2);
    expect(() => index(E, 3, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 2), throwsArgumentError);
  });
  test('index for A lo=3 hi=2', () {
    expect(() => index(A, -2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 2), throwsRangeError);
  });
  test('index for B lo=3 hi=2', () {
    expect(() => index(B, -2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 2), throwsRangeError);
  });
  test('index for C lo=3 hi=2', () {
    expect(() => index(C, -2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 2), throwsRangeError);
  });
  test('index for D lo=3 hi=2', () {
    expect(() => index(D, -2, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 2), throwsArgumentError);
  });
  test('index for E lo=3 hi=2', () {
    expect(() => index(E, -2, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 2), 3);
    expect(() => index(E, 3, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 2), throwsArgumentError);
  });
  test('index for A lo=4 hi=2', () {
    expect(() => index(A, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 2), throwsRangeError);
  });
  test('index for B lo=4 hi=2', () {
    expect(() => index(B, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 2), throwsRangeError);
  });
  test('index for C lo=4 hi=2', () {
    expect(() => index(C, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 2), throwsRangeError);
  });
  test('index for D lo=4 hi=2', () {
    expect(() => index(D, -2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 2), throwsRangeError);
  });
  test('index for E lo=4 hi=2', () {
    expect(() => index(E, -2, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 2), 4);
    expect(() => index(E, 3, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 2), throwsArgumentError);
  });
  test('index for A lo=5 hi=2', () {
    expect(() => index(A, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 2), throwsRangeError);
  });
  test('index for B lo=5 hi=2', () {
    expect(() => index(B, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 2), throwsRangeError);
  });
  test('index for C lo=5 hi=2', () {
    expect(() => index(C, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 2), throwsRangeError);
  });
  test('index for D lo=5 hi=2', () {
    expect(() => index(D, -2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 2), throwsRangeError);
  });
  test('index for E lo=5 hi=2', () {
    expect(() => index(E, -2, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 2), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 2), 5);
    expect(() => index(E, 3, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 2), throwsArgumentError);
  });
  test('index for A lo=6 hi=2', () {
    expect(() => index(A, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 2), throwsRangeError);
  });
  test('index for B lo=6 hi=2', () {
    expect(() => index(B, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 2), throwsRangeError);
  });
  test('index for C lo=6 hi=2', () {
    expect(() => index(C, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 2), throwsRangeError);
  });
  test('index for D lo=6 hi=2', () {
    expect(() => index(D, -2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 2), throwsRangeError);
  });
  test('index for E lo=6 hi=2', () {
    expect(() => index(E, -2, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 2), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 2), 6);
    expect(() => index(E, 4, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 2), throwsArgumentError);
  });
  test('index for A lo=7 hi=2', () {
    expect(() => index(A, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 2), throwsRangeError);
  });
  test('index for B lo=7 hi=2', () {
    expect(() => index(B, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 2), throwsRangeError);
  });
  test('index for C lo=7 hi=2', () {
    expect(() => index(C, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 2), throwsRangeError);
  });
  test('index for D lo=7 hi=2', () {
    expect(() => index(D, -2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 2), throwsRangeError);
  });
  test('index for E lo=7 hi=2', () {
    expect(() => index(E, -2, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 2), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 2), 7);
    expect(() => index(E, 4, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 2), throwsArgumentError);
  });
  test('index for A lo=8 hi=2', () {
    expect(() => index(A, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 2), throwsRangeError);
  });
  test('index for B lo=8 hi=2', () {
    expect(() => index(B, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 2), throwsRangeError);
  });
  test('index for C lo=8 hi=2', () {
    expect(() => index(C, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 2), throwsRangeError);
  });
  test('index for D lo=8 hi=2', () {
    expect(() => index(D, -2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 2), throwsRangeError);
  });
  test('index for E lo=8 hi=2', () {
    expect(() => index(E, -2, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 2), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 2), 8);
    expect(() => index(E, 6, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 2), throwsArgumentError);
  });
  test('index for A lo=9 hi=2', () {
    expect(() => index(A, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 2), throwsRangeError);
  });
  test('index for B lo=9 hi=2', () {
    expect(() => index(B, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 2), throwsRangeError);
  });
  test('index for C lo=9 hi=2', () {
    expect(() => index(C, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 2), throwsRangeError);
  });
  test('index for D lo=9 hi=2', () {
    expect(() => index(D, -2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 2), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 2), throwsRangeError);
  });
  test('index for E lo=9 hi=2', () {
    expect(() => index(E, -2, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 2), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 2), 9);
    expect(() => index(E, 7, lo: 9, hi: 2), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 2), throwsArgumentError);
  });
  test('index for A lo=None hi=3', () {
    expect(() => index(A, -2, hi: 3), throwsRangeError);
    expect(() => index(A, -1, hi: 3), throwsRangeError);
    expect(() => index(A, 0, hi: 3), throwsRangeError);
    expect(() => index(A, 1, hi: 3), throwsRangeError);
    expect(() => index(A, 2, hi: 3), throwsRangeError);
    expect(() => index(A, 3, hi: 3), throwsRangeError);
    expect(() => index(A, 4, hi: 3), throwsRangeError);
    expect(() => index(A, 5, hi: 3), throwsRangeError);
    expect(() => index(A, 6, hi: 3), throwsRangeError);
    expect(() => index(A, 7, hi: 3), throwsRangeError);
    expect(() => index(A, 8, hi: 3), throwsRangeError);
  });
  test('index for B lo=None hi=3', () {
    expect(() => index(B, -2, hi: 3), throwsRangeError);
    expect(() => index(B, -1, hi: 3), throwsRangeError);
    expect(() => index(B, 0, hi: 3), throwsRangeError);
    expect(() => index(B, 1, hi: 3), throwsRangeError);
    expect(() => index(B, 2, hi: 3), throwsRangeError);
    expect(() => index(B, 3, hi: 3), throwsRangeError);
    expect(() => index(B, 4, hi: 3), throwsRangeError);
    expect(() => index(B, 5, hi: 3), throwsRangeError);
    expect(() => index(B, 6, hi: 3), throwsRangeError);
    expect(() => index(B, 7, hi: 3), throwsRangeError);
    expect(() => index(B, 8, hi: 3), throwsRangeError);
  });
  test('index for C lo=None hi=3', () {
    expect(() => index(C, -2, hi: 3), throwsArgumentError);
    expect(() => index(C, -1, hi: 3), throwsArgumentError);
    expect(() => index(C, 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 1, hi: 3), throwsArgumentError);
    expect(() => index(C, 2, hi: 3), throwsArgumentError);
    expect(() => index(C, 3, hi: 3), throwsArgumentError);
    expect(index(C, 4, hi: 3), 0);
    expect(index(C, 5, hi: 3), 1);
    expect(() => index(C, 6, hi: 3), throwsRangeError);
    expect(() => index(C, 7, hi: 3), throwsRangeError);
    expect(() => index(C, 8, hi: 3), throwsRangeError);
  });
  test('index for D lo=None hi=3', () {
    expect(() => index(D, -2, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, hi: 3), throwsArgumentError);
    expect(index(D, 3, hi: 3), 0);
    expect(index(D, 4, hi: 3), 1);
    expect(index(D, 5, hi: 3), 2);
    expect(() => index(D, 6, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, hi: 3), throwsArgumentError);
  });
  test('index for E lo=None hi=3', () {
    expect(() => index(E, -2, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, hi: 3), throwsArgumentError);
    expect(index(E, 0, hi: 3), 0);
    expect(index(E, 1, hi: 3), 1);
    expect(index(E, 2, hi: 3), 2);
    expect(() => index(E, 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, hi: 3), throwsArgumentError);
  });
  test('index for A lo=0 hi=3', () {
    expect(() => index(A, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 3), throwsRangeError);
  });
  test('index for B lo=0 hi=3', () {
    expect(() => index(B, -2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 3), throwsRangeError);
  });
  test('index for C lo=0 hi=3', () {
    expect(() => index(C, -2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, -1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 0, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(C, 3, lo: 0, hi: 3), throwsArgumentError);
    expect(index(C, 4, lo: 0, hi: 3), 0);
    expect(index(C, 5, lo: 0, hi: 3), 1);
    expect(() => index(C, 6, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 3), throwsRangeError);
  });
  test('index for D lo=0 hi=3', () {
    expect(() => index(D, -2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 3), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 3), 0);
    expect(index(D, 4, lo: 0, hi: 3), 1);
    expect(index(D, 5, lo: 0, hi: 3), 2);
    expect(() => index(D, 6, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 0, hi: 3), throwsArgumentError);
  });
  test('index for E lo=0 hi=3', () {
    expect(() => index(E, -2, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 3), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 3), 0);
    expect(index(E, 1, lo: 0, hi: 3), 1);
    expect(index(E, 2, lo: 0, hi: 3), 2);
    expect(() => index(E, 3, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 3), throwsArgumentError);
  });
  test('index for A lo=1 hi=3', () {
    expect(() => index(A, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 3), throwsRangeError);
  });
  test('index for B lo=1 hi=3', () {
    expect(() => index(B, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 3), throwsRangeError);
  });
  test('index for C lo=1 hi=3', () {
    expect(() => index(C, -2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 3), throwsRangeError);
  });
  test('index for D lo=1 hi=3', () {
    expect(() => index(D, -2, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 3), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 3), 1);
    expect(index(D, 5, lo: 1, hi: 3), 2);
    expect(() => index(D, 6, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 1, hi: 3), throwsArgumentError);
  });
  test('index for E lo=1 hi=3', () {
    expect(() => index(E, -2, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 3), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 3), 1);
    expect(index(E, 2, lo: 1, hi: 3), 2);
    expect(() => index(E, 3, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 3), throwsArgumentError);
  });
  test('index for A lo=2 hi=3', () {
    expect(() => index(A, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 3), throwsRangeError);
  });
  test('index for B lo=2 hi=3', () {
    expect(() => index(B, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 3), throwsRangeError);
  });
  test('index for C lo=2 hi=3', () {
    expect(() => index(C, -2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 3), throwsRangeError);
  });
  test('index for D lo=2 hi=3', () {
    expect(() => index(D, -2, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 4, lo: 2, hi: 3), throwsArgumentError);
    expect(index(D, 5, lo: 2, hi: 3), 2);
    expect(() => index(D, 6, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 2, hi: 3), throwsArgumentError);
  });
  test('index for E lo=2 hi=3', () {
    expect(() => index(E, -2, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 3), 2);
    expect(() => index(E, 3, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 3), throwsArgumentError);
  });
  test('index for A lo=3 hi=3', () {
    expect(() => index(A, -2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 3), throwsRangeError);
  });
  test('index for B lo=3 hi=3', () {
    expect(() => index(B, -2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 3), throwsRangeError);
  });
  test('index for C lo=3 hi=3', () {
    expect(() => index(C, -2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 3), throwsRangeError);
  });
  test('index for D lo=3 hi=3', () {
    expect(() => index(D, -2, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, -1, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 0, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 1, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 2, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 3, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 4, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 5, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 6, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 7, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(D, 8, lo: 3, hi: 3), throwsArgumentError);
  });
  test('index for E lo=3 hi=3', () {
    expect(() => index(E, -2, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 3), 3);
    expect(() => index(E, 3, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 3), throwsArgumentError);
  });
  test('index for A lo=4 hi=3', () {
    expect(() => index(A, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 3), throwsRangeError);
  });
  test('index for B lo=4 hi=3', () {
    expect(() => index(B, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 3), throwsRangeError);
  });
  test('index for C lo=4 hi=3', () {
    expect(() => index(C, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 3), throwsRangeError);
  });
  test('index for D lo=4 hi=3', () {
    expect(() => index(D, -2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 3), throwsRangeError);
  });
  test('index for E lo=4 hi=3', () {
    expect(() => index(E, -2, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 3), 4);
    expect(() => index(E, 3, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 3), throwsArgumentError);
  });
  test('index for A lo=5 hi=3', () {
    expect(() => index(A, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 3), throwsRangeError);
  });
  test('index for B lo=5 hi=3', () {
    expect(() => index(B, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 3), throwsRangeError);
  });
  test('index for C lo=5 hi=3', () {
    expect(() => index(C, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 3), throwsRangeError);
  });
  test('index for D lo=5 hi=3', () {
    expect(() => index(D, -2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 3), throwsRangeError);
  });
  test('index for E lo=5 hi=3', () {
    expect(() => index(E, -2, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 3), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 3), 5);
    expect(() => index(E, 3, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 3), throwsArgumentError);
  });
  test('index for A lo=6 hi=3', () {
    expect(() => index(A, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 3), throwsRangeError);
  });
  test('index for B lo=6 hi=3', () {
    expect(() => index(B, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 3), throwsRangeError);
  });
  test('index for C lo=6 hi=3', () {
    expect(() => index(C, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 3), throwsRangeError);
  });
  test('index for D lo=6 hi=3', () {
    expect(() => index(D, -2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 3), throwsRangeError);
  });
  test('index for E lo=6 hi=3', () {
    expect(() => index(E, -2, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 3), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 3), 6);
    expect(() => index(E, 4, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 3), throwsArgumentError);
  });
  test('index for A lo=7 hi=3', () {
    expect(() => index(A, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 3), throwsRangeError);
  });
  test('index for B lo=7 hi=3', () {
    expect(() => index(B, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 3), throwsRangeError);
  });
  test('index for C lo=7 hi=3', () {
    expect(() => index(C, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 3), throwsRangeError);
  });
  test('index for D lo=7 hi=3', () {
    expect(() => index(D, -2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 3), throwsRangeError);
  });
  test('index for E lo=7 hi=3', () {
    expect(() => index(E, -2, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 3), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 3), 7);
    expect(() => index(E, 4, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 3), throwsArgumentError);
  });
  test('index for A lo=8 hi=3', () {
    expect(() => index(A, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 3), throwsRangeError);
  });
  test('index for B lo=8 hi=3', () {
    expect(() => index(B, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 3), throwsRangeError);
  });
  test('index for C lo=8 hi=3', () {
    expect(() => index(C, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 3), throwsRangeError);
  });
  test('index for D lo=8 hi=3', () {
    expect(() => index(D, -2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 3), throwsRangeError);
  });
  test('index for E lo=8 hi=3', () {
    expect(() => index(E, -2, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 3), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 3), 8);
    expect(() => index(E, 6, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 3), throwsArgumentError);
  });
  test('index for A lo=9 hi=3', () {
    expect(() => index(A, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 3), throwsRangeError);
  });
  test('index for B lo=9 hi=3', () {
    expect(() => index(B, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 3), throwsRangeError);
  });
  test('index for C lo=9 hi=3', () {
    expect(() => index(C, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 3), throwsRangeError);
  });
  test('index for D lo=9 hi=3', () {
    expect(() => index(D, -2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 3), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 3), throwsRangeError);
  });
  test('index for E lo=9 hi=3', () {
    expect(() => index(E, -2, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 3), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 3), 9);
    expect(() => index(E, 7, lo: 9, hi: 3), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 3), throwsArgumentError);
  });
  test('index for A lo=None hi=4', () {
    expect(() => index(A, -2, hi: 4), throwsRangeError);
    expect(() => index(A, -1, hi: 4), throwsRangeError);
    expect(() => index(A, 0, hi: 4), throwsRangeError);
    expect(() => index(A, 1, hi: 4), throwsRangeError);
    expect(() => index(A, 2, hi: 4), throwsRangeError);
    expect(() => index(A, 3, hi: 4), throwsRangeError);
    expect(() => index(A, 4, hi: 4), throwsRangeError);
    expect(() => index(A, 5, hi: 4), throwsRangeError);
    expect(() => index(A, 6, hi: 4), throwsRangeError);
    expect(() => index(A, 7, hi: 4), throwsRangeError);
    expect(() => index(A, 8, hi: 4), throwsRangeError);
  });
  test('index for B lo=None hi=4', () {
    expect(() => index(B, -2, hi: 4), throwsRangeError);
    expect(() => index(B, -1, hi: 4), throwsRangeError);
    expect(() => index(B, 0, hi: 4), throwsRangeError);
    expect(() => index(B, 1, hi: 4), throwsRangeError);
    expect(() => index(B, 2, hi: 4), throwsRangeError);
    expect(() => index(B, 3, hi: 4), throwsRangeError);
    expect(() => index(B, 4, hi: 4), throwsRangeError);
    expect(() => index(B, 5, hi: 4), throwsRangeError);
    expect(() => index(B, 6, hi: 4), throwsRangeError);
    expect(() => index(B, 7, hi: 4), throwsRangeError);
    expect(() => index(B, 8, hi: 4), throwsRangeError);
  });
  test('index for C lo=None hi=4', () {
    expect(() => index(C, -2, hi: 4), throwsRangeError);
    expect(() => index(C, -1, hi: 4), throwsRangeError);
    expect(() => index(C, 0, hi: 4), throwsRangeError);
    expect(() => index(C, 1, hi: 4), throwsRangeError);
    expect(() => index(C, 2, hi: 4), throwsRangeError);
    expect(() => index(C, 3, hi: 4), throwsRangeError);
    expect(() => index(C, 4, hi: 4), throwsRangeError);
    expect(() => index(C, 5, hi: 4), throwsRangeError);
    expect(() => index(C, 6, hi: 4), throwsRangeError);
    expect(() => index(C, 7, hi: 4), throwsRangeError);
    expect(() => index(C, 8, hi: 4), throwsRangeError);
  });
  test('index for D lo=None hi=4', () {
    expect(() => index(D, -2, hi: 4), throwsArgumentError);
    expect(() => index(D, -1, hi: 4), throwsArgumentError);
    expect(() => index(D, 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 2, hi: 4), throwsArgumentError);
    expect(index(D, 3, hi: 4), 0);
    expect(index(D, 4, hi: 4), 1);
    expect(index(D, 5, hi: 4), 2);
    expect(() => index(D, 6, hi: 4), throwsRangeError);
    expect(() => index(D, 7, hi: 4), throwsRangeError);
    expect(() => index(D, 8, hi: 4), throwsRangeError);
  });
  test('index for E lo=None hi=4', () {
    expect(() => index(E, -2, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, hi: 4), throwsArgumentError);
    expect(index(E, 0, hi: 4), 0);
    expect(index(E, 1, hi: 4), 1);
    expect(index(E, 2, hi: 4), 2);
    expect(() => index(E, 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, hi: 4), throwsArgumentError);
  });
  test('index for A lo=0 hi=4', () {
    expect(() => index(A, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 4), throwsRangeError);
  });
  test('index for B lo=0 hi=4', () {
    expect(() => index(B, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 4), throwsRangeError);
  });
  test('index for C lo=0 hi=4', () {
    expect(() => index(C, -2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 4), throwsRangeError);
  });
  test('index for D lo=0 hi=4', () {
    expect(() => index(D, -2, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 4), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 4), 0);
    expect(index(D, 4, lo: 0, hi: 4), 1);
    expect(index(D, 5, lo: 0, hi: 4), 2);
    expect(() => index(D, 6, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 4), throwsRangeError);
  });
  test('index for E lo=0 hi=4', () {
    expect(() => index(E, -2, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 4), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 4), 0);
    expect(index(E, 1, lo: 0, hi: 4), 1);
    expect(index(E, 2, lo: 0, hi: 4), 2);
    expect(() => index(E, 3, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 4), throwsArgumentError);
  });
  test('index for A lo=1 hi=4', () {
    expect(() => index(A, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 4), throwsRangeError);
  });
  test('index for B lo=1 hi=4', () {
    expect(() => index(B, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 4), throwsRangeError);
  });
  test('index for C lo=1 hi=4', () {
    expect(() => index(C, -2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 4), throwsRangeError);
  });
  test('index for D lo=1 hi=4', () {
    expect(() => index(D, -2, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, -1, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 0, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 1, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 2, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(D, 3, lo: 1, hi: 4), throwsArgumentError);
    expect(index(D, 4, lo: 1, hi: 4), 1);
    expect(index(D, 5, lo: 1, hi: 4), 2);
    expect(() => index(D, 6, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 4), throwsRangeError);
  });
  test('index for E lo=1 hi=4', () {
    expect(() => index(E, -2, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 4), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 4), 1);
    expect(index(E, 2, lo: 1, hi: 4), 2);
    expect(() => index(E, 3, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 4), throwsArgumentError);
  });
  test('index for A lo=2 hi=4', () {
    expect(() => index(A, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 4), throwsRangeError);
  });
  test('index for B lo=2 hi=4', () {
    expect(() => index(B, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 4), throwsRangeError);
  });
  test('index for C lo=2 hi=4', () {
    expect(() => index(C, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 4), throwsRangeError);
  });
  test('index for D lo=2 hi=4', () {
    expect(() => index(D, -2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 4), throwsRangeError);
  });
  test('index for E lo=2 hi=4', () {
    expect(() => index(E, -2, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 4), 2);
    expect(() => index(E, 3, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 4), throwsArgumentError);
  });
  test('index for A lo=3 hi=4', () {
    expect(() => index(A, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 4), throwsRangeError);
  });
  test('index for B lo=3 hi=4', () {
    expect(() => index(B, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 4), throwsRangeError);
  });
  test('index for C lo=3 hi=4', () {
    expect(() => index(C, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 4), throwsRangeError);
  });
  test('index for D lo=3 hi=4', () {
    expect(() => index(D, -2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 4), throwsRangeError);
  });
  test('index for E lo=3 hi=4', () {
    expect(() => index(E, -2, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 4), 3);
    expect(() => index(E, 3, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 4), throwsArgumentError);
  });
  test('index for A lo=4 hi=4', () {
    expect(() => index(A, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 4), throwsRangeError);
  });
  test('index for B lo=4 hi=4', () {
    expect(() => index(B, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 4), throwsRangeError);
  });
  test('index for C lo=4 hi=4', () {
    expect(() => index(C, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 4), throwsRangeError);
  });
  test('index for D lo=4 hi=4', () {
    expect(() => index(D, -2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 4), throwsRangeError);
  });
  test('index for E lo=4 hi=4', () {
    expect(() => index(E, -2, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 4), 4);
    expect(() => index(E, 3, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 4), throwsArgumentError);
  });
  test('index for A lo=5 hi=4', () {
    expect(() => index(A, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 4), throwsRangeError);
  });
  test('index for B lo=5 hi=4', () {
    expect(() => index(B, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 4), throwsRangeError);
  });
  test('index for C lo=5 hi=4', () {
    expect(() => index(C, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 4), throwsRangeError);
  });
  test('index for D lo=5 hi=4', () {
    expect(() => index(D, -2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 4), throwsRangeError);
  });
  test('index for E lo=5 hi=4', () {
    expect(() => index(E, -2, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 4), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 4), 5);
    expect(() => index(E, 3, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 4), throwsArgumentError);
  });
  test('index for A lo=6 hi=4', () {
    expect(() => index(A, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 4), throwsRangeError);
  });
  test('index for B lo=6 hi=4', () {
    expect(() => index(B, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 4), throwsRangeError);
  });
  test('index for C lo=6 hi=4', () {
    expect(() => index(C, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 4), throwsRangeError);
  });
  test('index for D lo=6 hi=4', () {
    expect(() => index(D, -2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 4), throwsRangeError);
  });
  test('index for E lo=6 hi=4', () {
    expect(() => index(E, -2, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 4), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 4), 6);
    expect(() => index(E, 4, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 4), throwsArgumentError);
  });
  test('index for A lo=7 hi=4', () {
    expect(() => index(A, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 4), throwsRangeError);
  });
  test('index for B lo=7 hi=4', () {
    expect(() => index(B, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 4), throwsRangeError);
  });
  test('index for C lo=7 hi=4', () {
    expect(() => index(C, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 4), throwsRangeError);
  });
  test('index for D lo=7 hi=4', () {
    expect(() => index(D, -2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 4), throwsRangeError);
  });
  test('index for E lo=7 hi=4', () {
    expect(() => index(E, -2, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 4), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 4), 7);
    expect(() => index(E, 4, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 4), throwsArgumentError);
  });
  test('index for A lo=8 hi=4', () {
    expect(() => index(A, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 4), throwsRangeError);
  });
  test('index for B lo=8 hi=4', () {
    expect(() => index(B, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 4), throwsRangeError);
  });
  test('index for C lo=8 hi=4', () {
    expect(() => index(C, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 4), throwsRangeError);
  });
  test('index for D lo=8 hi=4', () {
    expect(() => index(D, -2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 4), throwsRangeError);
  });
  test('index for E lo=8 hi=4', () {
    expect(() => index(E, -2, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 4), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 4), 8);
    expect(() => index(E, 6, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 4), throwsArgumentError);
  });
  test('index for A lo=9 hi=4', () {
    expect(() => index(A, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 4), throwsRangeError);
  });
  test('index for B lo=9 hi=4', () {
    expect(() => index(B, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 4), throwsRangeError);
  });
  test('index for C lo=9 hi=4', () {
    expect(() => index(C, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 4), throwsRangeError);
  });
  test('index for D lo=9 hi=4', () {
    expect(() => index(D, -2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 4), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 4), throwsRangeError);
  });
  test('index for E lo=9 hi=4', () {
    expect(() => index(E, -2, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 4), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 4), 9);
    expect(() => index(E, 7, lo: 9, hi: 4), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 4), throwsArgumentError);
  });
  test('index for A lo=None hi=5', () {
    expect(() => index(A, -2, hi: 5), throwsRangeError);
    expect(() => index(A, -1, hi: 5), throwsRangeError);
    expect(() => index(A, 0, hi: 5), throwsRangeError);
    expect(() => index(A, 1, hi: 5), throwsRangeError);
    expect(() => index(A, 2, hi: 5), throwsRangeError);
    expect(() => index(A, 3, hi: 5), throwsRangeError);
    expect(() => index(A, 4, hi: 5), throwsRangeError);
    expect(() => index(A, 5, hi: 5), throwsRangeError);
    expect(() => index(A, 6, hi: 5), throwsRangeError);
    expect(() => index(A, 7, hi: 5), throwsRangeError);
    expect(() => index(A, 8, hi: 5), throwsRangeError);
  });
  test('index for B lo=None hi=5', () {
    expect(() => index(B, -2, hi: 5), throwsRangeError);
    expect(() => index(B, -1, hi: 5), throwsRangeError);
    expect(() => index(B, 0, hi: 5), throwsRangeError);
    expect(() => index(B, 1, hi: 5), throwsRangeError);
    expect(() => index(B, 2, hi: 5), throwsRangeError);
    expect(() => index(B, 3, hi: 5), throwsRangeError);
    expect(() => index(B, 4, hi: 5), throwsRangeError);
    expect(() => index(B, 5, hi: 5), throwsRangeError);
    expect(() => index(B, 6, hi: 5), throwsRangeError);
    expect(() => index(B, 7, hi: 5), throwsRangeError);
    expect(() => index(B, 8, hi: 5), throwsRangeError);
  });
  test('index for C lo=None hi=5', () {
    expect(() => index(C, -2, hi: 5), throwsRangeError);
    expect(() => index(C, -1, hi: 5), throwsRangeError);
    expect(() => index(C, 0, hi: 5), throwsRangeError);
    expect(() => index(C, 1, hi: 5), throwsRangeError);
    expect(() => index(C, 2, hi: 5), throwsRangeError);
    expect(() => index(C, 3, hi: 5), throwsRangeError);
    expect(() => index(C, 4, hi: 5), throwsRangeError);
    expect(() => index(C, 5, hi: 5), throwsRangeError);
    expect(() => index(C, 6, hi: 5), throwsRangeError);
    expect(() => index(C, 7, hi: 5), throwsRangeError);
    expect(() => index(C, 8, hi: 5), throwsRangeError);
  });
  test('index for D lo=None hi=5', () {
    expect(() => index(D, -2, hi: 5), throwsArgumentError);
    expect(() => index(D, -1, hi: 5), throwsArgumentError);
    expect(() => index(D, 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 1, hi: 5), throwsArgumentError);
    expect(() => index(D, 2, hi: 5), throwsArgumentError);
    expect(index(D, 3, hi: 5), 0);
    expect(index(D, 4, hi: 5), 1);
    expect(index(D, 5, hi: 5), 2);
    expect(() => index(D, 6, hi: 5), throwsRangeError);
    expect(() => index(D, 7, hi: 5), throwsRangeError);
    expect(() => index(D, 8, hi: 5), throwsRangeError);
  });
  test('index for E lo=None hi=5', () {
    expect(() => index(E, -2, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, hi: 5), throwsArgumentError);
    expect(index(E, 0, hi: 5), 0);
    expect(index(E, 1, hi: 5), 1);
    expect(index(E, 2, hi: 5), 2);
    expect(() => index(E, 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, hi: 5), throwsArgumentError);
  });
  test('index for A lo=0 hi=5', () {
    expect(() => index(A, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 5), throwsRangeError);
  });
  test('index for B lo=0 hi=5', () {
    expect(() => index(B, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 5), throwsRangeError);
  });
  test('index for C lo=0 hi=5', () {
    expect(() => index(C, -2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 5), throwsRangeError);
  });
  test('index for D lo=0 hi=5', () {
    expect(() => index(D, -2, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, -1, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 0, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 1, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(D, 2, lo: 0, hi: 5), throwsArgumentError);
    expect(index(D, 3, lo: 0, hi: 5), 0);
    expect(index(D, 4, lo: 0, hi: 5), 1);
    expect(index(D, 5, lo: 0, hi: 5), 2);
    expect(() => index(D, 6, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 5), throwsRangeError);
  });
  test('index for E lo=0 hi=5', () {
    expect(() => index(E, -2, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 5), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 5), 0);
    expect(index(E, 1, lo: 0, hi: 5), 1);
    expect(index(E, 2, lo: 0, hi: 5), 2);
    expect(() => index(E, 3, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 5), throwsArgumentError);
  });
  test('index for A lo=1 hi=5', () {
    expect(() => index(A, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 5), throwsRangeError);
  });
  test('index for B lo=1 hi=5', () {
    expect(() => index(B, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 5), throwsRangeError);
  });
  test('index for C lo=1 hi=5', () {
    expect(() => index(C, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 5), throwsRangeError);
  });
  test('index for D lo=1 hi=5', () {
    expect(() => index(D, -2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 5), throwsRangeError);
  });
  test('index for E lo=1 hi=5', () {
    expect(() => index(E, -2, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 5), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 5), 1);
    expect(index(E, 2, lo: 1, hi: 5), 2);
    expect(() => index(E, 3, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 5), throwsArgumentError);
  });
  test('index for A lo=2 hi=5', () {
    expect(() => index(A, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 5), throwsRangeError);
  });
  test('index for B lo=2 hi=5', () {
    expect(() => index(B, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 5), throwsRangeError);
  });
  test('index for C lo=2 hi=5', () {
    expect(() => index(C, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 5), throwsRangeError);
  });
  test('index for D lo=2 hi=5', () {
    expect(() => index(D, -2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 5), throwsRangeError);
  });
  test('index for E lo=2 hi=5', () {
    expect(() => index(E, -2, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 5), 2);
    expect(() => index(E, 3, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 5), throwsArgumentError);
  });
  test('index for A lo=3 hi=5', () {
    expect(() => index(A, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 5), throwsRangeError);
  });
  test('index for B lo=3 hi=5', () {
    expect(() => index(B, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 5), throwsRangeError);
  });
  test('index for C lo=3 hi=5', () {
    expect(() => index(C, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 5), throwsRangeError);
  });
  test('index for D lo=3 hi=5', () {
    expect(() => index(D, -2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 5), throwsRangeError);
  });
  test('index for E lo=3 hi=5', () {
    expect(() => index(E, -2, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 5), 3);
    expect(() => index(E, 3, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 5), throwsArgumentError);
  });
  test('index for A lo=4 hi=5', () {
    expect(() => index(A, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 5), throwsRangeError);
  });
  test('index for B lo=4 hi=5', () {
    expect(() => index(B, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 5), throwsRangeError);
  });
  test('index for C lo=4 hi=5', () {
    expect(() => index(C, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 5), throwsRangeError);
  });
  test('index for D lo=4 hi=5', () {
    expect(() => index(D, -2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 5), throwsRangeError);
  });
  test('index for E lo=4 hi=5', () {
    expect(() => index(E, -2, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 5), 4);
    expect(() => index(E, 3, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 5), throwsArgumentError);
  });
  test('index for A lo=5 hi=5', () {
    expect(() => index(A, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 5), throwsRangeError);
  });
  test('index for B lo=5 hi=5', () {
    expect(() => index(B, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 5), throwsRangeError);
  });
  test('index for C lo=5 hi=5', () {
    expect(() => index(C, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 5), throwsRangeError);
  });
  test('index for D lo=5 hi=5', () {
    expect(() => index(D, -2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 5), throwsRangeError);
  });
  test('index for E lo=5 hi=5', () {
    expect(() => index(E, -2, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 5), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 5), 5);
    expect(() => index(E, 3, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 5), throwsArgumentError);
  });
  test('index for A lo=6 hi=5', () {
    expect(() => index(A, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 5), throwsRangeError);
  });
  test('index for B lo=6 hi=5', () {
    expect(() => index(B, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 5), throwsRangeError);
  });
  test('index for C lo=6 hi=5', () {
    expect(() => index(C, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 5), throwsRangeError);
  });
  test('index for D lo=6 hi=5', () {
    expect(() => index(D, -2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 5), throwsRangeError);
  });
  test('index for E lo=6 hi=5', () {
    expect(() => index(E, -2, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 5), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 5), 6);
    expect(() => index(E, 4, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 5), throwsArgumentError);
  });
  test('index for A lo=7 hi=5', () {
    expect(() => index(A, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 5), throwsRangeError);
  });
  test('index for B lo=7 hi=5', () {
    expect(() => index(B, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 5), throwsRangeError);
  });
  test('index for C lo=7 hi=5', () {
    expect(() => index(C, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 5), throwsRangeError);
  });
  test('index for D lo=7 hi=5', () {
    expect(() => index(D, -2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 5), throwsRangeError);
  });
  test('index for E lo=7 hi=5', () {
    expect(() => index(E, -2, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 5), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 5), 7);
    expect(() => index(E, 4, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 5), throwsArgumentError);
  });
  test('index for A lo=8 hi=5', () {
    expect(() => index(A, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 5), throwsRangeError);
  });
  test('index for B lo=8 hi=5', () {
    expect(() => index(B, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 5), throwsRangeError);
  });
  test('index for C lo=8 hi=5', () {
    expect(() => index(C, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 5), throwsRangeError);
  });
  test('index for D lo=8 hi=5', () {
    expect(() => index(D, -2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 5), throwsRangeError);
  });
  test('index for E lo=8 hi=5', () {
    expect(() => index(E, -2, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 5), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 5), 8);
    expect(() => index(E, 6, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 5), throwsArgumentError);
  });
  test('index for A lo=9 hi=5', () {
    expect(() => index(A, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 5), throwsRangeError);
  });
  test('index for B lo=9 hi=5', () {
    expect(() => index(B, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 5), throwsRangeError);
  });
  test('index for C lo=9 hi=5', () {
    expect(() => index(C, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 5), throwsRangeError);
  });
  test('index for D lo=9 hi=5', () {
    expect(() => index(D, -2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 5), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 5), throwsRangeError);
  });
  test('index for E lo=9 hi=5', () {
    expect(() => index(E, -2, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 5), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 5), 9);
    expect(() => index(E, 7, lo: 9, hi: 5), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 5), throwsArgumentError);
  });
  test('index for A lo=None hi=6', () {
    expect(() => index(A, -2, hi: 6), throwsRangeError);
    expect(() => index(A, -1, hi: 6), throwsRangeError);
    expect(() => index(A, 0, hi: 6), throwsRangeError);
    expect(() => index(A, 1, hi: 6), throwsRangeError);
    expect(() => index(A, 2, hi: 6), throwsRangeError);
    expect(() => index(A, 3, hi: 6), throwsRangeError);
    expect(() => index(A, 4, hi: 6), throwsRangeError);
    expect(() => index(A, 5, hi: 6), throwsRangeError);
    expect(() => index(A, 6, hi: 6), throwsRangeError);
    expect(() => index(A, 7, hi: 6), throwsRangeError);
    expect(() => index(A, 8, hi: 6), throwsRangeError);
  });
  test('index for B lo=None hi=6', () {
    expect(() => index(B, -2, hi: 6), throwsRangeError);
    expect(() => index(B, -1, hi: 6), throwsRangeError);
    expect(() => index(B, 0, hi: 6), throwsRangeError);
    expect(() => index(B, 1, hi: 6), throwsRangeError);
    expect(() => index(B, 2, hi: 6), throwsRangeError);
    expect(() => index(B, 3, hi: 6), throwsRangeError);
    expect(() => index(B, 4, hi: 6), throwsRangeError);
    expect(() => index(B, 5, hi: 6), throwsRangeError);
    expect(() => index(B, 6, hi: 6), throwsRangeError);
    expect(() => index(B, 7, hi: 6), throwsRangeError);
    expect(() => index(B, 8, hi: 6), throwsRangeError);
  });
  test('index for C lo=None hi=6', () {
    expect(() => index(C, -2, hi: 6), throwsRangeError);
    expect(() => index(C, -1, hi: 6), throwsRangeError);
    expect(() => index(C, 0, hi: 6), throwsRangeError);
    expect(() => index(C, 1, hi: 6), throwsRangeError);
    expect(() => index(C, 2, hi: 6), throwsRangeError);
    expect(() => index(C, 3, hi: 6), throwsRangeError);
    expect(() => index(C, 4, hi: 6), throwsRangeError);
    expect(() => index(C, 5, hi: 6), throwsRangeError);
    expect(() => index(C, 6, hi: 6), throwsRangeError);
    expect(() => index(C, 7, hi: 6), throwsRangeError);
    expect(() => index(C, 8, hi: 6), throwsRangeError);
  });
  test('index for D lo=None hi=6', () {
    expect(() => index(D, -2, hi: 6), throwsRangeError);
    expect(() => index(D, -1, hi: 6), throwsRangeError);
    expect(() => index(D, 0, hi: 6), throwsRangeError);
    expect(() => index(D, 1, hi: 6), throwsRangeError);
    expect(() => index(D, 2, hi: 6), throwsRangeError);
    expect(() => index(D, 3, hi: 6), throwsRangeError);
    expect(() => index(D, 4, hi: 6), throwsRangeError);
    expect(() => index(D, 5, hi: 6), throwsRangeError);
    expect(() => index(D, 6, hi: 6), throwsRangeError);
    expect(() => index(D, 7, hi: 6), throwsRangeError);
    expect(() => index(D, 8, hi: 6), throwsRangeError);
  });
  test('index for E lo=None hi=6', () {
    expect(() => index(E, -2, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, hi: 6), throwsArgumentError);
    expect(index(E, 0, hi: 6), 0);
    expect(index(E, 1, hi: 6), 1);
    expect(index(E, 2, hi: 6), 2);
    expect(index(E, 3, hi: 6), 6);
    expect(() => index(E, 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, hi: 6), throwsArgumentError);
  });
  test('index for A lo=0 hi=6', () {
    expect(() => index(A, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 6), throwsRangeError);
  });
  test('index for B lo=0 hi=6', () {
    expect(() => index(B, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 6), throwsRangeError);
  });
  test('index for C lo=0 hi=6', () {
    expect(() => index(C, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 6), throwsRangeError);
  });
  test('index for D lo=0 hi=6', () {
    expect(() => index(D, -2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 6), throwsRangeError);
  });
  test('index for E lo=0 hi=6', () {
    expect(() => index(E, -2, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 6), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 6), 0);
    expect(index(E, 1, lo: 0, hi: 6), 1);
    expect(index(E, 2, lo: 0, hi: 6), 2);
    expect(index(E, 3, lo: 0, hi: 6), 6);
    expect(() => index(E, 4, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 6), throwsArgumentError);
  });
  test('index for A lo=1 hi=6', () {
    expect(() => index(A, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 6), throwsRangeError);
  });
  test('index for B lo=1 hi=6', () {
    expect(() => index(B, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 6), throwsRangeError);
  });
  test('index for C lo=1 hi=6', () {
    expect(() => index(C, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 6), throwsRangeError);
  });
  test('index for D lo=1 hi=6', () {
    expect(() => index(D, -2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 6), throwsRangeError);
  });
  test('index for E lo=1 hi=6', () {
    expect(() => index(E, -2, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 6), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 6), 1);
    expect(index(E, 2, lo: 1, hi: 6), 2);
    expect(index(E, 3, lo: 1, hi: 6), 6);
    expect(() => index(E, 4, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 6), throwsArgumentError);
  });
  test('index for A lo=2 hi=6', () {
    expect(() => index(A, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 6), throwsRangeError);
  });
  test('index for B lo=2 hi=6', () {
    expect(() => index(B, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 6), throwsRangeError);
  });
  test('index for C lo=2 hi=6', () {
    expect(() => index(C, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 6), throwsRangeError);
  });
  test('index for D lo=2 hi=6', () {
    expect(() => index(D, -2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 6), throwsRangeError);
  });
  test('index for E lo=2 hi=6', () {
    expect(() => index(E, -2, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 6), 2);
    expect(index(E, 3, lo: 2, hi: 6), 6);
    expect(() => index(E, 4, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 6), throwsArgumentError);
  });
  test('index for A lo=3 hi=6', () {
    expect(() => index(A, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 6), throwsRangeError);
  });
  test('index for B lo=3 hi=6', () {
    expect(() => index(B, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 6), throwsRangeError);
  });
  test('index for C lo=3 hi=6', () {
    expect(() => index(C, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 6), throwsRangeError);
  });
  test('index for D lo=3 hi=6', () {
    expect(() => index(D, -2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 6), throwsRangeError);
  });
  test('index for E lo=3 hi=6', () {
    expect(() => index(E, -2, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 6), 3);
    expect(index(E, 3, lo: 3, hi: 6), 6);
    expect(() => index(E, 4, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 6), throwsArgumentError);
  });
  test('index for A lo=4 hi=6', () {
    expect(() => index(A, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 6), throwsRangeError);
  });
  test('index for B lo=4 hi=6', () {
    expect(() => index(B, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 6), throwsRangeError);
  });
  test('index for C lo=4 hi=6', () {
    expect(() => index(C, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 6), throwsRangeError);
  });
  test('index for D lo=4 hi=6', () {
    expect(() => index(D, -2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 6), throwsRangeError);
  });
  test('index for E lo=4 hi=6', () {
    expect(() => index(E, -2, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 6), 4);
    expect(index(E, 3, lo: 4, hi: 6), 6);
    expect(() => index(E, 4, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 6), throwsArgumentError);
  });
  test('index for A lo=5 hi=6', () {
    expect(() => index(A, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 6), throwsRangeError);
  });
  test('index for B lo=5 hi=6', () {
    expect(() => index(B, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 6), throwsRangeError);
  });
  test('index for C lo=5 hi=6', () {
    expect(() => index(C, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 6), throwsRangeError);
  });
  test('index for D lo=5 hi=6', () {
    expect(() => index(D, -2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 6), throwsRangeError);
  });
  test('index for E lo=5 hi=6', () {
    expect(() => index(E, -2, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 6), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 6), 5);
    expect(index(E, 3, lo: 5, hi: 6), 6);
    expect(() => index(E, 4, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 6), throwsArgumentError);
  });
  test('index for A lo=6 hi=6', () {
    expect(() => index(A, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 6), throwsRangeError);
  });
  test('index for B lo=6 hi=6', () {
    expect(() => index(B, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 6), throwsRangeError);
  });
  test('index for C lo=6 hi=6', () {
    expect(() => index(C, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 6), throwsRangeError);
  });
  test('index for D lo=6 hi=6', () {
    expect(() => index(D, -2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 6), throwsRangeError);
  });
  test('index for E lo=6 hi=6', () {
    expect(() => index(E, -2, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 6), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 6), 6);
    expect(() => index(E, 4, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 6), throwsArgumentError);
  });
  test('index for A lo=7 hi=6', () {
    expect(() => index(A, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 6), throwsRangeError);
  });
  test('index for B lo=7 hi=6', () {
    expect(() => index(B, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 6), throwsRangeError);
  });
  test('index for C lo=7 hi=6', () {
    expect(() => index(C, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 6), throwsRangeError);
  });
  test('index for D lo=7 hi=6', () {
    expect(() => index(D, -2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 6), throwsRangeError);
  });
  test('index for E lo=7 hi=6', () {
    expect(() => index(E, -2, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 6), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 6), 7);
    expect(() => index(E, 4, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 6), throwsArgumentError);
  });
  test('index for A lo=8 hi=6', () {
    expect(() => index(A, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 6), throwsRangeError);
  });
  test('index for B lo=8 hi=6', () {
    expect(() => index(B, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 6), throwsRangeError);
  });
  test('index for C lo=8 hi=6', () {
    expect(() => index(C, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 6), throwsRangeError);
  });
  test('index for D lo=8 hi=6', () {
    expect(() => index(D, -2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 6), throwsRangeError);
  });
  test('index for E lo=8 hi=6', () {
    expect(() => index(E, -2, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 6), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 6), 8);
    expect(() => index(E, 6, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 6), throwsArgumentError);
  });
  test('index for A lo=9 hi=6', () {
    expect(() => index(A, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 6), throwsRangeError);
  });
  test('index for B lo=9 hi=6', () {
    expect(() => index(B, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 6), throwsRangeError);
  });
  test('index for C lo=9 hi=6', () {
    expect(() => index(C, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 6), throwsRangeError);
  });
  test('index for D lo=9 hi=6', () {
    expect(() => index(D, -2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 6), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 6), throwsRangeError);
  });
  test('index for E lo=9 hi=6', () {
    expect(() => index(E, -2, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 6), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 6), 9);
    expect(() => index(E, 7, lo: 9, hi: 6), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 6), throwsArgumentError);
  });
  test('index for A lo=None hi=7', () {
    expect(() => index(A, -2, hi: 7), throwsRangeError);
    expect(() => index(A, -1, hi: 7), throwsRangeError);
    expect(() => index(A, 0, hi: 7), throwsRangeError);
    expect(() => index(A, 1, hi: 7), throwsRangeError);
    expect(() => index(A, 2, hi: 7), throwsRangeError);
    expect(() => index(A, 3, hi: 7), throwsRangeError);
    expect(() => index(A, 4, hi: 7), throwsRangeError);
    expect(() => index(A, 5, hi: 7), throwsRangeError);
    expect(() => index(A, 6, hi: 7), throwsRangeError);
    expect(() => index(A, 7, hi: 7), throwsRangeError);
    expect(() => index(A, 8, hi: 7), throwsRangeError);
  });
  test('index for B lo=None hi=7', () {
    expect(() => index(B, -2, hi: 7), throwsRangeError);
    expect(() => index(B, -1, hi: 7), throwsRangeError);
    expect(() => index(B, 0, hi: 7), throwsRangeError);
    expect(() => index(B, 1, hi: 7), throwsRangeError);
    expect(() => index(B, 2, hi: 7), throwsRangeError);
    expect(() => index(B, 3, hi: 7), throwsRangeError);
    expect(() => index(B, 4, hi: 7), throwsRangeError);
    expect(() => index(B, 5, hi: 7), throwsRangeError);
    expect(() => index(B, 6, hi: 7), throwsRangeError);
    expect(() => index(B, 7, hi: 7), throwsRangeError);
    expect(() => index(B, 8, hi: 7), throwsRangeError);
  });
  test('index for C lo=None hi=7', () {
    expect(() => index(C, -2, hi: 7), throwsRangeError);
    expect(() => index(C, -1, hi: 7), throwsRangeError);
    expect(() => index(C, 0, hi: 7), throwsRangeError);
    expect(() => index(C, 1, hi: 7), throwsRangeError);
    expect(() => index(C, 2, hi: 7), throwsRangeError);
    expect(() => index(C, 3, hi: 7), throwsRangeError);
    expect(() => index(C, 4, hi: 7), throwsRangeError);
    expect(() => index(C, 5, hi: 7), throwsRangeError);
    expect(() => index(C, 6, hi: 7), throwsRangeError);
    expect(() => index(C, 7, hi: 7), throwsRangeError);
    expect(() => index(C, 8, hi: 7), throwsRangeError);
  });
  test('index for D lo=None hi=7', () {
    expect(() => index(D, -2, hi: 7), throwsRangeError);
    expect(() => index(D, -1, hi: 7), throwsRangeError);
    expect(() => index(D, 0, hi: 7), throwsRangeError);
    expect(() => index(D, 1, hi: 7), throwsRangeError);
    expect(() => index(D, 2, hi: 7), throwsRangeError);
    expect(() => index(D, 3, hi: 7), throwsRangeError);
    expect(() => index(D, 4, hi: 7), throwsRangeError);
    expect(() => index(D, 5, hi: 7), throwsRangeError);
    expect(() => index(D, 6, hi: 7), throwsRangeError);
    expect(() => index(D, 7, hi: 7), throwsRangeError);
    expect(() => index(D, 8, hi: 7), throwsRangeError);
  });
  test('index for E lo=None hi=7', () {
    expect(() => index(E, -2, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, hi: 7), throwsArgumentError);
    expect(index(E, 0, hi: 7), 0);
    expect(index(E, 1, hi: 7), 1);
    expect(index(E, 2, hi: 7), 2);
    expect(index(E, 3, hi: 7), 6);
    expect(() => index(E, 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, hi: 7), throwsArgumentError);
  });
  test('index for A lo=0 hi=7', () {
    expect(() => index(A, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 7), throwsRangeError);
  });
  test('index for B lo=0 hi=7', () {
    expect(() => index(B, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 7), throwsRangeError);
  });
  test('index for C lo=0 hi=7', () {
    expect(() => index(C, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 7), throwsRangeError);
  });
  test('index for D lo=0 hi=7', () {
    expect(() => index(D, -2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 7), throwsRangeError);
  });
  test('index for E lo=0 hi=7', () {
    expect(() => index(E, -2, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 7), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 7), 0);
    expect(index(E, 1, lo: 0, hi: 7), 1);
    expect(index(E, 2, lo: 0, hi: 7), 2);
    expect(index(E, 3, lo: 0, hi: 7), 6);
    expect(() => index(E, 4, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 7), throwsArgumentError);
  });
  test('index for A lo=1 hi=7', () {
    expect(() => index(A, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 7), throwsRangeError);
  });
  test('index for B lo=1 hi=7', () {
    expect(() => index(B, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 7), throwsRangeError);
  });
  test('index for C lo=1 hi=7', () {
    expect(() => index(C, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 7), throwsRangeError);
  });
  test('index for D lo=1 hi=7', () {
    expect(() => index(D, -2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 7), throwsRangeError);
  });
  test('index for E lo=1 hi=7', () {
    expect(() => index(E, -2, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 7), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 7), 1);
    expect(index(E, 2, lo: 1, hi: 7), 2);
    expect(index(E, 3, lo: 1, hi: 7), 6);
    expect(() => index(E, 4, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 7), throwsArgumentError);
  });
  test('index for A lo=2 hi=7', () {
    expect(() => index(A, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 7), throwsRangeError);
  });
  test('index for B lo=2 hi=7', () {
    expect(() => index(B, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 7), throwsRangeError);
  });
  test('index for C lo=2 hi=7', () {
    expect(() => index(C, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 7), throwsRangeError);
  });
  test('index for D lo=2 hi=7', () {
    expect(() => index(D, -2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 7), throwsRangeError);
  });
  test('index for E lo=2 hi=7', () {
    expect(() => index(E, -2, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 7), 2);
    expect(index(E, 3, lo: 2, hi: 7), 6);
    expect(() => index(E, 4, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 7), throwsArgumentError);
  });
  test('index for A lo=3 hi=7', () {
    expect(() => index(A, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 7), throwsRangeError);
  });
  test('index for B lo=3 hi=7', () {
    expect(() => index(B, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 7), throwsRangeError);
  });
  test('index for C lo=3 hi=7', () {
    expect(() => index(C, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 7), throwsRangeError);
  });
  test('index for D lo=3 hi=7', () {
    expect(() => index(D, -2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 7), throwsRangeError);
  });
  test('index for E lo=3 hi=7', () {
    expect(() => index(E, -2, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 7), 3);
    expect(index(E, 3, lo: 3, hi: 7), 6);
    expect(() => index(E, 4, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 7), throwsArgumentError);
  });
  test('index for A lo=4 hi=7', () {
    expect(() => index(A, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 7), throwsRangeError);
  });
  test('index for B lo=4 hi=7', () {
    expect(() => index(B, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 7), throwsRangeError);
  });
  test('index for C lo=4 hi=7', () {
    expect(() => index(C, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 7), throwsRangeError);
  });
  test('index for D lo=4 hi=7', () {
    expect(() => index(D, -2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 7), throwsRangeError);
  });
  test('index for E lo=4 hi=7', () {
    expect(() => index(E, -2, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 7), 4);
    expect(index(E, 3, lo: 4, hi: 7), 6);
    expect(() => index(E, 4, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 7), throwsArgumentError);
  });
  test('index for A lo=5 hi=7', () {
    expect(() => index(A, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 7), throwsRangeError);
  });
  test('index for B lo=5 hi=7', () {
    expect(() => index(B, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 7), throwsRangeError);
  });
  test('index for C lo=5 hi=7', () {
    expect(() => index(C, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 7), throwsRangeError);
  });
  test('index for D lo=5 hi=7', () {
    expect(() => index(D, -2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 7), throwsRangeError);
  });
  test('index for E lo=5 hi=7', () {
    expect(() => index(E, -2, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 7), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 7), 5);
    expect(index(E, 3, lo: 5, hi: 7), 6);
    expect(() => index(E, 4, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 7), throwsArgumentError);
  });
  test('index for A lo=6 hi=7', () {
    expect(() => index(A, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 7), throwsRangeError);
  });
  test('index for B lo=6 hi=7', () {
    expect(() => index(B, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 7), throwsRangeError);
  });
  test('index for C lo=6 hi=7', () {
    expect(() => index(C, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 7), throwsRangeError);
  });
  test('index for D lo=6 hi=7', () {
    expect(() => index(D, -2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 7), throwsRangeError);
  });
  test('index for E lo=6 hi=7', () {
    expect(() => index(E, -2, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 7), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 7), 6);
    expect(() => index(E, 4, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 7), throwsArgumentError);
  });
  test('index for A lo=7 hi=7', () {
    expect(() => index(A, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 7), throwsRangeError);
  });
  test('index for B lo=7 hi=7', () {
    expect(() => index(B, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 7), throwsRangeError);
  });
  test('index for C lo=7 hi=7', () {
    expect(() => index(C, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 7), throwsRangeError);
  });
  test('index for D lo=7 hi=7', () {
    expect(() => index(D, -2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 7), throwsRangeError);
  });
  test('index for E lo=7 hi=7', () {
    expect(() => index(E, -2, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 7), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 7), 7);
    expect(() => index(E, 4, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 6, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 7), throwsArgumentError);
  });
  test('index for A lo=8 hi=7', () {
    expect(() => index(A, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 7), throwsRangeError);
  });
  test('index for B lo=8 hi=7', () {
    expect(() => index(B, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 7), throwsRangeError);
  });
  test('index for C lo=8 hi=7', () {
    expect(() => index(C, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 7), throwsRangeError);
  });
  test('index for D lo=8 hi=7', () {
    expect(() => index(D, -2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 7), throwsRangeError);
  });
  test('index for E lo=8 hi=7', () {
    expect(() => index(E, -2, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 7), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 7), 8);
    expect(() => index(E, 6, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 7), throwsArgumentError);
  });
  test('index for A lo=9 hi=7', () {
    expect(() => index(A, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 7), throwsRangeError);
  });
  test('index for B lo=9 hi=7', () {
    expect(() => index(B, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 7), throwsRangeError);
  });
  test('index for C lo=9 hi=7', () {
    expect(() => index(C, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 7), throwsRangeError);
  });
  test('index for D lo=9 hi=7', () {
    expect(() => index(D, -2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 7), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 7), throwsRangeError);
  });
  test('index for E lo=9 hi=7', () {
    expect(() => index(E, -2, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 7), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 7), 9);
    expect(() => index(E, 7, lo: 9, hi: 7), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 7), throwsArgumentError);
  });
  test('index for A lo=None hi=8', () {
    expect(() => index(A, -2, hi: 8), throwsRangeError);
    expect(() => index(A, -1, hi: 8), throwsRangeError);
    expect(() => index(A, 0, hi: 8), throwsRangeError);
    expect(() => index(A, 1, hi: 8), throwsRangeError);
    expect(() => index(A, 2, hi: 8), throwsRangeError);
    expect(() => index(A, 3, hi: 8), throwsRangeError);
    expect(() => index(A, 4, hi: 8), throwsRangeError);
    expect(() => index(A, 5, hi: 8), throwsRangeError);
    expect(() => index(A, 6, hi: 8), throwsRangeError);
    expect(() => index(A, 7, hi: 8), throwsRangeError);
    expect(() => index(A, 8, hi: 8), throwsRangeError);
  });
  test('index for B lo=None hi=8', () {
    expect(() => index(B, -2, hi: 8), throwsRangeError);
    expect(() => index(B, -1, hi: 8), throwsRangeError);
    expect(() => index(B, 0, hi: 8), throwsRangeError);
    expect(() => index(B, 1, hi: 8), throwsRangeError);
    expect(() => index(B, 2, hi: 8), throwsRangeError);
    expect(() => index(B, 3, hi: 8), throwsRangeError);
    expect(() => index(B, 4, hi: 8), throwsRangeError);
    expect(() => index(B, 5, hi: 8), throwsRangeError);
    expect(() => index(B, 6, hi: 8), throwsRangeError);
    expect(() => index(B, 7, hi: 8), throwsRangeError);
    expect(() => index(B, 8, hi: 8), throwsRangeError);
  });
  test('index for C lo=None hi=8', () {
    expect(() => index(C, -2, hi: 8), throwsRangeError);
    expect(() => index(C, -1, hi: 8), throwsRangeError);
    expect(() => index(C, 0, hi: 8), throwsRangeError);
    expect(() => index(C, 1, hi: 8), throwsRangeError);
    expect(() => index(C, 2, hi: 8), throwsRangeError);
    expect(() => index(C, 3, hi: 8), throwsRangeError);
    expect(() => index(C, 4, hi: 8), throwsRangeError);
    expect(() => index(C, 5, hi: 8), throwsRangeError);
    expect(() => index(C, 6, hi: 8), throwsRangeError);
    expect(() => index(C, 7, hi: 8), throwsRangeError);
    expect(() => index(C, 8, hi: 8), throwsRangeError);
  });
  test('index for D lo=None hi=8', () {
    expect(() => index(D, -2, hi: 8), throwsRangeError);
    expect(() => index(D, -1, hi: 8), throwsRangeError);
    expect(() => index(D, 0, hi: 8), throwsRangeError);
    expect(() => index(D, 1, hi: 8), throwsRangeError);
    expect(() => index(D, 2, hi: 8), throwsRangeError);
    expect(() => index(D, 3, hi: 8), throwsRangeError);
    expect(() => index(D, 4, hi: 8), throwsRangeError);
    expect(() => index(D, 5, hi: 8), throwsRangeError);
    expect(() => index(D, 6, hi: 8), throwsRangeError);
    expect(() => index(D, 7, hi: 8), throwsRangeError);
    expect(() => index(D, 8, hi: 8), throwsRangeError);
  });
  test('index for E lo=None hi=8', () {
    expect(() => index(E, -2, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, hi: 8), throwsArgumentError);
    expect(index(E, 0, hi: 8), 0);
    expect(index(E, 1, hi: 8), 1);
    expect(index(E, 2, hi: 8), 2);
    expect(index(E, 3, hi: 8), 6);
    expect(() => index(E, 4, hi: 8), throwsArgumentError);
    expect(index(E, 5, hi: 8), 8);
    expect(() => index(E, 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, hi: 8), throwsArgumentError);
  });
  test('index for A lo=0 hi=8', () {
    expect(() => index(A, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 8), throwsRangeError);
  });
  test('index for B lo=0 hi=8', () {
    expect(() => index(B, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 8), throwsRangeError);
  });
  test('index for C lo=0 hi=8', () {
    expect(() => index(C, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 8), throwsRangeError);
  });
  test('index for D lo=0 hi=8', () {
    expect(() => index(D, -2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 8), throwsRangeError);
  });
  test('index for E lo=0 hi=8', () {
    expect(() => index(E, -2, lo: 0, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 8), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 8), 0);
    expect(index(E, 1, lo: 0, hi: 8), 1);
    expect(index(E, 2, lo: 0, hi: 8), 2);
    expect(index(E, 3, lo: 0, hi: 8), 6);
    expect(() => index(E, 4, lo: 0, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 0, hi: 8), 8);
    expect(() => index(E, 6, lo: 0, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 0, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 8), throwsArgumentError);
  });
  test('index for A lo=1 hi=8', () {
    expect(() => index(A, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 8), throwsRangeError);
  });
  test('index for B lo=1 hi=8', () {
    expect(() => index(B, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 8), throwsRangeError);
  });
  test('index for C lo=1 hi=8', () {
    expect(() => index(C, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 8), throwsRangeError);
  });
  test('index for D lo=1 hi=8', () {
    expect(() => index(D, -2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 8), throwsRangeError);
  });
  test('index for E lo=1 hi=8', () {
    expect(() => index(E, -2, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 8), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 8), 1);
    expect(index(E, 2, lo: 1, hi: 8), 2);
    expect(index(E, 3, lo: 1, hi: 8), 6);
    expect(() => index(E, 4, lo: 1, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 1, hi: 8), 8);
    expect(() => index(E, 6, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 1, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 8), throwsArgumentError);
  });
  test('index for A lo=2 hi=8', () {
    expect(() => index(A, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 8), throwsRangeError);
  });
  test('index for B lo=2 hi=8', () {
    expect(() => index(B, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 8), throwsRangeError);
  });
  test('index for C lo=2 hi=8', () {
    expect(() => index(C, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 8), throwsRangeError);
  });
  test('index for D lo=2 hi=8', () {
    expect(() => index(D, -2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 8), throwsRangeError);
  });
  test('index for E lo=2 hi=8', () {
    expect(() => index(E, -2, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 8), 2);
    expect(index(E, 3, lo: 2, hi: 8), 6);
    expect(() => index(E, 4, lo: 2, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 2, hi: 8), 8);
    expect(() => index(E, 6, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 2, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 8), throwsArgumentError);
  });
  test('index for A lo=3 hi=8', () {
    expect(() => index(A, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 8), throwsRangeError);
  });
  test('index for B lo=3 hi=8', () {
    expect(() => index(B, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 8), throwsRangeError);
  });
  test('index for C lo=3 hi=8', () {
    expect(() => index(C, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 8), throwsRangeError);
  });
  test('index for D lo=3 hi=8', () {
    expect(() => index(D, -2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 8), throwsRangeError);
  });
  test('index for E lo=3 hi=8', () {
    expect(() => index(E, -2, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 8), 3);
    expect(index(E, 3, lo: 3, hi: 8), 6);
    expect(() => index(E, 4, lo: 3, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 3, hi: 8), 8);
    expect(() => index(E, 6, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 3, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 8), throwsArgumentError);
  });
  test('index for A lo=4 hi=8', () {
    expect(() => index(A, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 8), throwsRangeError);
  });
  test('index for B lo=4 hi=8', () {
    expect(() => index(B, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 8), throwsRangeError);
  });
  test('index for C lo=4 hi=8', () {
    expect(() => index(C, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 8), throwsRangeError);
  });
  test('index for D lo=4 hi=8', () {
    expect(() => index(D, -2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 8), throwsRangeError);
  });
  test('index for E lo=4 hi=8', () {
    expect(() => index(E, -2, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 8), 4);
    expect(index(E, 3, lo: 4, hi: 8), 6);
    expect(() => index(E, 4, lo: 4, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 4, hi: 8), 8);
    expect(() => index(E, 6, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 4, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 8), throwsArgumentError);
  });
  test('index for A lo=5 hi=8', () {
    expect(() => index(A, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 8), throwsRangeError);
  });
  test('index for B lo=5 hi=8', () {
    expect(() => index(B, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 8), throwsRangeError);
  });
  test('index for C lo=5 hi=8', () {
    expect(() => index(C, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 8), throwsRangeError);
  });
  test('index for D lo=5 hi=8', () {
    expect(() => index(D, -2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 8), throwsRangeError);
  });
  test('index for E lo=5 hi=8', () {
    expect(() => index(E, -2, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 8), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 8), 5);
    expect(index(E, 3, lo: 5, hi: 8), 6);
    expect(() => index(E, 4, lo: 5, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 5, hi: 8), 8);
    expect(() => index(E, 6, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 5, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 8), throwsArgumentError);
  });
  test('index for A lo=6 hi=8', () {
    expect(() => index(A, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 8), throwsRangeError);
  });
  test('index for B lo=6 hi=8', () {
    expect(() => index(B, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 8), throwsRangeError);
  });
  test('index for C lo=6 hi=8', () {
    expect(() => index(C, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 8), throwsRangeError);
  });
  test('index for D lo=6 hi=8', () {
    expect(() => index(D, -2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 8), throwsRangeError);
  });
  test('index for E lo=6 hi=8', () {
    expect(() => index(E, -2, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 8), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 8), 6);
    expect(() => index(E, 4, lo: 6, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 6, hi: 8), 8);
    expect(() => index(E, 6, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 6, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 8), throwsArgumentError);
  });
  test('index for A lo=7 hi=8', () {
    expect(() => index(A, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 8), throwsRangeError);
  });
  test('index for B lo=7 hi=8', () {
    expect(() => index(B, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 8), throwsRangeError);
  });
  test('index for C lo=7 hi=8', () {
    expect(() => index(C, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 8), throwsRangeError);
  });
  test('index for D lo=7 hi=8', () {
    expect(() => index(D, -2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 8), throwsRangeError);
  });
  test('index for E lo=7 hi=8', () {
    expect(() => index(E, -2, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 8), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 8), 7);
    expect(() => index(E, 4, lo: 7, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 7, hi: 8), 8);
    expect(() => index(E, 6, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 7, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 8), throwsArgumentError);
  });
  test('index for A lo=8 hi=8', () {
    expect(() => index(A, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 8), throwsRangeError);
  });
  test('index for B lo=8 hi=8', () {
    expect(() => index(B, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 8), throwsRangeError);
  });
  test('index for C lo=8 hi=8', () {
    expect(() => index(C, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 8), throwsRangeError);
  });
  test('index for D lo=8 hi=8', () {
    expect(() => index(D, -2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 8), throwsRangeError);
  });
  test('index for E lo=8 hi=8', () {
    expect(() => index(E, -2, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 8), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 8), 8);
    expect(() => index(E, 6, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 7, lo: 8, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 8), throwsArgumentError);
  });
  test('index for A lo=9 hi=8', () {
    expect(() => index(A, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 8), throwsRangeError);
  });
  test('index for B lo=9 hi=8', () {
    expect(() => index(B, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 8), throwsRangeError);
  });
  test('index for C lo=9 hi=8', () {
    expect(() => index(C, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 8), throwsRangeError);
  });
  test('index for D lo=9 hi=8', () {
    expect(() => index(D, -2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 8), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 8), throwsRangeError);
  });
  test('index for E lo=9 hi=8', () {
    expect(() => index(E, -2, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 8), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 8), 9);
    expect(() => index(E, 7, lo: 9, hi: 8), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 8), throwsArgumentError);
  });
  test('index for A lo=None hi=9', () {
    expect(() => index(A, -2, hi: 9), throwsRangeError);
    expect(() => index(A, -1, hi: 9), throwsRangeError);
    expect(() => index(A, 0, hi: 9), throwsRangeError);
    expect(() => index(A, 1, hi: 9), throwsRangeError);
    expect(() => index(A, 2, hi: 9), throwsRangeError);
    expect(() => index(A, 3, hi: 9), throwsRangeError);
    expect(() => index(A, 4, hi: 9), throwsRangeError);
    expect(() => index(A, 5, hi: 9), throwsRangeError);
    expect(() => index(A, 6, hi: 9), throwsRangeError);
    expect(() => index(A, 7, hi: 9), throwsRangeError);
    expect(() => index(A, 8, hi: 9), throwsRangeError);
  });
  test('index for B lo=None hi=9', () {
    expect(() => index(B, -2, hi: 9), throwsRangeError);
    expect(() => index(B, -1, hi: 9), throwsRangeError);
    expect(() => index(B, 0, hi: 9), throwsRangeError);
    expect(() => index(B, 1, hi: 9), throwsRangeError);
    expect(() => index(B, 2, hi: 9), throwsRangeError);
    expect(() => index(B, 3, hi: 9), throwsRangeError);
    expect(() => index(B, 4, hi: 9), throwsRangeError);
    expect(() => index(B, 5, hi: 9), throwsRangeError);
    expect(() => index(B, 6, hi: 9), throwsRangeError);
    expect(() => index(B, 7, hi: 9), throwsRangeError);
    expect(() => index(B, 8, hi: 9), throwsRangeError);
  });
  test('index for C lo=None hi=9', () {
    expect(() => index(C, -2, hi: 9), throwsRangeError);
    expect(() => index(C, -1, hi: 9), throwsRangeError);
    expect(() => index(C, 0, hi: 9), throwsRangeError);
    expect(() => index(C, 1, hi: 9), throwsRangeError);
    expect(() => index(C, 2, hi: 9), throwsRangeError);
    expect(() => index(C, 3, hi: 9), throwsRangeError);
    expect(() => index(C, 4, hi: 9), throwsRangeError);
    expect(() => index(C, 5, hi: 9), throwsRangeError);
    expect(() => index(C, 6, hi: 9), throwsRangeError);
    expect(() => index(C, 7, hi: 9), throwsRangeError);
    expect(() => index(C, 8, hi: 9), throwsRangeError);
  });
  test('index for D lo=None hi=9', () {
    expect(() => index(D, -2, hi: 9), throwsRangeError);
    expect(() => index(D, -1, hi: 9), throwsRangeError);
    expect(() => index(D, 0, hi: 9), throwsRangeError);
    expect(() => index(D, 1, hi: 9), throwsRangeError);
    expect(() => index(D, 2, hi: 9), throwsRangeError);
    expect(() => index(D, 3, hi: 9), throwsRangeError);
    expect(() => index(D, 4, hi: 9), throwsRangeError);
    expect(() => index(D, 5, hi: 9), throwsRangeError);
    expect(() => index(D, 6, hi: 9), throwsRangeError);
    expect(() => index(D, 7, hi: 9), throwsRangeError);
    expect(() => index(D, 8, hi: 9), throwsRangeError);
  });
  test('index for E lo=None hi=9', () {
    expect(() => index(E, -2, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, hi: 9), throwsArgumentError);
    expect(index(E, 0, hi: 9), 0);
    expect(index(E, 1, hi: 9), 1);
    expect(index(E, 2, hi: 9), 2);
    expect(index(E, 3, hi: 9), 6);
    expect(() => index(E, 4, hi: 9), throwsArgumentError);
    expect(index(E, 5, hi: 9), 8);
    expect(index(E, 6, hi: 9), 9);
    expect(() => index(E, 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, hi: 9), throwsArgumentError);
  });
  test('index for A lo=0 hi=9', () {
    expect(() => index(A, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 0, hi: 9), throwsRangeError);
  });
  test('index for B lo=0 hi=9', () {
    expect(() => index(B, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 0, hi: 9), throwsRangeError);
  });
  test('index for C lo=0 hi=9', () {
    expect(() => index(C, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 0, hi: 9), throwsRangeError);
  });
  test('index for D lo=0 hi=9', () {
    expect(() => index(D, -2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 0, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 0, hi: 9), throwsRangeError);
  });
  test('index for E lo=0 hi=9', () {
    expect(() => index(E, -2, lo: 0, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 0, hi: 9), throwsArgumentError);
    expect(index(E, 0, lo: 0, hi: 9), 0);
    expect(index(E, 1, lo: 0, hi: 9), 1);
    expect(index(E, 2, lo: 0, hi: 9), 2);
    expect(index(E, 3, lo: 0, hi: 9), 6);
    expect(() => index(E, 4, lo: 0, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 0, hi: 9), 8);
    expect(index(E, 6, lo: 0, hi: 9), 9);
    expect(() => index(E, 7, lo: 0, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 0, hi: 9), throwsArgumentError);
  });
  test('index for A lo=1 hi=9', () {
    expect(() => index(A, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 1, hi: 9), throwsRangeError);
  });
  test('index for B lo=1 hi=9', () {
    expect(() => index(B, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 1, hi: 9), throwsRangeError);
  });
  test('index for C lo=1 hi=9', () {
    expect(() => index(C, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 1, hi: 9), throwsRangeError);
  });
  test('index for D lo=1 hi=9', () {
    expect(() => index(D, -2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 1, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 1, hi: 9), throwsRangeError);
  });
  test('index for E lo=1 hi=9', () {
    expect(() => index(E, -2, lo: 1, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 1, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 1, hi: 9), throwsArgumentError);
    expect(index(E, 1, lo: 1, hi: 9), 1);
    expect(index(E, 2, lo: 1, hi: 9), 2);
    expect(index(E, 3, lo: 1, hi: 9), 6);
    expect(() => index(E, 4, lo: 1, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 1, hi: 9), 8);
    expect(index(E, 6, lo: 1, hi: 9), 9);
    expect(() => index(E, 7, lo: 1, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 1, hi: 9), throwsArgumentError);
  });
  test('index for A lo=2 hi=9', () {
    expect(() => index(A, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 2, hi: 9), throwsRangeError);
  });
  test('index for B lo=2 hi=9', () {
    expect(() => index(B, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 2, hi: 9), throwsRangeError);
  });
  test('index for C lo=2 hi=9', () {
    expect(() => index(C, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 2, hi: 9), throwsRangeError);
  });
  test('index for D lo=2 hi=9', () {
    expect(() => index(D, -2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 2, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 2, hi: 9), throwsRangeError);
  });
  test('index for E lo=2 hi=9', () {
    expect(() => index(E, -2, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 2, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 2, hi: 9), 2);
    expect(index(E, 3, lo: 2, hi: 9), 6);
    expect(() => index(E, 4, lo: 2, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 2, hi: 9), 8);
    expect(index(E, 6, lo: 2, hi: 9), 9);
    expect(() => index(E, 7, lo: 2, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 2, hi: 9), throwsArgumentError);
  });
  test('index for A lo=3 hi=9', () {
    expect(() => index(A, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 3, hi: 9), throwsRangeError);
  });
  test('index for B lo=3 hi=9', () {
    expect(() => index(B, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 3, hi: 9), throwsRangeError);
  });
  test('index for C lo=3 hi=9', () {
    expect(() => index(C, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 3, hi: 9), throwsRangeError);
  });
  test('index for D lo=3 hi=9', () {
    expect(() => index(D, -2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 3, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 3, hi: 9), throwsRangeError);
  });
  test('index for E lo=3 hi=9', () {
    expect(() => index(E, -2, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 3, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 3, hi: 9), 3);
    expect(index(E, 3, lo: 3, hi: 9), 6);
    expect(() => index(E, 4, lo: 3, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 3, hi: 9), 8);
    expect(index(E, 6, lo: 3, hi: 9), 9);
    expect(() => index(E, 7, lo: 3, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 3, hi: 9), throwsArgumentError);
  });
  test('index for A lo=4 hi=9', () {
    expect(() => index(A, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 4, hi: 9), throwsRangeError);
  });
  test('index for B lo=4 hi=9', () {
    expect(() => index(B, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 4, hi: 9), throwsRangeError);
  });
  test('index for C lo=4 hi=9', () {
    expect(() => index(C, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 4, hi: 9), throwsRangeError);
  });
  test('index for D lo=4 hi=9', () {
    expect(() => index(D, -2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 4, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 4, hi: 9), throwsRangeError);
  });
  test('index for E lo=4 hi=9', () {
    expect(() => index(E, -2, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 4, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 4, hi: 9), 4);
    expect(index(E, 3, lo: 4, hi: 9), 6);
    expect(() => index(E, 4, lo: 4, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 4, hi: 9), 8);
    expect(index(E, 6, lo: 4, hi: 9), 9);
    expect(() => index(E, 7, lo: 4, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 4, hi: 9), throwsArgumentError);
  });
  test('index for A lo=5 hi=9', () {
    expect(() => index(A, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 5, hi: 9), throwsRangeError);
  });
  test('index for B lo=5 hi=9', () {
    expect(() => index(B, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 5, hi: 9), throwsRangeError);
  });
  test('index for C lo=5 hi=9', () {
    expect(() => index(C, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 5, hi: 9), throwsRangeError);
  });
  test('index for D lo=5 hi=9', () {
    expect(() => index(D, -2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 5, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 5, hi: 9), throwsRangeError);
  });
  test('index for E lo=5 hi=9', () {
    expect(() => index(E, -2, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 5, hi: 9), throwsArgumentError);
    expect(index(E, 2, lo: 5, hi: 9), 5);
    expect(index(E, 3, lo: 5, hi: 9), 6);
    expect(() => index(E, 4, lo: 5, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 5, hi: 9), 8);
    expect(index(E, 6, lo: 5, hi: 9), 9);
    expect(() => index(E, 7, lo: 5, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 5, hi: 9), throwsArgumentError);
  });
  test('index for A lo=6 hi=9', () {
    expect(() => index(A, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 6, hi: 9), throwsRangeError);
  });
  test('index for B lo=6 hi=9', () {
    expect(() => index(B, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 6, hi: 9), throwsRangeError);
  });
  test('index for C lo=6 hi=9', () {
    expect(() => index(C, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 6, hi: 9), throwsRangeError);
  });
  test('index for D lo=6 hi=9', () {
    expect(() => index(D, -2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 6, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 6, hi: 9), throwsRangeError);
  });
  test('index for E lo=6 hi=9', () {
    expect(() => index(E, -2, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 6, hi: 9), throwsArgumentError);
    expect(index(E, 3, lo: 6, hi: 9), 6);
    expect(() => index(E, 4, lo: 6, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 6, hi: 9), 8);
    expect(index(E, 6, lo: 6, hi: 9), 9);
    expect(() => index(E, 7, lo: 6, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 6, hi: 9), throwsArgumentError);
  });
  test('index for A lo=7 hi=9', () {
    expect(() => index(A, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 7, hi: 9), throwsRangeError);
  });
  test('index for B lo=7 hi=9', () {
    expect(() => index(B, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 7, hi: 9), throwsRangeError);
  });
  test('index for C lo=7 hi=9', () {
    expect(() => index(C, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 7, hi: 9), throwsRangeError);
  });
  test('index for D lo=7 hi=9', () {
    expect(() => index(D, -2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 7, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 7, hi: 9), throwsRangeError);
  });
  test('index for E lo=7 hi=9', () {
    expect(() => index(E, -2, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 7, hi: 9), throwsArgumentError);
    expect(index(E, 3, lo: 7, hi: 9), 7);
    expect(() => index(E, 4, lo: 7, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 7, hi: 9), 8);
    expect(index(E, 6, lo: 7, hi: 9), 9);
    expect(() => index(E, 7, lo: 7, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 7, hi: 9), throwsArgumentError);
  });
  test('index for A lo=8 hi=9', () {
    expect(() => index(A, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 8, hi: 9), throwsRangeError);
  });
  test('index for B lo=8 hi=9', () {
    expect(() => index(B, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 8, hi: 9), throwsRangeError);
  });
  test('index for C lo=8 hi=9', () {
    expect(() => index(C, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 8, hi: 9), throwsRangeError);
  });
  test('index for D lo=8 hi=9', () {
    expect(() => index(D, -2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 8, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 8, hi: 9), throwsRangeError);
  });
  test('index for E lo=8 hi=9', () {
    expect(() => index(E, -2, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 3, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 4, lo: 8, hi: 9), throwsArgumentError);
    expect(index(E, 5, lo: 8, hi: 9), 8);
    expect(index(E, 6, lo: 8, hi: 9), 9);
    expect(() => index(E, 7, lo: 8, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 8, hi: 9), throwsArgumentError);
  });
  test('index for A lo=9 hi=9', () {
    expect(() => index(A, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(A, 8, lo: 9, hi: 9), throwsRangeError);
  });
  test('index for B lo=9 hi=9', () {
    expect(() => index(B, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(B, 8, lo: 9, hi: 9), throwsRangeError);
  });
  test('index for C lo=9 hi=9', () {
    expect(() => index(C, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(C, 8, lo: 9, hi: 9), throwsRangeError);
  });
  test('index for D lo=9 hi=9', () {
    expect(() => index(D, -2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, -1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 0, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 1, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 2, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 3, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 4, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 5, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 6, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 7, lo: 9, hi: 9), throwsRangeError);
    expect(() => index(D, 8, lo: 9, hi: 9), throwsRangeError);
  });
  test('index for E lo=9 hi=9', () {
    expect(() => index(E, -2, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, -1, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 0, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 1, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 2, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 3, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 4, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 5, lo: 9, hi: 9), throwsArgumentError);
    expect(index(E, 6, lo: 9, hi: 9), 9);
    expect(() => index(E, 7, lo: 9, hi: 9), throwsArgumentError);
    expect(() => index(E, 8, lo: 9, hi: 9), throwsArgumentError);
  });
}
