// Generated by bisect_test_generator_v3.py on 2021-11-15 23:56 UTC
import 'package:bisection/bisection.dart';
import 'package:test/test.dart';

void main() {
  var A = [];
  var B = [4];
  var C = [4, 5];
  var D = [3, 4, 5];
  var E = [0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
  test('find_lt for A lo=None hi=None', () {
    expect(() => find_lt(A, -2), throwsArgumentError);
    expect(() => find_lt(A, -1), throwsArgumentError);
    expect(() => find_lt(A, 0), throwsArgumentError);
    expect(() => find_lt(A, 1), throwsArgumentError);
    expect(() => find_lt(A, 2), throwsArgumentError);
    expect(() => find_lt(A, 3), throwsArgumentError);
    expect(() => find_lt(A, 4), throwsArgumentError);
    expect(() => find_lt(A, 5), throwsArgumentError);
    expect(() => find_lt(A, 6), throwsArgumentError);
    expect(() => find_lt(A, 7), throwsArgumentError);
    expect(() => find_lt(A, 8), throwsArgumentError);
  });
  test('find_lt for B lo=None hi=None', () {
    expect(() => find_lt(B, -2), throwsArgumentError);
    expect(() => find_lt(B, -1), throwsArgumentError);
    expect(() => find_lt(B, 0), throwsArgumentError);
    expect(() => find_lt(B, 1), throwsArgumentError);
    expect(() => find_lt(B, 2), throwsArgumentError);
    expect(() => find_lt(B, 3), throwsArgumentError);
    expect(() => find_lt(B, 4), throwsArgumentError);
    expect(find_lt(B, 5), 4);
    expect(find_lt(B, 6), 4);
    expect(find_lt(B, 7), 4);
    expect(find_lt(B, 8), 4);
  });
  test('find_lt for C lo=None hi=None', () {
    expect(() => find_lt(C, -2), throwsArgumentError);
    expect(() => find_lt(C, -1), throwsArgumentError);
    expect(() => find_lt(C, 0), throwsArgumentError);
    expect(() => find_lt(C, 1), throwsArgumentError);
    expect(() => find_lt(C, 2), throwsArgumentError);
    expect(() => find_lt(C, 3), throwsArgumentError);
    expect(() => find_lt(C, 4), throwsArgumentError);
    expect(find_lt(C, 5), 4);
    expect(find_lt(C, 6), 5);
    expect(find_lt(C, 7), 5);
    expect(find_lt(C, 8), 5);
  });
  test('find_lt for D lo=None hi=None', () {
    expect(() => find_lt(D, -2), throwsArgumentError);
    expect(() => find_lt(D, -1), throwsArgumentError);
    expect(() => find_lt(D, 0), throwsArgumentError);
    expect(() => find_lt(D, 1), throwsArgumentError);
    expect(() => find_lt(D, 2), throwsArgumentError);
    expect(() => find_lt(D, 3), throwsArgumentError);
    expect(find_lt(D, 4), 3);
    expect(find_lt(D, 5), 4);
    expect(find_lt(D, 6), 5);
    expect(find_lt(D, 7), 5);
    expect(find_lt(D, 8), 5);
  });
  test('find_lt for E lo=None hi=None', () {
    expect(() => find_lt(E, -2), throwsArgumentError);
    expect(() => find_lt(E, -1), throwsArgumentError);
    expect(() => find_lt(E, 0), throwsArgumentError);
    expect(find_lt(E, 1), 0);
    expect(find_lt(E, 2), 1);
    expect(find_lt(E, 3), 2);
    expect(find_lt(E, 4), 3);
    expect(find_lt(E, 5), 3);
    expect(find_lt(E, 6), 5);
    expect(find_lt(E, 7), 6);
    expect(find_lt(E, 8), 6);
  });
  test('find_le for A lo=None hi=None', () {
    expect(() => find_le(A, -2), throwsArgumentError);
    expect(() => find_le(A, -1), throwsArgumentError);
    expect(() => find_le(A, 0), throwsArgumentError);
    expect(() => find_le(A, 1), throwsArgumentError);
    expect(() => find_le(A, 2), throwsArgumentError);
    expect(() => find_le(A, 3), throwsArgumentError);
    expect(() => find_le(A, 4), throwsArgumentError);
    expect(() => find_le(A, 5), throwsArgumentError);
    expect(() => find_le(A, 6), throwsArgumentError);
    expect(() => find_le(A, 7), throwsArgumentError);
    expect(() => find_le(A, 8), throwsArgumentError);
  });
  test('find_le for B lo=None hi=None', () {
    expect(() => find_le(B, -2), throwsArgumentError);
    expect(() => find_le(B, -1), throwsArgumentError);
    expect(() => find_le(B, 0), throwsArgumentError);
    expect(() => find_le(B, 1), throwsArgumentError);
    expect(() => find_le(B, 2), throwsArgumentError);
    expect(() => find_le(B, 3), throwsArgumentError);
    expect(find_le(B, 4), 4);
    expect(find_le(B, 5), 4);
    expect(find_le(B, 6), 4);
    expect(find_le(B, 7), 4);
    expect(find_le(B, 8), 4);
  });
  test('find_le for C lo=None hi=None', () {
    expect(() => find_le(C, -2), throwsArgumentError);
    expect(() => find_le(C, -1), throwsArgumentError);
    expect(() => find_le(C, 0), throwsArgumentError);
    expect(() => find_le(C, 1), throwsArgumentError);
    expect(() => find_le(C, 2), throwsArgumentError);
    expect(() => find_le(C, 3), throwsArgumentError);
    expect(find_le(C, 4), 4);
    expect(find_le(C, 5), 5);
    expect(find_le(C, 6), 5);
    expect(find_le(C, 7), 5);
    expect(find_le(C, 8), 5);
  });
  test('find_le for D lo=None hi=None', () {
    expect(() => find_le(D, -2), throwsArgumentError);
    expect(() => find_le(D, -1), throwsArgumentError);
    expect(() => find_le(D, 0), throwsArgumentError);
    expect(() => find_le(D, 1), throwsArgumentError);
    expect(() => find_le(D, 2), throwsArgumentError);
    expect(find_le(D, 3), 3);
    expect(find_le(D, 4), 4);
    expect(find_le(D, 5), 5);
    expect(find_le(D, 6), 5);
    expect(find_le(D, 7), 5);
    expect(find_le(D, 8), 5);
  });
  test('find_le for E lo=None hi=None', () {
    expect(() => find_le(E, -2), throwsArgumentError);
    expect(() => find_le(E, -1), throwsArgumentError);
    expect(find_le(E, 0), 0);
    expect(find_le(E, 1), 1);
    expect(find_le(E, 2), 2);
    expect(find_le(E, 3), 3);
    expect(find_le(E, 4), 3);
    expect(find_le(E, 5), 5);
    expect(find_le(E, 6), 6);
    expect(find_le(E, 7), 6);
    expect(find_le(E, 8), 6);
  });
  test('find_gt for A lo=None hi=None', () {
    expect(() => find_gt(A, -2), throwsArgumentError);
    expect(() => find_gt(A, -1), throwsArgumentError);
    expect(() => find_gt(A, 0), throwsArgumentError);
    expect(() => find_gt(A, 1), throwsArgumentError);
    expect(() => find_gt(A, 2), throwsArgumentError);
    expect(() => find_gt(A, 3), throwsArgumentError);
    expect(() => find_gt(A, 4), throwsArgumentError);
    expect(() => find_gt(A, 5), throwsArgumentError);
    expect(() => find_gt(A, 6), throwsArgumentError);
    expect(() => find_gt(A, 7), throwsArgumentError);
    expect(() => find_gt(A, 8), throwsArgumentError);
  });
  test('find_gt for B lo=None hi=None', () {
    expect(find_gt(B, -2), 4);
    expect(find_gt(B, -1), 4);
    expect(find_gt(B, 0), 4);
    expect(find_gt(B, 1), 4);
    expect(find_gt(B, 2), 4);
    expect(find_gt(B, 3), 4);
    expect(() => find_gt(B, 4), throwsArgumentError);
    expect(() => find_gt(B, 5), throwsArgumentError);
    expect(() => find_gt(B, 6), throwsArgumentError);
    expect(() => find_gt(B, 7), throwsArgumentError);
    expect(() => find_gt(B, 8), throwsArgumentError);
  });
  test('find_gt for C lo=None hi=None', () {
    expect(find_gt(C, -2), 4);
    expect(find_gt(C, -1), 4);
    expect(find_gt(C, 0), 4);
    expect(find_gt(C, 1), 4);
    expect(find_gt(C, 2), 4);
    expect(find_gt(C, 3), 4);
    expect(find_gt(C, 4), 5);
    expect(() => find_gt(C, 5), throwsArgumentError);
    expect(() => find_gt(C, 6), throwsArgumentError);
    expect(() => find_gt(C, 7), throwsArgumentError);
    expect(() => find_gt(C, 8), throwsArgumentError);
  });
  test('find_gt for D lo=None hi=None', () {
    expect(find_gt(D, -2), 3);
    expect(find_gt(D, -1), 3);
    expect(find_gt(D, 0), 3);
    expect(find_gt(D, 1), 3);
    expect(find_gt(D, 2), 3);
    expect(find_gt(D, 3), 4);
    expect(find_gt(D, 4), 5);
    expect(() => find_gt(D, 5), throwsArgumentError);
    expect(() => find_gt(D, 6), throwsArgumentError);
    expect(() => find_gt(D, 7), throwsArgumentError);
    expect(() => find_gt(D, 8), throwsArgumentError);
  });
  test('find_gt for E lo=None hi=None', () {
    expect(find_gt(E, -2), 0);
    expect(find_gt(E, -1), 0);
    expect(find_gt(E, 0), 1);
    expect(find_gt(E, 1), 2);
    expect(find_gt(E, 2), 3);
    expect(find_gt(E, 3), 5);
    expect(find_gt(E, 4), 5);
    expect(find_gt(E, 5), 6);
    expect(() => find_gt(E, 6), throwsArgumentError);
    expect(() => find_gt(E, 7), throwsArgumentError);
    expect(() => find_gt(E, 8), throwsArgumentError);
  });
  test('find_ge for A lo=None hi=None', () {
    expect(() => find_ge(A, -2), throwsArgumentError);
    expect(() => find_ge(A, -1), throwsArgumentError);
    expect(() => find_ge(A, 0), throwsArgumentError);
    expect(() => find_ge(A, 1), throwsArgumentError);
    expect(() => find_ge(A, 2), throwsArgumentError);
    expect(() => find_ge(A, 3), throwsArgumentError);
    expect(() => find_ge(A, 4), throwsArgumentError);
    expect(() => find_ge(A, 5), throwsArgumentError);
    expect(() => find_ge(A, 6), throwsArgumentError);
    expect(() => find_ge(A, 7), throwsArgumentError);
    expect(() => find_ge(A, 8), throwsArgumentError);
  });
  test('find_ge for B lo=None hi=None', () {
    expect(find_ge(B, -2), 4);
    expect(find_ge(B, -1), 4);
    expect(find_ge(B, 0), 4);
    expect(find_ge(B, 1), 4);
    expect(find_ge(B, 2), 4);
    expect(find_ge(B, 3), 4);
    expect(find_ge(B, 4), 4);
    expect(() => find_ge(B, 5), throwsArgumentError);
    expect(() => find_ge(B, 6), throwsArgumentError);
    expect(() => find_ge(B, 7), throwsArgumentError);
    expect(() => find_ge(B, 8), throwsArgumentError);
  });
  test('find_ge for C lo=None hi=None', () {
    expect(find_ge(C, -2), 4);
    expect(find_ge(C, -1), 4);
    expect(find_ge(C, 0), 4);
    expect(find_ge(C, 1), 4);
    expect(find_ge(C, 2), 4);
    expect(find_ge(C, 3), 4);
    expect(find_ge(C, 4), 4);
    expect(find_ge(C, 5), 5);
    expect(() => find_ge(C, 6), throwsArgumentError);
    expect(() => find_ge(C, 7), throwsArgumentError);
    expect(() => find_ge(C, 8), throwsArgumentError);
  });
  test('find_ge for D lo=None hi=None', () {
    expect(find_ge(D, -2), 3);
    expect(find_ge(D, -1), 3);
    expect(find_ge(D, 0), 3);
    expect(find_ge(D, 1), 3);
    expect(find_ge(D, 2), 3);
    expect(find_ge(D, 3), 3);
    expect(find_ge(D, 4), 4);
    expect(find_ge(D, 5), 5);
    expect(() => find_ge(D, 6), throwsArgumentError);
    expect(() => find_ge(D, 7), throwsArgumentError);
    expect(() => find_ge(D, 8), throwsArgumentError);
  });
  test('find_ge for E lo=None hi=None', () {
    expect(find_ge(E, -2), 0);
    expect(find_ge(E, -1), 0);
    expect(find_ge(E, 0), 0);
    expect(find_ge(E, 1), 1);
    expect(find_ge(E, 2), 2);
    expect(find_ge(E, 3), 3);
    expect(find_ge(E, 4), 5);
    expect(find_ge(E, 5), 5);
    expect(find_ge(E, 6), 6);
    expect(() => find_ge(E, 7), throwsArgumentError);
    expect(() => find_ge(E, 8), throwsArgumentError);
  });
  test('bsearchGreaterThan for A lo=None hi=None', () {
    expect(() => A[A.bsearchGreaterThan(-2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(-1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(0)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(3)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(4)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThan(8)], throwsArgumentError);
  });
  test('bsearchGreaterThan for B lo=None hi=None', () {
    expect(B[B.bsearchGreaterThan(-2)], 4);
    expect(B[B.bsearchGreaterThan(-1)], 4);
    expect(B[B.bsearchGreaterThan(0)], 4);
    expect(B[B.bsearchGreaterThan(1)], 4);
    expect(B[B.bsearchGreaterThan(2)], 4);
    expect(B[B.bsearchGreaterThan(3)], 4);
    expect(() => B[B.bsearchGreaterThan(4)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThan(8)], throwsArgumentError);
  });
  test('bsearchGreaterThan for C lo=None hi=None', () {
    expect(C[C.bsearchGreaterThan(-2)], 4);
    expect(C[C.bsearchGreaterThan(-1)], 4);
    expect(C[C.bsearchGreaterThan(0)], 4);
    expect(C[C.bsearchGreaterThan(1)], 4);
    expect(C[C.bsearchGreaterThan(2)], 4);
    expect(C[C.bsearchGreaterThan(3)], 4);
    expect(C[C.bsearchGreaterThan(4)], 5);
    expect(() => C[C.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThan(8)], throwsArgumentError);
  });
  test('bsearchGreaterThan for D lo=None hi=None', () {
    expect(D[D.bsearchGreaterThan(-2)], 3);
    expect(D[D.bsearchGreaterThan(-1)], 3);
    expect(D[D.bsearchGreaterThan(0)], 3);
    expect(D[D.bsearchGreaterThan(1)], 3);
    expect(D[D.bsearchGreaterThan(2)], 3);
    expect(D[D.bsearchGreaterThan(3)], 4);
    expect(D[D.bsearchGreaterThan(4)], 5);
    expect(() => D[D.bsearchGreaterThan(5)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThan(8)], throwsArgumentError);
  });
  test('bsearchGreaterThan for E lo=None hi=None', () {
    expect(E[E.bsearchGreaterThan(-2)], 0);
    expect(E[E.bsearchGreaterThan(-1)], 0);
    expect(E[E.bsearchGreaterThan(0)], 1);
    expect(E[E.bsearchGreaterThan(1)], 2);
    expect(E[E.bsearchGreaterThan(2)], 3);
    expect(E[E.bsearchGreaterThan(3)], 5);
    expect(E[E.bsearchGreaterThan(4)], 5);
    expect(E[E.bsearchGreaterThan(5)], 6);
    expect(() => E[E.bsearchGreaterThan(6)], throwsArgumentError);
    expect(() => E[E.bsearchGreaterThan(7)], throwsArgumentError);
    expect(() => E[E.bsearchGreaterThan(8)], throwsArgumentError);
  });
  test('bsearchLessThan for A lo=None hi=None', () {
    expect(() => A[A.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(0)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(3)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(4)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(5)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(6)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(7)], throwsArgumentError);
    expect(() => A[A.bsearchLessThan(8)], throwsArgumentError);
  });
  test('bsearchLessThan for B lo=None hi=None', () {
    expect(() => B[B.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(0)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(3)], throwsArgumentError);
    expect(() => B[B.bsearchLessThan(4)], throwsArgumentError);
    expect(B[B.bsearchLessThan(5)], 4);
    expect(B[B.bsearchLessThan(6)], 4);
    expect(B[B.bsearchLessThan(7)], 4);
    expect(B[B.bsearchLessThan(8)], 4);
  });
  test('bsearchLessThan for C lo=None hi=None', () {
    expect(() => C[C.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(0)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(3)], throwsArgumentError);
    expect(() => C[C.bsearchLessThan(4)], throwsArgumentError);
    expect(C[C.bsearchLessThan(5)], 4);
    expect(C[C.bsearchLessThan(6)], 5);
    expect(C[C.bsearchLessThan(7)], 5);
    expect(C[C.bsearchLessThan(8)], 5);
  });
  test('bsearchLessThan for D lo=None hi=None', () {
    expect(() => D[D.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(0)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(2)], throwsArgumentError);
    expect(() => D[D.bsearchLessThan(3)], throwsArgumentError);
    expect(D[D.bsearchLessThan(4)], 3);
    expect(D[D.bsearchLessThan(5)], 4);
    expect(D[D.bsearchLessThan(6)], 5);
    expect(D[D.bsearchLessThan(7)], 5);
    expect(D[D.bsearchLessThan(8)], 5);
  });
  test('bsearchLessThan for E lo=None hi=None', () {
    expect(() => E[E.bsearchLessThan(-2)], throwsArgumentError);
    expect(() => E[E.bsearchLessThan(-1)], throwsArgumentError);
    expect(() => E[E.bsearchLessThan(0)], throwsArgumentError);
    expect(E[E.bsearchLessThan(1)], 0);
    expect(E[E.bsearchLessThan(2)], 1);
    expect(E[E.bsearchLessThan(3)], 2);
    expect(E[E.bsearchLessThan(4)], 3);
    expect(E[E.bsearchLessThan(5)], 3);
    expect(E[E.bsearchLessThan(6)], 5);
    expect(E[E.bsearchLessThan(7)], 6);
    expect(E[E.bsearchLessThan(8)], 6);
  });
  test('bsearchLessThanOrEqualTo for A lo=None hi=None', () {
    expect(() => A[A.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(3)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(4)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(5)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(6)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(7)], throwsArgumentError);
    expect(() => A[A.bsearchLessThanOrEqualTo(8)], throwsArgumentError);
  });
  test('bsearchLessThanOrEqualTo for B lo=None hi=None', () {
    expect(() => B[B.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(() => B[B.bsearchLessThanOrEqualTo(3)], throwsArgumentError);
    expect(B[B.bsearchLessThanOrEqualTo(4)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(5)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(6)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(7)], 4);
    expect(B[B.bsearchLessThanOrEqualTo(8)], 4);
  });
  test('bsearchLessThanOrEqualTo for C lo=None hi=None', () {
    expect(() => C[C.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(() => C[C.bsearchLessThanOrEqualTo(3)], throwsArgumentError);
    expect(C[C.bsearchLessThanOrEqualTo(4)], 4);
    expect(C[C.bsearchLessThanOrEqualTo(5)], 5);
    expect(C[C.bsearchLessThanOrEqualTo(6)], 5);
    expect(C[C.bsearchLessThanOrEqualTo(7)], 5);
    expect(C[C.bsearchLessThanOrEqualTo(8)], 5);
  });
  test('bsearchLessThanOrEqualTo for D lo=None hi=None', () {
    expect(() => D[D.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(0)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(1)], throwsArgumentError);
    expect(() => D[D.bsearchLessThanOrEqualTo(2)], throwsArgumentError);
    expect(D[D.bsearchLessThanOrEqualTo(3)], 3);
    expect(D[D.bsearchLessThanOrEqualTo(4)], 4);
    expect(D[D.bsearchLessThanOrEqualTo(5)], 5);
    expect(D[D.bsearchLessThanOrEqualTo(6)], 5);
    expect(D[D.bsearchLessThanOrEqualTo(7)], 5);
    expect(D[D.bsearchLessThanOrEqualTo(8)], 5);
  });
  test('bsearchLessThanOrEqualTo for E lo=None hi=None', () {
    expect(() => E[E.bsearchLessThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => E[E.bsearchLessThanOrEqualTo(-1)], throwsArgumentError);
    expect(E[E.bsearchLessThanOrEqualTo(0)], 0);
    expect(E[E.bsearchLessThanOrEqualTo(1)], 1);
    expect(E[E.bsearchLessThanOrEqualTo(2)], 2);
    expect(E[E.bsearchLessThanOrEqualTo(3)], 3);
    expect(E[E.bsearchLessThanOrEqualTo(4)], 3);
    expect(E[E.bsearchLessThanOrEqualTo(5)], 5);
    expect(E[E.bsearchLessThanOrEqualTo(6)], 6);
    expect(E[E.bsearchLessThanOrEqualTo(7)], 6);
    expect(E[E.bsearchLessThanOrEqualTo(8)], 6);
  });
  test('bsearchGreaterThanOrEqualTo for A lo=None hi=None', () {
    expect(() => A[A.bsearchGreaterThanOrEqualTo(-2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(-1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(0)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(1)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(2)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(3)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(4)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(5)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => A[A.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });
  test('bsearchGreaterThanOrEqualTo for B lo=None hi=None', () {
    expect(B[B.bsearchGreaterThanOrEqualTo(-2)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(-1)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(0)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(1)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(2)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(3)], 4);
    expect(B[B.bsearchGreaterThanOrEqualTo(4)], 4);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(5)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => B[B.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });
  test('bsearchGreaterThanOrEqualTo for C lo=None hi=None', () {
    expect(C[C.bsearchGreaterThanOrEqualTo(-2)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(-1)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(0)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(1)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(2)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(3)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(4)], 4);
    expect(C[C.bsearchGreaterThanOrEqualTo(5)], 5);
    expect(() => C[C.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => C[C.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });
  test('bsearchGreaterThanOrEqualTo for D lo=None hi=None', () {
    expect(D[D.bsearchGreaterThanOrEqualTo(-2)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(-1)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(0)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(1)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(2)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(3)], 3);
    expect(D[D.bsearchGreaterThanOrEqualTo(4)], 4);
    expect(D[D.bsearchGreaterThanOrEqualTo(5)], 5);
    expect(() => D[D.bsearchGreaterThanOrEqualTo(6)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => D[D.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });
  test('bsearchGreaterThanOrEqualTo for E lo=None hi=None', () {
    expect(E[E.bsearchGreaterThanOrEqualTo(-2)], 0);
    expect(E[E.bsearchGreaterThanOrEqualTo(-1)], 0);
    expect(E[E.bsearchGreaterThanOrEqualTo(0)], 0);
    expect(E[E.bsearchGreaterThanOrEqualTo(1)], 1);
    expect(E[E.bsearchGreaterThanOrEqualTo(2)], 2);
    expect(E[E.bsearchGreaterThanOrEqualTo(3)], 3);
    expect(E[E.bsearchGreaterThanOrEqualTo(4)], 5);
    expect(E[E.bsearchGreaterThanOrEqualTo(5)], 5);
    expect(E[E.bsearchGreaterThanOrEqualTo(6)], 6);
    expect(() => E[E.bsearchGreaterThanOrEqualTo(7)], throwsArgumentError);
    expect(() => E[E.bsearchGreaterThanOrEqualTo(8)], throwsArgumentError);
  });
}
