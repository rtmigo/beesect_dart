// Generated by bisect_test_generator_v2.py at 2021-11-12 21:28:36.133972

import 'package:bisection/bisection.dart';
import 'package:test/test.dart';

val(lst, idx) {
  if (idx<0)
    return null;
  else
    return lst[idx];
}

void main() {
    
var A = [0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
var B = [];
var C = [3];
var D = [2, 3, 4];

test('bisectRight for A', () {
expect(A.bisectRight(-2), 0);
expect(A.bisectRight(-1), 0);
expect(A.bisectRight(0), 1);
expect(A.bisectRight(1), 2);
expect(A.bisectRight(2), 6);
expect(A.bisectRight(3), 8);
expect(A.bisectRight(4), 8);
expect(A.bisectRight(5), 9);
expect(A.bisectRight(6), 10);
expect(A.bisectRight(7), 10);
expect(A.bisectRight(8), 10);
});

test('bisectRight for B', () {
expect(B.bisectRight(-2), 0);
expect(B.bisectRight(-1), 0);
expect(B.bisectRight(0), 0);
expect(B.bisectRight(1), 0);
expect(B.bisectRight(2), 0);
expect(B.bisectRight(3), 0);
expect(B.bisectRight(4), 0);
expect(B.bisectRight(5), 0);
expect(B.bisectRight(6), 0);
expect(B.bisectRight(7), 0);
expect(B.bisectRight(8), 0);
});

test('bisectRight for C', () {
expect(C.bisectRight(-2), 0);
expect(C.bisectRight(-1), 0);
expect(C.bisectRight(0), 0);
expect(C.bisectRight(1), 0);
expect(C.bisectRight(2), 0);
expect(C.bisectRight(3), 1);
expect(C.bisectRight(4), 1);
expect(C.bisectRight(5), 1);
expect(C.bisectRight(6), 1);
expect(C.bisectRight(7), 1);
expect(C.bisectRight(8), 1);
});

test('bisectRight for D', () {
expect(D.bisectRight(-2), 0);
expect(D.bisectRight(-1), 0);
expect(D.bisectRight(0), 0);
expect(D.bisectRight(1), 0);
expect(D.bisectRight(2), 1);
expect(D.bisectRight(3), 2);
expect(D.bisectRight(4), 3);
expect(D.bisectRight(5), 3);
expect(D.bisectRight(6), 3);
expect(D.bisectRight(7), 3);
expect(D.bisectRight(8), 3);
});

test('bisectLeft for A', () {
expect(A.bisectLeft(-2), 0);
expect(A.bisectLeft(-1), 0);
expect(A.bisectLeft(0), 0);
expect(A.bisectLeft(1), 1);
expect(A.bisectLeft(2), 2);
expect(A.bisectLeft(3), 6);
expect(A.bisectLeft(4), 8);
expect(A.bisectLeft(5), 8);
expect(A.bisectLeft(6), 9);
expect(A.bisectLeft(7), 10);
expect(A.bisectLeft(8), 10);
});

test('bisectLeft for B', () {
expect(B.bisectLeft(-2), 0);
expect(B.bisectLeft(-1), 0);
expect(B.bisectLeft(0), 0);
expect(B.bisectLeft(1), 0);
expect(B.bisectLeft(2), 0);
expect(B.bisectLeft(3), 0);
expect(B.bisectLeft(4), 0);
expect(B.bisectLeft(5), 0);
expect(B.bisectLeft(6), 0);
expect(B.bisectLeft(7), 0);
expect(B.bisectLeft(8), 0);
});

test('bisectLeft for C', () {
expect(C.bisectLeft(-2), 0);
expect(C.bisectLeft(-1), 0);
expect(C.bisectLeft(0), 0);
expect(C.bisectLeft(1), 0);
expect(C.bisectLeft(2), 0);
expect(C.bisectLeft(3), 0);
expect(C.bisectLeft(4), 1);
expect(C.bisectLeft(5), 1);
expect(C.bisectLeft(6), 1);
expect(C.bisectLeft(7), 1);
expect(C.bisectLeft(8), 1);
});

test('bisectLeft for D', () {
expect(D.bisectLeft(-2), 0);
expect(D.bisectLeft(-1), 0);
expect(D.bisectLeft(0), 0);
expect(D.bisectLeft(1), 0);
expect(D.bisectLeft(2), 0);
expect(D.bisectLeft(3), 1);
expect(D.bisectLeft(4), 2);
expect(D.bisectLeft(5), 3);
expect(D.bisectLeft(6), 3);
expect(D.bisectLeft(7), 3);
expect(D.bisectLeft(8), 3);
});

test('bisectRight for A, lo=0', () {
expect(A.bisectRight(-2, low: 0), 0);
expect(A.bisectRight(-1, low: 0), 0);
expect(A.bisectRight(0, low: 0), 1);
expect(A.bisectRight(1, low: 0), 2);
expect(A.bisectRight(2, low: 0), 6);
expect(A.bisectRight(3, low: 0), 8);
expect(A.bisectRight(4, low: 0), 8);
expect(A.bisectRight(5, low: 0), 9);
expect(A.bisectRight(6, low: 0), 10);
expect(A.bisectRight(7, low: 0), 10);
expect(A.bisectRight(8, low: 0), 10);
});

test('bisectRight for A, lo=1', () {
expect(A.bisectRight(-2, low: 1), 1);
expect(A.bisectRight(-1, low: 1), 1);
expect(A.bisectRight(0, low: 1), 1);
expect(A.bisectRight(1, low: 1), 2);
expect(A.bisectRight(2, low: 1), 6);
expect(A.bisectRight(3, low: 1), 8);
expect(A.bisectRight(4, low: 1), 8);
expect(A.bisectRight(5, low: 1), 9);
expect(A.bisectRight(6, low: 1), 10);
expect(A.bisectRight(7, low: 1), 10);
expect(A.bisectRight(8, low: 1), 10);
});

test('bisectRight for A, lo=2', () {
expect(A.bisectRight(-2, low: 2), 2);
expect(A.bisectRight(-1, low: 2), 2);
expect(A.bisectRight(0, low: 2), 2);
expect(A.bisectRight(1, low: 2), 2);
expect(A.bisectRight(2, low: 2), 6);
expect(A.bisectRight(3, low: 2), 8);
expect(A.bisectRight(4, low: 2), 8);
expect(A.bisectRight(5, low: 2), 9);
expect(A.bisectRight(6, low: 2), 10);
expect(A.bisectRight(7, low: 2), 10);
expect(A.bisectRight(8, low: 2), 10);
});

test('bisectRight for A, lo=3', () {
expect(A.bisectRight(-2, low: 3), 3);
expect(A.bisectRight(-1, low: 3), 3);
expect(A.bisectRight(0, low: 3), 3);
expect(A.bisectRight(1, low: 3), 3);
expect(A.bisectRight(2, low: 3), 6);
expect(A.bisectRight(3, low: 3), 8);
expect(A.bisectRight(4, low: 3), 8);
expect(A.bisectRight(5, low: 3), 9);
expect(A.bisectRight(6, low: 3), 10);
expect(A.bisectRight(7, low: 3), 10);
expect(A.bisectRight(8, low: 3), 10);
});

test('bisectRight for A, lo=4', () {
expect(A.bisectRight(-2, low: 4), 4);
expect(A.bisectRight(-1, low: 4), 4);
expect(A.bisectRight(0, low: 4), 4);
expect(A.bisectRight(1, low: 4), 4);
expect(A.bisectRight(2, low: 4), 6);
expect(A.bisectRight(3, low: 4), 8);
expect(A.bisectRight(4, low: 4), 8);
expect(A.bisectRight(5, low: 4), 9);
expect(A.bisectRight(6, low: 4), 10);
expect(A.bisectRight(7, low: 4), 10);
expect(A.bisectRight(8, low: 4), 10);
});

test('bisectRight for A, lo=5', () {
expect(A.bisectRight(-2, low: 5), 5);
expect(A.bisectRight(-1, low: 5), 5);
expect(A.bisectRight(0, low: 5), 5);
expect(A.bisectRight(1, low: 5), 5);
expect(A.bisectRight(2, low: 5), 6);
expect(A.bisectRight(3, low: 5), 8);
expect(A.bisectRight(4, low: 5), 8);
expect(A.bisectRight(5, low: 5), 9);
expect(A.bisectRight(6, low: 5), 10);
expect(A.bisectRight(7, low: 5), 10);
expect(A.bisectRight(8, low: 5), 10);
});

test('bisectRight for A, lo=6', () {
expect(A.bisectRight(-2, low: 6), 6);
expect(A.bisectRight(-1, low: 6), 6);
expect(A.bisectRight(0, low: 6), 6);
expect(A.bisectRight(1, low: 6), 6);
expect(A.bisectRight(2, low: 6), 6);
expect(A.bisectRight(3, low: 6), 8);
expect(A.bisectRight(4, low: 6), 8);
expect(A.bisectRight(5, low: 6), 9);
expect(A.bisectRight(6, low: 6), 10);
expect(A.bisectRight(7, low: 6), 10);
expect(A.bisectRight(8, low: 6), 10);
});

test('bisectRight for A, lo=7', () {
expect(A.bisectRight(-2, low: 7), 7);
expect(A.bisectRight(-1, low: 7), 7);
expect(A.bisectRight(0, low: 7), 7);
expect(A.bisectRight(1, low: 7), 7);
expect(A.bisectRight(2, low: 7), 7);
expect(A.bisectRight(3, low: 7), 8);
expect(A.bisectRight(4, low: 7), 8);
expect(A.bisectRight(5, low: 7), 9);
expect(A.bisectRight(6, low: 7), 10);
expect(A.bisectRight(7, low: 7), 10);
expect(A.bisectRight(8, low: 7), 10);
});

test('bisectRight for A, lo=8', () {
expect(A.bisectRight(-2, low: 8), 8);
expect(A.bisectRight(-1, low: 8), 8);
expect(A.bisectRight(0, low: 8), 8);
expect(A.bisectRight(1, low: 8), 8);
expect(A.bisectRight(2, low: 8), 8);
expect(A.bisectRight(3, low: 8), 8);
expect(A.bisectRight(4, low: 8), 8);
expect(A.bisectRight(5, low: 8), 9);
expect(A.bisectRight(6, low: 8), 10);
expect(A.bisectRight(7, low: 8), 10);
expect(A.bisectRight(8, low: 8), 10);
});

test('bisectRight for B, lo=0', () {
expect(B.bisectRight(-2, low: 0), 0);
expect(B.bisectRight(-1, low: 0), 0);
expect(B.bisectRight(0, low: 0), 0);
expect(B.bisectRight(1, low: 0), 0);
expect(B.bisectRight(2, low: 0), 0);
expect(B.bisectRight(3, low: 0), 0);
expect(B.bisectRight(4, low: 0), 0);
expect(B.bisectRight(5, low: 0), 0);
expect(B.bisectRight(6, low: 0), 0);
expect(B.bisectRight(7, low: 0), 0);
expect(B.bisectRight(8, low: 0), 0);
});

test('bisectRight for B, lo=1', () {
expect(B.bisectRight(-2, low: 1), 1);
expect(B.bisectRight(-1, low: 1), 1);
expect(B.bisectRight(0, low: 1), 1);
expect(B.bisectRight(1, low: 1), 1);
expect(B.bisectRight(2, low: 1), 1);
expect(B.bisectRight(3, low: 1), 1);
expect(B.bisectRight(4, low: 1), 1);
expect(B.bisectRight(5, low: 1), 1);
expect(B.bisectRight(6, low: 1), 1);
expect(B.bisectRight(7, low: 1), 1);
expect(B.bisectRight(8, low: 1), 1);
});

test('bisectRight for B, lo=2', () {
expect(B.bisectRight(-2, low: 2), 2);
expect(B.bisectRight(-1, low: 2), 2);
expect(B.bisectRight(0, low: 2), 2);
expect(B.bisectRight(1, low: 2), 2);
expect(B.bisectRight(2, low: 2), 2);
expect(B.bisectRight(3, low: 2), 2);
expect(B.bisectRight(4, low: 2), 2);
expect(B.bisectRight(5, low: 2), 2);
expect(B.bisectRight(6, low: 2), 2);
expect(B.bisectRight(7, low: 2), 2);
expect(B.bisectRight(8, low: 2), 2);
});

test('bisectRight for B, lo=3', () {
expect(B.bisectRight(-2, low: 3), 3);
expect(B.bisectRight(-1, low: 3), 3);
expect(B.bisectRight(0, low: 3), 3);
expect(B.bisectRight(1, low: 3), 3);
expect(B.bisectRight(2, low: 3), 3);
expect(B.bisectRight(3, low: 3), 3);
expect(B.bisectRight(4, low: 3), 3);
expect(B.bisectRight(5, low: 3), 3);
expect(B.bisectRight(6, low: 3), 3);
expect(B.bisectRight(7, low: 3), 3);
expect(B.bisectRight(8, low: 3), 3);
});

test('bisectRight for B, lo=4', () {
expect(B.bisectRight(-2, low: 4), 4);
expect(B.bisectRight(-1, low: 4), 4);
expect(B.bisectRight(0, low: 4), 4);
expect(B.bisectRight(1, low: 4), 4);
expect(B.bisectRight(2, low: 4), 4);
expect(B.bisectRight(3, low: 4), 4);
expect(B.bisectRight(4, low: 4), 4);
expect(B.bisectRight(5, low: 4), 4);
expect(B.bisectRight(6, low: 4), 4);
expect(B.bisectRight(7, low: 4), 4);
expect(B.bisectRight(8, low: 4), 4);
});

test('bisectRight for B, lo=5', () {
expect(B.bisectRight(-2, low: 5), 5);
expect(B.bisectRight(-1, low: 5), 5);
expect(B.bisectRight(0, low: 5), 5);
expect(B.bisectRight(1, low: 5), 5);
expect(B.bisectRight(2, low: 5), 5);
expect(B.bisectRight(3, low: 5), 5);
expect(B.bisectRight(4, low: 5), 5);
expect(B.bisectRight(5, low: 5), 5);
expect(B.bisectRight(6, low: 5), 5);
expect(B.bisectRight(7, low: 5), 5);
expect(B.bisectRight(8, low: 5), 5);
});

test('bisectRight for B, lo=6', () {
expect(B.bisectRight(-2, low: 6), 6);
expect(B.bisectRight(-1, low: 6), 6);
expect(B.bisectRight(0, low: 6), 6);
expect(B.bisectRight(1, low: 6), 6);
expect(B.bisectRight(2, low: 6), 6);
expect(B.bisectRight(3, low: 6), 6);
expect(B.bisectRight(4, low: 6), 6);
expect(B.bisectRight(5, low: 6), 6);
expect(B.bisectRight(6, low: 6), 6);
expect(B.bisectRight(7, low: 6), 6);
expect(B.bisectRight(8, low: 6), 6);
});

test('bisectRight for B, lo=7', () {
expect(B.bisectRight(-2, low: 7), 7);
expect(B.bisectRight(-1, low: 7), 7);
expect(B.bisectRight(0, low: 7), 7);
expect(B.bisectRight(1, low: 7), 7);
expect(B.bisectRight(2, low: 7), 7);
expect(B.bisectRight(3, low: 7), 7);
expect(B.bisectRight(4, low: 7), 7);
expect(B.bisectRight(5, low: 7), 7);
expect(B.bisectRight(6, low: 7), 7);
expect(B.bisectRight(7, low: 7), 7);
expect(B.bisectRight(8, low: 7), 7);
});

test('bisectRight for B, lo=8', () {
expect(B.bisectRight(-2, low: 8), 8);
expect(B.bisectRight(-1, low: 8), 8);
expect(B.bisectRight(0, low: 8), 8);
expect(B.bisectRight(1, low: 8), 8);
expect(B.bisectRight(2, low: 8), 8);
expect(B.bisectRight(3, low: 8), 8);
expect(B.bisectRight(4, low: 8), 8);
expect(B.bisectRight(5, low: 8), 8);
expect(B.bisectRight(6, low: 8), 8);
expect(B.bisectRight(7, low: 8), 8);
expect(B.bisectRight(8, low: 8), 8);
});

test('bisectRight for C, lo=0', () {
expect(C.bisectRight(-2, low: 0), 0);
expect(C.bisectRight(-1, low: 0), 0);
expect(C.bisectRight(0, low: 0), 0);
expect(C.bisectRight(1, low: 0), 0);
expect(C.bisectRight(2, low: 0), 0);
expect(C.bisectRight(3, low: 0), 1);
expect(C.bisectRight(4, low: 0), 1);
expect(C.bisectRight(5, low: 0), 1);
expect(C.bisectRight(6, low: 0), 1);
expect(C.bisectRight(7, low: 0), 1);
expect(C.bisectRight(8, low: 0), 1);
});

test('bisectRight for C, lo=1', () {
expect(C.bisectRight(-2, low: 1), 1);
expect(C.bisectRight(-1, low: 1), 1);
expect(C.bisectRight(0, low: 1), 1);
expect(C.bisectRight(1, low: 1), 1);
expect(C.bisectRight(2, low: 1), 1);
expect(C.bisectRight(3, low: 1), 1);
expect(C.bisectRight(4, low: 1), 1);
expect(C.bisectRight(5, low: 1), 1);
expect(C.bisectRight(6, low: 1), 1);
expect(C.bisectRight(7, low: 1), 1);
expect(C.bisectRight(8, low: 1), 1);
});

test('bisectRight for C, lo=2', () {
expect(C.bisectRight(-2, low: 2), 2);
expect(C.bisectRight(-1, low: 2), 2);
expect(C.bisectRight(0, low: 2), 2);
expect(C.bisectRight(1, low: 2), 2);
expect(C.bisectRight(2, low: 2), 2);
expect(C.bisectRight(3, low: 2), 2);
expect(C.bisectRight(4, low: 2), 2);
expect(C.bisectRight(5, low: 2), 2);
expect(C.bisectRight(6, low: 2), 2);
expect(C.bisectRight(7, low: 2), 2);
expect(C.bisectRight(8, low: 2), 2);
});

test('bisectRight for C, lo=3', () {
expect(C.bisectRight(-2, low: 3), 3);
expect(C.bisectRight(-1, low: 3), 3);
expect(C.bisectRight(0, low: 3), 3);
expect(C.bisectRight(1, low: 3), 3);
expect(C.bisectRight(2, low: 3), 3);
expect(C.bisectRight(3, low: 3), 3);
expect(C.bisectRight(4, low: 3), 3);
expect(C.bisectRight(5, low: 3), 3);
expect(C.bisectRight(6, low: 3), 3);
expect(C.bisectRight(7, low: 3), 3);
expect(C.bisectRight(8, low: 3), 3);
});

test('bisectRight for C, lo=4', () {
expect(C.bisectRight(-2, low: 4), 4);
expect(C.bisectRight(-1, low: 4), 4);
expect(C.bisectRight(0, low: 4), 4);
expect(C.bisectRight(1, low: 4), 4);
expect(C.bisectRight(2, low: 4), 4);
expect(C.bisectRight(3, low: 4), 4);
expect(C.bisectRight(4, low: 4), 4);
expect(C.bisectRight(5, low: 4), 4);
expect(C.bisectRight(6, low: 4), 4);
expect(C.bisectRight(7, low: 4), 4);
expect(C.bisectRight(8, low: 4), 4);
});

test('bisectRight for C, lo=5', () {
expect(C.bisectRight(-2, low: 5), 5);
expect(C.bisectRight(-1, low: 5), 5);
expect(C.bisectRight(0, low: 5), 5);
expect(C.bisectRight(1, low: 5), 5);
expect(C.bisectRight(2, low: 5), 5);
expect(C.bisectRight(3, low: 5), 5);
expect(C.bisectRight(4, low: 5), 5);
expect(C.bisectRight(5, low: 5), 5);
expect(C.bisectRight(6, low: 5), 5);
expect(C.bisectRight(7, low: 5), 5);
expect(C.bisectRight(8, low: 5), 5);
});

test('bisectRight for C, lo=6', () {
expect(C.bisectRight(-2, low: 6), 6);
expect(C.bisectRight(-1, low: 6), 6);
expect(C.bisectRight(0, low: 6), 6);
expect(C.bisectRight(1, low: 6), 6);
expect(C.bisectRight(2, low: 6), 6);
expect(C.bisectRight(3, low: 6), 6);
expect(C.bisectRight(4, low: 6), 6);
expect(C.bisectRight(5, low: 6), 6);
expect(C.bisectRight(6, low: 6), 6);
expect(C.bisectRight(7, low: 6), 6);
expect(C.bisectRight(8, low: 6), 6);
});

test('bisectRight for C, lo=7', () {
expect(C.bisectRight(-2, low: 7), 7);
expect(C.bisectRight(-1, low: 7), 7);
expect(C.bisectRight(0, low: 7), 7);
expect(C.bisectRight(1, low: 7), 7);
expect(C.bisectRight(2, low: 7), 7);
expect(C.bisectRight(3, low: 7), 7);
expect(C.bisectRight(4, low: 7), 7);
expect(C.bisectRight(5, low: 7), 7);
expect(C.bisectRight(6, low: 7), 7);
expect(C.bisectRight(7, low: 7), 7);
expect(C.bisectRight(8, low: 7), 7);
});

test('bisectRight for C, lo=8', () {
expect(C.bisectRight(-2, low: 8), 8);
expect(C.bisectRight(-1, low: 8), 8);
expect(C.bisectRight(0, low: 8), 8);
expect(C.bisectRight(1, low: 8), 8);
expect(C.bisectRight(2, low: 8), 8);
expect(C.bisectRight(3, low: 8), 8);
expect(C.bisectRight(4, low: 8), 8);
expect(C.bisectRight(5, low: 8), 8);
expect(C.bisectRight(6, low: 8), 8);
expect(C.bisectRight(7, low: 8), 8);
expect(C.bisectRight(8, low: 8), 8);
});

test('bisectRight for D, lo=0', () {
expect(D.bisectRight(-2, low: 0), 0);
expect(D.bisectRight(-1, low: 0), 0);
expect(D.bisectRight(0, low: 0), 0);
expect(D.bisectRight(1, low: 0), 0);
expect(D.bisectRight(2, low: 0), 1);
expect(D.bisectRight(3, low: 0), 2);
expect(D.bisectRight(4, low: 0), 3);
expect(D.bisectRight(5, low: 0), 3);
expect(D.bisectRight(6, low: 0), 3);
expect(D.bisectRight(7, low: 0), 3);
expect(D.bisectRight(8, low: 0), 3);
});

test('bisectRight for D, lo=1', () {
expect(D.bisectRight(-2, low: 1), 1);
expect(D.bisectRight(-1, low: 1), 1);
expect(D.bisectRight(0, low: 1), 1);
expect(D.bisectRight(1, low: 1), 1);
expect(D.bisectRight(2, low: 1), 1);
expect(D.bisectRight(3, low: 1), 2);
expect(D.bisectRight(4, low: 1), 3);
expect(D.bisectRight(5, low: 1), 3);
expect(D.bisectRight(6, low: 1), 3);
expect(D.bisectRight(7, low: 1), 3);
expect(D.bisectRight(8, low: 1), 3);
});

test('bisectRight for D, lo=2', () {
expect(D.bisectRight(-2, low: 2), 2);
expect(D.bisectRight(-1, low: 2), 2);
expect(D.bisectRight(0, low: 2), 2);
expect(D.bisectRight(1, low: 2), 2);
expect(D.bisectRight(2, low: 2), 2);
expect(D.bisectRight(3, low: 2), 2);
expect(D.bisectRight(4, low: 2), 3);
expect(D.bisectRight(5, low: 2), 3);
expect(D.bisectRight(6, low: 2), 3);
expect(D.bisectRight(7, low: 2), 3);
expect(D.bisectRight(8, low: 2), 3);
});

test('bisectRight for D, lo=3', () {
expect(D.bisectRight(-2, low: 3), 3);
expect(D.bisectRight(-1, low: 3), 3);
expect(D.bisectRight(0, low: 3), 3);
expect(D.bisectRight(1, low: 3), 3);
expect(D.bisectRight(2, low: 3), 3);
expect(D.bisectRight(3, low: 3), 3);
expect(D.bisectRight(4, low: 3), 3);
expect(D.bisectRight(5, low: 3), 3);
expect(D.bisectRight(6, low: 3), 3);
expect(D.bisectRight(7, low: 3), 3);
expect(D.bisectRight(8, low: 3), 3);
});

test('bisectRight for D, lo=4', () {
expect(D.bisectRight(-2, low: 4), 4);
expect(D.bisectRight(-1, low: 4), 4);
expect(D.bisectRight(0, low: 4), 4);
expect(D.bisectRight(1, low: 4), 4);
expect(D.bisectRight(2, low: 4), 4);
expect(D.bisectRight(3, low: 4), 4);
expect(D.bisectRight(4, low: 4), 4);
expect(D.bisectRight(5, low: 4), 4);
expect(D.bisectRight(6, low: 4), 4);
expect(D.bisectRight(7, low: 4), 4);
expect(D.bisectRight(8, low: 4), 4);
});

test('bisectRight for D, lo=5', () {
expect(D.bisectRight(-2, low: 5), 5);
expect(D.bisectRight(-1, low: 5), 5);
expect(D.bisectRight(0, low: 5), 5);
expect(D.bisectRight(1, low: 5), 5);
expect(D.bisectRight(2, low: 5), 5);
expect(D.bisectRight(3, low: 5), 5);
expect(D.bisectRight(4, low: 5), 5);
expect(D.bisectRight(5, low: 5), 5);
expect(D.bisectRight(6, low: 5), 5);
expect(D.bisectRight(7, low: 5), 5);
expect(D.bisectRight(8, low: 5), 5);
});

test('bisectRight for D, lo=6', () {
expect(D.bisectRight(-2, low: 6), 6);
expect(D.bisectRight(-1, low: 6), 6);
expect(D.bisectRight(0, low: 6), 6);
expect(D.bisectRight(1, low: 6), 6);
expect(D.bisectRight(2, low: 6), 6);
expect(D.bisectRight(3, low: 6), 6);
expect(D.bisectRight(4, low: 6), 6);
expect(D.bisectRight(5, low: 6), 6);
expect(D.bisectRight(6, low: 6), 6);
expect(D.bisectRight(7, low: 6), 6);
expect(D.bisectRight(8, low: 6), 6);
});

test('bisectRight for D, lo=7', () {
expect(D.bisectRight(-2, low: 7), 7);
expect(D.bisectRight(-1, low: 7), 7);
expect(D.bisectRight(0, low: 7), 7);
expect(D.bisectRight(1, low: 7), 7);
expect(D.bisectRight(2, low: 7), 7);
expect(D.bisectRight(3, low: 7), 7);
expect(D.bisectRight(4, low: 7), 7);
expect(D.bisectRight(5, low: 7), 7);
expect(D.bisectRight(6, low: 7), 7);
expect(D.bisectRight(7, low: 7), 7);
expect(D.bisectRight(8, low: 7), 7);
});

test('bisectRight for D, lo=8', () {
expect(D.bisectRight(-2, low: 8), 8);
expect(D.bisectRight(-1, low: 8), 8);
expect(D.bisectRight(0, low: 8), 8);
expect(D.bisectRight(1, low: 8), 8);
expect(D.bisectRight(2, low: 8), 8);
expect(D.bisectRight(3, low: 8), 8);
expect(D.bisectRight(4, low: 8), 8);
expect(D.bisectRight(5, low: 8), 8);
expect(D.bisectRight(6, low: 8), 8);
expect(D.bisectRight(7, low: 8), 8);
expect(D.bisectRight(8, low: 8), 8);
});

test('bisectLeft for A, lo=0', () {
expect(A.bisectLeft(-2, low: 0), 0);
expect(A.bisectLeft(-1, low: 0), 0);
expect(A.bisectLeft(0, low: 0), 0);
expect(A.bisectLeft(1, low: 0), 1);
expect(A.bisectLeft(2, low: 0), 2);
expect(A.bisectLeft(3, low: 0), 6);
expect(A.bisectLeft(4, low: 0), 8);
expect(A.bisectLeft(5, low: 0), 8);
expect(A.bisectLeft(6, low: 0), 9);
expect(A.bisectLeft(7, low: 0), 10);
expect(A.bisectLeft(8, low: 0), 10);
});

test('bisectLeft for A, lo=1', () {
expect(A.bisectLeft(-2, low: 1), 1);
expect(A.bisectLeft(-1, low: 1), 1);
expect(A.bisectLeft(0, low: 1), 1);
expect(A.bisectLeft(1, low: 1), 1);
expect(A.bisectLeft(2, low: 1), 2);
expect(A.bisectLeft(3, low: 1), 6);
expect(A.bisectLeft(4, low: 1), 8);
expect(A.bisectLeft(5, low: 1), 8);
expect(A.bisectLeft(6, low: 1), 9);
expect(A.bisectLeft(7, low: 1), 10);
expect(A.bisectLeft(8, low: 1), 10);
});

test('bisectLeft for A, lo=2', () {
expect(A.bisectLeft(-2, low: 2), 2);
expect(A.bisectLeft(-1, low: 2), 2);
expect(A.bisectLeft(0, low: 2), 2);
expect(A.bisectLeft(1, low: 2), 2);
expect(A.bisectLeft(2, low: 2), 2);
expect(A.bisectLeft(3, low: 2), 6);
expect(A.bisectLeft(4, low: 2), 8);
expect(A.bisectLeft(5, low: 2), 8);
expect(A.bisectLeft(6, low: 2), 9);
expect(A.bisectLeft(7, low: 2), 10);
expect(A.bisectLeft(8, low: 2), 10);
});

test('bisectLeft for A, lo=3', () {
expect(A.bisectLeft(-2, low: 3), 3);
expect(A.bisectLeft(-1, low: 3), 3);
expect(A.bisectLeft(0, low: 3), 3);
expect(A.bisectLeft(1, low: 3), 3);
expect(A.bisectLeft(2, low: 3), 3);
expect(A.bisectLeft(3, low: 3), 6);
expect(A.bisectLeft(4, low: 3), 8);
expect(A.bisectLeft(5, low: 3), 8);
expect(A.bisectLeft(6, low: 3), 9);
expect(A.bisectLeft(7, low: 3), 10);
expect(A.bisectLeft(8, low: 3), 10);
});

test('bisectLeft for A, lo=4', () {
expect(A.bisectLeft(-2, low: 4), 4);
expect(A.bisectLeft(-1, low: 4), 4);
expect(A.bisectLeft(0, low: 4), 4);
expect(A.bisectLeft(1, low: 4), 4);
expect(A.bisectLeft(2, low: 4), 4);
expect(A.bisectLeft(3, low: 4), 6);
expect(A.bisectLeft(4, low: 4), 8);
expect(A.bisectLeft(5, low: 4), 8);
expect(A.bisectLeft(6, low: 4), 9);
expect(A.bisectLeft(7, low: 4), 10);
expect(A.bisectLeft(8, low: 4), 10);
});

test('bisectLeft for A, lo=5', () {
expect(A.bisectLeft(-2, low: 5), 5);
expect(A.bisectLeft(-1, low: 5), 5);
expect(A.bisectLeft(0, low: 5), 5);
expect(A.bisectLeft(1, low: 5), 5);
expect(A.bisectLeft(2, low: 5), 5);
expect(A.bisectLeft(3, low: 5), 6);
expect(A.bisectLeft(4, low: 5), 8);
expect(A.bisectLeft(5, low: 5), 8);
expect(A.bisectLeft(6, low: 5), 9);
expect(A.bisectLeft(7, low: 5), 10);
expect(A.bisectLeft(8, low: 5), 10);
});

test('bisectLeft for A, lo=6', () {
expect(A.bisectLeft(-2, low: 6), 6);
expect(A.bisectLeft(-1, low: 6), 6);
expect(A.bisectLeft(0, low: 6), 6);
expect(A.bisectLeft(1, low: 6), 6);
expect(A.bisectLeft(2, low: 6), 6);
expect(A.bisectLeft(3, low: 6), 6);
expect(A.bisectLeft(4, low: 6), 8);
expect(A.bisectLeft(5, low: 6), 8);
expect(A.bisectLeft(6, low: 6), 9);
expect(A.bisectLeft(7, low: 6), 10);
expect(A.bisectLeft(8, low: 6), 10);
});

test('bisectLeft for A, lo=7', () {
expect(A.bisectLeft(-2, low: 7), 7);
expect(A.bisectLeft(-1, low: 7), 7);
expect(A.bisectLeft(0, low: 7), 7);
expect(A.bisectLeft(1, low: 7), 7);
expect(A.bisectLeft(2, low: 7), 7);
expect(A.bisectLeft(3, low: 7), 7);
expect(A.bisectLeft(4, low: 7), 8);
expect(A.bisectLeft(5, low: 7), 8);
expect(A.bisectLeft(6, low: 7), 9);
expect(A.bisectLeft(7, low: 7), 10);
expect(A.bisectLeft(8, low: 7), 10);
});

test('bisectLeft for A, lo=8', () {
expect(A.bisectLeft(-2, low: 8), 8);
expect(A.bisectLeft(-1, low: 8), 8);
expect(A.bisectLeft(0, low: 8), 8);
expect(A.bisectLeft(1, low: 8), 8);
expect(A.bisectLeft(2, low: 8), 8);
expect(A.bisectLeft(3, low: 8), 8);
expect(A.bisectLeft(4, low: 8), 8);
expect(A.bisectLeft(5, low: 8), 8);
expect(A.bisectLeft(6, low: 8), 9);
expect(A.bisectLeft(7, low: 8), 10);
expect(A.bisectLeft(8, low: 8), 10);
});

test('bisectLeft for B, lo=0', () {
expect(B.bisectLeft(-2, low: 0), 0);
expect(B.bisectLeft(-1, low: 0), 0);
expect(B.bisectLeft(0, low: 0), 0);
expect(B.bisectLeft(1, low: 0), 0);
expect(B.bisectLeft(2, low: 0), 0);
expect(B.bisectLeft(3, low: 0), 0);
expect(B.bisectLeft(4, low: 0), 0);
expect(B.bisectLeft(5, low: 0), 0);
expect(B.bisectLeft(6, low: 0), 0);
expect(B.bisectLeft(7, low: 0), 0);
expect(B.bisectLeft(8, low: 0), 0);
});

test('bisectLeft for B, lo=1', () {
expect(B.bisectLeft(-2, low: 1), 1);
expect(B.bisectLeft(-1, low: 1), 1);
expect(B.bisectLeft(0, low: 1), 1);
expect(B.bisectLeft(1, low: 1), 1);
expect(B.bisectLeft(2, low: 1), 1);
expect(B.bisectLeft(3, low: 1), 1);
expect(B.bisectLeft(4, low: 1), 1);
expect(B.bisectLeft(5, low: 1), 1);
expect(B.bisectLeft(6, low: 1), 1);
expect(B.bisectLeft(7, low: 1), 1);
expect(B.bisectLeft(8, low: 1), 1);
});

test('bisectLeft for B, lo=2', () {
expect(B.bisectLeft(-2, low: 2), 2);
expect(B.bisectLeft(-1, low: 2), 2);
expect(B.bisectLeft(0, low: 2), 2);
expect(B.bisectLeft(1, low: 2), 2);
expect(B.bisectLeft(2, low: 2), 2);
expect(B.bisectLeft(3, low: 2), 2);
expect(B.bisectLeft(4, low: 2), 2);
expect(B.bisectLeft(5, low: 2), 2);
expect(B.bisectLeft(6, low: 2), 2);
expect(B.bisectLeft(7, low: 2), 2);
expect(B.bisectLeft(8, low: 2), 2);
});

test('bisectLeft for B, lo=3', () {
expect(B.bisectLeft(-2, low: 3), 3);
expect(B.bisectLeft(-1, low: 3), 3);
expect(B.bisectLeft(0, low: 3), 3);
expect(B.bisectLeft(1, low: 3), 3);
expect(B.bisectLeft(2, low: 3), 3);
expect(B.bisectLeft(3, low: 3), 3);
expect(B.bisectLeft(4, low: 3), 3);
expect(B.bisectLeft(5, low: 3), 3);
expect(B.bisectLeft(6, low: 3), 3);
expect(B.bisectLeft(7, low: 3), 3);
expect(B.bisectLeft(8, low: 3), 3);
});

test('bisectLeft for B, lo=4', () {
expect(B.bisectLeft(-2, low: 4), 4);
expect(B.bisectLeft(-1, low: 4), 4);
expect(B.bisectLeft(0, low: 4), 4);
expect(B.bisectLeft(1, low: 4), 4);
expect(B.bisectLeft(2, low: 4), 4);
expect(B.bisectLeft(3, low: 4), 4);
expect(B.bisectLeft(4, low: 4), 4);
expect(B.bisectLeft(5, low: 4), 4);
expect(B.bisectLeft(6, low: 4), 4);
expect(B.bisectLeft(7, low: 4), 4);
expect(B.bisectLeft(8, low: 4), 4);
});

test('bisectLeft for B, lo=5', () {
expect(B.bisectLeft(-2, low: 5), 5);
expect(B.bisectLeft(-1, low: 5), 5);
expect(B.bisectLeft(0, low: 5), 5);
expect(B.bisectLeft(1, low: 5), 5);
expect(B.bisectLeft(2, low: 5), 5);
expect(B.bisectLeft(3, low: 5), 5);
expect(B.bisectLeft(4, low: 5), 5);
expect(B.bisectLeft(5, low: 5), 5);
expect(B.bisectLeft(6, low: 5), 5);
expect(B.bisectLeft(7, low: 5), 5);
expect(B.bisectLeft(8, low: 5), 5);
});

test('bisectLeft for B, lo=6', () {
expect(B.bisectLeft(-2, low: 6), 6);
expect(B.bisectLeft(-1, low: 6), 6);
expect(B.bisectLeft(0, low: 6), 6);
expect(B.bisectLeft(1, low: 6), 6);
expect(B.bisectLeft(2, low: 6), 6);
expect(B.bisectLeft(3, low: 6), 6);
expect(B.bisectLeft(4, low: 6), 6);
expect(B.bisectLeft(5, low: 6), 6);
expect(B.bisectLeft(6, low: 6), 6);
expect(B.bisectLeft(7, low: 6), 6);
expect(B.bisectLeft(8, low: 6), 6);
});

test('bisectLeft for B, lo=7', () {
expect(B.bisectLeft(-2, low: 7), 7);
expect(B.bisectLeft(-1, low: 7), 7);
expect(B.bisectLeft(0, low: 7), 7);
expect(B.bisectLeft(1, low: 7), 7);
expect(B.bisectLeft(2, low: 7), 7);
expect(B.bisectLeft(3, low: 7), 7);
expect(B.bisectLeft(4, low: 7), 7);
expect(B.bisectLeft(5, low: 7), 7);
expect(B.bisectLeft(6, low: 7), 7);
expect(B.bisectLeft(7, low: 7), 7);
expect(B.bisectLeft(8, low: 7), 7);
});

test('bisectLeft for B, lo=8', () {
expect(B.bisectLeft(-2, low: 8), 8);
expect(B.bisectLeft(-1, low: 8), 8);
expect(B.bisectLeft(0, low: 8), 8);
expect(B.bisectLeft(1, low: 8), 8);
expect(B.bisectLeft(2, low: 8), 8);
expect(B.bisectLeft(3, low: 8), 8);
expect(B.bisectLeft(4, low: 8), 8);
expect(B.bisectLeft(5, low: 8), 8);
expect(B.bisectLeft(6, low: 8), 8);
expect(B.bisectLeft(7, low: 8), 8);
expect(B.bisectLeft(8, low: 8), 8);
});

test('bisectLeft for C, lo=0', () {
expect(C.bisectLeft(-2, low: 0), 0);
expect(C.bisectLeft(-1, low: 0), 0);
expect(C.bisectLeft(0, low: 0), 0);
expect(C.bisectLeft(1, low: 0), 0);
expect(C.bisectLeft(2, low: 0), 0);
expect(C.bisectLeft(3, low: 0), 0);
expect(C.bisectLeft(4, low: 0), 1);
expect(C.bisectLeft(5, low: 0), 1);
expect(C.bisectLeft(6, low: 0), 1);
expect(C.bisectLeft(7, low: 0), 1);
expect(C.bisectLeft(8, low: 0), 1);
});

test('bisectLeft for C, lo=1', () {
expect(C.bisectLeft(-2, low: 1), 1);
expect(C.bisectLeft(-1, low: 1), 1);
expect(C.bisectLeft(0, low: 1), 1);
expect(C.bisectLeft(1, low: 1), 1);
expect(C.bisectLeft(2, low: 1), 1);
expect(C.bisectLeft(3, low: 1), 1);
expect(C.bisectLeft(4, low: 1), 1);
expect(C.bisectLeft(5, low: 1), 1);
expect(C.bisectLeft(6, low: 1), 1);
expect(C.bisectLeft(7, low: 1), 1);
expect(C.bisectLeft(8, low: 1), 1);
});

test('bisectLeft for C, lo=2', () {
expect(C.bisectLeft(-2, low: 2), 2);
expect(C.bisectLeft(-1, low: 2), 2);
expect(C.bisectLeft(0, low: 2), 2);
expect(C.bisectLeft(1, low: 2), 2);
expect(C.bisectLeft(2, low: 2), 2);
expect(C.bisectLeft(3, low: 2), 2);
expect(C.bisectLeft(4, low: 2), 2);
expect(C.bisectLeft(5, low: 2), 2);
expect(C.bisectLeft(6, low: 2), 2);
expect(C.bisectLeft(7, low: 2), 2);
expect(C.bisectLeft(8, low: 2), 2);
});

test('bisectLeft for C, lo=3', () {
expect(C.bisectLeft(-2, low: 3), 3);
expect(C.bisectLeft(-1, low: 3), 3);
expect(C.bisectLeft(0, low: 3), 3);
expect(C.bisectLeft(1, low: 3), 3);
expect(C.bisectLeft(2, low: 3), 3);
expect(C.bisectLeft(3, low: 3), 3);
expect(C.bisectLeft(4, low: 3), 3);
expect(C.bisectLeft(5, low: 3), 3);
expect(C.bisectLeft(6, low: 3), 3);
expect(C.bisectLeft(7, low: 3), 3);
expect(C.bisectLeft(8, low: 3), 3);
});

test('bisectLeft for C, lo=4', () {
expect(C.bisectLeft(-2, low: 4), 4);
expect(C.bisectLeft(-1, low: 4), 4);
expect(C.bisectLeft(0, low: 4), 4);
expect(C.bisectLeft(1, low: 4), 4);
expect(C.bisectLeft(2, low: 4), 4);
expect(C.bisectLeft(3, low: 4), 4);
expect(C.bisectLeft(4, low: 4), 4);
expect(C.bisectLeft(5, low: 4), 4);
expect(C.bisectLeft(6, low: 4), 4);
expect(C.bisectLeft(7, low: 4), 4);
expect(C.bisectLeft(8, low: 4), 4);
});

test('bisectLeft for C, lo=5', () {
expect(C.bisectLeft(-2, low: 5), 5);
expect(C.bisectLeft(-1, low: 5), 5);
expect(C.bisectLeft(0, low: 5), 5);
expect(C.bisectLeft(1, low: 5), 5);
expect(C.bisectLeft(2, low: 5), 5);
expect(C.bisectLeft(3, low: 5), 5);
expect(C.bisectLeft(4, low: 5), 5);
expect(C.bisectLeft(5, low: 5), 5);
expect(C.bisectLeft(6, low: 5), 5);
expect(C.bisectLeft(7, low: 5), 5);
expect(C.bisectLeft(8, low: 5), 5);
});

test('bisectLeft for C, lo=6', () {
expect(C.bisectLeft(-2, low: 6), 6);
expect(C.bisectLeft(-1, low: 6), 6);
expect(C.bisectLeft(0, low: 6), 6);
expect(C.bisectLeft(1, low: 6), 6);
expect(C.bisectLeft(2, low: 6), 6);
expect(C.bisectLeft(3, low: 6), 6);
expect(C.bisectLeft(4, low: 6), 6);
expect(C.bisectLeft(5, low: 6), 6);
expect(C.bisectLeft(6, low: 6), 6);
expect(C.bisectLeft(7, low: 6), 6);
expect(C.bisectLeft(8, low: 6), 6);
});

test('bisectLeft for C, lo=7', () {
expect(C.bisectLeft(-2, low: 7), 7);
expect(C.bisectLeft(-1, low: 7), 7);
expect(C.bisectLeft(0, low: 7), 7);
expect(C.bisectLeft(1, low: 7), 7);
expect(C.bisectLeft(2, low: 7), 7);
expect(C.bisectLeft(3, low: 7), 7);
expect(C.bisectLeft(4, low: 7), 7);
expect(C.bisectLeft(5, low: 7), 7);
expect(C.bisectLeft(6, low: 7), 7);
expect(C.bisectLeft(7, low: 7), 7);
expect(C.bisectLeft(8, low: 7), 7);
});

test('bisectLeft for C, lo=8', () {
expect(C.bisectLeft(-2, low: 8), 8);
expect(C.bisectLeft(-1, low: 8), 8);
expect(C.bisectLeft(0, low: 8), 8);
expect(C.bisectLeft(1, low: 8), 8);
expect(C.bisectLeft(2, low: 8), 8);
expect(C.bisectLeft(3, low: 8), 8);
expect(C.bisectLeft(4, low: 8), 8);
expect(C.bisectLeft(5, low: 8), 8);
expect(C.bisectLeft(6, low: 8), 8);
expect(C.bisectLeft(7, low: 8), 8);
expect(C.bisectLeft(8, low: 8), 8);
});

test('bisectLeft for D, lo=0', () {
expect(D.bisectLeft(-2, low: 0), 0);
expect(D.bisectLeft(-1, low: 0), 0);
expect(D.bisectLeft(0, low: 0), 0);
expect(D.bisectLeft(1, low: 0), 0);
expect(D.bisectLeft(2, low: 0), 0);
expect(D.bisectLeft(3, low: 0), 1);
expect(D.bisectLeft(4, low: 0), 2);
expect(D.bisectLeft(5, low: 0), 3);
expect(D.bisectLeft(6, low: 0), 3);
expect(D.bisectLeft(7, low: 0), 3);
expect(D.bisectLeft(8, low: 0), 3);
});

test('bisectLeft for D, lo=1', () {
expect(D.bisectLeft(-2, low: 1), 1);
expect(D.bisectLeft(-1, low: 1), 1);
expect(D.bisectLeft(0, low: 1), 1);
expect(D.bisectLeft(1, low: 1), 1);
expect(D.bisectLeft(2, low: 1), 1);
expect(D.bisectLeft(3, low: 1), 1);
expect(D.bisectLeft(4, low: 1), 2);
expect(D.bisectLeft(5, low: 1), 3);
expect(D.bisectLeft(6, low: 1), 3);
expect(D.bisectLeft(7, low: 1), 3);
expect(D.bisectLeft(8, low: 1), 3);
});

test('bisectLeft for D, lo=2', () {
expect(D.bisectLeft(-2, low: 2), 2);
expect(D.bisectLeft(-1, low: 2), 2);
expect(D.bisectLeft(0, low: 2), 2);
expect(D.bisectLeft(1, low: 2), 2);
expect(D.bisectLeft(2, low: 2), 2);
expect(D.bisectLeft(3, low: 2), 2);
expect(D.bisectLeft(4, low: 2), 2);
expect(D.bisectLeft(5, low: 2), 3);
expect(D.bisectLeft(6, low: 2), 3);
expect(D.bisectLeft(7, low: 2), 3);
expect(D.bisectLeft(8, low: 2), 3);
});

test('bisectLeft for D, lo=3', () {
expect(D.bisectLeft(-2, low: 3), 3);
expect(D.bisectLeft(-1, low: 3), 3);
expect(D.bisectLeft(0, low: 3), 3);
expect(D.bisectLeft(1, low: 3), 3);
expect(D.bisectLeft(2, low: 3), 3);
expect(D.bisectLeft(3, low: 3), 3);
expect(D.bisectLeft(4, low: 3), 3);
expect(D.bisectLeft(5, low: 3), 3);
expect(D.bisectLeft(6, low: 3), 3);
expect(D.bisectLeft(7, low: 3), 3);
expect(D.bisectLeft(8, low: 3), 3);
});

test('bisectLeft for D, lo=4', () {
expect(D.bisectLeft(-2, low: 4), 4);
expect(D.bisectLeft(-1, low: 4), 4);
expect(D.bisectLeft(0, low: 4), 4);
expect(D.bisectLeft(1, low: 4), 4);
expect(D.bisectLeft(2, low: 4), 4);
expect(D.bisectLeft(3, low: 4), 4);
expect(D.bisectLeft(4, low: 4), 4);
expect(D.bisectLeft(5, low: 4), 4);
expect(D.bisectLeft(6, low: 4), 4);
expect(D.bisectLeft(7, low: 4), 4);
expect(D.bisectLeft(8, low: 4), 4);
});

test('bisectLeft for D, lo=5', () {
expect(D.bisectLeft(-2, low: 5), 5);
expect(D.bisectLeft(-1, low: 5), 5);
expect(D.bisectLeft(0, low: 5), 5);
expect(D.bisectLeft(1, low: 5), 5);
expect(D.bisectLeft(2, low: 5), 5);
expect(D.bisectLeft(3, low: 5), 5);
expect(D.bisectLeft(4, low: 5), 5);
expect(D.bisectLeft(5, low: 5), 5);
expect(D.bisectLeft(6, low: 5), 5);
expect(D.bisectLeft(7, low: 5), 5);
expect(D.bisectLeft(8, low: 5), 5);
});

test('bisectLeft for D, lo=6', () {
expect(D.bisectLeft(-2, low: 6), 6);
expect(D.bisectLeft(-1, low: 6), 6);
expect(D.bisectLeft(0, low: 6), 6);
expect(D.bisectLeft(1, low: 6), 6);
expect(D.bisectLeft(2, low: 6), 6);
expect(D.bisectLeft(3, low: 6), 6);
expect(D.bisectLeft(4, low: 6), 6);
expect(D.bisectLeft(5, low: 6), 6);
expect(D.bisectLeft(6, low: 6), 6);
expect(D.bisectLeft(7, low: 6), 6);
expect(D.bisectLeft(8, low: 6), 6);
});

test('bisectLeft for D, lo=7', () {
expect(D.bisectLeft(-2, low: 7), 7);
expect(D.bisectLeft(-1, low: 7), 7);
expect(D.bisectLeft(0, low: 7), 7);
expect(D.bisectLeft(1, low: 7), 7);
expect(D.bisectLeft(2, low: 7), 7);
expect(D.bisectLeft(3, low: 7), 7);
expect(D.bisectLeft(4, low: 7), 7);
expect(D.bisectLeft(5, low: 7), 7);
expect(D.bisectLeft(6, low: 7), 7);
expect(D.bisectLeft(7, low: 7), 7);
expect(D.bisectLeft(8, low: 7), 7);
});

test('bisectLeft for D, lo=8', () {
expect(D.bisectLeft(-2, low: 8), 8);
expect(D.bisectLeft(-1, low: 8), 8);
expect(D.bisectLeft(0, low: 8), 8);
expect(D.bisectLeft(1, low: 8), 8);
expect(D.bisectLeft(2, low: 8), 8);
expect(D.bisectLeft(3, low: 8), 8);
expect(D.bisectLeft(4, low: 8), 8);
expect(D.bisectLeft(5, low: 8), 8);
expect(D.bisectLeft(6, low: 8), 8);
expect(D.bisectLeft(7, low: 8), 8);
expect(D.bisectLeft(8, low: 8), 8);
});

test('bisectRight for A, hi=0', () {
expect(A.bisectRight(-2, high: 0), 0);
expect(A.bisectRight(-1, high: 0), 0);
expect(A.bisectRight(0, high: 0), 0);
expect(A.bisectRight(1, high: 0), 0);
expect(A.bisectRight(2, high: 0), 0);
expect(A.bisectRight(3, high: 0), 0);
expect(A.bisectRight(4, high: 0), 0);
expect(A.bisectRight(5, high: 0), 0);
expect(A.bisectRight(6, high: 0), 0);
expect(A.bisectRight(7, high: 0), 0);
expect(A.bisectRight(8, high: 0), 0);
});

test('bisectRight for A, hi=1', () {
expect(A.bisectRight(-2, high: 1), 0);
expect(A.bisectRight(-1, high: 1), 0);
expect(A.bisectRight(0, high: 1), 1);
expect(A.bisectRight(1, high: 1), 1);
expect(A.bisectRight(2, high: 1), 1);
expect(A.bisectRight(3, high: 1), 1);
expect(A.bisectRight(4, high: 1), 1);
expect(A.bisectRight(5, high: 1), 1);
expect(A.bisectRight(6, high: 1), 1);
expect(A.bisectRight(7, high: 1), 1);
expect(A.bisectRight(8, high: 1), 1);
});

test('bisectRight for A, hi=2', () {
expect(A.bisectRight(-2, high: 2), 0);
expect(A.bisectRight(-1, high: 2), 0);
expect(A.bisectRight(0, high: 2), 1);
expect(A.bisectRight(1, high: 2), 2);
expect(A.bisectRight(2, high: 2), 2);
expect(A.bisectRight(3, high: 2), 2);
expect(A.bisectRight(4, high: 2), 2);
expect(A.bisectRight(5, high: 2), 2);
expect(A.bisectRight(6, high: 2), 2);
expect(A.bisectRight(7, high: 2), 2);
expect(A.bisectRight(8, high: 2), 2);
});

test('bisectRight for A, hi=3', () {
expect(A.bisectRight(-2, high: 3), 0);
expect(A.bisectRight(-1, high: 3), 0);
expect(A.bisectRight(0, high: 3), 1);
expect(A.bisectRight(1, high: 3), 2);
expect(A.bisectRight(2, high: 3), 3);
expect(A.bisectRight(3, high: 3), 3);
expect(A.bisectRight(4, high: 3), 3);
expect(A.bisectRight(5, high: 3), 3);
expect(A.bisectRight(6, high: 3), 3);
expect(A.bisectRight(7, high: 3), 3);
expect(A.bisectRight(8, high: 3), 3);
});

test('bisectRight for A, hi=4', () {
expect(A.bisectRight(-2, high: 4), 0);
expect(A.bisectRight(-1, high: 4), 0);
expect(A.bisectRight(0, high: 4), 1);
expect(A.bisectRight(1, high: 4), 2);
expect(A.bisectRight(2, high: 4), 4);
expect(A.bisectRight(3, high: 4), 4);
expect(A.bisectRight(4, high: 4), 4);
expect(A.bisectRight(5, high: 4), 4);
expect(A.bisectRight(6, high: 4), 4);
expect(A.bisectRight(7, high: 4), 4);
expect(A.bisectRight(8, high: 4), 4);
});

test('bisectRight for A, hi=5', () {
expect(A.bisectRight(-2, high: 5), 0);
expect(A.bisectRight(-1, high: 5), 0);
expect(A.bisectRight(0, high: 5), 1);
expect(A.bisectRight(1, high: 5), 2);
expect(A.bisectRight(2, high: 5), 5);
expect(A.bisectRight(3, high: 5), 5);
expect(A.bisectRight(4, high: 5), 5);
expect(A.bisectRight(5, high: 5), 5);
expect(A.bisectRight(6, high: 5), 5);
expect(A.bisectRight(7, high: 5), 5);
expect(A.bisectRight(8, high: 5), 5);
});

test('bisectRight for A, hi=6', () {
expect(A.bisectRight(-2, high: 6), 0);
expect(A.bisectRight(-1, high: 6), 0);
expect(A.bisectRight(0, high: 6), 1);
expect(A.bisectRight(1, high: 6), 2);
expect(A.bisectRight(2, high: 6), 6);
expect(A.bisectRight(3, high: 6), 6);
expect(A.bisectRight(4, high: 6), 6);
expect(A.bisectRight(5, high: 6), 6);
expect(A.bisectRight(6, high: 6), 6);
expect(A.bisectRight(7, high: 6), 6);
expect(A.bisectRight(8, high: 6), 6);
});

test('bisectRight for A, hi=7', () {
expect(A.bisectRight(-2, high: 7), 0);
expect(A.bisectRight(-1, high: 7), 0);
expect(A.bisectRight(0, high: 7), 1);
expect(A.bisectRight(1, high: 7), 2);
expect(A.bisectRight(2, high: 7), 6);
expect(A.bisectRight(3, high: 7), 7);
expect(A.bisectRight(4, high: 7), 7);
expect(A.bisectRight(5, high: 7), 7);
expect(A.bisectRight(6, high: 7), 7);
expect(A.bisectRight(7, high: 7), 7);
expect(A.bisectRight(8, high: 7), 7);
});

test('bisectRight for A, hi=8', () {
expect(A.bisectRight(-2, high: 8), 0);
expect(A.bisectRight(-1, high: 8), 0);
expect(A.bisectRight(0, high: 8), 1);
expect(A.bisectRight(1, high: 8), 2);
expect(A.bisectRight(2, high: 8), 6);
expect(A.bisectRight(3, high: 8), 8);
expect(A.bisectRight(4, high: 8), 8);
expect(A.bisectRight(5, high: 8), 8);
expect(A.bisectRight(6, high: 8), 8);
expect(A.bisectRight(7, high: 8), 8);
expect(A.bisectRight(8, high: 8), 8);
});

test('bisectRight for A, hi=9', () {
expect(A.bisectRight(-2, high: 9), 0);
expect(A.bisectRight(-1, high: 9), 0);
expect(A.bisectRight(0, high: 9), 1);
expect(A.bisectRight(1, high: 9), 2);
expect(A.bisectRight(2, high: 9), 6);
expect(A.bisectRight(3, high: 9), 8);
expect(A.bisectRight(4, high: 9), 8);
expect(A.bisectRight(5, high: 9), 9);
expect(A.bisectRight(6, high: 9), 9);
expect(A.bisectRight(7, high: 9), 9);
expect(A.bisectRight(8, high: 9), 9);
});

test('bisectRight for A, hi=10', () {
expect(A.bisectRight(-2, high: 10), 0);
expect(A.bisectRight(-1, high: 10), 0);
expect(A.bisectRight(0, high: 10), 1);
expect(A.bisectRight(1, high: 10), 2);
expect(A.bisectRight(2, high: 10), 6);
expect(A.bisectRight(3, high: 10), 8);
expect(A.bisectRight(4, high: 10), 8);
expect(A.bisectRight(5, high: 10), 9);
expect(A.bisectRight(6, high: 10), 10);
expect(A.bisectRight(7, high: 10), 10);
expect(A.bisectRight(8, high: 10), 10);
});

test('bisectRight for B, hi=0', () {
expect(B.bisectRight(-2, high: 0), 0);
expect(B.bisectRight(-1, high: 0), 0);
expect(B.bisectRight(0, high: 0), 0);
expect(B.bisectRight(1, high: 0), 0);
expect(B.bisectRight(2, high: 0), 0);
expect(B.bisectRight(3, high: 0), 0);
expect(B.bisectRight(4, high: 0), 0);
expect(B.bisectRight(5, high: 0), 0);
expect(B.bisectRight(6, high: 0), 0);
expect(B.bisectRight(7, high: 0), 0);
expect(B.bisectRight(8, high: 0), 0);
});

test('bisectRight for C, hi=0', () {
expect(C.bisectRight(-2, high: 0), 0);
expect(C.bisectRight(-1, high: 0), 0);
expect(C.bisectRight(0, high: 0), 0);
expect(C.bisectRight(1, high: 0), 0);
expect(C.bisectRight(2, high: 0), 0);
expect(C.bisectRight(3, high: 0), 0);
expect(C.bisectRight(4, high: 0), 0);
expect(C.bisectRight(5, high: 0), 0);
expect(C.bisectRight(6, high: 0), 0);
expect(C.bisectRight(7, high: 0), 0);
expect(C.bisectRight(8, high: 0), 0);
});

test('bisectRight for C, hi=1', () {
expect(C.bisectRight(-2, high: 1), 0);
expect(C.bisectRight(-1, high: 1), 0);
expect(C.bisectRight(0, high: 1), 0);
expect(C.bisectRight(1, high: 1), 0);
expect(C.bisectRight(2, high: 1), 0);
expect(C.bisectRight(3, high: 1), 1);
expect(C.bisectRight(4, high: 1), 1);
expect(C.bisectRight(5, high: 1), 1);
expect(C.bisectRight(6, high: 1), 1);
expect(C.bisectRight(7, high: 1), 1);
expect(C.bisectRight(8, high: 1), 1);
});

test('bisectRight for D, hi=0', () {
expect(D.bisectRight(-2, high: 0), 0);
expect(D.bisectRight(-1, high: 0), 0);
expect(D.bisectRight(0, high: 0), 0);
expect(D.bisectRight(1, high: 0), 0);
expect(D.bisectRight(2, high: 0), 0);
expect(D.bisectRight(3, high: 0), 0);
expect(D.bisectRight(4, high: 0), 0);
expect(D.bisectRight(5, high: 0), 0);
expect(D.bisectRight(6, high: 0), 0);
expect(D.bisectRight(7, high: 0), 0);
expect(D.bisectRight(8, high: 0), 0);
});

test('bisectRight for D, hi=1', () {
expect(D.bisectRight(-2, high: 1), 0);
expect(D.bisectRight(-1, high: 1), 0);
expect(D.bisectRight(0, high: 1), 0);
expect(D.bisectRight(1, high: 1), 0);
expect(D.bisectRight(2, high: 1), 1);
expect(D.bisectRight(3, high: 1), 1);
expect(D.bisectRight(4, high: 1), 1);
expect(D.bisectRight(5, high: 1), 1);
expect(D.bisectRight(6, high: 1), 1);
expect(D.bisectRight(7, high: 1), 1);
expect(D.bisectRight(8, high: 1), 1);
});

test('bisectRight for D, hi=2', () {
expect(D.bisectRight(-2, high: 2), 0);
expect(D.bisectRight(-1, high: 2), 0);
expect(D.bisectRight(0, high: 2), 0);
expect(D.bisectRight(1, high: 2), 0);
expect(D.bisectRight(2, high: 2), 1);
expect(D.bisectRight(3, high: 2), 2);
expect(D.bisectRight(4, high: 2), 2);
expect(D.bisectRight(5, high: 2), 2);
expect(D.bisectRight(6, high: 2), 2);
expect(D.bisectRight(7, high: 2), 2);
expect(D.bisectRight(8, high: 2), 2);
});

test('bisectRight for D, hi=3', () {
expect(D.bisectRight(-2, high: 3), 0);
expect(D.bisectRight(-1, high: 3), 0);
expect(D.bisectRight(0, high: 3), 0);
expect(D.bisectRight(1, high: 3), 0);
expect(D.bisectRight(2, high: 3), 1);
expect(D.bisectRight(3, high: 3), 2);
expect(D.bisectRight(4, high: 3), 3);
expect(D.bisectRight(5, high: 3), 3);
expect(D.bisectRight(6, high: 3), 3);
expect(D.bisectRight(7, high: 3), 3);
expect(D.bisectRight(8, high: 3), 3);
});

test('bisectLeft for A, hi=0', () {
expect(A.bisectLeft(-2, high: 0), 0);
expect(A.bisectLeft(-1, high: 0), 0);
expect(A.bisectLeft(0, high: 0), 0);
expect(A.bisectLeft(1, high: 0), 0);
expect(A.bisectLeft(2, high: 0), 0);
expect(A.bisectLeft(3, high: 0), 0);
expect(A.bisectLeft(4, high: 0), 0);
expect(A.bisectLeft(5, high: 0), 0);
expect(A.bisectLeft(6, high: 0), 0);
expect(A.bisectLeft(7, high: 0), 0);
expect(A.bisectLeft(8, high: 0), 0);
});

test('bisectLeft for A, hi=1', () {
expect(A.bisectLeft(-2, high: 1), 0);
expect(A.bisectLeft(-1, high: 1), 0);
expect(A.bisectLeft(0, high: 1), 0);
expect(A.bisectLeft(1, high: 1), 1);
expect(A.bisectLeft(2, high: 1), 1);
expect(A.bisectLeft(3, high: 1), 1);
expect(A.bisectLeft(4, high: 1), 1);
expect(A.bisectLeft(5, high: 1), 1);
expect(A.bisectLeft(6, high: 1), 1);
expect(A.bisectLeft(7, high: 1), 1);
expect(A.bisectLeft(8, high: 1), 1);
});

test('bisectLeft for A, hi=2', () {
expect(A.bisectLeft(-2, high: 2), 0);
expect(A.bisectLeft(-1, high: 2), 0);
expect(A.bisectLeft(0, high: 2), 0);
expect(A.bisectLeft(1, high: 2), 1);
expect(A.bisectLeft(2, high: 2), 2);
expect(A.bisectLeft(3, high: 2), 2);
expect(A.bisectLeft(4, high: 2), 2);
expect(A.bisectLeft(5, high: 2), 2);
expect(A.bisectLeft(6, high: 2), 2);
expect(A.bisectLeft(7, high: 2), 2);
expect(A.bisectLeft(8, high: 2), 2);
});

test('bisectLeft for A, hi=3', () {
expect(A.bisectLeft(-2, high: 3), 0);
expect(A.bisectLeft(-1, high: 3), 0);
expect(A.bisectLeft(0, high: 3), 0);
expect(A.bisectLeft(1, high: 3), 1);
expect(A.bisectLeft(2, high: 3), 2);
expect(A.bisectLeft(3, high: 3), 3);
expect(A.bisectLeft(4, high: 3), 3);
expect(A.bisectLeft(5, high: 3), 3);
expect(A.bisectLeft(6, high: 3), 3);
expect(A.bisectLeft(7, high: 3), 3);
expect(A.bisectLeft(8, high: 3), 3);
});

test('bisectLeft for A, hi=4', () {
expect(A.bisectLeft(-2, high: 4), 0);
expect(A.bisectLeft(-1, high: 4), 0);
expect(A.bisectLeft(0, high: 4), 0);
expect(A.bisectLeft(1, high: 4), 1);
expect(A.bisectLeft(2, high: 4), 2);
expect(A.bisectLeft(3, high: 4), 4);
expect(A.bisectLeft(4, high: 4), 4);
expect(A.bisectLeft(5, high: 4), 4);
expect(A.bisectLeft(6, high: 4), 4);
expect(A.bisectLeft(7, high: 4), 4);
expect(A.bisectLeft(8, high: 4), 4);
});

test('bisectLeft for A, hi=5', () {
expect(A.bisectLeft(-2, high: 5), 0);
expect(A.bisectLeft(-1, high: 5), 0);
expect(A.bisectLeft(0, high: 5), 0);
expect(A.bisectLeft(1, high: 5), 1);
expect(A.bisectLeft(2, high: 5), 2);
expect(A.bisectLeft(3, high: 5), 5);
expect(A.bisectLeft(4, high: 5), 5);
expect(A.bisectLeft(5, high: 5), 5);
expect(A.bisectLeft(6, high: 5), 5);
expect(A.bisectLeft(7, high: 5), 5);
expect(A.bisectLeft(8, high: 5), 5);
});

test('bisectLeft for A, hi=6', () {
expect(A.bisectLeft(-2, high: 6), 0);
expect(A.bisectLeft(-1, high: 6), 0);
expect(A.bisectLeft(0, high: 6), 0);
expect(A.bisectLeft(1, high: 6), 1);
expect(A.bisectLeft(2, high: 6), 2);
expect(A.bisectLeft(3, high: 6), 6);
expect(A.bisectLeft(4, high: 6), 6);
expect(A.bisectLeft(5, high: 6), 6);
expect(A.bisectLeft(6, high: 6), 6);
expect(A.bisectLeft(7, high: 6), 6);
expect(A.bisectLeft(8, high: 6), 6);
});

test('bisectLeft for A, hi=7', () {
expect(A.bisectLeft(-2, high: 7), 0);
expect(A.bisectLeft(-1, high: 7), 0);
expect(A.bisectLeft(0, high: 7), 0);
expect(A.bisectLeft(1, high: 7), 1);
expect(A.bisectLeft(2, high: 7), 2);
expect(A.bisectLeft(3, high: 7), 6);
expect(A.bisectLeft(4, high: 7), 7);
expect(A.bisectLeft(5, high: 7), 7);
expect(A.bisectLeft(6, high: 7), 7);
expect(A.bisectLeft(7, high: 7), 7);
expect(A.bisectLeft(8, high: 7), 7);
});

test('bisectLeft for A, hi=8', () {
expect(A.bisectLeft(-2, high: 8), 0);
expect(A.bisectLeft(-1, high: 8), 0);
expect(A.bisectLeft(0, high: 8), 0);
expect(A.bisectLeft(1, high: 8), 1);
expect(A.bisectLeft(2, high: 8), 2);
expect(A.bisectLeft(3, high: 8), 6);
expect(A.bisectLeft(4, high: 8), 8);
expect(A.bisectLeft(5, high: 8), 8);
expect(A.bisectLeft(6, high: 8), 8);
expect(A.bisectLeft(7, high: 8), 8);
expect(A.bisectLeft(8, high: 8), 8);
});

test('bisectLeft for A, hi=9', () {
expect(A.bisectLeft(-2, high: 9), 0);
expect(A.bisectLeft(-1, high: 9), 0);
expect(A.bisectLeft(0, high: 9), 0);
expect(A.bisectLeft(1, high: 9), 1);
expect(A.bisectLeft(2, high: 9), 2);
expect(A.bisectLeft(3, high: 9), 6);
expect(A.bisectLeft(4, high: 9), 8);
expect(A.bisectLeft(5, high: 9), 8);
expect(A.bisectLeft(6, high: 9), 9);
expect(A.bisectLeft(7, high: 9), 9);
expect(A.bisectLeft(8, high: 9), 9);
});

test('bisectLeft for A, hi=10', () {
expect(A.bisectLeft(-2, high: 10), 0);
expect(A.bisectLeft(-1, high: 10), 0);
expect(A.bisectLeft(0, high: 10), 0);
expect(A.bisectLeft(1, high: 10), 1);
expect(A.bisectLeft(2, high: 10), 2);
expect(A.bisectLeft(3, high: 10), 6);
expect(A.bisectLeft(4, high: 10), 8);
expect(A.bisectLeft(5, high: 10), 8);
expect(A.bisectLeft(6, high: 10), 9);
expect(A.bisectLeft(7, high: 10), 10);
expect(A.bisectLeft(8, high: 10), 10);
});

test('bisectLeft for B, hi=0', () {
expect(B.bisectLeft(-2, high: 0), 0);
expect(B.bisectLeft(-1, high: 0), 0);
expect(B.bisectLeft(0, high: 0), 0);
expect(B.bisectLeft(1, high: 0), 0);
expect(B.bisectLeft(2, high: 0), 0);
expect(B.bisectLeft(3, high: 0), 0);
expect(B.bisectLeft(4, high: 0), 0);
expect(B.bisectLeft(5, high: 0), 0);
expect(B.bisectLeft(6, high: 0), 0);
expect(B.bisectLeft(7, high: 0), 0);
expect(B.bisectLeft(8, high: 0), 0);
});

test('bisectLeft for C, hi=0', () {
expect(C.bisectLeft(-2, high: 0), 0);
expect(C.bisectLeft(-1, high: 0), 0);
expect(C.bisectLeft(0, high: 0), 0);
expect(C.bisectLeft(1, high: 0), 0);
expect(C.bisectLeft(2, high: 0), 0);
expect(C.bisectLeft(3, high: 0), 0);
expect(C.bisectLeft(4, high: 0), 0);
expect(C.bisectLeft(5, high: 0), 0);
expect(C.bisectLeft(6, high: 0), 0);
expect(C.bisectLeft(7, high: 0), 0);
expect(C.bisectLeft(8, high: 0), 0);
});

test('bisectLeft for C, hi=1', () {
expect(C.bisectLeft(-2, high: 1), 0);
expect(C.bisectLeft(-1, high: 1), 0);
expect(C.bisectLeft(0, high: 1), 0);
expect(C.bisectLeft(1, high: 1), 0);
expect(C.bisectLeft(2, high: 1), 0);
expect(C.bisectLeft(3, high: 1), 0);
expect(C.bisectLeft(4, high: 1), 1);
expect(C.bisectLeft(5, high: 1), 1);
expect(C.bisectLeft(6, high: 1), 1);
expect(C.bisectLeft(7, high: 1), 1);
expect(C.bisectLeft(8, high: 1), 1);
});

test('bisectLeft for D, hi=0', () {
expect(D.bisectLeft(-2, high: 0), 0);
expect(D.bisectLeft(-1, high: 0), 0);
expect(D.bisectLeft(0, high: 0), 0);
expect(D.bisectLeft(1, high: 0), 0);
expect(D.bisectLeft(2, high: 0), 0);
expect(D.bisectLeft(3, high: 0), 0);
expect(D.bisectLeft(4, high: 0), 0);
expect(D.bisectLeft(5, high: 0), 0);
expect(D.bisectLeft(6, high: 0), 0);
expect(D.bisectLeft(7, high: 0), 0);
expect(D.bisectLeft(8, high: 0), 0);
});

test('bisectLeft for D, hi=1', () {
expect(D.bisectLeft(-2, high: 1), 0);
expect(D.bisectLeft(-1, high: 1), 0);
expect(D.bisectLeft(0, high: 1), 0);
expect(D.bisectLeft(1, high: 1), 0);
expect(D.bisectLeft(2, high: 1), 0);
expect(D.bisectLeft(3, high: 1), 1);
expect(D.bisectLeft(4, high: 1), 1);
expect(D.bisectLeft(5, high: 1), 1);
expect(D.bisectLeft(6, high: 1), 1);
expect(D.bisectLeft(7, high: 1), 1);
expect(D.bisectLeft(8, high: 1), 1);
});

test('bisectLeft for D, hi=2', () {
expect(D.bisectLeft(-2, high: 2), 0);
expect(D.bisectLeft(-1, high: 2), 0);
expect(D.bisectLeft(0, high: 2), 0);
expect(D.bisectLeft(1, high: 2), 0);
expect(D.bisectLeft(2, high: 2), 0);
expect(D.bisectLeft(3, high: 2), 1);
expect(D.bisectLeft(4, high: 2), 2);
expect(D.bisectLeft(5, high: 2), 2);
expect(D.bisectLeft(6, high: 2), 2);
expect(D.bisectLeft(7, high: 2), 2);
expect(D.bisectLeft(8, high: 2), 2);
});

test('bisectLeft for D, hi=3', () {
expect(D.bisectLeft(-2, high: 3), 0);
expect(D.bisectLeft(-1, high: 3), 0);
expect(D.bisectLeft(0, high: 3), 0);
expect(D.bisectLeft(1, high: 3), 0);
expect(D.bisectLeft(2, high: 3), 0);
expect(D.bisectLeft(3, high: 3), 1);
expect(D.bisectLeft(4, high: 3), 2);
expect(D.bisectLeft(5, high: 3), 3);
expect(D.bisectLeft(6, high: 3), 3);
expect(D.bisectLeft(7, high: 3), 3);
expect(D.bisectLeft(8, high: 3), 3);
});

test('bisectRight for A, hi=0, lo=0', () {
expect(A.bisectRight(-2, high: 0, low: 0), 0);
expect(A.bisectRight(-1, high: 0, low: 0), 0);
expect(A.bisectRight(0, high: 0, low: 0), 0);
expect(A.bisectRight(1, high: 0, low: 0), 0);
expect(A.bisectRight(2, high: 0, low: 0), 0);
expect(A.bisectRight(3, high: 0, low: 0), 0);
expect(A.bisectRight(4, high: 0, low: 0), 0);
expect(A.bisectRight(5, high: 0, low: 0), 0);
expect(A.bisectRight(6, high: 0, low: 0), 0);
expect(A.bisectRight(7, high: 0, low: 0), 0);
expect(A.bisectRight(8, high: 0, low: 0), 0);
});

test('bisectRight for A, hi=1, lo=0', () {
expect(A.bisectRight(-2, high: 1, low: 0), 0);
expect(A.bisectRight(-1, high: 1, low: 0), 0);
expect(A.bisectRight(0, high: 1, low: 0), 1);
expect(A.bisectRight(1, high: 1, low: 0), 1);
expect(A.bisectRight(2, high: 1, low: 0), 1);
expect(A.bisectRight(3, high: 1, low: 0), 1);
expect(A.bisectRight(4, high: 1, low: 0), 1);
expect(A.bisectRight(5, high: 1, low: 0), 1);
expect(A.bisectRight(6, high: 1, low: 0), 1);
expect(A.bisectRight(7, high: 1, low: 0), 1);
expect(A.bisectRight(8, high: 1, low: 0), 1);
});

test('bisectRight for A, hi=2, lo=0', () {
expect(A.bisectRight(-2, high: 2, low: 0), 0);
expect(A.bisectRight(-1, high: 2, low: 0), 0);
expect(A.bisectRight(0, high: 2, low: 0), 1);
expect(A.bisectRight(1, high: 2, low: 0), 2);
expect(A.bisectRight(2, high: 2, low: 0), 2);
expect(A.bisectRight(3, high: 2, low: 0), 2);
expect(A.bisectRight(4, high: 2, low: 0), 2);
expect(A.bisectRight(5, high: 2, low: 0), 2);
expect(A.bisectRight(6, high: 2, low: 0), 2);
expect(A.bisectRight(7, high: 2, low: 0), 2);
expect(A.bisectRight(8, high: 2, low: 0), 2);
});

test('bisectRight for A, hi=3, lo=0', () {
expect(A.bisectRight(-2, high: 3, low: 0), 0);
expect(A.bisectRight(-1, high: 3, low: 0), 0);
expect(A.bisectRight(0, high: 3, low: 0), 1);
expect(A.bisectRight(1, high: 3, low: 0), 2);
expect(A.bisectRight(2, high: 3, low: 0), 3);
expect(A.bisectRight(3, high: 3, low: 0), 3);
expect(A.bisectRight(4, high: 3, low: 0), 3);
expect(A.bisectRight(5, high: 3, low: 0), 3);
expect(A.bisectRight(6, high: 3, low: 0), 3);
expect(A.bisectRight(7, high: 3, low: 0), 3);
expect(A.bisectRight(8, high: 3, low: 0), 3);
});

test('bisectRight for A, hi=4, lo=0', () {
expect(A.bisectRight(-2, high: 4, low: 0), 0);
expect(A.bisectRight(-1, high: 4, low: 0), 0);
expect(A.bisectRight(0, high: 4, low: 0), 1);
expect(A.bisectRight(1, high: 4, low: 0), 2);
expect(A.bisectRight(2, high: 4, low: 0), 4);
expect(A.bisectRight(3, high: 4, low: 0), 4);
expect(A.bisectRight(4, high: 4, low: 0), 4);
expect(A.bisectRight(5, high: 4, low: 0), 4);
expect(A.bisectRight(6, high: 4, low: 0), 4);
expect(A.bisectRight(7, high: 4, low: 0), 4);
expect(A.bisectRight(8, high: 4, low: 0), 4);
});

test('bisectRight for A, hi=5, lo=0', () {
expect(A.bisectRight(-2, high: 5, low: 0), 0);
expect(A.bisectRight(-1, high: 5, low: 0), 0);
expect(A.bisectRight(0, high: 5, low: 0), 1);
expect(A.bisectRight(1, high: 5, low: 0), 2);
expect(A.bisectRight(2, high: 5, low: 0), 5);
expect(A.bisectRight(3, high: 5, low: 0), 5);
expect(A.bisectRight(4, high: 5, low: 0), 5);
expect(A.bisectRight(5, high: 5, low: 0), 5);
expect(A.bisectRight(6, high: 5, low: 0), 5);
expect(A.bisectRight(7, high: 5, low: 0), 5);
expect(A.bisectRight(8, high: 5, low: 0), 5);
});

test('bisectRight for A, hi=6, lo=0', () {
expect(A.bisectRight(-2, high: 6, low: 0), 0);
expect(A.bisectRight(-1, high: 6, low: 0), 0);
expect(A.bisectRight(0, high: 6, low: 0), 1);
expect(A.bisectRight(1, high: 6, low: 0), 2);
expect(A.bisectRight(2, high: 6, low: 0), 6);
expect(A.bisectRight(3, high: 6, low: 0), 6);
expect(A.bisectRight(4, high: 6, low: 0), 6);
expect(A.bisectRight(5, high: 6, low: 0), 6);
expect(A.bisectRight(6, high: 6, low: 0), 6);
expect(A.bisectRight(7, high: 6, low: 0), 6);
expect(A.bisectRight(8, high: 6, low: 0), 6);
});

test('bisectRight for A, hi=7, lo=0', () {
expect(A.bisectRight(-2, high: 7, low: 0), 0);
expect(A.bisectRight(-1, high: 7, low: 0), 0);
expect(A.bisectRight(0, high: 7, low: 0), 1);
expect(A.bisectRight(1, high: 7, low: 0), 2);
expect(A.bisectRight(2, high: 7, low: 0), 6);
expect(A.bisectRight(3, high: 7, low: 0), 7);
expect(A.bisectRight(4, high: 7, low: 0), 7);
expect(A.bisectRight(5, high: 7, low: 0), 7);
expect(A.bisectRight(6, high: 7, low: 0), 7);
expect(A.bisectRight(7, high: 7, low: 0), 7);
expect(A.bisectRight(8, high: 7, low: 0), 7);
});

test('bisectRight for A, hi=8, lo=0', () {
expect(A.bisectRight(-2, high: 8, low: 0), 0);
expect(A.bisectRight(-1, high: 8, low: 0), 0);
expect(A.bisectRight(0, high: 8, low: 0), 1);
expect(A.bisectRight(1, high: 8, low: 0), 2);
expect(A.bisectRight(2, high: 8, low: 0), 6);
expect(A.bisectRight(3, high: 8, low: 0), 8);
expect(A.bisectRight(4, high: 8, low: 0), 8);
expect(A.bisectRight(5, high: 8, low: 0), 8);
expect(A.bisectRight(6, high: 8, low: 0), 8);
expect(A.bisectRight(7, high: 8, low: 0), 8);
expect(A.bisectRight(8, high: 8, low: 0), 8);
});

test('bisectRight for A, hi=9, lo=0', () {
expect(A.bisectRight(-2, high: 9, low: 0), 0);
expect(A.bisectRight(-1, high: 9, low: 0), 0);
expect(A.bisectRight(0, high: 9, low: 0), 1);
expect(A.bisectRight(1, high: 9, low: 0), 2);
expect(A.bisectRight(2, high: 9, low: 0), 6);
expect(A.bisectRight(3, high: 9, low: 0), 8);
expect(A.bisectRight(4, high: 9, low: 0), 8);
expect(A.bisectRight(5, high: 9, low: 0), 9);
expect(A.bisectRight(6, high: 9, low: 0), 9);
expect(A.bisectRight(7, high: 9, low: 0), 9);
expect(A.bisectRight(8, high: 9, low: 0), 9);
});

test('bisectRight for A, hi=10, lo=0', () {
expect(A.bisectRight(-2, high: 10, low: 0), 0);
expect(A.bisectRight(-1, high: 10, low: 0), 0);
expect(A.bisectRight(0, high: 10, low: 0), 1);
expect(A.bisectRight(1, high: 10, low: 0), 2);
expect(A.bisectRight(2, high: 10, low: 0), 6);
expect(A.bisectRight(3, high: 10, low: 0), 8);
expect(A.bisectRight(4, high: 10, low: 0), 8);
expect(A.bisectRight(5, high: 10, low: 0), 9);
expect(A.bisectRight(6, high: 10, low: 0), 10);
expect(A.bisectRight(7, high: 10, low: 0), 10);
expect(A.bisectRight(8, high: 10, low: 0), 10);
});

test('bisectRight for A, hi=0, lo=1', () {
expect(A.bisectRight(-2, high: 0, low: 1), 1);
expect(A.bisectRight(-1, high: 0, low: 1), 1);
expect(A.bisectRight(0, high: 0, low: 1), 1);
expect(A.bisectRight(1, high: 0, low: 1), 1);
expect(A.bisectRight(2, high: 0, low: 1), 1);
expect(A.bisectRight(3, high: 0, low: 1), 1);
expect(A.bisectRight(4, high: 0, low: 1), 1);
expect(A.bisectRight(5, high: 0, low: 1), 1);
expect(A.bisectRight(6, high: 0, low: 1), 1);
expect(A.bisectRight(7, high: 0, low: 1), 1);
expect(A.bisectRight(8, high: 0, low: 1), 1);
});

test('bisectRight for A, hi=1, lo=1', () {
expect(A.bisectRight(-2, high: 1, low: 1), 1);
expect(A.bisectRight(-1, high: 1, low: 1), 1);
expect(A.bisectRight(0, high: 1, low: 1), 1);
expect(A.bisectRight(1, high: 1, low: 1), 1);
expect(A.bisectRight(2, high: 1, low: 1), 1);
expect(A.bisectRight(3, high: 1, low: 1), 1);
expect(A.bisectRight(4, high: 1, low: 1), 1);
expect(A.bisectRight(5, high: 1, low: 1), 1);
expect(A.bisectRight(6, high: 1, low: 1), 1);
expect(A.bisectRight(7, high: 1, low: 1), 1);
expect(A.bisectRight(8, high: 1, low: 1), 1);
});

test('bisectRight for A, hi=2, lo=1', () {
expect(A.bisectRight(-2, high: 2, low: 1), 1);
expect(A.bisectRight(-1, high: 2, low: 1), 1);
expect(A.bisectRight(0, high: 2, low: 1), 1);
expect(A.bisectRight(1, high: 2, low: 1), 2);
expect(A.bisectRight(2, high: 2, low: 1), 2);
expect(A.bisectRight(3, high: 2, low: 1), 2);
expect(A.bisectRight(4, high: 2, low: 1), 2);
expect(A.bisectRight(5, high: 2, low: 1), 2);
expect(A.bisectRight(6, high: 2, low: 1), 2);
expect(A.bisectRight(7, high: 2, low: 1), 2);
expect(A.bisectRight(8, high: 2, low: 1), 2);
});

test('bisectRight for A, hi=3, lo=1', () {
expect(A.bisectRight(-2, high: 3, low: 1), 1);
expect(A.bisectRight(-1, high: 3, low: 1), 1);
expect(A.bisectRight(0, high: 3, low: 1), 1);
expect(A.bisectRight(1, high: 3, low: 1), 2);
expect(A.bisectRight(2, high: 3, low: 1), 3);
expect(A.bisectRight(3, high: 3, low: 1), 3);
expect(A.bisectRight(4, high: 3, low: 1), 3);
expect(A.bisectRight(5, high: 3, low: 1), 3);
expect(A.bisectRight(6, high: 3, low: 1), 3);
expect(A.bisectRight(7, high: 3, low: 1), 3);
expect(A.bisectRight(8, high: 3, low: 1), 3);
});

test('bisectRight for A, hi=4, lo=1', () {
expect(A.bisectRight(-2, high: 4, low: 1), 1);
expect(A.bisectRight(-1, high: 4, low: 1), 1);
expect(A.bisectRight(0, high: 4, low: 1), 1);
expect(A.bisectRight(1, high: 4, low: 1), 2);
expect(A.bisectRight(2, high: 4, low: 1), 4);
expect(A.bisectRight(3, high: 4, low: 1), 4);
expect(A.bisectRight(4, high: 4, low: 1), 4);
expect(A.bisectRight(5, high: 4, low: 1), 4);
expect(A.bisectRight(6, high: 4, low: 1), 4);
expect(A.bisectRight(7, high: 4, low: 1), 4);
expect(A.bisectRight(8, high: 4, low: 1), 4);
});

test('bisectRight for A, hi=5, lo=1', () {
expect(A.bisectRight(-2, high: 5, low: 1), 1);
expect(A.bisectRight(-1, high: 5, low: 1), 1);
expect(A.bisectRight(0, high: 5, low: 1), 1);
expect(A.bisectRight(1, high: 5, low: 1), 2);
expect(A.bisectRight(2, high: 5, low: 1), 5);
expect(A.bisectRight(3, high: 5, low: 1), 5);
expect(A.bisectRight(4, high: 5, low: 1), 5);
expect(A.bisectRight(5, high: 5, low: 1), 5);
expect(A.bisectRight(6, high: 5, low: 1), 5);
expect(A.bisectRight(7, high: 5, low: 1), 5);
expect(A.bisectRight(8, high: 5, low: 1), 5);
});

test('bisectRight for A, hi=6, lo=1', () {
expect(A.bisectRight(-2, high: 6, low: 1), 1);
expect(A.bisectRight(-1, high: 6, low: 1), 1);
expect(A.bisectRight(0, high: 6, low: 1), 1);
expect(A.bisectRight(1, high: 6, low: 1), 2);
expect(A.bisectRight(2, high: 6, low: 1), 6);
expect(A.bisectRight(3, high: 6, low: 1), 6);
expect(A.bisectRight(4, high: 6, low: 1), 6);
expect(A.bisectRight(5, high: 6, low: 1), 6);
expect(A.bisectRight(6, high: 6, low: 1), 6);
expect(A.bisectRight(7, high: 6, low: 1), 6);
expect(A.bisectRight(8, high: 6, low: 1), 6);
});

test('bisectRight for A, hi=7, lo=1', () {
expect(A.bisectRight(-2, high: 7, low: 1), 1);
expect(A.bisectRight(-1, high: 7, low: 1), 1);
expect(A.bisectRight(0, high: 7, low: 1), 1);
expect(A.bisectRight(1, high: 7, low: 1), 2);
expect(A.bisectRight(2, high: 7, low: 1), 6);
expect(A.bisectRight(3, high: 7, low: 1), 7);
expect(A.bisectRight(4, high: 7, low: 1), 7);
expect(A.bisectRight(5, high: 7, low: 1), 7);
expect(A.bisectRight(6, high: 7, low: 1), 7);
expect(A.bisectRight(7, high: 7, low: 1), 7);
expect(A.bisectRight(8, high: 7, low: 1), 7);
});

test('bisectRight for A, hi=8, lo=1', () {
expect(A.bisectRight(-2, high: 8, low: 1), 1);
expect(A.bisectRight(-1, high: 8, low: 1), 1);
expect(A.bisectRight(0, high: 8, low: 1), 1);
expect(A.bisectRight(1, high: 8, low: 1), 2);
expect(A.bisectRight(2, high: 8, low: 1), 6);
expect(A.bisectRight(3, high: 8, low: 1), 8);
expect(A.bisectRight(4, high: 8, low: 1), 8);
expect(A.bisectRight(5, high: 8, low: 1), 8);
expect(A.bisectRight(6, high: 8, low: 1), 8);
expect(A.bisectRight(7, high: 8, low: 1), 8);
expect(A.bisectRight(8, high: 8, low: 1), 8);
});

test('bisectRight for A, hi=9, lo=1', () {
expect(A.bisectRight(-2, high: 9, low: 1), 1);
expect(A.bisectRight(-1, high: 9, low: 1), 1);
expect(A.bisectRight(0, high: 9, low: 1), 1);
expect(A.bisectRight(1, high: 9, low: 1), 2);
expect(A.bisectRight(2, high: 9, low: 1), 6);
expect(A.bisectRight(3, high: 9, low: 1), 8);
expect(A.bisectRight(4, high: 9, low: 1), 8);
expect(A.bisectRight(5, high: 9, low: 1), 9);
expect(A.bisectRight(6, high: 9, low: 1), 9);
expect(A.bisectRight(7, high: 9, low: 1), 9);
expect(A.bisectRight(8, high: 9, low: 1), 9);
});

test('bisectRight for A, hi=10, lo=1', () {
expect(A.bisectRight(-2, high: 10, low: 1), 1);
expect(A.bisectRight(-1, high: 10, low: 1), 1);
expect(A.bisectRight(0, high: 10, low: 1), 1);
expect(A.bisectRight(1, high: 10, low: 1), 2);
expect(A.bisectRight(2, high: 10, low: 1), 6);
expect(A.bisectRight(3, high: 10, low: 1), 8);
expect(A.bisectRight(4, high: 10, low: 1), 8);
expect(A.bisectRight(5, high: 10, low: 1), 9);
expect(A.bisectRight(6, high: 10, low: 1), 10);
expect(A.bisectRight(7, high: 10, low: 1), 10);
expect(A.bisectRight(8, high: 10, low: 1), 10);
});

test('bisectRight for A, hi=0, lo=2', () {
expect(A.bisectRight(-2, high: 0, low: 2), 2);
expect(A.bisectRight(-1, high: 0, low: 2), 2);
expect(A.bisectRight(0, high: 0, low: 2), 2);
expect(A.bisectRight(1, high: 0, low: 2), 2);
expect(A.bisectRight(2, high: 0, low: 2), 2);
expect(A.bisectRight(3, high: 0, low: 2), 2);
expect(A.bisectRight(4, high: 0, low: 2), 2);
expect(A.bisectRight(5, high: 0, low: 2), 2);
expect(A.bisectRight(6, high: 0, low: 2), 2);
expect(A.bisectRight(7, high: 0, low: 2), 2);
expect(A.bisectRight(8, high: 0, low: 2), 2);
});

test('bisectRight for A, hi=1, lo=2', () {
expect(A.bisectRight(-2, high: 1, low: 2), 2);
expect(A.bisectRight(-1, high: 1, low: 2), 2);
expect(A.bisectRight(0, high: 1, low: 2), 2);
expect(A.bisectRight(1, high: 1, low: 2), 2);
expect(A.bisectRight(2, high: 1, low: 2), 2);
expect(A.bisectRight(3, high: 1, low: 2), 2);
expect(A.bisectRight(4, high: 1, low: 2), 2);
expect(A.bisectRight(5, high: 1, low: 2), 2);
expect(A.bisectRight(6, high: 1, low: 2), 2);
expect(A.bisectRight(7, high: 1, low: 2), 2);
expect(A.bisectRight(8, high: 1, low: 2), 2);
});

test('bisectRight for A, hi=2, lo=2', () {
expect(A.bisectRight(-2, high: 2, low: 2), 2);
expect(A.bisectRight(-1, high: 2, low: 2), 2);
expect(A.bisectRight(0, high: 2, low: 2), 2);
expect(A.bisectRight(1, high: 2, low: 2), 2);
expect(A.bisectRight(2, high: 2, low: 2), 2);
expect(A.bisectRight(3, high: 2, low: 2), 2);
expect(A.bisectRight(4, high: 2, low: 2), 2);
expect(A.bisectRight(5, high: 2, low: 2), 2);
expect(A.bisectRight(6, high: 2, low: 2), 2);
expect(A.bisectRight(7, high: 2, low: 2), 2);
expect(A.bisectRight(8, high: 2, low: 2), 2);
});

test('bisectRight for A, hi=3, lo=2', () {
expect(A.bisectRight(-2, high: 3, low: 2), 2);
expect(A.bisectRight(-1, high: 3, low: 2), 2);
expect(A.bisectRight(0, high: 3, low: 2), 2);
expect(A.bisectRight(1, high: 3, low: 2), 2);
expect(A.bisectRight(2, high: 3, low: 2), 3);
expect(A.bisectRight(3, high: 3, low: 2), 3);
expect(A.bisectRight(4, high: 3, low: 2), 3);
expect(A.bisectRight(5, high: 3, low: 2), 3);
expect(A.bisectRight(6, high: 3, low: 2), 3);
expect(A.bisectRight(7, high: 3, low: 2), 3);
expect(A.bisectRight(8, high: 3, low: 2), 3);
});

test('bisectRight for A, hi=4, lo=2', () {
expect(A.bisectRight(-2, high: 4, low: 2), 2);
expect(A.bisectRight(-1, high: 4, low: 2), 2);
expect(A.bisectRight(0, high: 4, low: 2), 2);
expect(A.bisectRight(1, high: 4, low: 2), 2);
expect(A.bisectRight(2, high: 4, low: 2), 4);
expect(A.bisectRight(3, high: 4, low: 2), 4);
expect(A.bisectRight(4, high: 4, low: 2), 4);
expect(A.bisectRight(5, high: 4, low: 2), 4);
expect(A.bisectRight(6, high: 4, low: 2), 4);
expect(A.bisectRight(7, high: 4, low: 2), 4);
expect(A.bisectRight(8, high: 4, low: 2), 4);
});

test('bisectRight for A, hi=5, lo=2', () {
expect(A.bisectRight(-2, high: 5, low: 2), 2);
expect(A.bisectRight(-1, high: 5, low: 2), 2);
expect(A.bisectRight(0, high: 5, low: 2), 2);
expect(A.bisectRight(1, high: 5, low: 2), 2);
expect(A.bisectRight(2, high: 5, low: 2), 5);
expect(A.bisectRight(3, high: 5, low: 2), 5);
expect(A.bisectRight(4, high: 5, low: 2), 5);
expect(A.bisectRight(5, high: 5, low: 2), 5);
expect(A.bisectRight(6, high: 5, low: 2), 5);
expect(A.bisectRight(7, high: 5, low: 2), 5);
expect(A.bisectRight(8, high: 5, low: 2), 5);
});

test('bisectRight for A, hi=6, lo=2', () {
expect(A.bisectRight(-2, high: 6, low: 2), 2);
expect(A.bisectRight(-1, high: 6, low: 2), 2);
expect(A.bisectRight(0, high: 6, low: 2), 2);
expect(A.bisectRight(1, high: 6, low: 2), 2);
expect(A.bisectRight(2, high: 6, low: 2), 6);
expect(A.bisectRight(3, high: 6, low: 2), 6);
expect(A.bisectRight(4, high: 6, low: 2), 6);
expect(A.bisectRight(5, high: 6, low: 2), 6);
expect(A.bisectRight(6, high: 6, low: 2), 6);
expect(A.bisectRight(7, high: 6, low: 2), 6);
expect(A.bisectRight(8, high: 6, low: 2), 6);
});

test('bisectRight for A, hi=7, lo=2', () {
expect(A.bisectRight(-2, high: 7, low: 2), 2);
expect(A.bisectRight(-1, high: 7, low: 2), 2);
expect(A.bisectRight(0, high: 7, low: 2), 2);
expect(A.bisectRight(1, high: 7, low: 2), 2);
expect(A.bisectRight(2, high: 7, low: 2), 6);
expect(A.bisectRight(3, high: 7, low: 2), 7);
expect(A.bisectRight(4, high: 7, low: 2), 7);
expect(A.bisectRight(5, high: 7, low: 2), 7);
expect(A.bisectRight(6, high: 7, low: 2), 7);
expect(A.bisectRight(7, high: 7, low: 2), 7);
expect(A.bisectRight(8, high: 7, low: 2), 7);
});

test('bisectRight for A, hi=8, lo=2', () {
expect(A.bisectRight(-2, high: 8, low: 2), 2);
expect(A.bisectRight(-1, high: 8, low: 2), 2);
expect(A.bisectRight(0, high: 8, low: 2), 2);
expect(A.bisectRight(1, high: 8, low: 2), 2);
expect(A.bisectRight(2, high: 8, low: 2), 6);
expect(A.bisectRight(3, high: 8, low: 2), 8);
expect(A.bisectRight(4, high: 8, low: 2), 8);
expect(A.bisectRight(5, high: 8, low: 2), 8);
expect(A.bisectRight(6, high: 8, low: 2), 8);
expect(A.bisectRight(7, high: 8, low: 2), 8);
expect(A.bisectRight(8, high: 8, low: 2), 8);
});

test('bisectRight for A, hi=9, lo=2', () {
expect(A.bisectRight(-2, high: 9, low: 2), 2);
expect(A.bisectRight(-1, high: 9, low: 2), 2);
expect(A.bisectRight(0, high: 9, low: 2), 2);
expect(A.bisectRight(1, high: 9, low: 2), 2);
expect(A.bisectRight(2, high: 9, low: 2), 6);
expect(A.bisectRight(3, high: 9, low: 2), 8);
expect(A.bisectRight(4, high: 9, low: 2), 8);
expect(A.bisectRight(5, high: 9, low: 2), 9);
expect(A.bisectRight(6, high: 9, low: 2), 9);
expect(A.bisectRight(7, high: 9, low: 2), 9);
expect(A.bisectRight(8, high: 9, low: 2), 9);
});

test('bisectRight for A, hi=10, lo=2', () {
expect(A.bisectRight(-2, high: 10, low: 2), 2);
expect(A.bisectRight(-1, high: 10, low: 2), 2);
expect(A.bisectRight(0, high: 10, low: 2), 2);
expect(A.bisectRight(1, high: 10, low: 2), 2);
expect(A.bisectRight(2, high: 10, low: 2), 6);
expect(A.bisectRight(3, high: 10, low: 2), 8);
expect(A.bisectRight(4, high: 10, low: 2), 8);
expect(A.bisectRight(5, high: 10, low: 2), 9);
expect(A.bisectRight(6, high: 10, low: 2), 10);
expect(A.bisectRight(7, high: 10, low: 2), 10);
expect(A.bisectRight(8, high: 10, low: 2), 10);
});

test('bisectRight for A, hi=0, lo=3', () {
expect(A.bisectRight(-2, high: 0, low: 3), 3);
expect(A.bisectRight(-1, high: 0, low: 3), 3);
expect(A.bisectRight(0, high: 0, low: 3), 3);
expect(A.bisectRight(1, high: 0, low: 3), 3);
expect(A.bisectRight(2, high: 0, low: 3), 3);
expect(A.bisectRight(3, high: 0, low: 3), 3);
expect(A.bisectRight(4, high: 0, low: 3), 3);
expect(A.bisectRight(5, high: 0, low: 3), 3);
expect(A.bisectRight(6, high: 0, low: 3), 3);
expect(A.bisectRight(7, high: 0, low: 3), 3);
expect(A.bisectRight(8, high: 0, low: 3), 3);
});

test('bisectRight for A, hi=1, lo=3', () {
expect(A.bisectRight(-2, high: 1, low: 3), 3);
expect(A.bisectRight(-1, high: 1, low: 3), 3);
expect(A.bisectRight(0, high: 1, low: 3), 3);
expect(A.bisectRight(1, high: 1, low: 3), 3);
expect(A.bisectRight(2, high: 1, low: 3), 3);
expect(A.bisectRight(3, high: 1, low: 3), 3);
expect(A.bisectRight(4, high: 1, low: 3), 3);
expect(A.bisectRight(5, high: 1, low: 3), 3);
expect(A.bisectRight(6, high: 1, low: 3), 3);
expect(A.bisectRight(7, high: 1, low: 3), 3);
expect(A.bisectRight(8, high: 1, low: 3), 3);
});

test('bisectRight for A, hi=2, lo=3', () {
expect(A.bisectRight(-2, high: 2, low: 3), 3);
expect(A.bisectRight(-1, high: 2, low: 3), 3);
expect(A.bisectRight(0, high: 2, low: 3), 3);
expect(A.bisectRight(1, high: 2, low: 3), 3);
expect(A.bisectRight(2, high: 2, low: 3), 3);
expect(A.bisectRight(3, high: 2, low: 3), 3);
expect(A.bisectRight(4, high: 2, low: 3), 3);
expect(A.bisectRight(5, high: 2, low: 3), 3);
expect(A.bisectRight(6, high: 2, low: 3), 3);
expect(A.bisectRight(7, high: 2, low: 3), 3);
expect(A.bisectRight(8, high: 2, low: 3), 3);
});

test('bisectRight for A, hi=3, lo=3', () {
expect(A.bisectRight(-2, high: 3, low: 3), 3);
expect(A.bisectRight(-1, high: 3, low: 3), 3);
expect(A.bisectRight(0, high: 3, low: 3), 3);
expect(A.bisectRight(1, high: 3, low: 3), 3);
expect(A.bisectRight(2, high: 3, low: 3), 3);
expect(A.bisectRight(3, high: 3, low: 3), 3);
expect(A.bisectRight(4, high: 3, low: 3), 3);
expect(A.bisectRight(5, high: 3, low: 3), 3);
expect(A.bisectRight(6, high: 3, low: 3), 3);
expect(A.bisectRight(7, high: 3, low: 3), 3);
expect(A.bisectRight(8, high: 3, low: 3), 3);
});

test('bisectRight for A, hi=4, lo=3', () {
expect(A.bisectRight(-2, high: 4, low: 3), 3);
expect(A.bisectRight(-1, high: 4, low: 3), 3);
expect(A.bisectRight(0, high: 4, low: 3), 3);
expect(A.bisectRight(1, high: 4, low: 3), 3);
expect(A.bisectRight(2, high: 4, low: 3), 4);
expect(A.bisectRight(3, high: 4, low: 3), 4);
expect(A.bisectRight(4, high: 4, low: 3), 4);
expect(A.bisectRight(5, high: 4, low: 3), 4);
expect(A.bisectRight(6, high: 4, low: 3), 4);
expect(A.bisectRight(7, high: 4, low: 3), 4);
expect(A.bisectRight(8, high: 4, low: 3), 4);
});

test('bisectRight for A, hi=5, lo=3', () {
expect(A.bisectRight(-2, high: 5, low: 3), 3);
expect(A.bisectRight(-1, high: 5, low: 3), 3);
expect(A.bisectRight(0, high: 5, low: 3), 3);
expect(A.bisectRight(1, high: 5, low: 3), 3);
expect(A.bisectRight(2, high: 5, low: 3), 5);
expect(A.bisectRight(3, high: 5, low: 3), 5);
expect(A.bisectRight(4, high: 5, low: 3), 5);
expect(A.bisectRight(5, high: 5, low: 3), 5);
expect(A.bisectRight(6, high: 5, low: 3), 5);
expect(A.bisectRight(7, high: 5, low: 3), 5);
expect(A.bisectRight(8, high: 5, low: 3), 5);
});

test('bisectRight for A, hi=6, lo=3', () {
expect(A.bisectRight(-2, high: 6, low: 3), 3);
expect(A.bisectRight(-1, high: 6, low: 3), 3);
expect(A.bisectRight(0, high: 6, low: 3), 3);
expect(A.bisectRight(1, high: 6, low: 3), 3);
expect(A.bisectRight(2, high: 6, low: 3), 6);
expect(A.bisectRight(3, high: 6, low: 3), 6);
expect(A.bisectRight(4, high: 6, low: 3), 6);
expect(A.bisectRight(5, high: 6, low: 3), 6);
expect(A.bisectRight(6, high: 6, low: 3), 6);
expect(A.bisectRight(7, high: 6, low: 3), 6);
expect(A.bisectRight(8, high: 6, low: 3), 6);
});

test('bisectRight for A, hi=7, lo=3', () {
expect(A.bisectRight(-2, high: 7, low: 3), 3);
expect(A.bisectRight(-1, high: 7, low: 3), 3);
expect(A.bisectRight(0, high: 7, low: 3), 3);
expect(A.bisectRight(1, high: 7, low: 3), 3);
expect(A.bisectRight(2, high: 7, low: 3), 6);
expect(A.bisectRight(3, high: 7, low: 3), 7);
expect(A.bisectRight(4, high: 7, low: 3), 7);
expect(A.bisectRight(5, high: 7, low: 3), 7);
expect(A.bisectRight(6, high: 7, low: 3), 7);
expect(A.bisectRight(7, high: 7, low: 3), 7);
expect(A.bisectRight(8, high: 7, low: 3), 7);
});

test('bisectRight for A, hi=8, lo=3', () {
expect(A.bisectRight(-2, high: 8, low: 3), 3);
expect(A.bisectRight(-1, high: 8, low: 3), 3);
expect(A.bisectRight(0, high: 8, low: 3), 3);
expect(A.bisectRight(1, high: 8, low: 3), 3);
expect(A.bisectRight(2, high: 8, low: 3), 6);
expect(A.bisectRight(3, high: 8, low: 3), 8);
expect(A.bisectRight(4, high: 8, low: 3), 8);
expect(A.bisectRight(5, high: 8, low: 3), 8);
expect(A.bisectRight(6, high: 8, low: 3), 8);
expect(A.bisectRight(7, high: 8, low: 3), 8);
expect(A.bisectRight(8, high: 8, low: 3), 8);
});

test('bisectRight for A, hi=9, lo=3', () {
expect(A.bisectRight(-2, high: 9, low: 3), 3);
expect(A.bisectRight(-1, high: 9, low: 3), 3);
expect(A.bisectRight(0, high: 9, low: 3), 3);
expect(A.bisectRight(1, high: 9, low: 3), 3);
expect(A.bisectRight(2, high: 9, low: 3), 6);
expect(A.bisectRight(3, high: 9, low: 3), 8);
expect(A.bisectRight(4, high: 9, low: 3), 8);
expect(A.bisectRight(5, high: 9, low: 3), 9);
expect(A.bisectRight(6, high: 9, low: 3), 9);
expect(A.bisectRight(7, high: 9, low: 3), 9);
expect(A.bisectRight(8, high: 9, low: 3), 9);
});

test('bisectRight for A, hi=10, lo=3', () {
expect(A.bisectRight(-2, high: 10, low: 3), 3);
expect(A.bisectRight(-1, high: 10, low: 3), 3);
expect(A.bisectRight(0, high: 10, low: 3), 3);
expect(A.bisectRight(1, high: 10, low: 3), 3);
expect(A.bisectRight(2, high: 10, low: 3), 6);
expect(A.bisectRight(3, high: 10, low: 3), 8);
expect(A.bisectRight(4, high: 10, low: 3), 8);
expect(A.bisectRight(5, high: 10, low: 3), 9);
expect(A.bisectRight(6, high: 10, low: 3), 10);
expect(A.bisectRight(7, high: 10, low: 3), 10);
expect(A.bisectRight(8, high: 10, low: 3), 10);
});

test('bisectRight for A, hi=0, lo=4', () {
expect(A.bisectRight(-2, high: 0, low: 4), 4);
expect(A.bisectRight(-1, high: 0, low: 4), 4);
expect(A.bisectRight(0, high: 0, low: 4), 4);
expect(A.bisectRight(1, high: 0, low: 4), 4);
expect(A.bisectRight(2, high: 0, low: 4), 4);
expect(A.bisectRight(3, high: 0, low: 4), 4);
expect(A.bisectRight(4, high: 0, low: 4), 4);
expect(A.bisectRight(5, high: 0, low: 4), 4);
expect(A.bisectRight(6, high: 0, low: 4), 4);
expect(A.bisectRight(7, high: 0, low: 4), 4);
expect(A.bisectRight(8, high: 0, low: 4), 4);
});

test('bisectRight for A, hi=1, lo=4', () {
expect(A.bisectRight(-2, high: 1, low: 4), 4);
expect(A.bisectRight(-1, high: 1, low: 4), 4);
expect(A.bisectRight(0, high: 1, low: 4), 4);
expect(A.bisectRight(1, high: 1, low: 4), 4);
expect(A.bisectRight(2, high: 1, low: 4), 4);
expect(A.bisectRight(3, high: 1, low: 4), 4);
expect(A.bisectRight(4, high: 1, low: 4), 4);
expect(A.bisectRight(5, high: 1, low: 4), 4);
expect(A.bisectRight(6, high: 1, low: 4), 4);
expect(A.bisectRight(7, high: 1, low: 4), 4);
expect(A.bisectRight(8, high: 1, low: 4), 4);
});

test('bisectRight for A, hi=2, lo=4', () {
expect(A.bisectRight(-2, high: 2, low: 4), 4);
expect(A.bisectRight(-1, high: 2, low: 4), 4);
expect(A.bisectRight(0, high: 2, low: 4), 4);
expect(A.bisectRight(1, high: 2, low: 4), 4);
expect(A.bisectRight(2, high: 2, low: 4), 4);
expect(A.bisectRight(3, high: 2, low: 4), 4);
expect(A.bisectRight(4, high: 2, low: 4), 4);
expect(A.bisectRight(5, high: 2, low: 4), 4);
expect(A.bisectRight(6, high: 2, low: 4), 4);
expect(A.bisectRight(7, high: 2, low: 4), 4);
expect(A.bisectRight(8, high: 2, low: 4), 4);
});

test('bisectRight for A, hi=3, lo=4', () {
expect(A.bisectRight(-2, high: 3, low: 4), 4);
expect(A.bisectRight(-1, high: 3, low: 4), 4);
expect(A.bisectRight(0, high: 3, low: 4), 4);
expect(A.bisectRight(1, high: 3, low: 4), 4);
expect(A.bisectRight(2, high: 3, low: 4), 4);
expect(A.bisectRight(3, high: 3, low: 4), 4);
expect(A.bisectRight(4, high: 3, low: 4), 4);
expect(A.bisectRight(5, high: 3, low: 4), 4);
expect(A.bisectRight(6, high: 3, low: 4), 4);
expect(A.bisectRight(7, high: 3, low: 4), 4);
expect(A.bisectRight(8, high: 3, low: 4), 4);
});

test('bisectRight for A, hi=4, lo=4', () {
expect(A.bisectRight(-2, high: 4, low: 4), 4);
expect(A.bisectRight(-1, high: 4, low: 4), 4);
expect(A.bisectRight(0, high: 4, low: 4), 4);
expect(A.bisectRight(1, high: 4, low: 4), 4);
expect(A.bisectRight(2, high: 4, low: 4), 4);
expect(A.bisectRight(3, high: 4, low: 4), 4);
expect(A.bisectRight(4, high: 4, low: 4), 4);
expect(A.bisectRight(5, high: 4, low: 4), 4);
expect(A.bisectRight(6, high: 4, low: 4), 4);
expect(A.bisectRight(7, high: 4, low: 4), 4);
expect(A.bisectRight(8, high: 4, low: 4), 4);
});

test('bisectRight for A, hi=5, lo=4', () {
expect(A.bisectRight(-2, high: 5, low: 4), 4);
expect(A.bisectRight(-1, high: 5, low: 4), 4);
expect(A.bisectRight(0, high: 5, low: 4), 4);
expect(A.bisectRight(1, high: 5, low: 4), 4);
expect(A.bisectRight(2, high: 5, low: 4), 5);
expect(A.bisectRight(3, high: 5, low: 4), 5);
expect(A.bisectRight(4, high: 5, low: 4), 5);
expect(A.bisectRight(5, high: 5, low: 4), 5);
expect(A.bisectRight(6, high: 5, low: 4), 5);
expect(A.bisectRight(7, high: 5, low: 4), 5);
expect(A.bisectRight(8, high: 5, low: 4), 5);
});

test('bisectRight for A, hi=6, lo=4', () {
expect(A.bisectRight(-2, high: 6, low: 4), 4);
expect(A.bisectRight(-1, high: 6, low: 4), 4);
expect(A.bisectRight(0, high: 6, low: 4), 4);
expect(A.bisectRight(1, high: 6, low: 4), 4);
expect(A.bisectRight(2, high: 6, low: 4), 6);
expect(A.bisectRight(3, high: 6, low: 4), 6);
expect(A.bisectRight(4, high: 6, low: 4), 6);
expect(A.bisectRight(5, high: 6, low: 4), 6);
expect(A.bisectRight(6, high: 6, low: 4), 6);
expect(A.bisectRight(7, high: 6, low: 4), 6);
expect(A.bisectRight(8, high: 6, low: 4), 6);
});

test('bisectRight for A, hi=7, lo=4', () {
expect(A.bisectRight(-2, high: 7, low: 4), 4);
expect(A.bisectRight(-1, high: 7, low: 4), 4);
expect(A.bisectRight(0, high: 7, low: 4), 4);
expect(A.bisectRight(1, high: 7, low: 4), 4);
expect(A.bisectRight(2, high: 7, low: 4), 6);
expect(A.bisectRight(3, high: 7, low: 4), 7);
expect(A.bisectRight(4, high: 7, low: 4), 7);
expect(A.bisectRight(5, high: 7, low: 4), 7);
expect(A.bisectRight(6, high: 7, low: 4), 7);
expect(A.bisectRight(7, high: 7, low: 4), 7);
expect(A.bisectRight(8, high: 7, low: 4), 7);
});

test('bisectRight for A, hi=8, lo=4', () {
expect(A.bisectRight(-2, high: 8, low: 4), 4);
expect(A.bisectRight(-1, high: 8, low: 4), 4);
expect(A.bisectRight(0, high: 8, low: 4), 4);
expect(A.bisectRight(1, high: 8, low: 4), 4);
expect(A.bisectRight(2, high: 8, low: 4), 6);
expect(A.bisectRight(3, high: 8, low: 4), 8);
expect(A.bisectRight(4, high: 8, low: 4), 8);
expect(A.bisectRight(5, high: 8, low: 4), 8);
expect(A.bisectRight(6, high: 8, low: 4), 8);
expect(A.bisectRight(7, high: 8, low: 4), 8);
expect(A.bisectRight(8, high: 8, low: 4), 8);
});

test('bisectRight for A, hi=9, lo=4', () {
expect(A.bisectRight(-2, high: 9, low: 4), 4);
expect(A.bisectRight(-1, high: 9, low: 4), 4);
expect(A.bisectRight(0, high: 9, low: 4), 4);
expect(A.bisectRight(1, high: 9, low: 4), 4);
expect(A.bisectRight(2, high: 9, low: 4), 6);
expect(A.bisectRight(3, high: 9, low: 4), 8);
expect(A.bisectRight(4, high: 9, low: 4), 8);
expect(A.bisectRight(5, high: 9, low: 4), 9);
expect(A.bisectRight(6, high: 9, low: 4), 9);
expect(A.bisectRight(7, high: 9, low: 4), 9);
expect(A.bisectRight(8, high: 9, low: 4), 9);
});

test('bisectRight for A, hi=10, lo=4', () {
expect(A.bisectRight(-2, high: 10, low: 4), 4);
expect(A.bisectRight(-1, high: 10, low: 4), 4);
expect(A.bisectRight(0, high: 10, low: 4), 4);
expect(A.bisectRight(1, high: 10, low: 4), 4);
expect(A.bisectRight(2, high: 10, low: 4), 6);
expect(A.bisectRight(3, high: 10, low: 4), 8);
expect(A.bisectRight(4, high: 10, low: 4), 8);
expect(A.bisectRight(5, high: 10, low: 4), 9);
expect(A.bisectRight(6, high: 10, low: 4), 10);
expect(A.bisectRight(7, high: 10, low: 4), 10);
expect(A.bisectRight(8, high: 10, low: 4), 10);
});

test('bisectRight for A, hi=0, lo=5', () {
expect(A.bisectRight(-2, high: 0, low: 5), 5);
expect(A.bisectRight(-1, high: 0, low: 5), 5);
expect(A.bisectRight(0, high: 0, low: 5), 5);
expect(A.bisectRight(1, high: 0, low: 5), 5);
expect(A.bisectRight(2, high: 0, low: 5), 5);
expect(A.bisectRight(3, high: 0, low: 5), 5);
expect(A.bisectRight(4, high: 0, low: 5), 5);
expect(A.bisectRight(5, high: 0, low: 5), 5);
expect(A.bisectRight(6, high: 0, low: 5), 5);
expect(A.bisectRight(7, high: 0, low: 5), 5);
expect(A.bisectRight(8, high: 0, low: 5), 5);
});

test('bisectRight for A, hi=1, lo=5', () {
expect(A.bisectRight(-2, high: 1, low: 5), 5);
expect(A.bisectRight(-1, high: 1, low: 5), 5);
expect(A.bisectRight(0, high: 1, low: 5), 5);
expect(A.bisectRight(1, high: 1, low: 5), 5);
expect(A.bisectRight(2, high: 1, low: 5), 5);
expect(A.bisectRight(3, high: 1, low: 5), 5);
expect(A.bisectRight(4, high: 1, low: 5), 5);
expect(A.bisectRight(5, high: 1, low: 5), 5);
expect(A.bisectRight(6, high: 1, low: 5), 5);
expect(A.bisectRight(7, high: 1, low: 5), 5);
expect(A.bisectRight(8, high: 1, low: 5), 5);
});

test('bisectRight for A, hi=2, lo=5', () {
expect(A.bisectRight(-2, high: 2, low: 5), 5);
expect(A.bisectRight(-1, high: 2, low: 5), 5);
expect(A.bisectRight(0, high: 2, low: 5), 5);
expect(A.bisectRight(1, high: 2, low: 5), 5);
expect(A.bisectRight(2, high: 2, low: 5), 5);
expect(A.bisectRight(3, high: 2, low: 5), 5);
expect(A.bisectRight(4, high: 2, low: 5), 5);
expect(A.bisectRight(5, high: 2, low: 5), 5);
expect(A.bisectRight(6, high: 2, low: 5), 5);
expect(A.bisectRight(7, high: 2, low: 5), 5);
expect(A.bisectRight(8, high: 2, low: 5), 5);
});

test('bisectRight for A, hi=3, lo=5', () {
expect(A.bisectRight(-2, high: 3, low: 5), 5);
expect(A.bisectRight(-1, high: 3, low: 5), 5);
expect(A.bisectRight(0, high: 3, low: 5), 5);
expect(A.bisectRight(1, high: 3, low: 5), 5);
expect(A.bisectRight(2, high: 3, low: 5), 5);
expect(A.bisectRight(3, high: 3, low: 5), 5);
expect(A.bisectRight(4, high: 3, low: 5), 5);
expect(A.bisectRight(5, high: 3, low: 5), 5);
expect(A.bisectRight(6, high: 3, low: 5), 5);
expect(A.bisectRight(7, high: 3, low: 5), 5);
expect(A.bisectRight(8, high: 3, low: 5), 5);
});

test('bisectRight for A, hi=4, lo=5', () {
expect(A.bisectRight(-2, high: 4, low: 5), 5);
expect(A.bisectRight(-1, high: 4, low: 5), 5);
expect(A.bisectRight(0, high: 4, low: 5), 5);
expect(A.bisectRight(1, high: 4, low: 5), 5);
expect(A.bisectRight(2, high: 4, low: 5), 5);
expect(A.bisectRight(3, high: 4, low: 5), 5);
expect(A.bisectRight(4, high: 4, low: 5), 5);
expect(A.bisectRight(5, high: 4, low: 5), 5);
expect(A.bisectRight(6, high: 4, low: 5), 5);
expect(A.bisectRight(7, high: 4, low: 5), 5);
expect(A.bisectRight(8, high: 4, low: 5), 5);
});

test('bisectRight for A, hi=5, lo=5', () {
expect(A.bisectRight(-2, high: 5, low: 5), 5);
expect(A.bisectRight(-1, high: 5, low: 5), 5);
expect(A.bisectRight(0, high: 5, low: 5), 5);
expect(A.bisectRight(1, high: 5, low: 5), 5);
expect(A.bisectRight(2, high: 5, low: 5), 5);
expect(A.bisectRight(3, high: 5, low: 5), 5);
expect(A.bisectRight(4, high: 5, low: 5), 5);
expect(A.bisectRight(5, high: 5, low: 5), 5);
expect(A.bisectRight(6, high: 5, low: 5), 5);
expect(A.bisectRight(7, high: 5, low: 5), 5);
expect(A.bisectRight(8, high: 5, low: 5), 5);
});

test('bisectRight for A, hi=6, lo=5', () {
expect(A.bisectRight(-2, high: 6, low: 5), 5);
expect(A.bisectRight(-1, high: 6, low: 5), 5);
expect(A.bisectRight(0, high: 6, low: 5), 5);
expect(A.bisectRight(1, high: 6, low: 5), 5);
expect(A.bisectRight(2, high: 6, low: 5), 6);
expect(A.bisectRight(3, high: 6, low: 5), 6);
expect(A.bisectRight(4, high: 6, low: 5), 6);
expect(A.bisectRight(5, high: 6, low: 5), 6);
expect(A.bisectRight(6, high: 6, low: 5), 6);
expect(A.bisectRight(7, high: 6, low: 5), 6);
expect(A.bisectRight(8, high: 6, low: 5), 6);
});

test('bisectRight for A, hi=7, lo=5', () {
expect(A.bisectRight(-2, high: 7, low: 5), 5);
expect(A.bisectRight(-1, high: 7, low: 5), 5);
expect(A.bisectRight(0, high: 7, low: 5), 5);
expect(A.bisectRight(1, high: 7, low: 5), 5);
expect(A.bisectRight(2, high: 7, low: 5), 6);
expect(A.bisectRight(3, high: 7, low: 5), 7);
expect(A.bisectRight(4, high: 7, low: 5), 7);
expect(A.bisectRight(5, high: 7, low: 5), 7);
expect(A.bisectRight(6, high: 7, low: 5), 7);
expect(A.bisectRight(7, high: 7, low: 5), 7);
expect(A.bisectRight(8, high: 7, low: 5), 7);
});

test('bisectRight for A, hi=8, lo=5', () {
expect(A.bisectRight(-2, high: 8, low: 5), 5);
expect(A.bisectRight(-1, high: 8, low: 5), 5);
expect(A.bisectRight(0, high: 8, low: 5), 5);
expect(A.bisectRight(1, high: 8, low: 5), 5);
expect(A.bisectRight(2, high: 8, low: 5), 6);
expect(A.bisectRight(3, high: 8, low: 5), 8);
expect(A.bisectRight(4, high: 8, low: 5), 8);
expect(A.bisectRight(5, high: 8, low: 5), 8);
expect(A.bisectRight(6, high: 8, low: 5), 8);
expect(A.bisectRight(7, high: 8, low: 5), 8);
expect(A.bisectRight(8, high: 8, low: 5), 8);
});

test('bisectRight for A, hi=9, lo=5', () {
expect(A.bisectRight(-2, high: 9, low: 5), 5);
expect(A.bisectRight(-1, high: 9, low: 5), 5);
expect(A.bisectRight(0, high: 9, low: 5), 5);
expect(A.bisectRight(1, high: 9, low: 5), 5);
expect(A.bisectRight(2, high: 9, low: 5), 6);
expect(A.bisectRight(3, high: 9, low: 5), 8);
expect(A.bisectRight(4, high: 9, low: 5), 8);
expect(A.bisectRight(5, high: 9, low: 5), 9);
expect(A.bisectRight(6, high: 9, low: 5), 9);
expect(A.bisectRight(7, high: 9, low: 5), 9);
expect(A.bisectRight(8, high: 9, low: 5), 9);
});

test('bisectRight for A, hi=10, lo=5', () {
expect(A.bisectRight(-2, high: 10, low: 5), 5);
expect(A.bisectRight(-1, high: 10, low: 5), 5);
expect(A.bisectRight(0, high: 10, low: 5), 5);
expect(A.bisectRight(1, high: 10, low: 5), 5);
expect(A.bisectRight(2, high: 10, low: 5), 6);
expect(A.bisectRight(3, high: 10, low: 5), 8);
expect(A.bisectRight(4, high: 10, low: 5), 8);
expect(A.bisectRight(5, high: 10, low: 5), 9);
expect(A.bisectRight(6, high: 10, low: 5), 10);
expect(A.bisectRight(7, high: 10, low: 5), 10);
expect(A.bisectRight(8, high: 10, low: 5), 10);
});

test('bisectRight for A, hi=0, lo=6', () {
expect(A.bisectRight(-2, high: 0, low: 6), 6);
expect(A.bisectRight(-1, high: 0, low: 6), 6);
expect(A.bisectRight(0, high: 0, low: 6), 6);
expect(A.bisectRight(1, high: 0, low: 6), 6);
expect(A.bisectRight(2, high: 0, low: 6), 6);
expect(A.bisectRight(3, high: 0, low: 6), 6);
expect(A.bisectRight(4, high: 0, low: 6), 6);
expect(A.bisectRight(5, high: 0, low: 6), 6);
expect(A.bisectRight(6, high: 0, low: 6), 6);
expect(A.bisectRight(7, high: 0, low: 6), 6);
expect(A.bisectRight(8, high: 0, low: 6), 6);
});

test('bisectRight for A, hi=1, lo=6', () {
expect(A.bisectRight(-2, high: 1, low: 6), 6);
expect(A.bisectRight(-1, high: 1, low: 6), 6);
expect(A.bisectRight(0, high: 1, low: 6), 6);
expect(A.bisectRight(1, high: 1, low: 6), 6);
expect(A.bisectRight(2, high: 1, low: 6), 6);
expect(A.bisectRight(3, high: 1, low: 6), 6);
expect(A.bisectRight(4, high: 1, low: 6), 6);
expect(A.bisectRight(5, high: 1, low: 6), 6);
expect(A.bisectRight(6, high: 1, low: 6), 6);
expect(A.bisectRight(7, high: 1, low: 6), 6);
expect(A.bisectRight(8, high: 1, low: 6), 6);
});

test('bisectRight for A, hi=2, lo=6', () {
expect(A.bisectRight(-2, high: 2, low: 6), 6);
expect(A.bisectRight(-1, high: 2, low: 6), 6);
expect(A.bisectRight(0, high: 2, low: 6), 6);
expect(A.bisectRight(1, high: 2, low: 6), 6);
expect(A.bisectRight(2, high: 2, low: 6), 6);
expect(A.bisectRight(3, high: 2, low: 6), 6);
expect(A.bisectRight(4, high: 2, low: 6), 6);
expect(A.bisectRight(5, high: 2, low: 6), 6);
expect(A.bisectRight(6, high: 2, low: 6), 6);
expect(A.bisectRight(7, high: 2, low: 6), 6);
expect(A.bisectRight(8, high: 2, low: 6), 6);
});

test('bisectRight for A, hi=3, lo=6', () {
expect(A.bisectRight(-2, high: 3, low: 6), 6);
expect(A.bisectRight(-1, high: 3, low: 6), 6);
expect(A.bisectRight(0, high: 3, low: 6), 6);
expect(A.bisectRight(1, high: 3, low: 6), 6);
expect(A.bisectRight(2, high: 3, low: 6), 6);
expect(A.bisectRight(3, high: 3, low: 6), 6);
expect(A.bisectRight(4, high: 3, low: 6), 6);
expect(A.bisectRight(5, high: 3, low: 6), 6);
expect(A.bisectRight(6, high: 3, low: 6), 6);
expect(A.bisectRight(7, high: 3, low: 6), 6);
expect(A.bisectRight(8, high: 3, low: 6), 6);
});

test('bisectRight for A, hi=4, lo=6', () {
expect(A.bisectRight(-2, high: 4, low: 6), 6);
expect(A.bisectRight(-1, high: 4, low: 6), 6);
expect(A.bisectRight(0, high: 4, low: 6), 6);
expect(A.bisectRight(1, high: 4, low: 6), 6);
expect(A.bisectRight(2, high: 4, low: 6), 6);
expect(A.bisectRight(3, high: 4, low: 6), 6);
expect(A.bisectRight(4, high: 4, low: 6), 6);
expect(A.bisectRight(5, high: 4, low: 6), 6);
expect(A.bisectRight(6, high: 4, low: 6), 6);
expect(A.bisectRight(7, high: 4, low: 6), 6);
expect(A.bisectRight(8, high: 4, low: 6), 6);
});

test('bisectRight for A, hi=5, lo=6', () {
expect(A.bisectRight(-2, high: 5, low: 6), 6);
expect(A.bisectRight(-1, high: 5, low: 6), 6);
expect(A.bisectRight(0, high: 5, low: 6), 6);
expect(A.bisectRight(1, high: 5, low: 6), 6);
expect(A.bisectRight(2, high: 5, low: 6), 6);
expect(A.bisectRight(3, high: 5, low: 6), 6);
expect(A.bisectRight(4, high: 5, low: 6), 6);
expect(A.bisectRight(5, high: 5, low: 6), 6);
expect(A.bisectRight(6, high: 5, low: 6), 6);
expect(A.bisectRight(7, high: 5, low: 6), 6);
expect(A.bisectRight(8, high: 5, low: 6), 6);
});

test('bisectRight for A, hi=6, lo=6', () {
expect(A.bisectRight(-2, high: 6, low: 6), 6);
expect(A.bisectRight(-1, high: 6, low: 6), 6);
expect(A.bisectRight(0, high: 6, low: 6), 6);
expect(A.bisectRight(1, high: 6, low: 6), 6);
expect(A.bisectRight(2, high: 6, low: 6), 6);
expect(A.bisectRight(3, high: 6, low: 6), 6);
expect(A.bisectRight(4, high: 6, low: 6), 6);
expect(A.bisectRight(5, high: 6, low: 6), 6);
expect(A.bisectRight(6, high: 6, low: 6), 6);
expect(A.bisectRight(7, high: 6, low: 6), 6);
expect(A.bisectRight(8, high: 6, low: 6), 6);
});

test('bisectRight for A, hi=7, lo=6', () {
expect(A.bisectRight(-2, high: 7, low: 6), 6);
expect(A.bisectRight(-1, high: 7, low: 6), 6);
expect(A.bisectRight(0, high: 7, low: 6), 6);
expect(A.bisectRight(1, high: 7, low: 6), 6);
expect(A.bisectRight(2, high: 7, low: 6), 6);
expect(A.bisectRight(3, high: 7, low: 6), 7);
expect(A.bisectRight(4, high: 7, low: 6), 7);
expect(A.bisectRight(5, high: 7, low: 6), 7);
expect(A.bisectRight(6, high: 7, low: 6), 7);
expect(A.bisectRight(7, high: 7, low: 6), 7);
expect(A.bisectRight(8, high: 7, low: 6), 7);
});

test('bisectRight for A, hi=8, lo=6', () {
expect(A.bisectRight(-2, high: 8, low: 6), 6);
expect(A.bisectRight(-1, high: 8, low: 6), 6);
expect(A.bisectRight(0, high: 8, low: 6), 6);
expect(A.bisectRight(1, high: 8, low: 6), 6);
expect(A.bisectRight(2, high: 8, low: 6), 6);
expect(A.bisectRight(3, high: 8, low: 6), 8);
expect(A.bisectRight(4, high: 8, low: 6), 8);
expect(A.bisectRight(5, high: 8, low: 6), 8);
expect(A.bisectRight(6, high: 8, low: 6), 8);
expect(A.bisectRight(7, high: 8, low: 6), 8);
expect(A.bisectRight(8, high: 8, low: 6), 8);
});

test('bisectRight for A, hi=9, lo=6', () {
expect(A.bisectRight(-2, high: 9, low: 6), 6);
expect(A.bisectRight(-1, high: 9, low: 6), 6);
expect(A.bisectRight(0, high: 9, low: 6), 6);
expect(A.bisectRight(1, high: 9, low: 6), 6);
expect(A.bisectRight(2, high: 9, low: 6), 6);
expect(A.bisectRight(3, high: 9, low: 6), 8);
expect(A.bisectRight(4, high: 9, low: 6), 8);
expect(A.bisectRight(5, high: 9, low: 6), 9);
expect(A.bisectRight(6, high: 9, low: 6), 9);
expect(A.bisectRight(7, high: 9, low: 6), 9);
expect(A.bisectRight(8, high: 9, low: 6), 9);
});

test('bisectRight for A, hi=10, lo=6', () {
expect(A.bisectRight(-2, high: 10, low: 6), 6);
expect(A.bisectRight(-1, high: 10, low: 6), 6);
expect(A.bisectRight(0, high: 10, low: 6), 6);
expect(A.bisectRight(1, high: 10, low: 6), 6);
expect(A.bisectRight(2, high: 10, low: 6), 6);
expect(A.bisectRight(3, high: 10, low: 6), 8);
expect(A.bisectRight(4, high: 10, low: 6), 8);
expect(A.bisectRight(5, high: 10, low: 6), 9);
expect(A.bisectRight(6, high: 10, low: 6), 10);
expect(A.bisectRight(7, high: 10, low: 6), 10);
expect(A.bisectRight(8, high: 10, low: 6), 10);
});

test('bisectRight for A, hi=0, lo=7', () {
expect(A.bisectRight(-2, high: 0, low: 7), 7);
expect(A.bisectRight(-1, high: 0, low: 7), 7);
expect(A.bisectRight(0, high: 0, low: 7), 7);
expect(A.bisectRight(1, high: 0, low: 7), 7);
expect(A.bisectRight(2, high: 0, low: 7), 7);
expect(A.bisectRight(3, high: 0, low: 7), 7);
expect(A.bisectRight(4, high: 0, low: 7), 7);
expect(A.bisectRight(5, high: 0, low: 7), 7);
expect(A.bisectRight(6, high: 0, low: 7), 7);
expect(A.bisectRight(7, high: 0, low: 7), 7);
expect(A.bisectRight(8, high: 0, low: 7), 7);
});

test('bisectRight for A, hi=1, lo=7', () {
expect(A.bisectRight(-2, high: 1, low: 7), 7);
expect(A.bisectRight(-1, high: 1, low: 7), 7);
expect(A.bisectRight(0, high: 1, low: 7), 7);
expect(A.bisectRight(1, high: 1, low: 7), 7);
expect(A.bisectRight(2, high: 1, low: 7), 7);
expect(A.bisectRight(3, high: 1, low: 7), 7);
expect(A.bisectRight(4, high: 1, low: 7), 7);
expect(A.bisectRight(5, high: 1, low: 7), 7);
expect(A.bisectRight(6, high: 1, low: 7), 7);
expect(A.bisectRight(7, high: 1, low: 7), 7);
expect(A.bisectRight(8, high: 1, low: 7), 7);
});

test('bisectRight for A, hi=2, lo=7', () {
expect(A.bisectRight(-2, high: 2, low: 7), 7);
expect(A.bisectRight(-1, high: 2, low: 7), 7);
expect(A.bisectRight(0, high: 2, low: 7), 7);
expect(A.bisectRight(1, high: 2, low: 7), 7);
expect(A.bisectRight(2, high: 2, low: 7), 7);
expect(A.bisectRight(3, high: 2, low: 7), 7);
expect(A.bisectRight(4, high: 2, low: 7), 7);
expect(A.bisectRight(5, high: 2, low: 7), 7);
expect(A.bisectRight(6, high: 2, low: 7), 7);
expect(A.bisectRight(7, high: 2, low: 7), 7);
expect(A.bisectRight(8, high: 2, low: 7), 7);
});

test('bisectRight for A, hi=3, lo=7', () {
expect(A.bisectRight(-2, high: 3, low: 7), 7);
expect(A.bisectRight(-1, high: 3, low: 7), 7);
expect(A.bisectRight(0, high: 3, low: 7), 7);
expect(A.bisectRight(1, high: 3, low: 7), 7);
expect(A.bisectRight(2, high: 3, low: 7), 7);
expect(A.bisectRight(3, high: 3, low: 7), 7);
expect(A.bisectRight(4, high: 3, low: 7), 7);
expect(A.bisectRight(5, high: 3, low: 7), 7);
expect(A.bisectRight(6, high: 3, low: 7), 7);
expect(A.bisectRight(7, high: 3, low: 7), 7);
expect(A.bisectRight(8, high: 3, low: 7), 7);
});

test('bisectRight for A, hi=4, lo=7', () {
expect(A.bisectRight(-2, high: 4, low: 7), 7);
expect(A.bisectRight(-1, high: 4, low: 7), 7);
expect(A.bisectRight(0, high: 4, low: 7), 7);
expect(A.bisectRight(1, high: 4, low: 7), 7);
expect(A.bisectRight(2, high: 4, low: 7), 7);
expect(A.bisectRight(3, high: 4, low: 7), 7);
expect(A.bisectRight(4, high: 4, low: 7), 7);
expect(A.bisectRight(5, high: 4, low: 7), 7);
expect(A.bisectRight(6, high: 4, low: 7), 7);
expect(A.bisectRight(7, high: 4, low: 7), 7);
expect(A.bisectRight(8, high: 4, low: 7), 7);
});

test('bisectRight for A, hi=5, lo=7', () {
expect(A.bisectRight(-2, high: 5, low: 7), 7);
expect(A.bisectRight(-1, high: 5, low: 7), 7);
expect(A.bisectRight(0, high: 5, low: 7), 7);
expect(A.bisectRight(1, high: 5, low: 7), 7);
expect(A.bisectRight(2, high: 5, low: 7), 7);
expect(A.bisectRight(3, high: 5, low: 7), 7);
expect(A.bisectRight(4, high: 5, low: 7), 7);
expect(A.bisectRight(5, high: 5, low: 7), 7);
expect(A.bisectRight(6, high: 5, low: 7), 7);
expect(A.bisectRight(7, high: 5, low: 7), 7);
expect(A.bisectRight(8, high: 5, low: 7), 7);
});

test('bisectRight for A, hi=6, lo=7', () {
expect(A.bisectRight(-2, high: 6, low: 7), 7);
expect(A.bisectRight(-1, high: 6, low: 7), 7);
expect(A.bisectRight(0, high: 6, low: 7), 7);
expect(A.bisectRight(1, high: 6, low: 7), 7);
expect(A.bisectRight(2, high: 6, low: 7), 7);
expect(A.bisectRight(3, high: 6, low: 7), 7);
expect(A.bisectRight(4, high: 6, low: 7), 7);
expect(A.bisectRight(5, high: 6, low: 7), 7);
expect(A.bisectRight(6, high: 6, low: 7), 7);
expect(A.bisectRight(7, high: 6, low: 7), 7);
expect(A.bisectRight(8, high: 6, low: 7), 7);
});

test('bisectRight for A, hi=7, lo=7', () {
expect(A.bisectRight(-2, high: 7, low: 7), 7);
expect(A.bisectRight(-1, high: 7, low: 7), 7);
expect(A.bisectRight(0, high: 7, low: 7), 7);
expect(A.bisectRight(1, high: 7, low: 7), 7);
expect(A.bisectRight(2, high: 7, low: 7), 7);
expect(A.bisectRight(3, high: 7, low: 7), 7);
expect(A.bisectRight(4, high: 7, low: 7), 7);
expect(A.bisectRight(5, high: 7, low: 7), 7);
expect(A.bisectRight(6, high: 7, low: 7), 7);
expect(A.bisectRight(7, high: 7, low: 7), 7);
expect(A.bisectRight(8, high: 7, low: 7), 7);
});

test('bisectRight for A, hi=8, lo=7', () {
expect(A.bisectRight(-2, high: 8, low: 7), 7);
expect(A.bisectRight(-1, high: 8, low: 7), 7);
expect(A.bisectRight(0, high: 8, low: 7), 7);
expect(A.bisectRight(1, high: 8, low: 7), 7);
expect(A.bisectRight(2, high: 8, low: 7), 7);
expect(A.bisectRight(3, high: 8, low: 7), 8);
expect(A.bisectRight(4, high: 8, low: 7), 8);
expect(A.bisectRight(5, high: 8, low: 7), 8);
expect(A.bisectRight(6, high: 8, low: 7), 8);
expect(A.bisectRight(7, high: 8, low: 7), 8);
expect(A.bisectRight(8, high: 8, low: 7), 8);
});

test('bisectRight for A, hi=9, lo=7', () {
expect(A.bisectRight(-2, high: 9, low: 7), 7);
expect(A.bisectRight(-1, high: 9, low: 7), 7);
expect(A.bisectRight(0, high: 9, low: 7), 7);
expect(A.bisectRight(1, high: 9, low: 7), 7);
expect(A.bisectRight(2, high: 9, low: 7), 7);
expect(A.bisectRight(3, high: 9, low: 7), 8);
expect(A.bisectRight(4, high: 9, low: 7), 8);
expect(A.bisectRight(5, high: 9, low: 7), 9);
expect(A.bisectRight(6, high: 9, low: 7), 9);
expect(A.bisectRight(7, high: 9, low: 7), 9);
expect(A.bisectRight(8, high: 9, low: 7), 9);
});

test('bisectRight for A, hi=10, lo=7', () {
expect(A.bisectRight(-2, high: 10, low: 7), 7);
expect(A.bisectRight(-1, high: 10, low: 7), 7);
expect(A.bisectRight(0, high: 10, low: 7), 7);
expect(A.bisectRight(1, high: 10, low: 7), 7);
expect(A.bisectRight(2, high: 10, low: 7), 7);
expect(A.bisectRight(3, high: 10, low: 7), 8);
expect(A.bisectRight(4, high: 10, low: 7), 8);
expect(A.bisectRight(5, high: 10, low: 7), 9);
expect(A.bisectRight(6, high: 10, low: 7), 10);
expect(A.bisectRight(7, high: 10, low: 7), 10);
expect(A.bisectRight(8, high: 10, low: 7), 10);
});

test('bisectRight for A, hi=0, lo=8', () {
expect(A.bisectRight(-2, high: 0, low: 8), 8);
expect(A.bisectRight(-1, high: 0, low: 8), 8);
expect(A.bisectRight(0, high: 0, low: 8), 8);
expect(A.bisectRight(1, high: 0, low: 8), 8);
expect(A.bisectRight(2, high: 0, low: 8), 8);
expect(A.bisectRight(3, high: 0, low: 8), 8);
expect(A.bisectRight(4, high: 0, low: 8), 8);
expect(A.bisectRight(5, high: 0, low: 8), 8);
expect(A.bisectRight(6, high: 0, low: 8), 8);
expect(A.bisectRight(7, high: 0, low: 8), 8);
expect(A.bisectRight(8, high: 0, low: 8), 8);
});

test('bisectRight for A, hi=1, lo=8', () {
expect(A.bisectRight(-2, high: 1, low: 8), 8);
expect(A.bisectRight(-1, high: 1, low: 8), 8);
expect(A.bisectRight(0, high: 1, low: 8), 8);
expect(A.bisectRight(1, high: 1, low: 8), 8);
expect(A.bisectRight(2, high: 1, low: 8), 8);
expect(A.bisectRight(3, high: 1, low: 8), 8);
expect(A.bisectRight(4, high: 1, low: 8), 8);
expect(A.bisectRight(5, high: 1, low: 8), 8);
expect(A.bisectRight(6, high: 1, low: 8), 8);
expect(A.bisectRight(7, high: 1, low: 8), 8);
expect(A.bisectRight(8, high: 1, low: 8), 8);
});

test('bisectRight for A, hi=2, lo=8', () {
expect(A.bisectRight(-2, high: 2, low: 8), 8);
expect(A.bisectRight(-1, high: 2, low: 8), 8);
expect(A.bisectRight(0, high: 2, low: 8), 8);
expect(A.bisectRight(1, high: 2, low: 8), 8);
expect(A.bisectRight(2, high: 2, low: 8), 8);
expect(A.bisectRight(3, high: 2, low: 8), 8);
expect(A.bisectRight(4, high: 2, low: 8), 8);
expect(A.bisectRight(5, high: 2, low: 8), 8);
expect(A.bisectRight(6, high: 2, low: 8), 8);
expect(A.bisectRight(7, high: 2, low: 8), 8);
expect(A.bisectRight(8, high: 2, low: 8), 8);
});

test('bisectRight for A, hi=3, lo=8', () {
expect(A.bisectRight(-2, high: 3, low: 8), 8);
expect(A.bisectRight(-1, high: 3, low: 8), 8);
expect(A.bisectRight(0, high: 3, low: 8), 8);
expect(A.bisectRight(1, high: 3, low: 8), 8);
expect(A.bisectRight(2, high: 3, low: 8), 8);
expect(A.bisectRight(3, high: 3, low: 8), 8);
expect(A.bisectRight(4, high: 3, low: 8), 8);
expect(A.bisectRight(5, high: 3, low: 8), 8);
expect(A.bisectRight(6, high: 3, low: 8), 8);
expect(A.bisectRight(7, high: 3, low: 8), 8);
expect(A.bisectRight(8, high: 3, low: 8), 8);
});

test('bisectRight for A, hi=4, lo=8', () {
expect(A.bisectRight(-2, high: 4, low: 8), 8);
expect(A.bisectRight(-1, high: 4, low: 8), 8);
expect(A.bisectRight(0, high: 4, low: 8), 8);
expect(A.bisectRight(1, high: 4, low: 8), 8);
expect(A.bisectRight(2, high: 4, low: 8), 8);
expect(A.bisectRight(3, high: 4, low: 8), 8);
expect(A.bisectRight(4, high: 4, low: 8), 8);
expect(A.bisectRight(5, high: 4, low: 8), 8);
expect(A.bisectRight(6, high: 4, low: 8), 8);
expect(A.bisectRight(7, high: 4, low: 8), 8);
expect(A.bisectRight(8, high: 4, low: 8), 8);
});

test('bisectRight for A, hi=5, lo=8', () {
expect(A.bisectRight(-2, high: 5, low: 8), 8);
expect(A.bisectRight(-1, high: 5, low: 8), 8);
expect(A.bisectRight(0, high: 5, low: 8), 8);
expect(A.bisectRight(1, high: 5, low: 8), 8);
expect(A.bisectRight(2, high: 5, low: 8), 8);
expect(A.bisectRight(3, high: 5, low: 8), 8);
expect(A.bisectRight(4, high: 5, low: 8), 8);
expect(A.bisectRight(5, high: 5, low: 8), 8);
expect(A.bisectRight(6, high: 5, low: 8), 8);
expect(A.bisectRight(7, high: 5, low: 8), 8);
expect(A.bisectRight(8, high: 5, low: 8), 8);
});

test('bisectRight for A, hi=6, lo=8', () {
expect(A.bisectRight(-2, high: 6, low: 8), 8);
expect(A.bisectRight(-1, high: 6, low: 8), 8);
expect(A.bisectRight(0, high: 6, low: 8), 8);
expect(A.bisectRight(1, high: 6, low: 8), 8);
expect(A.bisectRight(2, high: 6, low: 8), 8);
expect(A.bisectRight(3, high: 6, low: 8), 8);
expect(A.bisectRight(4, high: 6, low: 8), 8);
expect(A.bisectRight(5, high: 6, low: 8), 8);
expect(A.bisectRight(6, high: 6, low: 8), 8);
expect(A.bisectRight(7, high: 6, low: 8), 8);
expect(A.bisectRight(8, high: 6, low: 8), 8);
});

test('bisectRight for A, hi=7, lo=8', () {
expect(A.bisectRight(-2, high: 7, low: 8), 8);
expect(A.bisectRight(-1, high: 7, low: 8), 8);
expect(A.bisectRight(0, high: 7, low: 8), 8);
expect(A.bisectRight(1, high: 7, low: 8), 8);
expect(A.bisectRight(2, high: 7, low: 8), 8);
expect(A.bisectRight(3, high: 7, low: 8), 8);
expect(A.bisectRight(4, high: 7, low: 8), 8);
expect(A.bisectRight(5, high: 7, low: 8), 8);
expect(A.bisectRight(6, high: 7, low: 8), 8);
expect(A.bisectRight(7, high: 7, low: 8), 8);
expect(A.bisectRight(8, high: 7, low: 8), 8);
});

test('bisectRight for A, hi=8, lo=8', () {
expect(A.bisectRight(-2, high: 8, low: 8), 8);
expect(A.bisectRight(-1, high: 8, low: 8), 8);
expect(A.bisectRight(0, high: 8, low: 8), 8);
expect(A.bisectRight(1, high: 8, low: 8), 8);
expect(A.bisectRight(2, high: 8, low: 8), 8);
expect(A.bisectRight(3, high: 8, low: 8), 8);
expect(A.bisectRight(4, high: 8, low: 8), 8);
expect(A.bisectRight(5, high: 8, low: 8), 8);
expect(A.bisectRight(6, high: 8, low: 8), 8);
expect(A.bisectRight(7, high: 8, low: 8), 8);
expect(A.bisectRight(8, high: 8, low: 8), 8);
});

test('bisectRight for A, hi=9, lo=8', () {
expect(A.bisectRight(-2, high: 9, low: 8), 8);
expect(A.bisectRight(-1, high: 9, low: 8), 8);
expect(A.bisectRight(0, high: 9, low: 8), 8);
expect(A.bisectRight(1, high: 9, low: 8), 8);
expect(A.bisectRight(2, high: 9, low: 8), 8);
expect(A.bisectRight(3, high: 9, low: 8), 8);
expect(A.bisectRight(4, high: 9, low: 8), 8);
expect(A.bisectRight(5, high: 9, low: 8), 9);
expect(A.bisectRight(6, high: 9, low: 8), 9);
expect(A.bisectRight(7, high: 9, low: 8), 9);
expect(A.bisectRight(8, high: 9, low: 8), 9);
});

test('bisectRight for A, hi=10, lo=8', () {
expect(A.bisectRight(-2, high: 10, low: 8), 8);
expect(A.bisectRight(-1, high: 10, low: 8), 8);
expect(A.bisectRight(0, high: 10, low: 8), 8);
expect(A.bisectRight(1, high: 10, low: 8), 8);
expect(A.bisectRight(2, high: 10, low: 8), 8);
expect(A.bisectRight(3, high: 10, low: 8), 8);
expect(A.bisectRight(4, high: 10, low: 8), 8);
expect(A.bisectRight(5, high: 10, low: 8), 9);
expect(A.bisectRight(6, high: 10, low: 8), 10);
expect(A.bisectRight(7, high: 10, low: 8), 10);
expect(A.bisectRight(8, high: 10, low: 8), 10);
});

test('bisectRight for A, hi=0, lo=9', () {
expect(A.bisectRight(-2, high: 0, low: 9), 9);
expect(A.bisectRight(-1, high: 0, low: 9), 9);
expect(A.bisectRight(0, high: 0, low: 9), 9);
expect(A.bisectRight(1, high: 0, low: 9), 9);
expect(A.bisectRight(2, high: 0, low: 9), 9);
expect(A.bisectRight(3, high: 0, low: 9), 9);
expect(A.bisectRight(4, high: 0, low: 9), 9);
expect(A.bisectRight(5, high: 0, low: 9), 9);
expect(A.bisectRight(6, high: 0, low: 9), 9);
expect(A.bisectRight(7, high: 0, low: 9), 9);
expect(A.bisectRight(8, high: 0, low: 9), 9);
});

test('bisectRight for A, hi=1, lo=9', () {
expect(A.bisectRight(-2, high: 1, low: 9), 9);
expect(A.bisectRight(-1, high: 1, low: 9), 9);
expect(A.bisectRight(0, high: 1, low: 9), 9);
expect(A.bisectRight(1, high: 1, low: 9), 9);
expect(A.bisectRight(2, high: 1, low: 9), 9);
expect(A.bisectRight(3, high: 1, low: 9), 9);
expect(A.bisectRight(4, high: 1, low: 9), 9);
expect(A.bisectRight(5, high: 1, low: 9), 9);
expect(A.bisectRight(6, high: 1, low: 9), 9);
expect(A.bisectRight(7, high: 1, low: 9), 9);
expect(A.bisectRight(8, high: 1, low: 9), 9);
});

test('bisectRight for A, hi=2, lo=9', () {
expect(A.bisectRight(-2, high: 2, low: 9), 9);
expect(A.bisectRight(-1, high: 2, low: 9), 9);
expect(A.bisectRight(0, high: 2, low: 9), 9);
expect(A.bisectRight(1, high: 2, low: 9), 9);
expect(A.bisectRight(2, high: 2, low: 9), 9);
expect(A.bisectRight(3, high: 2, low: 9), 9);
expect(A.bisectRight(4, high: 2, low: 9), 9);
expect(A.bisectRight(5, high: 2, low: 9), 9);
expect(A.bisectRight(6, high: 2, low: 9), 9);
expect(A.bisectRight(7, high: 2, low: 9), 9);
expect(A.bisectRight(8, high: 2, low: 9), 9);
});

test('bisectRight for A, hi=3, lo=9', () {
expect(A.bisectRight(-2, high: 3, low: 9), 9);
expect(A.bisectRight(-1, high: 3, low: 9), 9);
expect(A.bisectRight(0, high: 3, low: 9), 9);
expect(A.bisectRight(1, high: 3, low: 9), 9);
expect(A.bisectRight(2, high: 3, low: 9), 9);
expect(A.bisectRight(3, high: 3, low: 9), 9);
expect(A.bisectRight(4, high: 3, low: 9), 9);
expect(A.bisectRight(5, high: 3, low: 9), 9);
expect(A.bisectRight(6, high: 3, low: 9), 9);
expect(A.bisectRight(7, high: 3, low: 9), 9);
expect(A.bisectRight(8, high: 3, low: 9), 9);
});

test('bisectRight for A, hi=4, lo=9', () {
expect(A.bisectRight(-2, high: 4, low: 9), 9);
expect(A.bisectRight(-1, high: 4, low: 9), 9);
expect(A.bisectRight(0, high: 4, low: 9), 9);
expect(A.bisectRight(1, high: 4, low: 9), 9);
expect(A.bisectRight(2, high: 4, low: 9), 9);
expect(A.bisectRight(3, high: 4, low: 9), 9);
expect(A.bisectRight(4, high: 4, low: 9), 9);
expect(A.bisectRight(5, high: 4, low: 9), 9);
expect(A.bisectRight(6, high: 4, low: 9), 9);
expect(A.bisectRight(7, high: 4, low: 9), 9);
expect(A.bisectRight(8, high: 4, low: 9), 9);
});

test('bisectRight for A, hi=5, lo=9', () {
expect(A.bisectRight(-2, high: 5, low: 9), 9);
expect(A.bisectRight(-1, high: 5, low: 9), 9);
expect(A.bisectRight(0, high: 5, low: 9), 9);
expect(A.bisectRight(1, high: 5, low: 9), 9);
expect(A.bisectRight(2, high: 5, low: 9), 9);
expect(A.bisectRight(3, high: 5, low: 9), 9);
expect(A.bisectRight(4, high: 5, low: 9), 9);
expect(A.bisectRight(5, high: 5, low: 9), 9);
expect(A.bisectRight(6, high: 5, low: 9), 9);
expect(A.bisectRight(7, high: 5, low: 9), 9);
expect(A.bisectRight(8, high: 5, low: 9), 9);
});

test('bisectRight for A, hi=6, lo=9', () {
expect(A.bisectRight(-2, high: 6, low: 9), 9);
expect(A.bisectRight(-1, high: 6, low: 9), 9);
expect(A.bisectRight(0, high: 6, low: 9), 9);
expect(A.bisectRight(1, high: 6, low: 9), 9);
expect(A.bisectRight(2, high: 6, low: 9), 9);
expect(A.bisectRight(3, high: 6, low: 9), 9);
expect(A.bisectRight(4, high: 6, low: 9), 9);
expect(A.bisectRight(5, high: 6, low: 9), 9);
expect(A.bisectRight(6, high: 6, low: 9), 9);
expect(A.bisectRight(7, high: 6, low: 9), 9);
expect(A.bisectRight(8, high: 6, low: 9), 9);
});

test('bisectRight for A, hi=7, lo=9', () {
expect(A.bisectRight(-2, high: 7, low: 9), 9);
expect(A.bisectRight(-1, high: 7, low: 9), 9);
expect(A.bisectRight(0, high: 7, low: 9), 9);
expect(A.bisectRight(1, high: 7, low: 9), 9);
expect(A.bisectRight(2, high: 7, low: 9), 9);
expect(A.bisectRight(3, high: 7, low: 9), 9);
expect(A.bisectRight(4, high: 7, low: 9), 9);
expect(A.bisectRight(5, high: 7, low: 9), 9);
expect(A.bisectRight(6, high: 7, low: 9), 9);
expect(A.bisectRight(7, high: 7, low: 9), 9);
expect(A.bisectRight(8, high: 7, low: 9), 9);
});

test('bisectRight for A, hi=8, lo=9', () {
expect(A.bisectRight(-2, high: 8, low: 9), 9);
expect(A.bisectRight(-1, high: 8, low: 9), 9);
expect(A.bisectRight(0, high: 8, low: 9), 9);
expect(A.bisectRight(1, high: 8, low: 9), 9);
expect(A.bisectRight(2, high: 8, low: 9), 9);
expect(A.bisectRight(3, high: 8, low: 9), 9);
expect(A.bisectRight(4, high: 8, low: 9), 9);
expect(A.bisectRight(5, high: 8, low: 9), 9);
expect(A.bisectRight(6, high: 8, low: 9), 9);
expect(A.bisectRight(7, high: 8, low: 9), 9);
expect(A.bisectRight(8, high: 8, low: 9), 9);
});

test('bisectRight for A, hi=9, lo=9', () {
expect(A.bisectRight(-2, high: 9, low: 9), 9);
expect(A.bisectRight(-1, high: 9, low: 9), 9);
expect(A.bisectRight(0, high: 9, low: 9), 9);
expect(A.bisectRight(1, high: 9, low: 9), 9);
expect(A.bisectRight(2, high: 9, low: 9), 9);
expect(A.bisectRight(3, high: 9, low: 9), 9);
expect(A.bisectRight(4, high: 9, low: 9), 9);
expect(A.bisectRight(5, high: 9, low: 9), 9);
expect(A.bisectRight(6, high: 9, low: 9), 9);
expect(A.bisectRight(7, high: 9, low: 9), 9);
expect(A.bisectRight(8, high: 9, low: 9), 9);
});

test('bisectRight for A, hi=10, lo=9', () {
expect(A.bisectRight(-2, high: 10, low: 9), 9);
expect(A.bisectRight(-1, high: 10, low: 9), 9);
expect(A.bisectRight(0, high: 10, low: 9), 9);
expect(A.bisectRight(1, high: 10, low: 9), 9);
expect(A.bisectRight(2, high: 10, low: 9), 9);
expect(A.bisectRight(3, high: 10, low: 9), 9);
expect(A.bisectRight(4, high: 10, low: 9), 9);
expect(A.bisectRight(5, high: 10, low: 9), 9);
expect(A.bisectRight(6, high: 10, low: 9), 10);
expect(A.bisectRight(7, high: 10, low: 9), 10);
expect(A.bisectRight(8, high: 10, low: 9), 10);
});

test('bisectRight for A, hi=0, lo=10', () {
expect(A.bisectRight(-2, high: 0, low: 10), 10);
expect(A.bisectRight(-1, high: 0, low: 10), 10);
expect(A.bisectRight(0, high: 0, low: 10), 10);
expect(A.bisectRight(1, high: 0, low: 10), 10);
expect(A.bisectRight(2, high: 0, low: 10), 10);
expect(A.bisectRight(3, high: 0, low: 10), 10);
expect(A.bisectRight(4, high: 0, low: 10), 10);
expect(A.bisectRight(5, high: 0, low: 10), 10);
expect(A.bisectRight(6, high: 0, low: 10), 10);
expect(A.bisectRight(7, high: 0, low: 10), 10);
expect(A.bisectRight(8, high: 0, low: 10), 10);
});

test('bisectRight for A, hi=1, lo=10', () {
expect(A.bisectRight(-2, high: 1, low: 10), 10);
expect(A.bisectRight(-1, high: 1, low: 10), 10);
expect(A.bisectRight(0, high: 1, low: 10), 10);
expect(A.bisectRight(1, high: 1, low: 10), 10);
expect(A.bisectRight(2, high: 1, low: 10), 10);
expect(A.bisectRight(3, high: 1, low: 10), 10);
expect(A.bisectRight(4, high: 1, low: 10), 10);
expect(A.bisectRight(5, high: 1, low: 10), 10);
expect(A.bisectRight(6, high: 1, low: 10), 10);
expect(A.bisectRight(7, high: 1, low: 10), 10);
expect(A.bisectRight(8, high: 1, low: 10), 10);
});

test('bisectRight for A, hi=2, lo=10', () {
expect(A.bisectRight(-2, high: 2, low: 10), 10);
expect(A.bisectRight(-1, high: 2, low: 10), 10);
expect(A.bisectRight(0, high: 2, low: 10), 10);
expect(A.bisectRight(1, high: 2, low: 10), 10);
expect(A.bisectRight(2, high: 2, low: 10), 10);
expect(A.bisectRight(3, high: 2, low: 10), 10);
expect(A.bisectRight(4, high: 2, low: 10), 10);
expect(A.bisectRight(5, high: 2, low: 10), 10);
expect(A.bisectRight(6, high: 2, low: 10), 10);
expect(A.bisectRight(7, high: 2, low: 10), 10);
expect(A.bisectRight(8, high: 2, low: 10), 10);
});

test('bisectRight for A, hi=3, lo=10', () {
expect(A.bisectRight(-2, high: 3, low: 10), 10);
expect(A.bisectRight(-1, high: 3, low: 10), 10);
expect(A.bisectRight(0, high: 3, low: 10), 10);
expect(A.bisectRight(1, high: 3, low: 10), 10);
expect(A.bisectRight(2, high: 3, low: 10), 10);
expect(A.bisectRight(3, high: 3, low: 10), 10);
expect(A.bisectRight(4, high: 3, low: 10), 10);
expect(A.bisectRight(5, high: 3, low: 10), 10);
expect(A.bisectRight(6, high: 3, low: 10), 10);
expect(A.bisectRight(7, high: 3, low: 10), 10);
expect(A.bisectRight(8, high: 3, low: 10), 10);
});

test('bisectRight for A, hi=4, lo=10', () {
expect(A.bisectRight(-2, high: 4, low: 10), 10);
expect(A.bisectRight(-1, high: 4, low: 10), 10);
expect(A.bisectRight(0, high: 4, low: 10), 10);
expect(A.bisectRight(1, high: 4, low: 10), 10);
expect(A.bisectRight(2, high: 4, low: 10), 10);
expect(A.bisectRight(3, high: 4, low: 10), 10);
expect(A.bisectRight(4, high: 4, low: 10), 10);
expect(A.bisectRight(5, high: 4, low: 10), 10);
expect(A.bisectRight(6, high: 4, low: 10), 10);
expect(A.bisectRight(7, high: 4, low: 10), 10);
expect(A.bisectRight(8, high: 4, low: 10), 10);
});

test('bisectRight for A, hi=5, lo=10', () {
expect(A.bisectRight(-2, high: 5, low: 10), 10);
expect(A.bisectRight(-1, high: 5, low: 10), 10);
expect(A.bisectRight(0, high: 5, low: 10), 10);
expect(A.bisectRight(1, high: 5, low: 10), 10);
expect(A.bisectRight(2, high: 5, low: 10), 10);
expect(A.bisectRight(3, high: 5, low: 10), 10);
expect(A.bisectRight(4, high: 5, low: 10), 10);
expect(A.bisectRight(5, high: 5, low: 10), 10);
expect(A.bisectRight(6, high: 5, low: 10), 10);
expect(A.bisectRight(7, high: 5, low: 10), 10);
expect(A.bisectRight(8, high: 5, low: 10), 10);
});

test('bisectRight for A, hi=6, lo=10', () {
expect(A.bisectRight(-2, high: 6, low: 10), 10);
expect(A.bisectRight(-1, high: 6, low: 10), 10);
expect(A.bisectRight(0, high: 6, low: 10), 10);
expect(A.bisectRight(1, high: 6, low: 10), 10);
expect(A.bisectRight(2, high: 6, low: 10), 10);
expect(A.bisectRight(3, high: 6, low: 10), 10);
expect(A.bisectRight(4, high: 6, low: 10), 10);
expect(A.bisectRight(5, high: 6, low: 10), 10);
expect(A.bisectRight(6, high: 6, low: 10), 10);
expect(A.bisectRight(7, high: 6, low: 10), 10);
expect(A.bisectRight(8, high: 6, low: 10), 10);
});

test('bisectRight for A, hi=7, lo=10', () {
expect(A.bisectRight(-2, high: 7, low: 10), 10);
expect(A.bisectRight(-1, high: 7, low: 10), 10);
expect(A.bisectRight(0, high: 7, low: 10), 10);
expect(A.bisectRight(1, high: 7, low: 10), 10);
expect(A.bisectRight(2, high: 7, low: 10), 10);
expect(A.bisectRight(3, high: 7, low: 10), 10);
expect(A.bisectRight(4, high: 7, low: 10), 10);
expect(A.bisectRight(5, high: 7, low: 10), 10);
expect(A.bisectRight(6, high: 7, low: 10), 10);
expect(A.bisectRight(7, high: 7, low: 10), 10);
expect(A.bisectRight(8, high: 7, low: 10), 10);
});

test('bisectRight for A, hi=8, lo=10', () {
expect(A.bisectRight(-2, high: 8, low: 10), 10);
expect(A.bisectRight(-1, high: 8, low: 10), 10);
expect(A.bisectRight(0, high: 8, low: 10), 10);
expect(A.bisectRight(1, high: 8, low: 10), 10);
expect(A.bisectRight(2, high: 8, low: 10), 10);
expect(A.bisectRight(3, high: 8, low: 10), 10);
expect(A.bisectRight(4, high: 8, low: 10), 10);
expect(A.bisectRight(5, high: 8, low: 10), 10);
expect(A.bisectRight(6, high: 8, low: 10), 10);
expect(A.bisectRight(7, high: 8, low: 10), 10);
expect(A.bisectRight(8, high: 8, low: 10), 10);
});

test('bisectRight for A, hi=9, lo=10', () {
expect(A.bisectRight(-2, high: 9, low: 10), 10);
expect(A.bisectRight(-1, high: 9, low: 10), 10);
expect(A.bisectRight(0, high: 9, low: 10), 10);
expect(A.bisectRight(1, high: 9, low: 10), 10);
expect(A.bisectRight(2, high: 9, low: 10), 10);
expect(A.bisectRight(3, high: 9, low: 10), 10);
expect(A.bisectRight(4, high: 9, low: 10), 10);
expect(A.bisectRight(5, high: 9, low: 10), 10);
expect(A.bisectRight(6, high: 9, low: 10), 10);
expect(A.bisectRight(7, high: 9, low: 10), 10);
expect(A.bisectRight(8, high: 9, low: 10), 10);
});

test('bisectRight for A, hi=10, lo=10', () {
expect(A.bisectRight(-2, high: 10, low: 10), 10);
expect(A.bisectRight(-1, high: 10, low: 10), 10);
expect(A.bisectRight(0, high: 10, low: 10), 10);
expect(A.bisectRight(1, high: 10, low: 10), 10);
expect(A.bisectRight(2, high: 10, low: 10), 10);
expect(A.bisectRight(3, high: 10, low: 10), 10);
expect(A.bisectRight(4, high: 10, low: 10), 10);
expect(A.bisectRight(5, high: 10, low: 10), 10);
expect(A.bisectRight(6, high: 10, low: 10), 10);
expect(A.bisectRight(7, high: 10, low: 10), 10);
expect(A.bisectRight(8, high: 10, low: 10), 10);
});

test('bisectRight for A, hi=0, lo=11', () {
expect(A.bisectRight(-2, high: 0, low: 11), 11);
expect(A.bisectRight(-1, high: 0, low: 11), 11);
expect(A.bisectRight(0, high: 0, low: 11), 11);
expect(A.bisectRight(1, high: 0, low: 11), 11);
expect(A.bisectRight(2, high: 0, low: 11), 11);
expect(A.bisectRight(3, high: 0, low: 11), 11);
expect(A.bisectRight(4, high: 0, low: 11), 11);
expect(A.bisectRight(5, high: 0, low: 11), 11);
expect(A.bisectRight(6, high: 0, low: 11), 11);
expect(A.bisectRight(7, high: 0, low: 11), 11);
expect(A.bisectRight(8, high: 0, low: 11), 11);
});

test('bisectRight for A, hi=1, lo=11', () {
expect(A.bisectRight(-2, high: 1, low: 11), 11);
expect(A.bisectRight(-1, high: 1, low: 11), 11);
expect(A.bisectRight(0, high: 1, low: 11), 11);
expect(A.bisectRight(1, high: 1, low: 11), 11);
expect(A.bisectRight(2, high: 1, low: 11), 11);
expect(A.bisectRight(3, high: 1, low: 11), 11);
expect(A.bisectRight(4, high: 1, low: 11), 11);
expect(A.bisectRight(5, high: 1, low: 11), 11);
expect(A.bisectRight(6, high: 1, low: 11), 11);
expect(A.bisectRight(7, high: 1, low: 11), 11);
expect(A.bisectRight(8, high: 1, low: 11), 11);
});

test('bisectRight for A, hi=2, lo=11', () {
expect(A.bisectRight(-2, high: 2, low: 11), 11);
expect(A.bisectRight(-1, high: 2, low: 11), 11);
expect(A.bisectRight(0, high: 2, low: 11), 11);
expect(A.bisectRight(1, high: 2, low: 11), 11);
expect(A.bisectRight(2, high: 2, low: 11), 11);
expect(A.bisectRight(3, high: 2, low: 11), 11);
expect(A.bisectRight(4, high: 2, low: 11), 11);
expect(A.bisectRight(5, high: 2, low: 11), 11);
expect(A.bisectRight(6, high: 2, low: 11), 11);
expect(A.bisectRight(7, high: 2, low: 11), 11);
expect(A.bisectRight(8, high: 2, low: 11), 11);
});

test('bisectRight for A, hi=3, lo=11', () {
expect(A.bisectRight(-2, high: 3, low: 11), 11);
expect(A.bisectRight(-1, high: 3, low: 11), 11);
expect(A.bisectRight(0, high: 3, low: 11), 11);
expect(A.bisectRight(1, high: 3, low: 11), 11);
expect(A.bisectRight(2, high: 3, low: 11), 11);
expect(A.bisectRight(3, high: 3, low: 11), 11);
expect(A.bisectRight(4, high: 3, low: 11), 11);
expect(A.bisectRight(5, high: 3, low: 11), 11);
expect(A.bisectRight(6, high: 3, low: 11), 11);
expect(A.bisectRight(7, high: 3, low: 11), 11);
expect(A.bisectRight(8, high: 3, low: 11), 11);
});

test('bisectRight for A, hi=4, lo=11', () {
expect(A.bisectRight(-2, high: 4, low: 11), 11);
expect(A.bisectRight(-1, high: 4, low: 11), 11);
expect(A.bisectRight(0, high: 4, low: 11), 11);
expect(A.bisectRight(1, high: 4, low: 11), 11);
expect(A.bisectRight(2, high: 4, low: 11), 11);
expect(A.bisectRight(3, high: 4, low: 11), 11);
expect(A.bisectRight(4, high: 4, low: 11), 11);
expect(A.bisectRight(5, high: 4, low: 11), 11);
expect(A.bisectRight(6, high: 4, low: 11), 11);
expect(A.bisectRight(7, high: 4, low: 11), 11);
expect(A.bisectRight(8, high: 4, low: 11), 11);
});

test('bisectRight for A, hi=5, lo=11', () {
expect(A.bisectRight(-2, high: 5, low: 11), 11);
expect(A.bisectRight(-1, high: 5, low: 11), 11);
expect(A.bisectRight(0, high: 5, low: 11), 11);
expect(A.bisectRight(1, high: 5, low: 11), 11);
expect(A.bisectRight(2, high: 5, low: 11), 11);
expect(A.bisectRight(3, high: 5, low: 11), 11);
expect(A.bisectRight(4, high: 5, low: 11), 11);
expect(A.bisectRight(5, high: 5, low: 11), 11);
expect(A.bisectRight(6, high: 5, low: 11), 11);
expect(A.bisectRight(7, high: 5, low: 11), 11);
expect(A.bisectRight(8, high: 5, low: 11), 11);
});

test('bisectRight for A, hi=6, lo=11', () {
expect(A.bisectRight(-2, high: 6, low: 11), 11);
expect(A.bisectRight(-1, high: 6, low: 11), 11);
expect(A.bisectRight(0, high: 6, low: 11), 11);
expect(A.bisectRight(1, high: 6, low: 11), 11);
expect(A.bisectRight(2, high: 6, low: 11), 11);
expect(A.bisectRight(3, high: 6, low: 11), 11);
expect(A.bisectRight(4, high: 6, low: 11), 11);
expect(A.bisectRight(5, high: 6, low: 11), 11);
expect(A.bisectRight(6, high: 6, low: 11), 11);
expect(A.bisectRight(7, high: 6, low: 11), 11);
expect(A.bisectRight(8, high: 6, low: 11), 11);
});

test('bisectRight for A, hi=7, lo=11', () {
expect(A.bisectRight(-2, high: 7, low: 11), 11);
expect(A.bisectRight(-1, high: 7, low: 11), 11);
expect(A.bisectRight(0, high: 7, low: 11), 11);
expect(A.bisectRight(1, high: 7, low: 11), 11);
expect(A.bisectRight(2, high: 7, low: 11), 11);
expect(A.bisectRight(3, high: 7, low: 11), 11);
expect(A.bisectRight(4, high: 7, low: 11), 11);
expect(A.bisectRight(5, high: 7, low: 11), 11);
expect(A.bisectRight(6, high: 7, low: 11), 11);
expect(A.bisectRight(7, high: 7, low: 11), 11);
expect(A.bisectRight(8, high: 7, low: 11), 11);
});

test('bisectRight for A, hi=8, lo=11', () {
expect(A.bisectRight(-2, high: 8, low: 11), 11);
expect(A.bisectRight(-1, high: 8, low: 11), 11);
expect(A.bisectRight(0, high: 8, low: 11), 11);
expect(A.bisectRight(1, high: 8, low: 11), 11);
expect(A.bisectRight(2, high: 8, low: 11), 11);
expect(A.bisectRight(3, high: 8, low: 11), 11);
expect(A.bisectRight(4, high: 8, low: 11), 11);
expect(A.bisectRight(5, high: 8, low: 11), 11);
expect(A.bisectRight(6, high: 8, low: 11), 11);
expect(A.bisectRight(7, high: 8, low: 11), 11);
expect(A.bisectRight(8, high: 8, low: 11), 11);
});

test('bisectRight for A, hi=9, lo=11', () {
expect(A.bisectRight(-2, high: 9, low: 11), 11);
expect(A.bisectRight(-1, high: 9, low: 11), 11);
expect(A.bisectRight(0, high: 9, low: 11), 11);
expect(A.bisectRight(1, high: 9, low: 11), 11);
expect(A.bisectRight(2, high: 9, low: 11), 11);
expect(A.bisectRight(3, high: 9, low: 11), 11);
expect(A.bisectRight(4, high: 9, low: 11), 11);
expect(A.bisectRight(5, high: 9, low: 11), 11);
expect(A.bisectRight(6, high: 9, low: 11), 11);
expect(A.bisectRight(7, high: 9, low: 11), 11);
expect(A.bisectRight(8, high: 9, low: 11), 11);
});

test('bisectRight for A, hi=10, lo=11', () {
expect(A.bisectRight(-2, high: 10, low: 11), 11);
expect(A.bisectRight(-1, high: 10, low: 11), 11);
expect(A.bisectRight(0, high: 10, low: 11), 11);
expect(A.bisectRight(1, high: 10, low: 11), 11);
expect(A.bisectRight(2, high: 10, low: 11), 11);
expect(A.bisectRight(3, high: 10, low: 11), 11);
expect(A.bisectRight(4, high: 10, low: 11), 11);
expect(A.bisectRight(5, high: 10, low: 11), 11);
expect(A.bisectRight(6, high: 10, low: 11), 11);
expect(A.bisectRight(7, high: 10, low: 11), 11);
expect(A.bisectRight(8, high: 10, low: 11), 11);
});

test('bisectRight for A, hi=0, lo=12', () {
expect(A.bisectRight(-2, high: 0, low: 12), 12);
expect(A.bisectRight(-1, high: 0, low: 12), 12);
expect(A.bisectRight(0, high: 0, low: 12), 12);
expect(A.bisectRight(1, high: 0, low: 12), 12);
expect(A.bisectRight(2, high: 0, low: 12), 12);
expect(A.bisectRight(3, high: 0, low: 12), 12);
expect(A.bisectRight(4, high: 0, low: 12), 12);
expect(A.bisectRight(5, high: 0, low: 12), 12);
expect(A.bisectRight(6, high: 0, low: 12), 12);
expect(A.bisectRight(7, high: 0, low: 12), 12);
expect(A.bisectRight(8, high: 0, low: 12), 12);
});

test('bisectRight for A, hi=1, lo=12', () {
expect(A.bisectRight(-2, high: 1, low: 12), 12);
expect(A.bisectRight(-1, high: 1, low: 12), 12);
expect(A.bisectRight(0, high: 1, low: 12), 12);
expect(A.bisectRight(1, high: 1, low: 12), 12);
expect(A.bisectRight(2, high: 1, low: 12), 12);
expect(A.bisectRight(3, high: 1, low: 12), 12);
expect(A.bisectRight(4, high: 1, low: 12), 12);
expect(A.bisectRight(5, high: 1, low: 12), 12);
expect(A.bisectRight(6, high: 1, low: 12), 12);
expect(A.bisectRight(7, high: 1, low: 12), 12);
expect(A.bisectRight(8, high: 1, low: 12), 12);
});

test('bisectRight for A, hi=2, lo=12', () {
expect(A.bisectRight(-2, high: 2, low: 12), 12);
expect(A.bisectRight(-1, high: 2, low: 12), 12);
expect(A.bisectRight(0, high: 2, low: 12), 12);
expect(A.bisectRight(1, high: 2, low: 12), 12);
expect(A.bisectRight(2, high: 2, low: 12), 12);
expect(A.bisectRight(3, high: 2, low: 12), 12);
expect(A.bisectRight(4, high: 2, low: 12), 12);
expect(A.bisectRight(5, high: 2, low: 12), 12);
expect(A.bisectRight(6, high: 2, low: 12), 12);
expect(A.bisectRight(7, high: 2, low: 12), 12);
expect(A.bisectRight(8, high: 2, low: 12), 12);
});

test('bisectRight for A, hi=3, lo=12', () {
expect(A.bisectRight(-2, high: 3, low: 12), 12);
expect(A.bisectRight(-1, high: 3, low: 12), 12);
expect(A.bisectRight(0, high: 3, low: 12), 12);
expect(A.bisectRight(1, high: 3, low: 12), 12);
expect(A.bisectRight(2, high: 3, low: 12), 12);
expect(A.bisectRight(3, high: 3, low: 12), 12);
expect(A.bisectRight(4, high: 3, low: 12), 12);
expect(A.bisectRight(5, high: 3, low: 12), 12);
expect(A.bisectRight(6, high: 3, low: 12), 12);
expect(A.bisectRight(7, high: 3, low: 12), 12);
expect(A.bisectRight(8, high: 3, low: 12), 12);
});

test('bisectRight for A, hi=4, lo=12', () {
expect(A.bisectRight(-2, high: 4, low: 12), 12);
expect(A.bisectRight(-1, high: 4, low: 12), 12);
expect(A.bisectRight(0, high: 4, low: 12), 12);
expect(A.bisectRight(1, high: 4, low: 12), 12);
expect(A.bisectRight(2, high: 4, low: 12), 12);
expect(A.bisectRight(3, high: 4, low: 12), 12);
expect(A.bisectRight(4, high: 4, low: 12), 12);
expect(A.bisectRight(5, high: 4, low: 12), 12);
expect(A.bisectRight(6, high: 4, low: 12), 12);
expect(A.bisectRight(7, high: 4, low: 12), 12);
expect(A.bisectRight(8, high: 4, low: 12), 12);
});

test('bisectRight for A, hi=5, lo=12', () {
expect(A.bisectRight(-2, high: 5, low: 12), 12);
expect(A.bisectRight(-1, high: 5, low: 12), 12);
expect(A.bisectRight(0, high: 5, low: 12), 12);
expect(A.bisectRight(1, high: 5, low: 12), 12);
expect(A.bisectRight(2, high: 5, low: 12), 12);
expect(A.bisectRight(3, high: 5, low: 12), 12);
expect(A.bisectRight(4, high: 5, low: 12), 12);
expect(A.bisectRight(5, high: 5, low: 12), 12);
expect(A.bisectRight(6, high: 5, low: 12), 12);
expect(A.bisectRight(7, high: 5, low: 12), 12);
expect(A.bisectRight(8, high: 5, low: 12), 12);
});

test('bisectRight for A, hi=6, lo=12', () {
expect(A.bisectRight(-2, high: 6, low: 12), 12);
expect(A.bisectRight(-1, high: 6, low: 12), 12);
expect(A.bisectRight(0, high: 6, low: 12), 12);
expect(A.bisectRight(1, high: 6, low: 12), 12);
expect(A.bisectRight(2, high: 6, low: 12), 12);
expect(A.bisectRight(3, high: 6, low: 12), 12);
expect(A.bisectRight(4, high: 6, low: 12), 12);
expect(A.bisectRight(5, high: 6, low: 12), 12);
expect(A.bisectRight(6, high: 6, low: 12), 12);
expect(A.bisectRight(7, high: 6, low: 12), 12);
expect(A.bisectRight(8, high: 6, low: 12), 12);
});

test('bisectRight for A, hi=7, lo=12', () {
expect(A.bisectRight(-2, high: 7, low: 12), 12);
expect(A.bisectRight(-1, high: 7, low: 12), 12);
expect(A.bisectRight(0, high: 7, low: 12), 12);
expect(A.bisectRight(1, high: 7, low: 12), 12);
expect(A.bisectRight(2, high: 7, low: 12), 12);
expect(A.bisectRight(3, high: 7, low: 12), 12);
expect(A.bisectRight(4, high: 7, low: 12), 12);
expect(A.bisectRight(5, high: 7, low: 12), 12);
expect(A.bisectRight(6, high: 7, low: 12), 12);
expect(A.bisectRight(7, high: 7, low: 12), 12);
expect(A.bisectRight(8, high: 7, low: 12), 12);
});

test('bisectRight for A, hi=8, lo=12', () {
expect(A.bisectRight(-2, high: 8, low: 12), 12);
expect(A.bisectRight(-1, high: 8, low: 12), 12);
expect(A.bisectRight(0, high: 8, low: 12), 12);
expect(A.bisectRight(1, high: 8, low: 12), 12);
expect(A.bisectRight(2, high: 8, low: 12), 12);
expect(A.bisectRight(3, high: 8, low: 12), 12);
expect(A.bisectRight(4, high: 8, low: 12), 12);
expect(A.bisectRight(5, high: 8, low: 12), 12);
expect(A.bisectRight(6, high: 8, low: 12), 12);
expect(A.bisectRight(7, high: 8, low: 12), 12);
expect(A.bisectRight(8, high: 8, low: 12), 12);
});

test('bisectRight for A, hi=9, lo=12', () {
expect(A.bisectRight(-2, high: 9, low: 12), 12);
expect(A.bisectRight(-1, high: 9, low: 12), 12);
expect(A.bisectRight(0, high: 9, low: 12), 12);
expect(A.bisectRight(1, high: 9, low: 12), 12);
expect(A.bisectRight(2, high: 9, low: 12), 12);
expect(A.bisectRight(3, high: 9, low: 12), 12);
expect(A.bisectRight(4, high: 9, low: 12), 12);
expect(A.bisectRight(5, high: 9, low: 12), 12);
expect(A.bisectRight(6, high: 9, low: 12), 12);
expect(A.bisectRight(7, high: 9, low: 12), 12);
expect(A.bisectRight(8, high: 9, low: 12), 12);
});

test('bisectRight for A, hi=10, lo=12', () {
expect(A.bisectRight(-2, high: 10, low: 12), 12);
expect(A.bisectRight(-1, high: 10, low: 12), 12);
expect(A.bisectRight(0, high: 10, low: 12), 12);
expect(A.bisectRight(1, high: 10, low: 12), 12);
expect(A.bisectRight(2, high: 10, low: 12), 12);
expect(A.bisectRight(3, high: 10, low: 12), 12);
expect(A.bisectRight(4, high: 10, low: 12), 12);
expect(A.bisectRight(5, high: 10, low: 12), 12);
expect(A.bisectRight(6, high: 10, low: 12), 12);
expect(A.bisectRight(7, high: 10, low: 12), 12);
expect(A.bisectRight(8, high: 10, low: 12), 12);
});

test('bisectRight for A, hi=0, lo=13', () {
expect(A.bisectRight(-2, high: 0, low: 13), 13);
expect(A.bisectRight(-1, high: 0, low: 13), 13);
expect(A.bisectRight(0, high: 0, low: 13), 13);
expect(A.bisectRight(1, high: 0, low: 13), 13);
expect(A.bisectRight(2, high: 0, low: 13), 13);
expect(A.bisectRight(3, high: 0, low: 13), 13);
expect(A.bisectRight(4, high: 0, low: 13), 13);
expect(A.bisectRight(5, high: 0, low: 13), 13);
expect(A.bisectRight(6, high: 0, low: 13), 13);
expect(A.bisectRight(7, high: 0, low: 13), 13);
expect(A.bisectRight(8, high: 0, low: 13), 13);
});

test('bisectRight for A, hi=1, lo=13', () {
expect(A.bisectRight(-2, high: 1, low: 13), 13);
expect(A.bisectRight(-1, high: 1, low: 13), 13);
expect(A.bisectRight(0, high: 1, low: 13), 13);
expect(A.bisectRight(1, high: 1, low: 13), 13);
expect(A.bisectRight(2, high: 1, low: 13), 13);
expect(A.bisectRight(3, high: 1, low: 13), 13);
expect(A.bisectRight(4, high: 1, low: 13), 13);
expect(A.bisectRight(5, high: 1, low: 13), 13);
expect(A.bisectRight(6, high: 1, low: 13), 13);
expect(A.bisectRight(7, high: 1, low: 13), 13);
expect(A.bisectRight(8, high: 1, low: 13), 13);
});

test('bisectRight for A, hi=2, lo=13', () {
expect(A.bisectRight(-2, high: 2, low: 13), 13);
expect(A.bisectRight(-1, high: 2, low: 13), 13);
expect(A.bisectRight(0, high: 2, low: 13), 13);
expect(A.bisectRight(1, high: 2, low: 13), 13);
expect(A.bisectRight(2, high: 2, low: 13), 13);
expect(A.bisectRight(3, high: 2, low: 13), 13);
expect(A.bisectRight(4, high: 2, low: 13), 13);
expect(A.bisectRight(5, high: 2, low: 13), 13);
expect(A.bisectRight(6, high: 2, low: 13), 13);
expect(A.bisectRight(7, high: 2, low: 13), 13);
expect(A.bisectRight(8, high: 2, low: 13), 13);
});

test('bisectRight for A, hi=3, lo=13', () {
expect(A.bisectRight(-2, high: 3, low: 13), 13);
expect(A.bisectRight(-1, high: 3, low: 13), 13);
expect(A.bisectRight(0, high: 3, low: 13), 13);
expect(A.bisectRight(1, high: 3, low: 13), 13);
expect(A.bisectRight(2, high: 3, low: 13), 13);
expect(A.bisectRight(3, high: 3, low: 13), 13);
expect(A.bisectRight(4, high: 3, low: 13), 13);
expect(A.bisectRight(5, high: 3, low: 13), 13);
expect(A.bisectRight(6, high: 3, low: 13), 13);
expect(A.bisectRight(7, high: 3, low: 13), 13);
expect(A.bisectRight(8, high: 3, low: 13), 13);
});

test('bisectRight for A, hi=4, lo=13', () {
expect(A.bisectRight(-2, high: 4, low: 13), 13);
expect(A.bisectRight(-1, high: 4, low: 13), 13);
expect(A.bisectRight(0, high: 4, low: 13), 13);
expect(A.bisectRight(1, high: 4, low: 13), 13);
expect(A.bisectRight(2, high: 4, low: 13), 13);
expect(A.bisectRight(3, high: 4, low: 13), 13);
expect(A.bisectRight(4, high: 4, low: 13), 13);
expect(A.bisectRight(5, high: 4, low: 13), 13);
expect(A.bisectRight(6, high: 4, low: 13), 13);
expect(A.bisectRight(7, high: 4, low: 13), 13);
expect(A.bisectRight(8, high: 4, low: 13), 13);
});

test('bisectRight for A, hi=5, lo=13', () {
expect(A.bisectRight(-2, high: 5, low: 13), 13);
expect(A.bisectRight(-1, high: 5, low: 13), 13);
expect(A.bisectRight(0, high: 5, low: 13), 13);
expect(A.bisectRight(1, high: 5, low: 13), 13);
expect(A.bisectRight(2, high: 5, low: 13), 13);
expect(A.bisectRight(3, high: 5, low: 13), 13);
expect(A.bisectRight(4, high: 5, low: 13), 13);
expect(A.bisectRight(5, high: 5, low: 13), 13);
expect(A.bisectRight(6, high: 5, low: 13), 13);
expect(A.bisectRight(7, high: 5, low: 13), 13);
expect(A.bisectRight(8, high: 5, low: 13), 13);
});

test('bisectRight for A, hi=6, lo=13', () {
expect(A.bisectRight(-2, high: 6, low: 13), 13);
expect(A.bisectRight(-1, high: 6, low: 13), 13);
expect(A.bisectRight(0, high: 6, low: 13), 13);
expect(A.bisectRight(1, high: 6, low: 13), 13);
expect(A.bisectRight(2, high: 6, low: 13), 13);
expect(A.bisectRight(3, high: 6, low: 13), 13);
expect(A.bisectRight(4, high: 6, low: 13), 13);
expect(A.bisectRight(5, high: 6, low: 13), 13);
expect(A.bisectRight(6, high: 6, low: 13), 13);
expect(A.bisectRight(7, high: 6, low: 13), 13);
expect(A.bisectRight(8, high: 6, low: 13), 13);
});

test('bisectRight for A, hi=7, lo=13', () {
expect(A.bisectRight(-2, high: 7, low: 13), 13);
expect(A.bisectRight(-1, high: 7, low: 13), 13);
expect(A.bisectRight(0, high: 7, low: 13), 13);
expect(A.bisectRight(1, high: 7, low: 13), 13);
expect(A.bisectRight(2, high: 7, low: 13), 13);
expect(A.bisectRight(3, high: 7, low: 13), 13);
expect(A.bisectRight(4, high: 7, low: 13), 13);
expect(A.bisectRight(5, high: 7, low: 13), 13);
expect(A.bisectRight(6, high: 7, low: 13), 13);
expect(A.bisectRight(7, high: 7, low: 13), 13);
expect(A.bisectRight(8, high: 7, low: 13), 13);
});

test('bisectRight for A, hi=8, lo=13', () {
expect(A.bisectRight(-2, high: 8, low: 13), 13);
expect(A.bisectRight(-1, high: 8, low: 13), 13);
expect(A.bisectRight(0, high: 8, low: 13), 13);
expect(A.bisectRight(1, high: 8, low: 13), 13);
expect(A.bisectRight(2, high: 8, low: 13), 13);
expect(A.bisectRight(3, high: 8, low: 13), 13);
expect(A.bisectRight(4, high: 8, low: 13), 13);
expect(A.bisectRight(5, high: 8, low: 13), 13);
expect(A.bisectRight(6, high: 8, low: 13), 13);
expect(A.bisectRight(7, high: 8, low: 13), 13);
expect(A.bisectRight(8, high: 8, low: 13), 13);
});

test('bisectRight for A, hi=9, lo=13', () {
expect(A.bisectRight(-2, high: 9, low: 13), 13);
expect(A.bisectRight(-1, high: 9, low: 13), 13);
expect(A.bisectRight(0, high: 9, low: 13), 13);
expect(A.bisectRight(1, high: 9, low: 13), 13);
expect(A.bisectRight(2, high: 9, low: 13), 13);
expect(A.bisectRight(3, high: 9, low: 13), 13);
expect(A.bisectRight(4, high: 9, low: 13), 13);
expect(A.bisectRight(5, high: 9, low: 13), 13);
expect(A.bisectRight(6, high: 9, low: 13), 13);
expect(A.bisectRight(7, high: 9, low: 13), 13);
expect(A.bisectRight(8, high: 9, low: 13), 13);
});

test('bisectRight for A, hi=10, lo=13', () {
expect(A.bisectRight(-2, high: 10, low: 13), 13);
expect(A.bisectRight(-1, high: 10, low: 13), 13);
expect(A.bisectRight(0, high: 10, low: 13), 13);
expect(A.bisectRight(1, high: 10, low: 13), 13);
expect(A.bisectRight(2, high: 10, low: 13), 13);
expect(A.bisectRight(3, high: 10, low: 13), 13);
expect(A.bisectRight(4, high: 10, low: 13), 13);
expect(A.bisectRight(5, high: 10, low: 13), 13);
expect(A.bisectRight(6, high: 10, low: 13), 13);
expect(A.bisectRight(7, high: 10, low: 13), 13);
expect(A.bisectRight(8, high: 10, low: 13), 13);
});

test('bisectRight for B, hi=0, lo=0', () {
expect(B.bisectRight(-2, high: 0, low: 0), 0);
expect(B.bisectRight(-1, high: 0, low: 0), 0);
expect(B.bisectRight(0, high: 0, low: 0), 0);
expect(B.bisectRight(1, high: 0, low: 0), 0);
expect(B.bisectRight(2, high: 0, low: 0), 0);
expect(B.bisectRight(3, high: 0, low: 0), 0);
expect(B.bisectRight(4, high: 0, low: 0), 0);
expect(B.bisectRight(5, high: 0, low: 0), 0);
expect(B.bisectRight(6, high: 0, low: 0), 0);
expect(B.bisectRight(7, high: 0, low: 0), 0);
expect(B.bisectRight(8, high: 0, low: 0), 0);
});

test('bisectRight for B, hi=0, lo=1', () {
expect(B.bisectRight(-2, high: 0, low: 1), 1);
expect(B.bisectRight(-1, high: 0, low: 1), 1);
expect(B.bisectRight(0, high: 0, low: 1), 1);
expect(B.bisectRight(1, high: 0, low: 1), 1);
expect(B.bisectRight(2, high: 0, low: 1), 1);
expect(B.bisectRight(3, high: 0, low: 1), 1);
expect(B.bisectRight(4, high: 0, low: 1), 1);
expect(B.bisectRight(5, high: 0, low: 1), 1);
expect(B.bisectRight(6, high: 0, low: 1), 1);
expect(B.bisectRight(7, high: 0, low: 1), 1);
expect(B.bisectRight(8, high: 0, low: 1), 1);
});

test('bisectRight for B, hi=0, lo=2', () {
expect(B.bisectRight(-2, high: 0, low: 2), 2);
expect(B.bisectRight(-1, high: 0, low: 2), 2);
expect(B.bisectRight(0, high: 0, low: 2), 2);
expect(B.bisectRight(1, high: 0, low: 2), 2);
expect(B.bisectRight(2, high: 0, low: 2), 2);
expect(B.bisectRight(3, high: 0, low: 2), 2);
expect(B.bisectRight(4, high: 0, low: 2), 2);
expect(B.bisectRight(5, high: 0, low: 2), 2);
expect(B.bisectRight(6, high: 0, low: 2), 2);
expect(B.bisectRight(7, high: 0, low: 2), 2);
expect(B.bisectRight(8, high: 0, low: 2), 2);
});

test('bisectRight for B, hi=0, lo=3', () {
expect(B.bisectRight(-2, high: 0, low: 3), 3);
expect(B.bisectRight(-1, high: 0, low: 3), 3);
expect(B.bisectRight(0, high: 0, low: 3), 3);
expect(B.bisectRight(1, high: 0, low: 3), 3);
expect(B.bisectRight(2, high: 0, low: 3), 3);
expect(B.bisectRight(3, high: 0, low: 3), 3);
expect(B.bisectRight(4, high: 0, low: 3), 3);
expect(B.bisectRight(5, high: 0, low: 3), 3);
expect(B.bisectRight(6, high: 0, low: 3), 3);
expect(B.bisectRight(7, high: 0, low: 3), 3);
expect(B.bisectRight(8, high: 0, low: 3), 3);
});

test('bisectRight for C, hi=0, lo=0', () {
expect(C.bisectRight(-2, high: 0, low: 0), 0);
expect(C.bisectRight(-1, high: 0, low: 0), 0);
expect(C.bisectRight(0, high: 0, low: 0), 0);
expect(C.bisectRight(1, high: 0, low: 0), 0);
expect(C.bisectRight(2, high: 0, low: 0), 0);
expect(C.bisectRight(3, high: 0, low: 0), 0);
expect(C.bisectRight(4, high: 0, low: 0), 0);
expect(C.bisectRight(5, high: 0, low: 0), 0);
expect(C.bisectRight(6, high: 0, low: 0), 0);
expect(C.bisectRight(7, high: 0, low: 0), 0);
expect(C.bisectRight(8, high: 0, low: 0), 0);
});

test('bisectRight for C, hi=1, lo=0', () {
expect(C.bisectRight(-2, high: 1, low: 0), 0);
expect(C.bisectRight(-1, high: 1, low: 0), 0);
expect(C.bisectRight(0, high: 1, low: 0), 0);
expect(C.bisectRight(1, high: 1, low: 0), 0);
expect(C.bisectRight(2, high: 1, low: 0), 0);
expect(C.bisectRight(3, high: 1, low: 0), 1);
expect(C.bisectRight(4, high: 1, low: 0), 1);
expect(C.bisectRight(5, high: 1, low: 0), 1);
expect(C.bisectRight(6, high: 1, low: 0), 1);
expect(C.bisectRight(7, high: 1, low: 0), 1);
expect(C.bisectRight(8, high: 1, low: 0), 1);
});

test('bisectRight for C, hi=0, lo=1', () {
expect(C.bisectRight(-2, high: 0, low: 1), 1);
expect(C.bisectRight(-1, high: 0, low: 1), 1);
expect(C.bisectRight(0, high: 0, low: 1), 1);
expect(C.bisectRight(1, high: 0, low: 1), 1);
expect(C.bisectRight(2, high: 0, low: 1), 1);
expect(C.bisectRight(3, high: 0, low: 1), 1);
expect(C.bisectRight(4, high: 0, low: 1), 1);
expect(C.bisectRight(5, high: 0, low: 1), 1);
expect(C.bisectRight(6, high: 0, low: 1), 1);
expect(C.bisectRight(7, high: 0, low: 1), 1);
expect(C.bisectRight(8, high: 0, low: 1), 1);
});

test('bisectRight for C, hi=1, lo=1', () {
expect(C.bisectRight(-2, high: 1, low: 1), 1);
expect(C.bisectRight(-1, high: 1, low: 1), 1);
expect(C.bisectRight(0, high: 1, low: 1), 1);
expect(C.bisectRight(1, high: 1, low: 1), 1);
expect(C.bisectRight(2, high: 1, low: 1), 1);
expect(C.bisectRight(3, high: 1, low: 1), 1);
expect(C.bisectRight(4, high: 1, low: 1), 1);
expect(C.bisectRight(5, high: 1, low: 1), 1);
expect(C.bisectRight(6, high: 1, low: 1), 1);
expect(C.bisectRight(7, high: 1, low: 1), 1);
expect(C.bisectRight(8, high: 1, low: 1), 1);
});

test('bisectRight for C, hi=0, lo=2', () {
expect(C.bisectRight(-2, high: 0, low: 2), 2);
expect(C.bisectRight(-1, high: 0, low: 2), 2);
expect(C.bisectRight(0, high: 0, low: 2), 2);
expect(C.bisectRight(1, high: 0, low: 2), 2);
expect(C.bisectRight(2, high: 0, low: 2), 2);
expect(C.bisectRight(3, high: 0, low: 2), 2);
expect(C.bisectRight(4, high: 0, low: 2), 2);
expect(C.bisectRight(5, high: 0, low: 2), 2);
expect(C.bisectRight(6, high: 0, low: 2), 2);
expect(C.bisectRight(7, high: 0, low: 2), 2);
expect(C.bisectRight(8, high: 0, low: 2), 2);
});

test('bisectRight for C, hi=1, lo=2', () {
expect(C.bisectRight(-2, high: 1, low: 2), 2);
expect(C.bisectRight(-1, high: 1, low: 2), 2);
expect(C.bisectRight(0, high: 1, low: 2), 2);
expect(C.bisectRight(1, high: 1, low: 2), 2);
expect(C.bisectRight(2, high: 1, low: 2), 2);
expect(C.bisectRight(3, high: 1, low: 2), 2);
expect(C.bisectRight(4, high: 1, low: 2), 2);
expect(C.bisectRight(5, high: 1, low: 2), 2);
expect(C.bisectRight(6, high: 1, low: 2), 2);
expect(C.bisectRight(7, high: 1, low: 2), 2);
expect(C.bisectRight(8, high: 1, low: 2), 2);
});

test('bisectRight for C, hi=0, lo=3', () {
expect(C.bisectRight(-2, high: 0, low: 3), 3);
expect(C.bisectRight(-1, high: 0, low: 3), 3);
expect(C.bisectRight(0, high: 0, low: 3), 3);
expect(C.bisectRight(1, high: 0, low: 3), 3);
expect(C.bisectRight(2, high: 0, low: 3), 3);
expect(C.bisectRight(3, high: 0, low: 3), 3);
expect(C.bisectRight(4, high: 0, low: 3), 3);
expect(C.bisectRight(5, high: 0, low: 3), 3);
expect(C.bisectRight(6, high: 0, low: 3), 3);
expect(C.bisectRight(7, high: 0, low: 3), 3);
expect(C.bisectRight(8, high: 0, low: 3), 3);
});

test('bisectRight for C, hi=1, lo=3', () {
expect(C.bisectRight(-2, high: 1, low: 3), 3);
expect(C.bisectRight(-1, high: 1, low: 3), 3);
expect(C.bisectRight(0, high: 1, low: 3), 3);
expect(C.bisectRight(1, high: 1, low: 3), 3);
expect(C.bisectRight(2, high: 1, low: 3), 3);
expect(C.bisectRight(3, high: 1, low: 3), 3);
expect(C.bisectRight(4, high: 1, low: 3), 3);
expect(C.bisectRight(5, high: 1, low: 3), 3);
expect(C.bisectRight(6, high: 1, low: 3), 3);
expect(C.bisectRight(7, high: 1, low: 3), 3);
expect(C.bisectRight(8, high: 1, low: 3), 3);
});

test('bisectRight for C, hi=0, lo=4', () {
expect(C.bisectRight(-2, high: 0, low: 4), 4);
expect(C.bisectRight(-1, high: 0, low: 4), 4);
expect(C.bisectRight(0, high: 0, low: 4), 4);
expect(C.bisectRight(1, high: 0, low: 4), 4);
expect(C.bisectRight(2, high: 0, low: 4), 4);
expect(C.bisectRight(3, high: 0, low: 4), 4);
expect(C.bisectRight(4, high: 0, low: 4), 4);
expect(C.bisectRight(5, high: 0, low: 4), 4);
expect(C.bisectRight(6, high: 0, low: 4), 4);
expect(C.bisectRight(7, high: 0, low: 4), 4);
expect(C.bisectRight(8, high: 0, low: 4), 4);
});

test('bisectRight for C, hi=1, lo=4', () {
expect(C.bisectRight(-2, high: 1, low: 4), 4);
expect(C.bisectRight(-1, high: 1, low: 4), 4);
expect(C.bisectRight(0, high: 1, low: 4), 4);
expect(C.bisectRight(1, high: 1, low: 4), 4);
expect(C.bisectRight(2, high: 1, low: 4), 4);
expect(C.bisectRight(3, high: 1, low: 4), 4);
expect(C.bisectRight(4, high: 1, low: 4), 4);
expect(C.bisectRight(5, high: 1, low: 4), 4);
expect(C.bisectRight(6, high: 1, low: 4), 4);
expect(C.bisectRight(7, high: 1, low: 4), 4);
expect(C.bisectRight(8, high: 1, low: 4), 4);
});

test('bisectRight for D, hi=0, lo=0', () {
expect(D.bisectRight(-2, high: 0, low: 0), 0);
expect(D.bisectRight(-1, high: 0, low: 0), 0);
expect(D.bisectRight(0, high: 0, low: 0), 0);
expect(D.bisectRight(1, high: 0, low: 0), 0);
expect(D.bisectRight(2, high: 0, low: 0), 0);
expect(D.bisectRight(3, high: 0, low: 0), 0);
expect(D.bisectRight(4, high: 0, low: 0), 0);
expect(D.bisectRight(5, high: 0, low: 0), 0);
expect(D.bisectRight(6, high: 0, low: 0), 0);
expect(D.bisectRight(7, high: 0, low: 0), 0);
expect(D.bisectRight(8, high: 0, low: 0), 0);
});

test('bisectRight for D, hi=1, lo=0', () {
expect(D.bisectRight(-2, high: 1, low: 0), 0);
expect(D.bisectRight(-1, high: 1, low: 0), 0);
expect(D.bisectRight(0, high: 1, low: 0), 0);
expect(D.bisectRight(1, high: 1, low: 0), 0);
expect(D.bisectRight(2, high: 1, low: 0), 1);
expect(D.bisectRight(3, high: 1, low: 0), 1);
expect(D.bisectRight(4, high: 1, low: 0), 1);
expect(D.bisectRight(5, high: 1, low: 0), 1);
expect(D.bisectRight(6, high: 1, low: 0), 1);
expect(D.bisectRight(7, high: 1, low: 0), 1);
expect(D.bisectRight(8, high: 1, low: 0), 1);
});

test('bisectRight for D, hi=2, lo=0', () {
expect(D.bisectRight(-2, high: 2, low: 0), 0);
expect(D.bisectRight(-1, high: 2, low: 0), 0);
expect(D.bisectRight(0, high: 2, low: 0), 0);
expect(D.bisectRight(1, high: 2, low: 0), 0);
expect(D.bisectRight(2, high: 2, low: 0), 1);
expect(D.bisectRight(3, high: 2, low: 0), 2);
expect(D.bisectRight(4, high: 2, low: 0), 2);
expect(D.bisectRight(5, high: 2, low: 0), 2);
expect(D.bisectRight(6, high: 2, low: 0), 2);
expect(D.bisectRight(7, high: 2, low: 0), 2);
expect(D.bisectRight(8, high: 2, low: 0), 2);
});

test('bisectRight for D, hi=3, lo=0', () {
expect(D.bisectRight(-2, high: 3, low: 0), 0);
expect(D.bisectRight(-1, high: 3, low: 0), 0);
expect(D.bisectRight(0, high: 3, low: 0), 0);
expect(D.bisectRight(1, high: 3, low: 0), 0);
expect(D.bisectRight(2, high: 3, low: 0), 1);
expect(D.bisectRight(3, high: 3, low: 0), 2);
expect(D.bisectRight(4, high: 3, low: 0), 3);
expect(D.bisectRight(5, high: 3, low: 0), 3);
expect(D.bisectRight(6, high: 3, low: 0), 3);
expect(D.bisectRight(7, high: 3, low: 0), 3);
expect(D.bisectRight(8, high: 3, low: 0), 3);
});

test('bisectRight for D, hi=0, lo=1', () {
expect(D.bisectRight(-2, high: 0, low: 1), 1);
expect(D.bisectRight(-1, high: 0, low: 1), 1);
expect(D.bisectRight(0, high: 0, low: 1), 1);
expect(D.bisectRight(1, high: 0, low: 1), 1);
expect(D.bisectRight(2, high: 0, low: 1), 1);
expect(D.bisectRight(3, high: 0, low: 1), 1);
expect(D.bisectRight(4, high: 0, low: 1), 1);
expect(D.bisectRight(5, high: 0, low: 1), 1);
expect(D.bisectRight(6, high: 0, low: 1), 1);
expect(D.bisectRight(7, high: 0, low: 1), 1);
expect(D.bisectRight(8, high: 0, low: 1), 1);
});

test('bisectRight for D, hi=1, lo=1', () {
expect(D.bisectRight(-2, high: 1, low: 1), 1);
expect(D.bisectRight(-1, high: 1, low: 1), 1);
expect(D.bisectRight(0, high: 1, low: 1), 1);
expect(D.bisectRight(1, high: 1, low: 1), 1);
expect(D.bisectRight(2, high: 1, low: 1), 1);
expect(D.bisectRight(3, high: 1, low: 1), 1);
expect(D.bisectRight(4, high: 1, low: 1), 1);
expect(D.bisectRight(5, high: 1, low: 1), 1);
expect(D.bisectRight(6, high: 1, low: 1), 1);
expect(D.bisectRight(7, high: 1, low: 1), 1);
expect(D.bisectRight(8, high: 1, low: 1), 1);
});

test('bisectRight for D, hi=2, lo=1', () {
expect(D.bisectRight(-2, high: 2, low: 1), 1);
expect(D.bisectRight(-1, high: 2, low: 1), 1);
expect(D.bisectRight(0, high: 2, low: 1), 1);
expect(D.bisectRight(1, high: 2, low: 1), 1);
expect(D.bisectRight(2, high: 2, low: 1), 1);
expect(D.bisectRight(3, high: 2, low: 1), 2);
expect(D.bisectRight(4, high: 2, low: 1), 2);
expect(D.bisectRight(5, high: 2, low: 1), 2);
expect(D.bisectRight(6, high: 2, low: 1), 2);
expect(D.bisectRight(7, high: 2, low: 1), 2);
expect(D.bisectRight(8, high: 2, low: 1), 2);
});

test('bisectRight for D, hi=3, lo=1', () {
expect(D.bisectRight(-2, high: 3, low: 1), 1);
expect(D.bisectRight(-1, high: 3, low: 1), 1);
expect(D.bisectRight(0, high: 3, low: 1), 1);
expect(D.bisectRight(1, high: 3, low: 1), 1);
expect(D.bisectRight(2, high: 3, low: 1), 1);
expect(D.bisectRight(3, high: 3, low: 1), 2);
expect(D.bisectRight(4, high: 3, low: 1), 3);
expect(D.bisectRight(5, high: 3, low: 1), 3);
expect(D.bisectRight(6, high: 3, low: 1), 3);
expect(D.bisectRight(7, high: 3, low: 1), 3);
expect(D.bisectRight(8, high: 3, low: 1), 3);
});

test('bisectRight for D, hi=0, lo=2', () {
expect(D.bisectRight(-2, high: 0, low: 2), 2);
expect(D.bisectRight(-1, high: 0, low: 2), 2);
expect(D.bisectRight(0, high: 0, low: 2), 2);
expect(D.bisectRight(1, high: 0, low: 2), 2);
expect(D.bisectRight(2, high: 0, low: 2), 2);
expect(D.bisectRight(3, high: 0, low: 2), 2);
expect(D.bisectRight(4, high: 0, low: 2), 2);
expect(D.bisectRight(5, high: 0, low: 2), 2);
expect(D.bisectRight(6, high: 0, low: 2), 2);
expect(D.bisectRight(7, high: 0, low: 2), 2);
expect(D.bisectRight(8, high: 0, low: 2), 2);
});

test('bisectRight for D, hi=1, lo=2', () {
expect(D.bisectRight(-2, high: 1, low: 2), 2);
expect(D.bisectRight(-1, high: 1, low: 2), 2);
expect(D.bisectRight(0, high: 1, low: 2), 2);
expect(D.bisectRight(1, high: 1, low: 2), 2);
expect(D.bisectRight(2, high: 1, low: 2), 2);
expect(D.bisectRight(3, high: 1, low: 2), 2);
expect(D.bisectRight(4, high: 1, low: 2), 2);
expect(D.bisectRight(5, high: 1, low: 2), 2);
expect(D.bisectRight(6, high: 1, low: 2), 2);
expect(D.bisectRight(7, high: 1, low: 2), 2);
expect(D.bisectRight(8, high: 1, low: 2), 2);
});

test('bisectRight for D, hi=2, lo=2', () {
expect(D.bisectRight(-2, high: 2, low: 2), 2);
expect(D.bisectRight(-1, high: 2, low: 2), 2);
expect(D.bisectRight(0, high: 2, low: 2), 2);
expect(D.bisectRight(1, high: 2, low: 2), 2);
expect(D.bisectRight(2, high: 2, low: 2), 2);
expect(D.bisectRight(3, high: 2, low: 2), 2);
expect(D.bisectRight(4, high: 2, low: 2), 2);
expect(D.bisectRight(5, high: 2, low: 2), 2);
expect(D.bisectRight(6, high: 2, low: 2), 2);
expect(D.bisectRight(7, high: 2, low: 2), 2);
expect(D.bisectRight(8, high: 2, low: 2), 2);
});

test('bisectRight for D, hi=3, lo=2', () {
expect(D.bisectRight(-2, high: 3, low: 2), 2);
expect(D.bisectRight(-1, high: 3, low: 2), 2);
expect(D.bisectRight(0, high: 3, low: 2), 2);
expect(D.bisectRight(1, high: 3, low: 2), 2);
expect(D.bisectRight(2, high: 3, low: 2), 2);
expect(D.bisectRight(3, high: 3, low: 2), 2);
expect(D.bisectRight(4, high: 3, low: 2), 3);
expect(D.bisectRight(5, high: 3, low: 2), 3);
expect(D.bisectRight(6, high: 3, low: 2), 3);
expect(D.bisectRight(7, high: 3, low: 2), 3);
expect(D.bisectRight(8, high: 3, low: 2), 3);
});

test('bisectRight for D, hi=0, lo=3', () {
expect(D.bisectRight(-2, high: 0, low: 3), 3);
expect(D.bisectRight(-1, high: 0, low: 3), 3);
expect(D.bisectRight(0, high: 0, low: 3), 3);
expect(D.bisectRight(1, high: 0, low: 3), 3);
expect(D.bisectRight(2, high: 0, low: 3), 3);
expect(D.bisectRight(3, high: 0, low: 3), 3);
expect(D.bisectRight(4, high: 0, low: 3), 3);
expect(D.bisectRight(5, high: 0, low: 3), 3);
expect(D.bisectRight(6, high: 0, low: 3), 3);
expect(D.bisectRight(7, high: 0, low: 3), 3);
expect(D.bisectRight(8, high: 0, low: 3), 3);
});

test('bisectRight for D, hi=1, lo=3', () {
expect(D.bisectRight(-2, high: 1, low: 3), 3);
expect(D.bisectRight(-1, high: 1, low: 3), 3);
expect(D.bisectRight(0, high: 1, low: 3), 3);
expect(D.bisectRight(1, high: 1, low: 3), 3);
expect(D.bisectRight(2, high: 1, low: 3), 3);
expect(D.bisectRight(3, high: 1, low: 3), 3);
expect(D.bisectRight(4, high: 1, low: 3), 3);
expect(D.bisectRight(5, high: 1, low: 3), 3);
expect(D.bisectRight(6, high: 1, low: 3), 3);
expect(D.bisectRight(7, high: 1, low: 3), 3);
expect(D.bisectRight(8, high: 1, low: 3), 3);
});

test('bisectRight for D, hi=2, lo=3', () {
expect(D.bisectRight(-2, high: 2, low: 3), 3);
expect(D.bisectRight(-1, high: 2, low: 3), 3);
expect(D.bisectRight(0, high: 2, low: 3), 3);
expect(D.bisectRight(1, high: 2, low: 3), 3);
expect(D.bisectRight(2, high: 2, low: 3), 3);
expect(D.bisectRight(3, high: 2, low: 3), 3);
expect(D.bisectRight(4, high: 2, low: 3), 3);
expect(D.bisectRight(5, high: 2, low: 3), 3);
expect(D.bisectRight(6, high: 2, low: 3), 3);
expect(D.bisectRight(7, high: 2, low: 3), 3);
expect(D.bisectRight(8, high: 2, low: 3), 3);
});

test('bisectRight for D, hi=3, lo=3', () {
expect(D.bisectRight(-2, high: 3, low: 3), 3);
expect(D.bisectRight(-1, high: 3, low: 3), 3);
expect(D.bisectRight(0, high: 3, low: 3), 3);
expect(D.bisectRight(1, high: 3, low: 3), 3);
expect(D.bisectRight(2, high: 3, low: 3), 3);
expect(D.bisectRight(3, high: 3, low: 3), 3);
expect(D.bisectRight(4, high: 3, low: 3), 3);
expect(D.bisectRight(5, high: 3, low: 3), 3);
expect(D.bisectRight(6, high: 3, low: 3), 3);
expect(D.bisectRight(7, high: 3, low: 3), 3);
expect(D.bisectRight(8, high: 3, low: 3), 3);
});

test('bisectRight for D, hi=0, lo=4', () {
expect(D.bisectRight(-2, high: 0, low: 4), 4);
expect(D.bisectRight(-1, high: 0, low: 4), 4);
expect(D.bisectRight(0, high: 0, low: 4), 4);
expect(D.bisectRight(1, high: 0, low: 4), 4);
expect(D.bisectRight(2, high: 0, low: 4), 4);
expect(D.bisectRight(3, high: 0, low: 4), 4);
expect(D.bisectRight(4, high: 0, low: 4), 4);
expect(D.bisectRight(5, high: 0, low: 4), 4);
expect(D.bisectRight(6, high: 0, low: 4), 4);
expect(D.bisectRight(7, high: 0, low: 4), 4);
expect(D.bisectRight(8, high: 0, low: 4), 4);
});

test('bisectRight for D, hi=1, lo=4', () {
expect(D.bisectRight(-2, high: 1, low: 4), 4);
expect(D.bisectRight(-1, high: 1, low: 4), 4);
expect(D.bisectRight(0, high: 1, low: 4), 4);
expect(D.bisectRight(1, high: 1, low: 4), 4);
expect(D.bisectRight(2, high: 1, low: 4), 4);
expect(D.bisectRight(3, high: 1, low: 4), 4);
expect(D.bisectRight(4, high: 1, low: 4), 4);
expect(D.bisectRight(5, high: 1, low: 4), 4);
expect(D.bisectRight(6, high: 1, low: 4), 4);
expect(D.bisectRight(7, high: 1, low: 4), 4);
expect(D.bisectRight(8, high: 1, low: 4), 4);
});

test('bisectRight for D, hi=2, lo=4', () {
expect(D.bisectRight(-2, high: 2, low: 4), 4);
expect(D.bisectRight(-1, high: 2, low: 4), 4);
expect(D.bisectRight(0, high: 2, low: 4), 4);
expect(D.bisectRight(1, high: 2, low: 4), 4);
expect(D.bisectRight(2, high: 2, low: 4), 4);
expect(D.bisectRight(3, high: 2, low: 4), 4);
expect(D.bisectRight(4, high: 2, low: 4), 4);
expect(D.bisectRight(5, high: 2, low: 4), 4);
expect(D.bisectRight(6, high: 2, low: 4), 4);
expect(D.bisectRight(7, high: 2, low: 4), 4);
expect(D.bisectRight(8, high: 2, low: 4), 4);
});

test('bisectRight for D, hi=3, lo=4', () {
expect(D.bisectRight(-2, high: 3, low: 4), 4);
expect(D.bisectRight(-1, high: 3, low: 4), 4);
expect(D.bisectRight(0, high: 3, low: 4), 4);
expect(D.bisectRight(1, high: 3, low: 4), 4);
expect(D.bisectRight(2, high: 3, low: 4), 4);
expect(D.bisectRight(3, high: 3, low: 4), 4);
expect(D.bisectRight(4, high: 3, low: 4), 4);
expect(D.bisectRight(5, high: 3, low: 4), 4);
expect(D.bisectRight(6, high: 3, low: 4), 4);
expect(D.bisectRight(7, high: 3, low: 4), 4);
expect(D.bisectRight(8, high: 3, low: 4), 4);
});

test('bisectRight for D, hi=0, lo=5', () {
expect(D.bisectRight(-2, high: 0, low: 5), 5);
expect(D.bisectRight(-1, high: 0, low: 5), 5);
expect(D.bisectRight(0, high: 0, low: 5), 5);
expect(D.bisectRight(1, high: 0, low: 5), 5);
expect(D.bisectRight(2, high: 0, low: 5), 5);
expect(D.bisectRight(3, high: 0, low: 5), 5);
expect(D.bisectRight(4, high: 0, low: 5), 5);
expect(D.bisectRight(5, high: 0, low: 5), 5);
expect(D.bisectRight(6, high: 0, low: 5), 5);
expect(D.bisectRight(7, high: 0, low: 5), 5);
expect(D.bisectRight(8, high: 0, low: 5), 5);
});

test('bisectRight for D, hi=1, lo=5', () {
expect(D.bisectRight(-2, high: 1, low: 5), 5);
expect(D.bisectRight(-1, high: 1, low: 5), 5);
expect(D.bisectRight(0, high: 1, low: 5), 5);
expect(D.bisectRight(1, high: 1, low: 5), 5);
expect(D.bisectRight(2, high: 1, low: 5), 5);
expect(D.bisectRight(3, high: 1, low: 5), 5);
expect(D.bisectRight(4, high: 1, low: 5), 5);
expect(D.bisectRight(5, high: 1, low: 5), 5);
expect(D.bisectRight(6, high: 1, low: 5), 5);
expect(D.bisectRight(7, high: 1, low: 5), 5);
expect(D.bisectRight(8, high: 1, low: 5), 5);
});

test('bisectRight for D, hi=2, lo=5', () {
expect(D.bisectRight(-2, high: 2, low: 5), 5);
expect(D.bisectRight(-1, high: 2, low: 5), 5);
expect(D.bisectRight(0, high: 2, low: 5), 5);
expect(D.bisectRight(1, high: 2, low: 5), 5);
expect(D.bisectRight(2, high: 2, low: 5), 5);
expect(D.bisectRight(3, high: 2, low: 5), 5);
expect(D.bisectRight(4, high: 2, low: 5), 5);
expect(D.bisectRight(5, high: 2, low: 5), 5);
expect(D.bisectRight(6, high: 2, low: 5), 5);
expect(D.bisectRight(7, high: 2, low: 5), 5);
expect(D.bisectRight(8, high: 2, low: 5), 5);
});

test('bisectRight for D, hi=3, lo=5', () {
expect(D.bisectRight(-2, high: 3, low: 5), 5);
expect(D.bisectRight(-1, high: 3, low: 5), 5);
expect(D.bisectRight(0, high: 3, low: 5), 5);
expect(D.bisectRight(1, high: 3, low: 5), 5);
expect(D.bisectRight(2, high: 3, low: 5), 5);
expect(D.bisectRight(3, high: 3, low: 5), 5);
expect(D.bisectRight(4, high: 3, low: 5), 5);
expect(D.bisectRight(5, high: 3, low: 5), 5);
expect(D.bisectRight(6, high: 3, low: 5), 5);
expect(D.bisectRight(7, high: 3, low: 5), 5);
expect(D.bisectRight(8, high: 3, low: 5), 5);
});

test('bisectRight for D, hi=0, lo=6', () {
expect(D.bisectRight(-2, high: 0, low: 6), 6);
expect(D.bisectRight(-1, high: 0, low: 6), 6);
expect(D.bisectRight(0, high: 0, low: 6), 6);
expect(D.bisectRight(1, high: 0, low: 6), 6);
expect(D.bisectRight(2, high: 0, low: 6), 6);
expect(D.bisectRight(3, high: 0, low: 6), 6);
expect(D.bisectRight(4, high: 0, low: 6), 6);
expect(D.bisectRight(5, high: 0, low: 6), 6);
expect(D.bisectRight(6, high: 0, low: 6), 6);
expect(D.bisectRight(7, high: 0, low: 6), 6);
expect(D.bisectRight(8, high: 0, low: 6), 6);
});

test('bisectRight for D, hi=1, lo=6', () {
expect(D.bisectRight(-2, high: 1, low: 6), 6);
expect(D.bisectRight(-1, high: 1, low: 6), 6);
expect(D.bisectRight(0, high: 1, low: 6), 6);
expect(D.bisectRight(1, high: 1, low: 6), 6);
expect(D.bisectRight(2, high: 1, low: 6), 6);
expect(D.bisectRight(3, high: 1, low: 6), 6);
expect(D.bisectRight(4, high: 1, low: 6), 6);
expect(D.bisectRight(5, high: 1, low: 6), 6);
expect(D.bisectRight(6, high: 1, low: 6), 6);
expect(D.bisectRight(7, high: 1, low: 6), 6);
expect(D.bisectRight(8, high: 1, low: 6), 6);
});

test('bisectRight for D, hi=2, lo=6', () {
expect(D.bisectRight(-2, high: 2, low: 6), 6);
expect(D.bisectRight(-1, high: 2, low: 6), 6);
expect(D.bisectRight(0, high: 2, low: 6), 6);
expect(D.bisectRight(1, high: 2, low: 6), 6);
expect(D.bisectRight(2, high: 2, low: 6), 6);
expect(D.bisectRight(3, high: 2, low: 6), 6);
expect(D.bisectRight(4, high: 2, low: 6), 6);
expect(D.bisectRight(5, high: 2, low: 6), 6);
expect(D.bisectRight(6, high: 2, low: 6), 6);
expect(D.bisectRight(7, high: 2, low: 6), 6);
expect(D.bisectRight(8, high: 2, low: 6), 6);
});

test('bisectRight for D, hi=3, lo=6', () {
expect(D.bisectRight(-2, high: 3, low: 6), 6);
expect(D.bisectRight(-1, high: 3, low: 6), 6);
expect(D.bisectRight(0, high: 3, low: 6), 6);
expect(D.bisectRight(1, high: 3, low: 6), 6);
expect(D.bisectRight(2, high: 3, low: 6), 6);
expect(D.bisectRight(3, high: 3, low: 6), 6);
expect(D.bisectRight(4, high: 3, low: 6), 6);
expect(D.bisectRight(5, high: 3, low: 6), 6);
expect(D.bisectRight(6, high: 3, low: 6), 6);
expect(D.bisectRight(7, high: 3, low: 6), 6);
expect(D.bisectRight(8, high: 3, low: 6), 6);
});

test('bisectLeft for A, hi=0, lo=0', () {
expect(A.bisectLeft(-2, high: 0, low: 0), 0);
expect(A.bisectLeft(-1, high: 0, low: 0), 0);
expect(A.bisectLeft(0, high: 0, low: 0), 0);
expect(A.bisectLeft(1, high: 0, low: 0), 0);
expect(A.bisectLeft(2, high: 0, low: 0), 0);
expect(A.bisectLeft(3, high: 0, low: 0), 0);
expect(A.bisectLeft(4, high: 0, low: 0), 0);
expect(A.bisectLeft(5, high: 0, low: 0), 0);
expect(A.bisectLeft(6, high: 0, low: 0), 0);
expect(A.bisectLeft(7, high: 0, low: 0), 0);
expect(A.bisectLeft(8, high: 0, low: 0), 0);
});

test('bisectLeft for A, hi=1, lo=0', () {
expect(A.bisectLeft(-2, high: 1, low: 0), 0);
expect(A.bisectLeft(-1, high: 1, low: 0), 0);
expect(A.bisectLeft(0, high: 1, low: 0), 0);
expect(A.bisectLeft(1, high: 1, low: 0), 1);
expect(A.bisectLeft(2, high: 1, low: 0), 1);
expect(A.bisectLeft(3, high: 1, low: 0), 1);
expect(A.bisectLeft(4, high: 1, low: 0), 1);
expect(A.bisectLeft(5, high: 1, low: 0), 1);
expect(A.bisectLeft(6, high: 1, low: 0), 1);
expect(A.bisectLeft(7, high: 1, low: 0), 1);
expect(A.bisectLeft(8, high: 1, low: 0), 1);
});

test('bisectLeft for A, hi=2, lo=0', () {
expect(A.bisectLeft(-2, high: 2, low: 0), 0);
expect(A.bisectLeft(-1, high: 2, low: 0), 0);
expect(A.bisectLeft(0, high: 2, low: 0), 0);
expect(A.bisectLeft(1, high: 2, low: 0), 1);
expect(A.bisectLeft(2, high: 2, low: 0), 2);
expect(A.bisectLeft(3, high: 2, low: 0), 2);
expect(A.bisectLeft(4, high: 2, low: 0), 2);
expect(A.bisectLeft(5, high: 2, low: 0), 2);
expect(A.bisectLeft(6, high: 2, low: 0), 2);
expect(A.bisectLeft(7, high: 2, low: 0), 2);
expect(A.bisectLeft(8, high: 2, low: 0), 2);
});

test('bisectLeft for A, hi=3, lo=0', () {
expect(A.bisectLeft(-2, high: 3, low: 0), 0);
expect(A.bisectLeft(-1, high: 3, low: 0), 0);
expect(A.bisectLeft(0, high: 3, low: 0), 0);
expect(A.bisectLeft(1, high: 3, low: 0), 1);
expect(A.bisectLeft(2, high: 3, low: 0), 2);
expect(A.bisectLeft(3, high: 3, low: 0), 3);
expect(A.bisectLeft(4, high: 3, low: 0), 3);
expect(A.bisectLeft(5, high: 3, low: 0), 3);
expect(A.bisectLeft(6, high: 3, low: 0), 3);
expect(A.bisectLeft(7, high: 3, low: 0), 3);
expect(A.bisectLeft(8, high: 3, low: 0), 3);
});

test('bisectLeft for A, hi=4, lo=0', () {
expect(A.bisectLeft(-2, high: 4, low: 0), 0);
expect(A.bisectLeft(-1, high: 4, low: 0), 0);
expect(A.bisectLeft(0, high: 4, low: 0), 0);
expect(A.bisectLeft(1, high: 4, low: 0), 1);
expect(A.bisectLeft(2, high: 4, low: 0), 2);
expect(A.bisectLeft(3, high: 4, low: 0), 4);
expect(A.bisectLeft(4, high: 4, low: 0), 4);
expect(A.bisectLeft(5, high: 4, low: 0), 4);
expect(A.bisectLeft(6, high: 4, low: 0), 4);
expect(A.bisectLeft(7, high: 4, low: 0), 4);
expect(A.bisectLeft(8, high: 4, low: 0), 4);
});

test('bisectLeft for A, hi=5, lo=0', () {
expect(A.bisectLeft(-2, high: 5, low: 0), 0);
expect(A.bisectLeft(-1, high: 5, low: 0), 0);
expect(A.bisectLeft(0, high: 5, low: 0), 0);
expect(A.bisectLeft(1, high: 5, low: 0), 1);
expect(A.bisectLeft(2, high: 5, low: 0), 2);
expect(A.bisectLeft(3, high: 5, low: 0), 5);
expect(A.bisectLeft(4, high: 5, low: 0), 5);
expect(A.bisectLeft(5, high: 5, low: 0), 5);
expect(A.bisectLeft(6, high: 5, low: 0), 5);
expect(A.bisectLeft(7, high: 5, low: 0), 5);
expect(A.bisectLeft(8, high: 5, low: 0), 5);
});

test('bisectLeft for A, hi=6, lo=0', () {
expect(A.bisectLeft(-2, high: 6, low: 0), 0);
expect(A.bisectLeft(-1, high: 6, low: 0), 0);
expect(A.bisectLeft(0, high: 6, low: 0), 0);
expect(A.bisectLeft(1, high: 6, low: 0), 1);
expect(A.bisectLeft(2, high: 6, low: 0), 2);
expect(A.bisectLeft(3, high: 6, low: 0), 6);
expect(A.bisectLeft(4, high: 6, low: 0), 6);
expect(A.bisectLeft(5, high: 6, low: 0), 6);
expect(A.bisectLeft(6, high: 6, low: 0), 6);
expect(A.bisectLeft(7, high: 6, low: 0), 6);
expect(A.bisectLeft(8, high: 6, low: 0), 6);
});

test('bisectLeft for A, hi=7, lo=0', () {
expect(A.bisectLeft(-2, high: 7, low: 0), 0);
expect(A.bisectLeft(-1, high: 7, low: 0), 0);
expect(A.bisectLeft(0, high: 7, low: 0), 0);
expect(A.bisectLeft(1, high: 7, low: 0), 1);
expect(A.bisectLeft(2, high: 7, low: 0), 2);
expect(A.bisectLeft(3, high: 7, low: 0), 6);
expect(A.bisectLeft(4, high: 7, low: 0), 7);
expect(A.bisectLeft(5, high: 7, low: 0), 7);
expect(A.bisectLeft(6, high: 7, low: 0), 7);
expect(A.bisectLeft(7, high: 7, low: 0), 7);
expect(A.bisectLeft(8, high: 7, low: 0), 7);
});

test('bisectLeft for A, hi=8, lo=0', () {
expect(A.bisectLeft(-2, high: 8, low: 0), 0);
expect(A.bisectLeft(-1, high: 8, low: 0), 0);
expect(A.bisectLeft(0, high: 8, low: 0), 0);
expect(A.bisectLeft(1, high: 8, low: 0), 1);
expect(A.bisectLeft(2, high: 8, low: 0), 2);
expect(A.bisectLeft(3, high: 8, low: 0), 6);
expect(A.bisectLeft(4, high: 8, low: 0), 8);
expect(A.bisectLeft(5, high: 8, low: 0), 8);
expect(A.bisectLeft(6, high: 8, low: 0), 8);
expect(A.bisectLeft(7, high: 8, low: 0), 8);
expect(A.bisectLeft(8, high: 8, low: 0), 8);
});

test('bisectLeft for A, hi=9, lo=0', () {
expect(A.bisectLeft(-2, high: 9, low: 0), 0);
expect(A.bisectLeft(-1, high: 9, low: 0), 0);
expect(A.bisectLeft(0, high: 9, low: 0), 0);
expect(A.bisectLeft(1, high: 9, low: 0), 1);
expect(A.bisectLeft(2, high: 9, low: 0), 2);
expect(A.bisectLeft(3, high: 9, low: 0), 6);
expect(A.bisectLeft(4, high: 9, low: 0), 8);
expect(A.bisectLeft(5, high: 9, low: 0), 8);
expect(A.bisectLeft(6, high: 9, low: 0), 9);
expect(A.bisectLeft(7, high: 9, low: 0), 9);
expect(A.bisectLeft(8, high: 9, low: 0), 9);
});

test('bisectLeft for A, hi=10, lo=0', () {
expect(A.bisectLeft(-2, high: 10, low: 0), 0);
expect(A.bisectLeft(-1, high: 10, low: 0), 0);
expect(A.bisectLeft(0, high: 10, low: 0), 0);
expect(A.bisectLeft(1, high: 10, low: 0), 1);
expect(A.bisectLeft(2, high: 10, low: 0), 2);
expect(A.bisectLeft(3, high: 10, low: 0), 6);
expect(A.bisectLeft(4, high: 10, low: 0), 8);
expect(A.bisectLeft(5, high: 10, low: 0), 8);
expect(A.bisectLeft(6, high: 10, low: 0), 9);
expect(A.bisectLeft(7, high: 10, low: 0), 10);
expect(A.bisectLeft(8, high: 10, low: 0), 10);
});

test('bisectLeft for A, hi=0, lo=1', () {
expect(A.bisectLeft(-2, high: 0, low: 1), 1);
expect(A.bisectLeft(-1, high: 0, low: 1), 1);
expect(A.bisectLeft(0, high: 0, low: 1), 1);
expect(A.bisectLeft(1, high: 0, low: 1), 1);
expect(A.bisectLeft(2, high: 0, low: 1), 1);
expect(A.bisectLeft(3, high: 0, low: 1), 1);
expect(A.bisectLeft(4, high: 0, low: 1), 1);
expect(A.bisectLeft(5, high: 0, low: 1), 1);
expect(A.bisectLeft(6, high: 0, low: 1), 1);
expect(A.bisectLeft(7, high: 0, low: 1), 1);
expect(A.bisectLeft(8, high: 0, low: 1), 1);
});

test('bisectLeft for A, hi=1, lo=1', () {
expect(A.bisectLeft(-2, high: 1, low: 1), 1);
expect(A.bisectLeft(-1, high: 1, low: 1), 1);
expect(A.bisectLeft(0, high: 1, low: 1), 1);
expect(A.bisectLeft(1, high: 1, low: 1), 1);
expect(A.bisectLeft(2, high: 1, low: 1), 1);
expect(A.bisectLeft(3, high: 1, low: 1), 1);
expect(A.bisectLeft(4, high: 1, low: 1), 1);
expect(A.bisectLeft(5, high: 1, low: 1), 1);
expect(A.bisectLeft(6, high: 1, low: 1), 1);
expect(A.bisectLeft(7, high: 1, low: 1), 1);
expect(A.bisectLeft(8, high: 1, low: 1), 1);
});

test('bisectLeft for A, hi=2, lo=1', () {
expect(A.bisectLeft(-2, high: 2, low: 1), 1);
expect(A.bisectLeft(-1, high: 2, low: 1), 1);
expect(A.bisectLeft(0, high: 2, low: 1), 1);
expect(A.bisectLeft(1, high: 2, low: 1), 1);
expect(A.bisectLeft(2, high: 2, low: 1), 2);
expect(A.bisectLeft(3, high: 2, low: 1), 2);
expect(A.bisectLeft(4, high: 2, low: 1), 2);
expect(A.bisectLeft(5, high: 2, low: 1), 2);
expect(A.bisectLeft(6, high: 2, low: 1), 2);
expect(A.bisectLeft(7, high: 2, low: 1), 2);
expect(A.bisectLeft(8, high: 2, low: 1), 2);
});

test('bisectLeft for A, hi=3, lo=1', () {
expect(A.bisectLeft(-2, high: 3, low: 1), 1);
expect(A.bisectLeft(-1, high: 3, low: 1), 1);
expect(A.bisectLeft(0, high: 3, low: 1), 1);
expect(A.bisectLeft(1, high: 3, low: 1), 1);
expect(A.bisectLeft(2, high: 3, low: 1), 2);
expect(A.bisectLeft(3, high: 3, low: 1), 3);
expect(A.bisectLeft(4, high: 3, low: 1), 3);
expect(A.bisectLeft(5, high: 3, low: 1), 3);
expect(A.bisectLeft(6, high: 3, low: 1), 3);
expect(A.bisectLeft(7, high: 3, low: 1), 3);
expect(A.bisectLeft(8, high: 3, low: 1), 3);
});

test('bisectLeft for A, hi=4, lo=1', () {
expect(A.bisectLeft(-2, high: 4, low: 1), 1);
expect(A.bisectLeft(-1, high: 4, low: 1), 1);
expect(A.bisectLeft(0, high: 4, low: 1), 1);
expect(A.bisectLeft(1, high: 4, low: 1), 1);
expect(A.bisectLeft(2, high: 4, low: 1), 2);
expect(A.bisectLeft(3, high: 4, low: 1), 4);
expect(A.bisectLeft(4, high: 4, low: 1), 4);
expect(A.bisectLeft(5, high: 4, low: 1), 4);
expect(A.bisectLeft(6, high: 4, low: 1), 4);
expect(A.bisectLeft(7, high: 4, low: 1), 4);
expect(A.bisectLeft(8, high: 4, low: 1), 4);
});

test('bisectLeft for A, hi=5, lo=1', () {
expect(A.bisectLeft(-2, high: 5, low: 1), 1);
expect(A.bisectLeft(-1, high: 5, low: 1), 1);
expect(A.bisectLeft(0, high: 5, low: 1), 1);
expect(A.bisectLeft(1, high: 5, low: 1), 1);
expect(A.bisectLeft(2, high: 5, low: 1), 2);
expect(A.bisectLeft(3, high: 5, low: 1), 5);
expect(A.bisectLeft(4, high: 5, low: 1), 5);
expect(A.bisectLeft(5, high: 5, low: 1), 5);
expect(A.bisectLeft(6, high: 5, low: 1), 5);
expect(A.bisectLeft(7, high: 5, low: 1), 5);
expect(A.bisectLeft(8, high: 5, low: 1), 5);
});

test('bisectLeft for A, hi=6, lo=1', () {
expect(A.bisectLeft(-2, high: 6, low: 1), 1);
expect(A.bisectLeft(-1, high: 6, low: 1), 1);
expect(A.bisectLeft(0, high: 6, low: 1), 1);
expect(A.bisectLeft(1, high: 6, low: 1), 1);
expect(A.bisectLeft(2, high: 6, low: 1), 2);
expect(A.bisectLeft(3, high: 6, low: 1), 6);
expect(A.bisectLeft(4, high: 6, low: 1), 6);
expect(A.bisectLeft(5, high: 6, low: 1), 6);
expect(A.bisectLeft(6, high: 6, low: 1), 6);
expect(A.bisectLeft(7, high: 6, low: 1), 6);
expect(A.bisectLeft(8, high: 6, low: 1), 6);
});

test('bisectLeft for A, hi=7, lo=1', () {
expect(A.bisectLeft(-2, high: 7, low: 1), 1);
expect(A.bisectLeft(-1, high: 7, low: 1), 1);
expect(A.bisectLeft(0, high: 7, low: 1), 1);
expect(A.bisectLeft(1, high: 7, low: 1), 1);
expect(A.bisectLeft(2, high: 7, low: 1), 2);
expect(A.bisectLeft(3, high: 7, low: 1), 6);
expect(A.bisectLeft(4, high: 7, low: 1), 7);
expect(A.bisectLeft(5, high: 7, low: 1), 7);
expect(A.bisectLeft(6, high: 7, low: 1), 7);
expect(A.bisectLeft(7, high: 7, low: 1), 7);
expect(A.bisectLeft(8, high: 7, low: 1), 7);
});

test('bisectLeft for A, hi=8, lo=1', () {
expect(A.bisectLeft(-2, high: 8, low: 1), 1);
expect(A.bisectLeft(-1, high: 8, low: 1), 1);
expect(A.bisectLeft(0, high: 8, low: 1), 1);
expect(A.bisectLeft(1, high: 8, low: 1), 1);
expect(A.bisectLeft(2, high: 8, low: 1), 2);
expect(A.bisectLeft(3, high: 8, low: 1), 6);
expect(A.bisectLeft(4, high: 8, low: 1), 8);
expect(A.bisectLeft(5, high: 8, low: 1), 8);
expect(A.bisectLeft(6, high: 8, low: 1), 8);
expect(A.bisectLeft(7, high: 8, low: 1), 8);
expect(A.bisectLeft(8, high: 8, low: 1), 8);
});

test('bisectLeft for A, hi=9, lo=1', () {
expect(A.bisectLeft(-2, high: 9, low: 1), 1);
expect(A.bisectLeft(-1, high: 9, low: 1), 1);
expect(A.bisectLeft(0, high: 9, low: 1), 1);
expect(A.bisectLeft(1, high: 9, low: 1), 1);
expect(A.bisectLeft(2, high: 9, low: 1), 2);
expect(A.bisectLeft(3, high: 9, low: 1), 6);
expect(A.bisectLeft(4, high: 9, low: 1), 8);
expect(A.bisectLeft(5, high: 9, low: 1), 8);
expect(A.bisectLeft(6, high: 9, low: 1), 9);
expect(A.bisectLeft(7, high: 9, low: 1), 9);
expect(A.bisectLeft(8, high: 9, low: 1), 9);
});

test('bisectLeft for A, hi=10, lo=1', () {
expect(A.bisectLeft(-2, high: 10, low: 1), 1);
expect(A.bisectLeft(-1, high: 10, low: 1), 1);
expect(A.bisectLeft(0, high: 10, low: 1), 1);
expect(A.bisectLeft(1, high: 10, low: 1), 1);
expect(A.bisectLeft(2, high: 10, low: 1), 2);
expect(A.bisectLeft(3, high: 10, low: 1), 6);
expect(A.bisectLeft(4, high: 10, low: 1), 8);
expect(A.bisectLeft(5, high: 10, low: 1), 8);
expect(A.bisectLeft(6, high: 10, low: 1), 9);
expect(A.bisectLeft(7, high: 10, low: 1), 10);
expect(A.bisectLeft(8, high: 10, low: 1), 10);
});

test('bisectLeft for A, hi=0, lo=2', () {
expect(A.bisectLeft(-2, high: 0, low: 2), 2);
expect(A.bisectLeft(-1, high: 0, low: 2), 2);
expect(A.bisectLeft(0, high: 0, low: 2), 2);
expect(A.bisectLeft(1, high: 0, low: 2), 2);
expect(A.bisectLeft(2, high: 0, low: 2), 2);
expect(A.bisectLeft(3, high: 0, low: 2), 2);
expect(A.bisectLeft(4, high: 0, low: 2), 2);
expect(A.bisectLeft(5, high: 0, low: 2), 2);
expect(A.bisectLeft(6, high: 0, low: 2), 2);
expect(A.bisectLeft(7, high: 0, low: 2), 2);
expect(A.bisectLeft(8, high: 0, low: 2), 2);
});

test('bisectLeft for A, hi=1, lo=2', () {
expect(A.bisectLeft(-2, high: 1, low: 2), 2);
expect(A.bisectLeft(-1, high: 1, low: 2), 2);
expect(A.bisectLeft(0, high: 1, low: 2), 2);
expect(A.bisectLeft(1, high: 1, low: 2), 2);
expect(A.bisectLeft(2, high: 1, low: 2), 2);
expect(A.bisectLeft(3, high: 1, low: 2), 2);
expect(A.bisectLeft(4, high: 1, low: 2), 2);
expect(A.bisectLeft(5, high: 1, low: 2), 2);
expect(A.bisectLeft(6, high: 1, low: 2), 2);
expect(A.bisectLeft(7, high: 1, low: 2), 2);
expect(A.bisectLeft(8, high: 1, low: 2), 2);
});

test('bisectLeft for A, hi=2, lo=2', () {
expect(A.bisectLeft(-2, high: 2, low: 2), 2);
expect(A.bisectLeft(-1, high: 2, low: 2), 2);
expect(A.bisectLeft(0, high: 2, low: 2), 2);
expect(A.bisectLeft(1, high: 2, low: 2), 2);
expect(A.bisectLeft(2, high: 2, low: 2), 2);
expect(A.bisectLeft(3, high: 2, low: 2), 2);
expect(A.bisectLeft(4, high: 2, low: 2), 2);
expect(A.bisectLeft(5, high: 2, low: 2), 2);
expect(A.bisectLeft(6, high: 2, low: 2), 2);
expect(A.bisectLeft(7, high: 2, low: 2), 2);
expect(A.bisectLeft(8, high: 2, low: 2), 2);
});

test('bisectLeft for A, hi=3, lo=2', () {
expect(A.bisectLeft(-2, high: 3, low: 2), 2);
expect(A.bisectLeft(-1, high: 3, low: 2), 2);
expect(A.bisectLeft(0, high: 3, low: 2), 2);
expect(A.bisectLeft(1, high: 3, low: 2), 2);
expect(A.bisectLeft(2, high: 3, low: 2), 2);
expect(A.bisectLeft(3, high: 3, low: 2), 3);
expect(A.bisectLeft(4, high: 3, low: 2), 3);
expect(A.bisectLeft(5, high: 3, low: 2), 3);
expect(A.bisectLeft(6, high: 3, low: 2), 3);
expect(A.bisectLeft(7, high: 3, low: 2), 3);
expect(A.bisectLeft(8, high: 3, low: 2), 3);
});

test('bisectLeft for A, hi=4, lo=2', () {
expect(A.bisectLeft(-2, high: 4, low: 2), 2);
expect(A.bisectLeft(-1, high: 4, low: 2), 2);
expect(A.bisectLeft(0, high: 4, low: 2), 2);
expect(A.bisectLeft(1, high: 4, low: 2), 2);
expect(A.bisectLeft(2, high: 4, low: 2), 2);
expect(A.bisectLeft(3, high: 4, low: 2), 4);
expect(A.bisectLeft(4, high: 4, low: 2), 4);
expect(A.bisectLeft(5, high: 4, low: 2), 4);
expect(A.bisectLeft(6, high: 4, low: 2), 4);
expect(A.bisectLeft(7, high: 4, low: 2), 4);
expect(A.bisectLeft(8, high: 4, low: 2), 4);
});

test('bisectLeft for A, hi=5, lo=2', () {
expect(A.bisectLeft(-2, high: 5, low: 2), 2);
expect(A.bisectLeft(-1, high: 5, low: 2), 2);
expect(A.bisectLeft(0, high: 5, low: 2), 2);
expect(A.bisectLeft(1, high: 5, low: 2), 2);
expect(A.bisectLeft(2, high: 5, low: 2), 2);
expect(A.bisectLeft(3, high: 5, low: 2), 5);
expect(A.bisectLeft(4, high: 5, low: 2), 5);
expect(A.bisectLeft(5, high: 5, low: 2), 5);
expect(A.bisectLeft(6, high: 5, low: 2), 5);
expect(A.bisectLeft(7, high: 5, low: 2), 5);
expect(A.bisectLeft(8, high: 5, low: 2), 5);
});

test('bisectLeft for A, hi=6, lo=2', () {
expect(A.bisectLeft(-2, high: 6, low: 2), 2);
expect(A.bisectLeft(-1, high: 6, low: 2), 2);
expect(A.bisectLeft(0, high: 6, low: 2), 2);
expect(A.bisectLeft(1, high: 6, low: 2), 2);
expect(A.bisectLeft(2, high: 6, low: 2), 2);
expect(A.bisectLeft(3, high: 6, low: 2), 6);
expect(A.bisectLeft(4, high: 6, low: 2), 6);
expect(A.bisectLeft(5, high: 6, low: 2), 6);
expect(A.bisectLeft(6, high: 6, low: 2), 6);
expect(A.bisectLeft(7, high: 6, low: 2), 6);
expect(A.bisectLeft(8, high: 6, low: 2), 6);
});

test('bisectLeft for A, hi=7, lo=2', () {
expect(A.bisectLeft(-2, high: 7, low: 2), 2);
expect(A.bisectLeft(-1, high: 7, low: 2), 2);
expect(A.bisectLeft(0, high: 7, low: 2), 2);
expect(A.bisectLeft(1, high: 7, low: 2), 2);
expect(A.bisectLeft(2, high: 7, low: 2), 2);
expect(A.bisectLeft(3, high: 7, low: 2), 6);
expect(A.bisectLeft(4, high: 7, low: 2), 7);
expect(A.bisectLeft(5, high: 7, low: 2), 7);
expect(A.bisectLeft(6, high: 7, low: 2), 7);
expect(A.bisectLeft(7, high: 7, low: 2), 7);
expect(A.bisectLeft(8, high: 7, low: 2), 7);
});

test('bisectLeft for A, hi=8, lo=2', () {
expect(A.bisectLeft(-2, high: 8, low: 2), 2);
expect(A.bisectLeft(-1, high: 8, low: 2), 2);
expect(A.bisectLeft(0, high: 8, low: 2), 2);
expect(A.bisectLeft(1, high: 8, low: 2), 2);
expect(A.bisectLeft(2, high: 8, low: 2), 2);
expect(A.bisectLeft(3, high: 8, low: 2), 6);
expect(A.bisectLeft(4, high: 8, low: 2), 8);
expect(A.bisectLeft(5, high: 8, low: 2), 8);
expect(A.bisectLeft(6, high: 8, low: 2), 8);
expect(A.bisectLeft(7, high: 8, low: 2), 8);
expect(A.bisectLeft(8, high: 8, low: 2), 8);
});

test('bisectLeft for A, hi=9, lo=2', () {
expect(A.bisectLeft(-2, high: 9, low: 2), 2);
expect(A.bisectLeft(-1, high: 9, low: 2), 2);
expect(A.bisectLeft(0, high: 9, low: 2), 2);
expect(A.bisectLeft(1, high: 9, low: 2), 2);
expect(A.bisectLeft(2, high: 9, low: 2), 2);
expect(A.bisectLeft(3, high: 9, low: 2), 6);
expect(A.bisectLeft(4, high: 9, low: 2), 8);
expect(A.bisectLeft(5, high: 9, low: 2), 8);
expect(A.bisectLeft(6, high: 9, low: 2), 9);
expect(A.bisectLeft(7, high: 9, low: 2), 9);
expect(A.bisectLeft(8, high: 9, low: 2), 9);
});

test('bisectLeft for A, hi=10, lo=2', () {
expect(A.bisectLeft(-2, high: 10, low: 2), 2);
expect(A.bisectLeft(-1, high: 10, low: 2), 2);
expect(A.bisectLeft(0, high: 10, low: 2), 2);
expect(A.bisectLeft(1, high: 10, low: 2), 2);
expect(A.bisectLeft(2, high: 10, low: 2), 2);
expect(A.bisectLeft(3, high: 10, low: 2), 6);
expect(A.bisectLeft(4, high: 10, low: 2), 8);
expect(A.bisectLeft(5, high: 10, low: 2), 8);
expect(A.bisectLeft(6, high: 10, low: 2), 9);
expect(A.bisectLeft(7, high: 10, low: 2), 10);
expect(A.bisectLeft(8, high: 10, low: 2), 10);
});

test('bisectLeft for A, hi=0, lo=3', () {
expect(A.bisectLeft(-2, high: 0, low: 3), 3);
expect(A.bisectLeft(-1, high: 0, low: 3), 3);
expect(A.bisectLeft(0, high: 0, low: 3), 3);
expect(A.bisectLeft(1, high: 0, low: 3), 3);
expect(A.bisectLeft(2, high: 0, low: 3), 3);
expect(A.bisectLeft(3, high: 0, low: 3), 3);
expect(A.bisectLeft(4, high: 0, low: 3), 3);
expect(A.bisectLeft(5, high: 0, low: 3), 3);
expect(A.bisectLeft(6, high: 0, low: 3), 3);
expect(A.bisectLeft(7, high: 0, low: 3), 3);
expect(A.bisectLeft(8, high: 0, low: 3), 3);
});

test('bisectLeft for A, hi=1, lo=3', () {
expect(A.bisectLeft(-2, high: 1, low: 3), 3);
expect(A.bisectLeft(-1, high: 1, low: 3), 3);
expect(A.bisectLeft(0, high: 1, low: 3), 3);
expect(A.bisectLeft(1, high: 1, low: 3), 3);
expect(A.bisectLeft(2, high: 1, low: 3), 3);
expect(A.bisectLeft(3, high: 1, low: 3), 3);
expect(A.bisectLeft(4, high: 1, low: 3), 3);
expect(A.bisectLeft(5, high: 1, low: 3), 3);
expect(A.bisectLeft(6, high: 1, low: 3), 3);
expect(A.bisectLeft(7, high: 1, low: 3), 3);
expect(A.bisectLeft(8, high: 1, low: 3), 3);
});

test('bisectLeft for A, hi=2, lo=3', () {
expect(A.bisectLeft(-2, high: 2, low: 3), 3);
expect(A.bisectLeft(-1, high: 2, low: 3), 3);
expect(A.bisectLeft(0, high: 2, low: 3), 3);
expect(A.bisectLeft(1, high: 2, low: 3), 3);
expect(A.bisectLeft(2, high: 2, low: 3), 3);
expect(A.bisectLeft(3, high: 2, low: 3), 3);
expect(A.bisectLeft(4, high: 2, low: 3), 3);
expect(A.bisectLeft(5, high: 2, low: 3), 3);
expect(A.bisectLeft(6, high: 2, low: 3), 3);
expect(A.bisectLeft(7, high: 2, low: 3), 3);
expect(A.bisectLeft(8, high: 2, low: 3), 3);
});

test('bisectLeft for A, hi=3, lo=3', () {
expect(A.bisectLeft(-2, high: 3, low: 3), 3);
expect(A.bisectLeft(-1, high: 3, low: 3), 3);
expect(A.bisectLeft(0, high: 3, low: 3), 3);
expect(A.bisectLeft(1, high: 3, low: 3), 3);
expect(A.bisectLeft(2, high: 3, low: 3), 3);
expect(A.bisectLeft(3, high: 3, low: 3), 3);
expect(A.bisectLeft(4, high: 3, low: 3), 3);
expect(A.bisectLeft(5, high: 3, low: 3), 3);
expect(A.bisectLeft(6, high: 3, low: 3), 3);
expect(A.bisectLeft(7, high: 3, low: 3), 3);
expect(A.bisectLeft(8, high: 3, low: 3), 3);
});

test('bisectLeft for A, hi=4, lo=3', () {
expect(A.bisectLeft(-2, high: 4, low: 3), 3);
expect(A.bisectLeft(-1, high: 4, low: 3), 3);
expect(A.bisectLeft(0, high: 4, low: 3), 3);
expect(A.bisectLeft(1, high: 4, low: 3), 3);
expect(A.bisectLeft(2, high: 4, low: 3), 3);
expect(A.bisectLeft(3, high: 4, low: 3), 4);
expect(A.bisectLeft(4, high: 4, low: 3), 4);
expect(A.bisectLeft(5, high: 4, low: 3), 4);
expect(A.bisectLeft(6, high: 4, low: 3), 4);
expect(A.bisectLeft(7, high: 4, low: 3), 4);
expect(A.bisectLeft(8, high: 4, low: 3), 4);
});

test('bisectLeft for A, hi=5, lo=3', () {
expect(A.bisectLeft(-2, high: 5, low: 3), 3);
expect(A.bisectLeft(-1, high: 5, low: 3), 3);
expect(A.bisectLeft(0, high: 5, low: 3), 3);
expect(A.bisectLeft(1, high: 5, low: 3), 3);
expect(A.bisectLeft(2, high: 5, low: 3), 3);
expect(A.bisectLeft(3, high: 5, low: 3), 5);
expect(A.bisectLeft(4, high: 5, low: 3), 5);
expect(A.bisectLeft(5, high: 5, low: 3), 5);
expect(A.bisectLeft(6, high: 5, low: 3), 5);
expect(A.bisectLeft(7, high: 5, low: 3), 5);
expect(A.bisectLeft(8, high: 5, low: 3), 5);
});

test('bisectLeft for A, hi=6, lo=3', () {
expect(A.bisectLeft(-2, high: 6, low: 3), 3);
expect(A.bisectLeft(-1, high: 6, low: 3), 3);
expect(A.bisectLeft(0, high: 6, low: 3), 3);
expect(A.bisectLeft(1, high: 6, low: 3), 3);
expect(A.bisectLeft(2, high: 6, low: 3), 3);
expect(A.bisectLeft(3, high: 6, low: 3), 6);
expect(A.bisectLeft(4, high: 6, low: 3), 6);
expect(A.bisectLeft(5, high: 6, low: 3), 6);
expect(A.bisectLeft(6, high: 6, low: 3), 6);
expect(A.bisectLeft(7, high: 6, low: 3), 6);
expect(A.bisectLeft(8, high: 6, low: 3), 6);
});

test('bisectLeft for A, hi=7, lo=3', () {
expect(A.bisectLeft(-2, high: 7, low: 3), 3);
expect(A.bisectLeft(-1, high: 7, low: 3), 3);
expect(A.bisectLeft(0, high: 7, low: 3), 3);
expect(A.bisectLeft(1, high: 7, low: 3), 3);
expect(A.bisectLeft(2, high: 7, low: 3), 3);
expect(A.bisectLeft(3, high: 7, low: 3), 6);
expect(A.bisectLeft(4, high: 7, low: 3), 7);
expect(A.bisectLeft(5, high: 7, low: 3), 7);
expect(A.bisectLeft(6, high: 7, low: 3), 7);
expect(A.bisectLeft(7, high: 7, low: 3), 7);
expect(A.bisectLeft(8, high: 7, low: 3), 7);
});

test('bisectLeft for A, hi=8, lo=3', () {
expect(A.bisectLeft(-2, high: 8, low: 3), 3);
expect(A.bisectLeft(-1, high: 8, low: 3), 3);
expect(A.bisectLeft(0, high: 8, low: 3), 3);
expect(A.bisectLeft(1, high: 8, low: 3), 3);
expect(A.bisectLeft(2, high: 8, low: 3), 3);
expect(A.bisectLeft(3, high: 8, low: 3), 6);
expect(A.bisectLeft(4, high: 8, low: 3), 8);
expect(A.bisectLeft(5, high: 8, low: 3), 8);
expect(A.bisectLeft(6, high: 8, low: 3), 8);
expect(A.bisectLeft(7, high: 8, low: 3), 8);
expect(A.bisectLeft(8, high: 8, low: 3), 8);
});

test('bisectLeft for A, hi=9, lo=3', () {
expect(A.bisectLeft(-2, high: 9, low: 3), 3);
expect(A.bisectLeft(-1, high: 9, low: 3), 3);
expect(A.bisectLeft(0, high: 9, low: 3), 3);
expect(A.bisectLeft(1, high: 9, low: 3), 3);
expect(A.bisectLeft(2, high: 9, low: 3), 3);
expect(A.bisectLeft(3, high: 9, low: 3), 6);
expect(A.bisectLeft(4, high: 9, low: 3), 8);
expect(A.bisectLeft(5, high: 9, low: 3), 8);
expect(A.bisectLeft(6, high: 9, low: 3), 9);
expect(A.bisectLeft(7, high: 9, low: 3), 9);
expect(A.bisectLeft(8, high: 9, low: 3), 9);
});

test('bisectLeft for A, hi=10, lo=3', () {
expect(A.bisectLeft(-2, high: 10, low: 3), 3);
expect(A.bisectLeft(-1, high: 10, low: 3), 3);
expect(A.bisectLeft(0, high: 10, low: 3), 3);
expect(A.bisectLeft(1, high: 10, low: 3), 3);
expect(A.bisectLeft(2, high: 10, low: 3), 3);
expect(A.bisectLeft(3, high: 10, low: 3), 6);
expect(A.bisectLeft(4, high: 10, low: 3), 8);
expect(A.bisectLeft(5, high: 10, low: 3), 8);
expect(A.bisectLeft(6, high: 10, low: 3), 9);
expect(A.bisectLeft(7, high: 10, low: 3), 10);
expect(A.bisectLeft(8, high: 10, low: 3), 10);
});

test('bisectLeft for A, hi=0, lo=4', () {
expect(A.bisectLeft(-2, high: 0, low: 4), 4);
expect(A.bisectLeft(-1, high: 0, low: 4), 4);
expect(A.bisectLeft(0, high: 0, low: 4), 4);
expect(A.bisectLeft(1, high: 0, low: 4), 4);
expect(A.bisectLeft(2, high: 0, low: 4), 4);
expect(A.bisectLeft(3, high: 0, low: 4), 4);
expect(A.bisectLeft(4, high: 0, low: 4), 4);
expect(A.bisectLeft(5, high: 0, low: 4), 4);
expect(A.bisectLeft(6, high: 0, low: 4), 4);
expect(A.bisectLeft(7, high: 0, low: 4), 4);
expect(A.bisectLeft(8, high: 0, low: 4), 4);
});

test('bisectLeft for A, hi=1, lo=4', () {
expect(A.bisectLeft(-2, high: 1, low: 4), 4);
expect(A.bisectLeft(-1, high: 1, low: 4), 4);
expect(A.bisectLeft(0, high: 1, low: 4), 4);
expect(A.bisectLeft(1, high: 1, low: 4), 4);
expect(A.bisectLeft(2, high: 1, low: 4), 4);
expect(A.bisectLeft(3, high: 1, low: 4), 4);
expect(A.bisectLeft(4, high: 1, low: 4), 4);
expect(A.bisectLeft(5, high: 1, low: 4), 4);
expect(A.bisectLeft(6, high: 1, low: 4), 4);
expect(A.bisectLeft(7, high: 1, low: 4), 4);
expect(A.bisectLeft(8, high: 1, low: 4), 4);
});

test('bisectLeft for A, hi=2, lo=4', () {
expect(A.bisectLeft(-2, high: 2, low: 4), 4);
expect(A.bisectLeft(-1, high: 2, low: 4), 4);
expect(A.bisectLeft(0, high: 2, low: 4), 4);
expect(A.bisectLeft(1, high: 2, low: 4), 4);
expect(A.bisectLeft(2, high: 2, low: 4), 4);
expect(A.bisectLeft(3, high: 2, low: 4), 4);
expect(A.bisectLeft(4, high: 2, low: 4), 4);
expect(A.bisectLeft(5, high: 2, low: 4), 4);
expect(A.bisectLeft(6, high: 2, low: 4), 4);
expect(A.bisectLeft(7, high: 2, low: 4), 4);
expect(A.bisectLeft(8, high: 2, low: 4), 4);
});

test('bisectLeft for A, hi=3, lo=4', () {
expect(A.bisectLeft(-2, high: 3, low: 4), 4);
expect(A.bisectLeft(-1, high: 3, low: 4), 4);
expect(A.bisectLeft(0, high: 3, low: 4), 4);
expect(A.bisectLeft(1, high: 3, low: 4), 4);
expect(A.bisectLeft(2, high: 3, low: 4), 4);
expect(A.bisectLeft(3, high: 3, low: 4), 4);
expect(A.bisectLeft(4, high: 3, low: 4), 4);
expect(A.bisectLeft(5, high: 3, low: 4), 4);
expect(A.bisectLeft(6, high: 3, low: 4), 4);
expect(A.bisectLeft(7, high: 3, low: 4), 4);
expect(A.bisectLeft(8, high: 3, low: 4), 4);
});

test('bisectLeft for A, hi=4, lo=4', () {
expect(A.bisectLeft(-2, high: 4, low: 4), 4);
expect(A.bisectLeft(-1, high: 4, low: 4), 4);
expect(A.bisectLeft(0, high: 4, low: 4), 4);
expect(A.bisectLeft(1, high: 4, low: 4), 4);
expect(A.bisectLeft(2, high: 4, low: 4), 4);
expect(A.bisectLeft(3, high: 4, low: 4), 4);
expect(A.bisectLeft(4, high: 4, low: 4), 4);
expect(A.bisectLeft(5, high: 4, low: 4), 4);
expect(A.bisectLeft(6, high: 4, low: 4), 4);
expect(A.bisectLeft(7, high: 4, low: 4), 4);
expect(A.bisectLeft(8, high: 4, low: 4), 4);
});

test('bisectLeft for A, hi=5, lo=4', () {
expect(A.bisectLeft(-2, high: 5, low: 4), 4);
expect(A.bisectLeft(-1, high: 5, low: 4), 4);
expect(A.bisectLeft(0, high: 5, low: 4), 4);
expect(A.bisectLeft(1, high: 5, low: 4), 4);
expect(A.bisectLeft(2, high: 5, low: 4), 4);
expect(A.bisectLeft(3, high: 5, low: 4), 5);
expect(A.bisectLeft(4, high: 5, low: 4), 5);
expect(A.bisectLeft(5, high: 5, low: 4), 5);
expect(A.bisectLeft(6, high: 5, low: 4), 5);
expect(A.bisectLeft(7, high: 5, low: 4), 5);
expect(A.bisectLeft(8, high: 5, low: 4), 5);
});

test('bisectLeft for A, hi=6, lo=4', () {
expect(A.bisectLeft(-2, high: 6, low: 4), 4);
expect(A.bisectLeft(-1, high: 6, low: 4), 4);
expect(A.bisectLeft(0, high: 6, low: 4), 4);
expect(A.bisectLeft(1, high: 6, low: 4), 4);
expect(A.bisectLeft(2, high: 6, low: 4), 4);
expect(A.bisectLeft(3, high: 6, low: 4), 6);
expect(A.bisectLeft(4, high: 6, low: 4), 6);
expect(A.bisectLeft(5, high: 6, low: 4), 6);
expect(A.bisectLeft(6, high: 6, low: 4), 6);
expect(A.bisectLeft(7, high: 6, low: 4), 6);
expect(A.bisectLeft(8, high: 6, low: 4), 6);
});

test('bisectLeft for A, hi=7, lo=4', () {
expect(A.bisectLeft(-2, high: 7, low: 4), 4);
expect(A.bisectLeft(-1, high: 7, low: 4), 4);
expect(A.bisectLeft(0, high: 7, low: 4), 4);
expect(A.bisectLeft(1, high: 7, low: 4), 4);
expect(A.bisectLeft(2, high: 7, low: 4), 4);
expect(A.bisectLeft(3, high: 7, low: 4), 6);
expect(A.bisectLeft(4, high: 7, low: 4), 7);
expect(A.bisectLeft(5, high: 7, low: 4), 7);
expect(A.bisectLeft(6, high: 7, low: 4), 7);
expect(A.bisectLeft(7, high: 7, low: 4), 7);
expect(A.bisectLeft(8, high: 7, low: 4), 7);
});

test('bisectLeft for A, hi=8, lo=4', () {
expect(A.bisectLeft(-2, high: 8, low: 4), 4);
expect(A.bisectLeft(-1, high: 8, low: 4), 4);
expect(A.bisectLeft(0, high: 8, low: 4), 4);
expect(A.bisectLeft(1, high: 8, low: 4), 4);
expect(A.bisectLeft(2, high: 8, low: 4), 4);
expect(A.bisectLeft(3, high: 8, low: 4), 6);
expect(A.bisectLeft(4, high: 8, low: 4), 8);
expect(A.bisectLeft(5, high: 8, low: 4), 8);
expect(A.bisectLeft(6, high: 8, low: 4), 8);
expect(A.bisectLeft(7, high: 8, low: 4), 8);
expect(A.bisectLeft(8, high: 8, low: 4), 8);
});

test('bisectLeft for A, hi=9, lo=4', () {
expect(A.bisectLeft(-2, high: 9, low: 4), 4);
expect(A.bisectLeft(-1, high: 9, low: 4), 4);
expect(A.bisectLeft(0, high: 9, low: 4), 4);
expect(A.bisectLeft(1, high: 9, low: 4), 4);
expect(A.bisectLeft(2, high: 9, low: 4), 4);
expect(A.bisectLeft(3, high: 9, low: 4), 6);
expect(A.bisectLeft(4, high: 9, low: 4), 8);
expect(A.bisectLeft(5, high: 9, low: 4), 8);
expect(A.bisectLeft(6, high: 9, low: 4), 9);
expect(A.bisectLeft(7, high: 9, low: 4), 9);
expect(A.bisectLeft(8, high: 9, low: 4), 9);
});

test('bisectLeft for A, hi=10, lo=4', () {
expect(A.bisectLeft(-2, high: 10, low: 4), 4);
expect(A.bisectLeft(-1, high: 10, low: 4), 4);
expect(A.bisectLeft(0, high: 10, low: 4), 4);
expect(A.bisectLeft(1, high: 10, low: 4), 4);
expect(A.bisectLeft(2, high: 10, low: 4), 4);
expect(A.bisectLeft(3, high: 10, low: 4), 6);
expect(A.bisectLeft(4, high: 10, low: 4), 8);
expect(A.bisectLeft(5, high: 10, low: 4), 8);
expect(A.bisectLeft(6, high: 10, low: 4), 9);
expect(A.bisectLeft(7, high: 10, low: 4), 10);
expect(A.bisectLeft(8, high: 10, low: 4), 10);
});

test('bisectLeft for A, hi=0, lo=5', () {
expect(A.bisectLeft(-2, high: 0, low: 5), 5);
expect(A.bisectLeft(-1, high: 0, low: 5), 5);
expect(A.bisectLeft(0, high: 0, low: 5), 5);
expect(A.bisectLeft(1, high: 0, low: 5), 5);
expect(A.bisectLeft(2, high: 0, low: 5), 5);
expect(A.bisectLeft(3, high: 0, low: 5), 5);
expect(A.bisectLeft(4, high: 0, low: 5), 5);
expect(A.bisectLeft(5, high: 0, low: 5), 5);
expect(A.bisectLeft(6, high: 0, low: 5), 5);
expect(A.bisectLeft(7, high: 0, low: 5), 5);
expect(A.bisectLeft(8, high: 0, low: 5), 5);
});

test('bisectLeft for A, hi=1, lo=5', () {
expect(A.bisectLeft(-2, high: 1, low: 5), 5);
expect(A.bisectLeft(-1, high: 1, low: 5), 5);
expect(A.bisectLeft(0, high: 1, low: 5), 5);
expect(A.bisectLeft(1, high: 1, low: 5), 5);
expect(A.bisectLeft(2, high: 1, low: 5), 5);
expect(A.bisectLeft(3, high: 1, low: 5), 5);
expect(A.bisectLeft(4, high: 1, low: 5), 5);
expect(A.bisectLeft(5, high: 1, low: 5), 5);
expect(A.bisectLeft(6, high: 1, low: 5), 5);
expect(A.bisectLeft(7, high: 1, low: 5), 5);
expect(A.bisectLeft(8, high: 1, low: 5), 5);
});

test('bisectLeft for A, hi=2, lo=5', () {
expect(A.bisectLeft(-2, high: 2, low: 5), 5);
expect(A.bisectLeft(-1, high: 2, low: 5), 5);
expect(A.bisectLeft(0, high: 2, low: 5), 5);
expect(A.bisectLeft(1, high: 2, low: 5), 5);
expect(A.bisectLeft(2, high: 2, low: 5), 5);
expect(A.bisectLeft(3, high: 2, low: 5), 5);
expect(A.bisectLeft(4, high: 2, low: 5), 5);
expect(A.bisectLeft(5, high: 2, low: 5), 5);
expect(A.bisectLeft(6, high: 2, low: 5), 5);
expect(A.bisectLeft(7, high: 2, low: 5), 5);
expect(A.bisectLeft(8, high: 2, low: 5), 5);
});

test('bisectLeft for A, hi=3, lo=5', () {
expect(A.bisectLeft(-2, high: 3, low: 5), 5);
expect(A.bisectLeft(-1, high: 3, low: 5), 5);
expect(A.bisectLeft(0, high: 3, low: 5), 5);
expect(A.bisectLeft(1, high: 3, low: 5), 5);
expect(A.bisectLeft(2, high: 3, low: 5), 5);
expect(A.bisectLeft(3, high: 3, low: 5), 5);
expect(A.bisectLeft(4, high: 3, low: 5), 5);
expect(A.bisectLeft(5, high: 3, low: 5), 5);
expect(A.bisectLeft(6, high: 3, low: 5), 5);
expect(A.bisectLeft(7, high: 3, low: 5), 5);
expect(A.bisectLeft(8, high: 3, low: 5), 5);
});

test('bisectLeft for A, hi=4, lo=5', () {
expect(A.bisectLeft(-2, high: 4, low: 5), 5);
expect(A.bisectLeft(-1, high: 4, low: 5), 5);
expect(A.bisectLeft(0, high: 4, low: 5), 5);
expect(A.bisectLeft(1, high: 4, low: 5), 5);
expect(A.bisectLeft(2, high: 4, low: 5), 5);
expect(A.bisectLeft(3, high: 4, low: 5), 5);
expect(A.bisectLeft(4, high: 4, low: 5), 5);
expect(A.bisectLeft(5, high: 4, low: 5), 5);
expect(A.bisectLeft(6, high: 4, low: 5), 5);
expect(A.bisectLeft(7, high: 4, low: 5), 5);
expect(A.bisectLeft(8, high: 4, low: 5), 5);
});

test('bisectLeft for A, hi=5, lo=5', () {
expect(A.bisectLeft(-2, high: 5, low: 5), 5);
expect(A.bisectLeft(-1, high: 5, low: 5), 5);
expect(A.bisectLeft(0, high: 5, low: 5), 5);
expect(A.bisectLeft(1, high: 5, low: 5), 5);
expect(A.bisectLeft(2, high: 5, low: 5), 5);
expect(A.bisectLeft(3, high: 5, low: 5), 5);
expect(A.bisectLeft(4, high: 5, low: 5), 5);
expect(A.bisectLeft(5, high: 5, low: 5), 5);
expect(A.bisectLeft(6, high: 5, low: 5), 5);
expect(A.bisectLeft(7, high: 5, low: 5), 5);
expect(A.bisectLeft(8, high: 5, low: 5), 5);
});

test('bisectLeft for A, hi=6, lo=5', () {
expect(A.bisectLeft(-2, high: 6, low: 5), 5);
expect(A.bisectLeft(-1, high: 6, low: 5), 5);
expect(A.bisectLeft(0, high: 6, low: 5), 5);
expect(A.bisectLeft(1, high: 6, low: 5), 5);
expect(A.bisectLeft(2, high: 6, low: 5), 5);
expect(A.bisectLeft(3, high: 6, low: 5), 6);
expect(A.bisectLeft(4, high: 6, low: 5), 6);
expect(A.bisectLeft(5, high: 6, low: 5), 6);
expect(A.bisectLeft(6, high: 6, low: 5), 6);
expect(A.bisectLeft(7, high: 6, low: 5), 6);
expect(A.bisectLeft(8, high: 6, low: 5), 6);
});

test('bisectLeft for A, hi=7, lo=5', () {
expect(A.bisectLeft(-2, high: 7, low: 5), 5);
expect(A.bisectLeft(-1, high: 7, low: 5), 5);
expect(A.bisectLeft(0, high: 7, low: 5), 5);
expect(A.bisectLeft(1, high: 7, low: 5), 5);
expect(A.bisectLeft(2, high: 7, low: 5), 5);
expect(A.bisectLeft(3, high: 7, low: 5), 6);
expect(A.bisectLeft(4, high: 7, low: 5), 7);
expect(A.bisectLeft(5, high: 7, low: 5), 7);
expect(A.bisectLeft(6, high: 7, low: 5), 7);
expect(A.bisectLeft(7, high: 7, low: 5), 7);
expect(A.bisectLeft(8, high: 7, low: 5), 7);
});

test('bisectLeft for A, hi=8, lo=5', () {
expect(A.bisectLeft(-2, high: 8, low: 5), 5);
expect(A.bisectLeft(-1, high: 8, low: 5), 5);
expect(A.bisectLeft(0, high: 8, low: 5), 5);
expect(A.bisectLeft(1, high: 8, low: 5), 5);
expect(A.bisectLeft(2, high: 8, low: 5), 5);
expect(A.bisectLeft(3, high: 8, low: 5), 6);
expect(A.bisectLeft(4, high: 8, low: 5), 8);
expect(A.bisectLeft(5, high: 8, low: 5), 8);
expect(A.bisectLeft(6, high: 8, low: 5), 8);
expect(A.bisectLeft(7, high: 8, low: 5), 8);
expect(A.bisectLeft(8, high: 8, low: 5), 8);
});

test('bisectLeft for A, hi=9, lo=5', () {
expect(A.bisectLeft(-2, high: 9, low: 5), 5);
expect(A.bisectLeft(-1, high: 9, low: 5), 5);
expect(A.bisectLeft(0, high: 9, low: 5), 5);
expect(A.bisectLeft(1, high: 9, low: 5), 5);
expect(A.bisectLeft(2, high: 9, low: 5), 5);
expect(A.bisectLeft(3, high: 9, low: 5), 6);
expect(A.bisectLeft(4, high: 9, low: 5), 8);
expect(A.bisectLeft(5, high: 9, low: 5), 8);
expect(A.bisectLeft(6, high: 9, low: 5), 9);
expect(A.bisectLeft(7, high: 9, low: 5), 9);
expect(A.bisectLeft(8, high: 9, low: 5), 9);
});

test('bisectLeft for A, hi=10, lo=5', () {
expect(A.bisectLeft(-2, high: 10, low: 5), 5);
expect(A.bisectLeft(-1, high: 10, low: 5), 5);
expect(A.bisectLeft(0, high: 10, low: 5), 5);
expect(A.bisectLeft(1, high: 10, low: 5), 5);
expect(A.bisectLeft(2, high: 10, low: 5), 5);
expect(A.bisectLeft(3, high: 10, low: 5), 6);
expect(A.bisectLeft(4, high: 10, low: 5), 8);
expect(A.bisectLeft(5, high: 10, low: 5), 8);
expect(A.bisectLeft(6, high: 10, low: 5), 9);
expect(A.bisectLeft(7, high: 10, low: 5), 10);
expect(A.bisectLeft(8, high: 10, low: 5), 10);
});

test('bisectLeft for A, hi=0, lo=6', () {
expect(A.bisectLeft(-2, high: 0, low: 6), 6);
expect(A.bisectLeft(-1, high: 0, low: 6), 6);
expect(A.bisectLeft(0, high: 0, low: 6), 6);
expect(A.bisectLeft(1, high: 0, low: 6), 6);
expect(A.bisectLeft(2, high: 0, low: 6), 6);
expect(A.bisectLeft(3, high: 0, low: 6), 6);
expect(A.bisectLeft(4, high: 0, low: 6), 6);
expect(A.bisectLeft(5, high: 0, low: 6), 6);
expect(A.bisectLeft(6, high: 0, low: 6), 6);
expect(A.bisectLeft(7, high: 0, low: 6), 6);
expect(A.bisectLeft(8, high: 0, low: 6), 6);
});

test('bisectLeft for A, hi=1, lo=6', () {
expect(A.bisectLeft(-2, high: 1, low: 6), 6);
expect(A.bisectLeft(-1, high: 1, low: 6), 6);
expect(A.bisectLeft(0, high: 1, low: 6), 6);
expect(A.bisectLeft(1, high: 1, low: 6), 6);
expect(A.bisectLeft(2, high: 1, low: 6), 6);
expect(A.bisectLeft(3, high: 1, low: 6), 6);
expect(A.bisectLeft(4, high: 1, low: 6), 6);
expect(A.bisectLeft(5, high: 1, low: 6), 6);
expect(A.bisectLeft(6, high: 1, low: 6), 6);
expect(A.bisectLeft(7, high: 1, low: 6), 6);
expect(A.bisectLeft(8, high: 1, low: 6), 6);
});

test('bisectLeft for A, hi=2, lo=6', () {
expect(A.bisectLeft(-2, high: 2, low: 6), 6);
expect(A.bisectLeft(-1, high: 2, low: 6), 6);
expect(A.bisectLeft(0, high: 2, low: 6), 6);
expect(A.bisectLeft(1, high: 2, low: 6), 6);
expect(A.bisectLeft(2, high: 2, low: 6), 6);
expect(A.bisectLeft(3, high: 2, low: 6), 6);
expect(A.bisectLeft(4, high: 2, low: 6), 6);
expect(A.bisectLeft(5, high: 2, low: 6), 6);
expect(A.bisectLeft(6, high: 2, low: 6), 6);
expect(A.bisectLeft(7, high: 2, low: 6), 6);
expect(A.bisectLeft(8, high: 2, low: 6), 6);
});

test('bisectLeft for A, hi=3, lo=6', () {
expect(A.bisectLeft(-2, high: 3, low: 6), 6);
expect(A.bisectLeft(-1, high: 3, low: 6), 6);
expect(A.bisectLeft(0, high: 3, low: 6), 6);
expect(A.bisectLeft(1, high: 3, low: 6), 6);
expect(A.bisectLeft(2, high: 3, low: 6), 6);
expect(A.bisectLeft(3, high: 3, low: 6), 6);
expect(A.bisectLeft(4, high: 3, low: 6), 6);
expect(A.bisectLeft(5, high: 3, low: 6), 6);
expect(A.bisectLeft(6, high: 3, low: 6), 6);
expect(A.bisectLeft(7, high: 3, low: 6), 6);
expect(A.bisectLeft(8, high: 3, low: 6), 6);
});

test('bisectLeft for A, hi=4, lo=6', () {
expect(A.bisectLeft(-2, high: 4, low: 6), 6);
expect(A.bisectLeft(-1, high: 4, low: 6), 6);
expect(A.bisectLeft(0, high: 4, low: 6), 6);
expect(A.bisectLeft(1, high: 4, low: 6), 6);
expect(A.bisectLeft(2, high: 4, low: 6), 6);
expect(A.bisectLeft(3, high: 4, low: 6), 6);
expect(A.bisectLeft(4, high: 4, low: 6), 6);
expect(A.bisectLeft(5, high: 4, low: 6), 6);
expect(A.bisectLeft(6, high: 4, low: 6), 6);
expect(A.bisectLeft(7, high: 4, low: 6), 6);
expect(A.bisectLeft(8, high: 4, low: 6), 6);
});

test('bisectLeft for A, hi=5, lo=6', () {
expect(A.bisectLeft(-2, high: 5, low: 6), 6);
expect(A.bisectLeft(-1, high: 5, low: 6), 6);
expect(A.bisectLeft(0, high: 5, low: 6), 6);
expect(A.bisectLeft(1, high: 5, low: 6), 6);
expect(A.bisectLeft(2, high: 5, low: 6), 6);
expect(A.bisectLeft(3, high: 5, low: 6), 6);
expect(A.bisectLeft(4, high: 5, low: 6), 6);
expect(A.bisectLeft(5, high: 5, low: 6), 6);
expect(A.bisectLeft(6, high: 5, low: 6), 6);
expect(A.bisectLeft(7, high: 5, low: 6), 6);
expect(A.bisectLeft(8, high: 5, low: 6), 6);
});

test('bisectLeft for A, hi=6, lo=6', () {
expect(A.bisectLeft(-2, high: 6, low: 6), 6);
expect(A.bisectLeft(-1, high: 6, low: 6), 6);
expect(A.bisectLeft(0, high: 6, low: 6), 6);
expect(A.bisectLeft(1, high: 6, low: 6), 6);
expect(A.bisectLeft(2, high: 6, low: 6), 6);
expect(A.bisectLeft(3, high: 6, low: 6), 6);
expect(A.bisectLeft(4, high: 6, low: 6), 6);
expect(A.bisectLeft(5, high: 6, low: 6), 6);
expect(A.bisectLeft(6, high: 6, low: 6), 6);
expect(A.bisectLeft(7, high: 6, low: 6), 6);
expect(A.bisectLeft(8, high: 6, low: 6), 6);
});

test('bisectLeft for A, hi=7, lo=6', () {
expect(A.bisectLeft(-2, high: 7, low: 6), 6);
expect(A.bisectLeft(-1, high: 7, low: 6), 6);
expect(A.bisectLeft(0, high: 7, low: 6), 6);
expect(A.bisectLeft(1, high: 7, low: 6), 6);
expect(A.bisectLeft(2, high: 7, low: 6), 6);
expect(A.bisectLeft(3, high: 7, low: 6), 6);
expect(A.bisectLeft(4, high: 7, low: 6), 7);
expect(A.bisectLeft(5, high: 7, low: 6), 7);
expect(A.bisectLeft(6, high: 7, low: 6), 7);
expect(A.bisectLeft(7, high: 7, low: 6), 7);
expect(A.bisectLeft(8, high: 7, low: 6), 7);
});

test('bisectLeft for A, hi=8, lo=6', () {
expect(A.bisectLeft(-2, high: 8, low: 6), 6);
expect(A.bisectLeft(-1, high: 8, low: 6), 6);
expect(A.bisectLeft(0, high: 8, low: 6), 6);
expect(A.bisectLeft(1, high: 8, low: 6), 6);
expect(A.bisectLeft(2, high: 8, low: 6), 6);
expect(A.bisectLeft(3, high: 8, low: 6), 6);
expect(A.bisectLeft(4, high: 8, low: 6), 8);
expect(A.bisectLeft(5, high: 8, low: 6), 8);
expect(A.bisectLeft(6, high: 8, low: 6), 8);
expect(A.bisectLeft(7, high: 8, low: 6), 8);
expect(A.bisectLeft(8, high: 8, low: 6), 8);
});

test('bisectLeft for A, hi=9, lo=6', () {
expect(A.bisectLeft(-2, high: 9, low: 6), 6);
expect(A.bisectLeft(-1, high: 9, low: 6), 6);
expect(A.bisectLeft(0, high: 9, low: 6), 6);
expect(A.bisectLeft(1, high: 9, low: 6), 6);
expect(A.bisectLeft(2, high: 9, low: 6), 6);
expect(A.bisectLeft(3, high: 9, low: 6), 6);
expect(A.bisectLeft(4, high: 9, low: 6), 8);
expect(A.bisectLeft(5, high: 9, low: 6), 8);
expect(A.bisectLeft(6, high: 9, low: 6), 9);
expect(A.bisectLeft(7, high: 9, low: 6), 9);
expect(A.bisectLeft(8, high: 9, low: 6), 9);
});

test('bisectLeft for A, hi=10, lo=6', () {
expect(A.bisectLeft(-2, high: 10, low: 6), 6);
expect(A.bisectLeft(-1, high: 10, low: 6), 6);
expect(A.bisectLeft(0, high: 10, low: 6), 6);
expect(A.bisectLeft(1, high: 10, low: 6), 6);
expect(A.bisectLeft(2, high: 10, low: 6), 6);
expect(A.bisectLeft(3, high: 10, low: 6), 6);
expect(A.bisectLeft(4, high: 10, low: 6), 8);
expect(A.bisectLeft(5, high: 10, low: 6), 8);
expect(A.bisectLeft(6, high: 10, low: 6), 9);
expect(A.bisectLeft(7, high: 10, low: 6), 10);
expect(A.bisectLeft(8, high: 10, low: 6), 10);
});

test('bisectLeft for A, hi=0, lo=7', () {
expect(A.bisectLeft(-2, high: 0, low: 7), 7);
expect(A.bisectLeft(-1, high: 0, low: 7), 7);
expect(A.bisectLeft(0, high: 0, low: 7), 7);
expect(A.bisectLeft(1, high: 0, low: 7), 7);
expect(A.bisectLeft(2, high: 0, low: 7), 7);
expect(A.bisectLeft(3, high: 0, low: 7), 7);
expect(A.bisectLeft(4, high: 0, low: 7), 7);
expect(A.bisectLeft(5, high: 0, low: 7), 7);
expect(A.bisectLeft(6, high: 0, low: 7), 7);
expect(A.bisectLeft(7, high: 0, low: 7), 7);
expect(A.bisectLeft(8, high: 0, low: 7), 7);
});

test('bisectLeft for A, hi=1, lo=7', () {
expect(A.bisectLeft(-2, high: 1, low: 7), 7);
expect(A.bisectLeft(-1, high: 1, low: 7), 7);
expect(A.bisectLeft(0, high: 1, low: 7), 7);
expect(A.bisectLeft(1, high: 1, low: 7), 7);
expect(A.bisectLeft(2, high: 1, low: 7), 7);
expect(A.bisectLeft(3, high: 1, low: 7), 7);
expect(A.bisectLeft(4, high: 1, low: 7), 7);
expect(A.bisectLeft(5, high: 1, low: 7), 7);
expect(A.bisectLeft(6, high: 1, low: 7), 7);
expect(A.bisectLeft(7, high: 1, low: 7), 7);
expect(A.bisectLeft(8, high: 1, low: 7), 7);
});

test('bisectLeft for A, hi=2, lo=7', () {
expect(A.bisectLeft(-2, high: 2, low: 7), 7);
expect(A.bisectLeft(-1, high: 2, low: 7), 7);
expect(A.bisectLeft(0, high: 2, low: 7), 7);
expect(A.bisectLeft(1, high: 2, low: 7), 7);
expect(A.bisectLeft(2, high: 2, low: 7), 7);
expect(A.bisectLeft(3, high: 2, low: 7), 7);
expect(A.bisectLeft(4, high: 2, low: 7), 7);
expect(A.bisectLeft(5, high: 2, low: 7), 7);
expect(A.bisectLeft(6, high: 2, low: 7), 7);
expect(A.bisectLeft(7, high: 2, low: 7), 7);
expect(A.bisectLeft(8, high: 2, low: 7), 7);
});

test('bisectLeft for A, hi=3, lo=7', () {
expect(A.bisectLeft(-2, high: 3, low: 7), 7);
expect(A.bisectLeft(-1, high: 3, low: 7), 7);
expect(A.bisectLeft(0, high: 3, low: 7), 7);
expect(A.bisectLeft(1, high: 3, low: 7), 7);
expect(A.bisectLeft(2, high: 3, low: 7), 7);
expect(A.bisectLeft(3, high: 3, low: 7), 7);
expect(A.bisectLeft(4, high: 3, low: 7), 7);
expect(A.bisectLeft(5, high: 3, low: 7), 7);
expect(A.bisectLeft(6, high: 3, low: 7), 7);
expect(A.bisectLeft(7, high: 3, low: 7), 7);
expect(A.bisectLeft(8, high: 3, low: 7), 7);
});

test('bisectLeft for A, hi=4, lo=7', () {
expect(A.bisectLeft(-2, high: 4, low: 7), 7);
expect(A.bisectLeft(-1, high: 4, low: 7), 7);
expect(A.bisectLeft(0, high: 4, low: 7), 7);
expect(A.bisectLeft(1, high: 4, low: 7), 7);
expect(A.bisectLeft(2, high: 4, low: 7), 7);
expect(A.bisectLeft(3, high: 4, low: 7), 7);
expect(A.bisectLeft(4, high: 4, low: 7), 7);
expect(A.bisectLeft(5, high: 4, low: 7), 7);
expect(A.bisectLeft(6, high: 4, low: 7), 7);
expect(A.bisectLeft(7, high: 4, low: 7), 7);
expect(A.bisectLeft(8, high: 4, low: 7), 7);
});

test('bisectLeft for A, hi=5, lo=7', () {
expect(A.bisectLeft(-2, high: 5, low: 7), 7);
expect(A.bisectLeft(-1, high: 5, low: 7), 7);
expect(A.bisectLeft(0, high: 5, low: 7), 7);
expect(A.bisectLeft(1, high: 5, low: 7), 7);
expect(A.bisectLeft(2, high: 5, low: 7), 7);
expect(A.bisectLeft(3, high: 5, low: 7), 7);
expect(A.bisectLeft(4, high: 5, low: 7), 7);
expect(A.bisectLeft(5, high: 5, low: 7), 7);
expect(A.bisectLeft(6, high: 5, low: 7), 7);
expect(A.bisectLeft(7, high: 5, low: 7), 7);
expect(A.bisectLeft(8, high: 5, low: 7), 7);
});

test('bisectLeft for A, hi=6, lo=7', () {
expect(A.bisectLeft(-2, high: 6, low: 7), 7);
expect(A.bisectLeft(-1, high: 6, low: 7), 7);
expect(A.bisectLeft(0, high: 6, low: 7), 7);
expect(A.bisectLeft(1, high: 6, low: 7), 7);
expect(A.bisectLeft(2, high: 6, low: 7), 7);
expect(A.bisectLeft(3, high: 6, low: 7), 7);
expect(A.bisectLeft(4, high: 6, low: 7), 7);
expect(A.bisectLeft(5, high: 6, low: 7), 7);
expect(A.bisectLeft(6, high: 6, low: 7), 7);
expect(A.bisectLeft(7, high: 6, low: 7), 7);
expect(A.bisectLeft(8, high: 6, low: 7), 7);
});

test('bisectLeft for A, hi=7, lo=7', () {
expect(A.bisectLeft(-2, high: 7, low: 7), 7);
expect(A.bisectLeft(-1, high: 7, low: 7), 7);
expect(A.bisectLeft(0, high: 7, low: 7), 7);
expect(A.bisectLeft(1, high: 7, low: 7), 7);
expect(A.bisectLeft(2, high: 7, low: 7), 7);
expect(A.bisectLeft(3, high: 7, low: 7), 7);
expect(A.bisectLeft(4, high: 7, low: 7), 7);
expect(A.bisectLeft(5, high: 7, low: 7), 7);
expect(A.bisectLeft(6, high: 7, low: 7), 7);
expect(A.bisectLeft(7, high: 7, low: 7), 7);
expect(A.bisectLeft(8, high: 7, low: 7), 7);
});

test('bisectLeft for A, hi=8, lo=7', () {
expect(A.bisectLeft(-2, high: 8, low: 7), 7);
expect(A.bisectLeft(-1, high: 8, low: 7), 7);
expect(A.bisectLeft(0, high: 8, low: 7), 7);
expect(A.bisectLeft(1, high: 8, low: 7), 7);
expect(A.bisectLeft(2, high: 8, low: 7), 7);
expect(A.bisectLeft(3, high: 8, low: 7), 7);
expect(A.bisectLeft(4, high: 8, low: 7), 8);
expect(A.bisectLeft(5, high: 8, low: 7), 8);
expect(A.bisectLeft(6, high: 8, low: 7), 8);
expect(A.bisectLeft(7, high: 8, low: 7), 8);
expect(A.bisectLeft(8, high: 8, low: 7), 8);
});

test('bisectLeft for A, hi=9, lo=7', () {
expect(A.bisectLeft(-2, high: 9, low: 7), 7);
expect(A.bisectLeft(-1, high: 9, low: 7), 7);
expect(A.bisectLeft(0, high: 9, low: 7), 7);
expect(A.bisectLeft(1, high: 9, low: 7), 7);
expect(A.bisectLeft(2, high: 9, low: 7), 7);
expect(A.bisectLeft(3, high: 9, low: 7), 7);
expect(A.bisectLeft(4, high: 9, low: 7), 8);
expect(A.bisectLeft(5, high: 9, low: 7), 8);
expect(A.bisectLeft(6, high: 9, low: 7), 9);
expect(A.bisectLeft(7, high: 9, low: 7), 9);
expect(A.bisectLeft(8, high: 9, low: 7), 9);
});

test('bisectLeft for A, hi=10, lo=7', () {
expect(A.bisectLeft(-2, high: 10, low: 7), 7);
expect(A.bisectLeft(-1, high: 10, low: 7), 7);
expect(A.bisectLeft(0, high: 10, low: 7), 7);
expect(A.bisectLeft(1, high: 10, low: 7), 7);
expect(A.bisectLeft(2, high: 10, low: 7), 7);
expect(A.bisectLeft(3, high: 10, low: 7), 7);
expect(A.bisectLeft(4, high: 10, low: 7), 8);
expect(A.bisectLeft(5, high: 10, low: 7), 8);
expect(A.bisectLeft(6, high: 10, low: 7), 9);
expect(A.bisectLeft(7, high: 10, low: 7), 10);
expect(A.bisectLeft(8, high: 10, low: 7), 10);
});

test('bisectLeft for A, hi=0, lo=8', () {
expect(A.bisectLeft(-2, high: 0, low: 8), 8);
expect(A.bisectLeft(-1, high: 0, low: 8), 8);
expect(A.bisectLeft(0, high: 0, low: 8), 8);
expect(A.bisectLeft(1, high: 0, low: 8), 8);
expect(A.bisectLeft(2, high: 0, low: 8), 8);
expect(A.bisectLeft(3, high: 0, low: 8), 8);
expect(A.bisectLeft(4, high: 0, low: 8), 8);
expect(A.bisectLeft(5, high: 0, low: 8), 8);
expect(A.bisectLeft(6, high: 0, low: 8), 8);
expect(A.bisectLeft(7, high: 0, low: 8), 8);
expect(A.bisectLeft(8, high: 0, low: 8), 8);
});

test('bisectLeft for A, hi=1, lo=8', () {
expect(A.bisectLeft(-2, high: 1, low: 8), 8);
expect(A.bisectLeft(-1, high: 1, low: 8), 8);
expect(A.bisectLeft(0, high: 1, low: 8), 8);
expect(A.bisectLeft(1, high: 1, low: 8), 8);
expect(A.bisectLeft(2, high: 1, low: 8), 8);
expect(A.bisectLeft(3, high: 1, low: 8), 8);
expect(A.bisectLeft(4, high: 1, low: 8), 8);
expect(A.bisectLeft(5, high: 1, low: 8), 8);
expect(A.bisectLeft(6, high: 1, low: 8), 8);
expect(A.bisectLeft(7, high: 1, low: 8), 8);
expect(A.bisectLeft(8, high: 1, low: 8), 8);
});

test('bisectLeft for A, hi=2, lo=8', () {
expect(A.bisectLeft(-2, high: 2, low: 8), 8);
expect(A.bisectLeft(-1, high: 2, low: 8), 8);
expect(A.bisectLeft(0, high: 2, low: 8), 8);
expect(A.bisectLeft(1, high: 2, low: 8), 8);
expect(A.bisectLeft(2, high: 2, low: 8), 8);
expect(A.bisectLeft(3, high: 2, low: 8), 8);
expect(A.bisectLeft(4, high: 2, low: 8), 8);
expect(A.bisectLeft(5, high: 2, low: 8), 8);
expect(A.bisectLeft(6, high: 2, low: 8), 8);
expect(A.bisectLeft(7, high: 2, low: 8), 8);
expect(A.bisectLeft(8, high: 2, low: 8), 8);
});

test('bisectLeft for A, hi=3, lo=8', () {
expect(A.bisectLeft(-2, high: 3, low: 8), 8);
expect(A.bisectLeft(-1, high: 3, low: 8), 8);
expect(A.bisectLeft(0, high: 3, low: 8), 8);
expect(A.bisectLeft(1, high: 3, low: 8), 8);
expect(A.bisectLeft(2, high: 3, low: 8), 8);
expect(A.bisectLeft(3, high: 3, low: 8), 8);
expect(A.bisectLeft(4, high: 3, low: 8), 8);
expect(A.bisectLeft(5, high: 3, low: 8), 8);
expect(A.bisectLeft(6, high: 3, low: 8), 8);
expect(A.bisectLeft(7, high: 3, low: 8), 8);
expect(A.bisectLeft(8, high: 3, low: 8), 8);
});

test('bisectLeft for A, hi=4, lo=8', () {
expect(A.bisectLeft(-2, high: 4, low: 8), 8);
expect(A.bisectLeft(-1, high: 4, low: 8), 8);
expect(A.bisectLeft(0, high: 4, low: 8), 8);
expect(A.bisectLeft(1, high: 4, low: 8), 8);
expect(A.bisectLeft(2, high: 4, low: 8), 8);
expect(A.bisectLeft(3, high: 4, low: 8), 8);
expect(A.bisectLeft(4, high: 4, low: 8), 8);
expect(A.bisectLeft(5, high: 4, low: 8), 8);
expect(A.bisectLeft(6, high: 4, low: 8), 8);
expect(A.bisectLeft(7, high: 4, low: 8), 8);
expect(A.bisectLeft(8, high: 4, low: 8), 8);
});

test('bisectLeft for A, hi=5, lo=8', () {
expect(A.bisectLeft(-2, high: 5, low: 8), 8);
expect(A.bisectLeft(-1, high: 5, low: 8), 8);
expect(A.bisectLeft(0, high: 5, low: 8), 8);
expect(A.bisectLeft(1, high: 5, low: 8), 8);
expect(A.bisectLeft(2, high: 5, low: 8), 8);
expect(A.bisectLeft(3, high: 5, low: 8), 8);
expect(A.bisectLeft(4, high: 5, low: 8), 8);
expect(A.bisectLeft(5, high: 5, low: 8), 8);
expect(A.bisectLeft(6, high: 5, low: 8), 8);
expect(A.bisectLeft(7, high: 5, low: 8), 8);
expect(A.bisectLeft(8, high: 5, low: 8), 8);
});

test('bisectLeft for A, hi=6, lo=8', () {
expect(A.bisectLeft(-2, high: 6, low: 8), 8);
expect(A.bisectLeft(-1, high: 6, low: 8), 8);
expect(A.bisectLeft(0, high: 6, low: 8), 8);
expect(A.bisectLeft(1, high: 6, low: 8), 8);
expect(A.bisectLeft(2, high: 6, low: 8), 8);
expect(A.bisectLeft(3, high: 6, low: 8), 8);
expect(A.bisectLeft(4, high: 6, low: 8), 8);
expect(A.bisectLeft(5, high: 6, low: 8), 8);
expect(A.bisectLeft(6, high: 6, low: 8), 8);
expect(A.bisectLeft(7, high: 6, low: 8), 8);
expect(A.bisectLeft(8, high: 6, low: 8), 8);
});

test('bisectLeft for A, hi=7, lo=8', () {
expect(A.bisectLeft(-2, high: 7, low: 8), 8);
expect(A.bisectLeft(-1, high: 7, low: 8), 8);
expect(A.bisectLeft(0, high: 7, low: 8), 8);
expect(A.bisectLeft(1, high: 7, low: 8), 8);
expect(A.bisectLeft(2, high: 7, low: 8), 8);
expect(A.bisectLeft(3, high: 7, low: 8), 8);
expect(A.bisectLeft(4, high: 7, low: 8), 8);
expect(A.bisectLeft(5, high: 7, low: 8), 8);
expect(A.bisectLeft(6, high: 7, low: 8), 8);
expect(A.bisectLeft(7, high: 7, low: 8), 8);
expect(A.bisectLeft(8, high: 7, low: 8), 8);
});

test('bisectLeft for A, hi=8, lo=8', () {
expect(A.bisectLeft(-2, high: 8, low: 8), 8);
expect(A.bisectLeft(-1, high: 8, low: 8), 8);
expect(A.bisectLeft(0, high: 8, low: 8), 8);
expect(A.bisectLeft(1, high: 8, low: 8), 8);
expect(A.bisectLeft(2, high: 8, low: 8), 8);
expect(A.bisectLeft(3, high: 8, low: 8), 8);
expect(A.bisectLeft(4, high: 8, low: 8), 8);
expect(A.bisectLeft(5, high: 8, low: 8), 8);
expect(A.bisectLeft(6, high: 8, low: 8), 8);
expect(A.bisectLeft(7, high: 8, low: 8), 8);
expect(A.bisectLeft(8, high: 8, low: 8), 8);
});

test('bisectLeft for A, hi=9, lo=8', () {
expect(A.bisectLeft(-2, high: 9, low: 8), 8);
expect(A.bisectLeft(-1, high: 9, low: 8), 8);
expect(A.bisectLeft(0, high: 9, low: 8), 8);
expect(A.bisectLeft(1, high: 9, low: 8), 8);
expect(A.bisectLeft(2, high: 9, low: 8), 8);
expect(A.bisectLeft(3, high: 9, low: 8), 8);
expect(A.bisectLeft(4, high: 9, low: 8), 8);
expect(A.bisectLeft(5, high: 9, low: 8), 8);
expect(A.bisectLeft(6, high: 9, low: 8), 9);
expect(A.bisectLeft(7, high: 9, low: 8), 9);
expect(A.bisectLeft(8, high: 9, low: 8), 9);
});

test('bisectLeft for A, hi=10, lo=8', () {
expect(A.bisectLeft(-2, high: 10, low: 8), 8);
expect(A.bisectLeft(-1, high: 10, low: 8), 8);
expect(A.bisectLeft(0, high: 10, low: 8), 8);
expect(A.bisectLeft(1, high: 10, low: 8), 8);
expect(A.bisectLeft(2, high: 10, low: 8), 8);
expect(A.bisectLeft(3, high: 10, low: 8), 8);
expect(A.bisectLeft(4, high: 10, low: 8), 8);
expect(A.bisectLeft(5, high: 10, low: 8), 8);
expect(A.bisectLeft(6, high: 10, low: 8), 9);
expect(A.bisectLeft(7, high: 10, low: 8), 10);
expect(A.bisectLeft(8, high: 10, low: 8), 10);
});

test('bisectLeft for A, hi=0, lo=9', () {
expect(A.bisectLeft(-2, high: 0, low: 9), 9);
expect(A.bisectLeft(-1, high: 0, low: 9), 9);
expect(A.bisectLeft(0, high: 0, low: 9), 9);
expect(A.bisectLeft(1, high: 0, low: 9), 9);
expect(A.bisectLeft(2, high: 0, low: 9), 9);
expect(A.bisectLeft(3, high: 0, low: 9), 9);
expect(A.bisectLeft(4, high: 0, low: 9), 9);
expect(A.bisectLeft(5, high: 0, low: 9), 9);
expect(A.bisectLeft(6, high: 0, low: 9), 9);
expect(A.bisectLeft(7, high: 0, low: 9), 9);
expect(A.bisectLeft(8, high: 0, low: 9), 9);
});

test('bisectLeft for A, hi=1, lo=9', () {
expect(A.bisectLeft(-2, high: 1, low: 9), 9);
expect(A.bisectLeft(-1, high: 1, low: 9), 9);
expect(A.bisectLeft(0, high: 1, low: 9), 9);
expect(A.bisectLeft(1, high: 1, low: 9), 9);
expect(A.bisectLeft(2, high: 1, low: 9), 9);
expect(A.bisectLeft(3, high: 1, low: 9), 9);
expect(A.bisectLeft(4, high: 1, low: 9), 9);
expect(A.bisectLeft(5, high: 1, low: 9), 9);
expect(A.bisectLeft(6, high: 1, low: 9), 9);
expect(A.bisectLeft(7, high: 1, low: 9), 9);
expect(A.bisectLeft(8, high: 1, low: 9), 9);
});

test('bisectLeft for A, hi=2, lo=9', () {
expect(A.bisectLeft(-2, high: 2, low: 9), 9);
expect(A.bisectLeft(-1, high: 2, low: 9), 9);
expect(A.bisectLeft(0, high: 2, low: 9), 9);
expect(A.bisectLeft(1, high: 2, low: 9), 9);
expect(A.bisectLeft(2, high: 2, low: 9), 9);
expect(A.bisectLeft(3, high: 2, low: 9), 9);
expect(A.bisectLeft(4, high: 2, low: 9), 9);
expect(A.bisectLeft(5, high: 2, low: 9), 9);
expect(A.bisectLeft(6, high: 2, low: 9), 9);
expect(A.bisectLeft(7, high: 2, low: 9), 9);
expect(A.bisectLeft(8, high: 2, low: 9), 9);
});

test('bisectLeft for A, hi=3, lo=9', () {
expect(A.bisectLeft(-2, high: 3, low: 9), 9);
expect(A.bisectLeft(-1, high: 3, low: 9), 9);
expect(A.bisectLeft(0, high: 3, low: 9), 9);
expect(A.bisectLeft(1, high: 3, low: 9), 9);
expect(A.bisectLeft(2, high: 3, low: 9), 9);
expect(A.bisectLeft(3, high: 3, low: 9), 9);
expect(A.bisectLeft(4, high: 3, low: 9), 9);
expect(A.bisectLeft(5, high: 3, low: 9), 9);
expect(A.bisectLeft(6, high: 3, low: 9), 9);
expect(A.bisectLeft(7, high: 3, low: 9), 9);
expect(A.bisectLeft(8, high: 3, low: 9), 9);
});

test('bisectLeft for A, hi=4, lo=9', () {
expect(A.bisectLeft(-2, high: 4, low: 9), 9);
expect(A.bisectLeft(-1, high: 4, low: 9), 9);
expect(A.bisectLeft(0, high: 4, low: 9), 9);
expect(A.bisectLeft(1, high: 4, low: 9), 9);
expect(A.bisectLeft(2, high: 4, low: 9), 9);
expect(A.bisectLeft(3, high: 4, low: 9), 9);
expect(A.bisectLeft(4, high: 4, low: 9), 9);
expect(A.bisectLeft(5, high: 4, low: 9), 9);
expect(A.bisectLeft(6, high: 4, low: 9), 9);
expect(A.bisectLeft(7, high: 4, low: 9), 9);
expect(A.bisectLeft(8, high: 4, low: 9), 9);
});

test('bisectLeft for A, hi=5, lo=9', () {
expect(A.bisectLeft(-2, high: 5, low: 9), 9);
expect(A.bisectLeft(-1, high: 5, low: 9), 9);
expect(A.bisectLeft(0, high: 5, low: 9), 9);
expect(A.bisectLeft(1, high: 5, low: 9), 9);
expect(A.bisectLeft(2, high: 5, low: 9), 9);
expect(A.bisectLeft(3, high: 5, low: 9), 9);
expect(A.bisectLeft(4, high: 5, low: 9), 9);
expect(A.bisectLeft(5, high: 5, low: 9), 9);
expect(A.bisectLeft(6, high: 5, low: 9), 9);
expect(A.bisectLeft(7, high: 5, low: 9), 9);
expect(A.bisectLeft(8, high: 5, low: 9), 9);
});

test('bisectLeft for A, hi=6, lo=9', () {
expect(A.bisectLeft(-2, high: 6, low: 9), 9);
expect(A.bisectLeft(-1, high: 6, low: 9), 9);
expect(A.bisectLeft(0, high: 6, low: 9), 9);
expect(A.bisectLeft(1, high: 6, low: 9), 9);
expect(A.bisectLeft(2, high: 6, low: 9), 9);
expect(A.bisectLeft(3, high: 6, low: 9), 9);
expect(A.bisectLeft(4, high: 6, low: 9), 9);
expect(A.bisectLeft(5, high: 6, low: 9), 9);
expect(A.bisectLeft(6, high: 6, low: 9), 9);
expect(A.bisectLeft(7, high: 6, low: 9), 9);
expect(A.bisectLeft(8, high: 6, low: 9), 9);
});

test('bisectLeft for A, hi=7, lo=9', () {
expect(A.bisectLeft(-2, high: 7, low: 9), 9);
expect(A.bisectLeft(-1, high: 7, low: 9), 9);
expect(A.bisectLeft(0, high: 7, low: 9), 9);
expect(A.bisectLeft(1, high: 7, low: 9), 9);
expect(A.bisectLeft(2, high: 7, low: 9), 9);
expect(A.bisectLeft(3, high: 7, low: 9), 9);
expect(A.bisectLeft(4, high: 7, low: 9), 9);
expect(A.bisectLeft(5, high: 7, low: 9), 9);
expect(A.bisectLeft(6, high: 7, low: 9), 9);
expect(A.bisectLeft(7, high: 7, low: 9), 9);
expect(A.bisectLeft(8, high: 7, low: 9), 9);
});

test('bisectLeft for A, hi=8, lo=9', () {
expect(A.bisectLeft(-2, high: 8, low: 9), 9);
expect(A.bisectLeft(-1, high: 8, low: 9), 9);
expect(A.bisectLeft(0, high: 8, low: 9), 9);
expect(A.bisectLeft(1, high: 8, low: 9), 9);
expect(A.bisectLeft(2, high: 8, low: 9), 9);
expect(A.bisectLeft(3, high: 8, low: 9), 9);
expect(A.bisectLeft(4, high: 8, low: 9), 9);
expect(A.bisectLeft(5, high: 8, low: 9), 9);
expect(A.bisectLeft(6, high: 8, low: 9), 9);
expect(A.bisectLeft(7, high: 8, low: 9), 9);
expect(A.bisectLeft(8, high: 8, low: 9), 9);
});

test('bisectLeft for A, hi=9, lo=9', () {
expect(A.bisectLeft(-2, high: 9, low: 9), 9);
expect(A.bisectLeft(-1, high: 9, low: 9), 9);
expect(A.bisectLeft(0, high: 9, low: 9), 9);
expect(A.bisectLeft(1, high: 9, low: 9), 9);
expect(A.bisectLeft(2, high: 9, low: 9), 9);
expect(A.bisectLeft(3, high: 9, low: 9), 9);
expect(A.bisectLeft(4, high: 9, low: 9), 9);
expect(A.bisectLeft(5, high: 9, low: 9), 9);
expect(A.bisectLeft(6, high: 9, low: 9), 9);
expect(A.bisectLeft(7, high: 9, low: 9), 9);
expect(A.bisectLeft(8, high: 9, low: 9), 9);
});

test('bisectLeft for A, hi=10, lo=9', () {
expect(A.bisectLeft(-2, high: 10, low: 9), 9);
expect(A.bisectLeft(-1, high: 10, low: 9), 9);
expect(A.bisectLeft(0, high: 10, low: 9), 9);
expect(A.bisectLeft(1, high: 10, low: 9), 9);
expect(A.bisectLeft(2, high: 10, low: 9), 9);
expect(A.bisectLeft(3, high: 10, low: 9), 9);
expect(A.bisectLeft(4, high: 10, low: 9), 9);
expect(A.bisectLeft(5, high: 10, low: 9), 9);
expect(A.bisectLeft(6, high: 10, low: 9), 9);
expect(A.bisectLeft(7, high: 10, low: 9), 10);
expect(A.bisectLeft(8, high: 10, low: 9), 10);
});

test('bisectLeft for A, hi=0, lo=10', () {
expect(A.bisectLeft(-2, high: 0, low: 10), 10);
expect(A.bisectLeft(-1, high: 0, low: 10), 10);
expect(A.bisectLeft(0, high: 0, low: 10), 10);
expect(A.bisectLeft(1, high: 0, low: 10), 10);
expect(A.bisectLeft(2, high: 0, low: 10), 10);
expect(A.bisectLeft(3, high: 0, low: 10), 10);
expect(A.bisectLeft(4, high: 0, low: 10), 10);
expect(A.bisectLeft(5, high: 0, low: 10), 10);
expect(A.bisectLeft(6, high: 0, low: 10), 10);
expect(A.bisectLeft(7, high: 0, low: 10), 10);
expect(A.bisectLeft(8, high: 0, low: 10), 10);
});

test('bisectLeft for A, hi=1, lo=10', () {
expect(A.bisectLeft(-2, high: 1, low: 10), 10);
expect(A.bisectLeft(-1, high: 1, low: 10), 10);
expect(A.bisectLeft(0, high: 1, low: 10), 10);
expect(A.bisectLeft(1, high: 1, low: 10), 10);
expect(A.bisectLeft(2, high: 1, low: 10), 10);
expect(A.bisectLeft(3, high: 1, low: 10), 10);
expect(A.bisectLeft(4, high: 1, low: 10), 10);
expect(A.bisectLeft(5, high: 1, low: 10), 10);
expect(A.bisectLeft(6, high: 1, low: 10), 10);
expect(A.bisectLeft(7, high: 1, low: 10), 10);
expect(A.bisectLeft(8, high: 1, low: 10), 10);
});

test('bisectLeft for A, hi=2, lo=10', () {
expect(A.bisectLeft(-2, high: 2, low: 10), 10);
expect(A.bisectLeft(-1, high: 2, low: 10), 10);
expect(A.bisectLeft(0, high: 2, low: 10), 10);
expect(A.bisectLeft(1, high: 2, low: 10), 10);
expect(A.bisectLeft(2, high: 2, low: 10), 10);
expect(A.bisectLeft(3, high: 2, low: 10), 10);
expect(A.bisectLeft(4, high: 2, low: 10), 10);
expect(A.bisectLeft(5, high: 2, low: 10), 10);
expect(A.bisectLeft(6, high: 2, low: 10), 10);
expect(A.bisectLeft(7, high: 2, low: 10), 10);
expect(A.bisectLeft(8, high: 2, low: 10), 10);
});

test('bisectLeft for A, hi=3, lo=10', () {
expect(A.bisectLeft(-2, high: 3, low: 10), 10);
expect(A.bisectLeft(-1, high: 3, low: 10), 10);
expect(A.bisectLeft(0, high: 3, low: 10), 10);
expect(A.bisectLeft(1, high: 3, low: 10), 10);
expect(A.bisectLeft(2, high: 3, low: 10), 10);
expect(A.bisectLeft(3, high: 3, low: 10), 10);
expect(A.bisectLeft(4, high: 3, low: 10), 10);
expect(A.bisectLeft(5, high: 3, low: 10), 10);
expect(A.bisectLeft(6, high: 3, low: 10), 10);
expect(A.bisectLeft(7, high: 3, low: 10), 10);
expect(A.bisectLeft(8, high: 3, low: 10), 10);
});

test('bisectLeft for A, hi=4, lo=10', () {
expect(A.bisectLeft(-2, high: 4, low: 10), 10);
expect(A.bisectLeft(-1, high: 4, low: 10), 10);
expect(A.bisectLeft(0, high: 4, low: 10), 10);
expect(A.bisectLeft(1, high: 4, low: 10), 10);
expect(A.bisectLeft(2, high: 4, low: 10), 10);
expect(A.bisectLeft(3, high: 4, low: 10), 10);
expect(A.bisectLeft(4, high: 4, low: 10), 10);
expect(A.bisectLeft(5, high: 4, low: 10), 10);
expect(A.bisectLeft(6, high: 4, low: 10), 10);
expect(A.bisectLeft(7, high: 4, low: 10), 10);
expect(A.bisectLeft(8, high: 4, low: 10), 10);
});

test('bisectLeft for A, hi=5, lo=10', () {
expect(A.bisectLeft(-2, high: 5, low: 10), 10);
expect(A.bisectLeft(-1, high: 5, low: 10), 10);
expect(A.bisectLeft(0, high: 5, low: 10), 10);
expect(A.bisectLeft(1, high: 5, low: 10), 10);
expect(A.bisectLeft(2, high: 5, low: 10), 10);
expect(A.bisectLeft(3, high: 5, low: 10), 10);
expect(A.bisectLeft(4, high: 5, low: 10), 10);
expect(A.bisectLeft(5, high: 5, low: 10), 10);
expect(A.bisectLeft(6, high: 5, low: 10), 10);
expect(A.bisectLeft(7, high: 5, low: 10), 10);
expect(A.bisectLeft(8, high: 5, low: 10), 10);
});

test('bisectLeft for A, hi=6, lo=10', () {
expect(A.bisectLeft(-2, high: 6, low: 10), 10);
expect(A.bisectLeft(-1, high: 6, low: 10), 10);
expect(A.bisectLeft(0, high: 6, low: 10), 10);
expect(A.bisectLeft(1, high: 6, low: 10), 10);
expect(A.bisectLeft(2, high: 6, low: 10), 10);
expect(A.bisectLeft(3, high: 6, low: 10), 10);
expect(A.bisectLeft(4, high: 6, low: 10), 10);
expect(A.bisectLeft(5, high: 6, low: 10), 10);
expect(A.bisectLeft(6, high: 6, low: 10), 10);
expect(A.bisectLeft(7, high: 6, low: 10), 10);
expect(A.bisectLeft(8, high: 6, low: 10), 10);
});

test('bisectLeft for A, hi=7, lo=10', () {
expect(A.bisectLeft(-2, high: 7, low: 10), 10);
expect(A.bisectLeft(-1, high: 7, low: 10), 10);
expect(A.bisectLeft(0, high: 7, low: 10), 10);
expect(A.bisectLeft(1, high: 7, low: 10), 10);
expect(A.bisectLeft(2, high: 7, low: 10), 10);
expect(A.bisectLeft(3, high: 7, low: 10), 10);
expect(A.bisectLeft(4, high: 7, low: 10), 10);
expect(A.bisectLeft(5, high: 7, low: 10), 10);
expect(A.bisectLeft(6, high: 7, low: 10), 10);
expect(A.bisectLeft(7, high: 7, low: 10), 10);
expect(A.bisectLeft(8, high: 7, low: 10), 10);
});

test('bisectLeft for A, hi=8, lo=10', () {
expect(A.bisectLeft(-2, high: 8, low: 10), 10);
expect(A.bisectLeft(-1, high: 8, low: 10), 10);
expect(A.bisectLeft(0, high: 8, low: 10), 10);
expect(A.bisectLeft(1, high: 8, low: 10), 10);
expect(A.bisectLeft(2, high: 8, low: 10), 10);
expect(A.bisectLeft(3, high: 8, low: 10), 10);
expect(A.bisectLeft(4, high: 8, low: 10), 10);
expect(A.bisectLeft(5, high: 8, low: 10), 10);
expect(A.bisectLeft(6, high: 8, low: 10), 10);
expect(A.bisectLeft(7, high: 8, low: 10), 10);
expect(A.bisectLeft(8, high: 8, low: 10), 10);
});

test('bisectLeft for A, hi=9, lo=10', () {
expect(A.bisectLeft(-2, high: 9, low: 10), 10);
expect(A.bisectLeft(-1, high: 9, low: 10), 10);
expect(A.bisectLeft(0, high: 9, low: 10), 10);
expect(A.bisectLeft(1, high: 9, low: 10), 10);
expect(A.bisectLeft(2, high: 9, low: 10), 10);
expect(A.bisectLeft(3, high: 9, low: 10), 10);
expect(A.bisectLeft(4, high: 9, low: 10), 10);
expect(A.bisectLeft(5, high: 9, low: 10), 10);
expect(A.bisectLeft(6, high: 9, low: 10), 10);
expect(A.bisectLeft(7, high: 9, low: 10), 10);
expect(A.bisectLeft(8, high: 9, low: 10), 10);
});

test('bisectLeft for A, hi=10, lo=10', () {
expect(A.bisectLeft(-2, high: 10, low: 10), 10);
expect(A.bisectLeft(-1, high: 10, low: 10), 10);
expect(A.bisectLeft(0, high: 10, low: 10), 10);
expect(A.bisectLeft(1, high: 10, low: 10), 10);
expect(A.bisectLeft(2, high: 10, low: 10), 10);
expect(A.bisectLeft(3, high: 10, low: 10), 10);
expect(A.bisectLeft(4, high: 10, low: 10), 10);
expect(A.bisectLeft(5, high: 10, low: 10), 10);
expect(A.bisectLeft(6, high: 10, low: 10), 10);
expect(A.bisectLeft(7, high: 10, low: 10), 10);
expect(A.bisectLeft(8, high: 10, low: 10), 10);
});

test('bisectLeft for A, hi=0, lo=11', () {
expect(A.bisectLeft(-2, high: 0, low: 11), 11);
expect(A.bisectLeft(-1, high: 0, low: 11), 11);
expect(A.bisectLeft(0, high: 0, low: 11), 11);
expect(A.bisectLeft(1, high: 0, low: 11), 11);
expect(A.bisectLeft(2, high: 0, low: 11), 11);
expect(A.bisectLeft(3, high: 0, low: 11), 11);
expect(A.bisectLeft(4, high: 0, low: 11), 11);
expect(A.bisectLeft(5, high: 0, low: 11), 11);
expect(A.bisectLeft(6, high: 0, low: 11), 11);
expect(A.bisectLeft(7, high: 0, low: 11), 11);
expect(A.bisectLeft(8, high: 0, low: 11), 11);
});

test('bisectLeft for A, hi=1, lo=11', () {
expect(A.bisectLeft(-2, high: 1, low: 11), 11);
expect(A.bisectLeft(-1, high: 1, low: 11), 11);
expect(A.bisectLeft(0, high: 1, low: 11), 11);
expect(A.bisectLeft(1, high: 1, low: 11), 11);
expect(A.bisectLeft(2, high: 1, low: 11), 11);
expect(A.bisectLeft(3, high: 1, low: 11), 11);
expect(A.bisectLeft(4, high: 1, low: 11), 11);
expect(A.bisectLeft(5, high: 1, low: 11), 11);
expect(A.bisectLeft(6, high: 1, low: 11), 11);
expect(A.bisectLeft(7, high: 1, low: 11), 11);
expect(A.bisectLeft(8, high: 1, low: 11), 11);
});

test('bisectLeft for A, hi=2, lo=11', () {
expect(A.bisectLeft(-2, high: 2, low: 11), 11);
expect(A.bisectLeft(-1, high: 2, low: 11), 11);
expect(A.bisectLeft(0, high: 2, low: 11), 11);
expect(A.bisectLeft(1, high: 2, low: 11), 11);
expect(A.bisectLeft(2, high: 2, low: 11), 11);
expect(A.bisectLeft(3, high: 2, low: 11), 11);
expect(A.bisectLeft(4, high: 2, low: 11), 11);
expect(A.bisectLeft(5, high: 2, low: 11), 11);
expect(A.bisectLeft(6, high: 2, low: 11), 11);
expect(A.bisectLeft(7, high: 2, low: 11), 11);
expect(A.bisectLeft(8, high: 2, low: 11), 11);
});

test('bisectLeft for A, hi=3, lo=11', () {
expect(A.bisectLeft(-2, high: 3, low: 11), 11);
expect(A.bisectLeft(-1, high: 3, low: 11), 11);
expect(A.bisectLeft(0, high: 3, low: 11), 11);
expect(A.bisectLeft(1, high: 3, low: 11), 11);
expect(A.bisectLeft(2, high: 3, low: 11), 11);
expect(A.bisectLeft(3, high: 3, low: 11), 11);
expect(A.bisectLeft(4, high: 3, low: 11), 11);
expect(A.bisectLeft(5, high: 3, low: 11), 11);
expect(A.bisectLeft(6, high: 3, low: 11), 11);
expect(A.bisectLeft(7, high: 3, low: 11), 11);
expect(A.bisectLeft(8, high: 3, low: 11), 11);
});

test('bisectLeft for A, hi=4, lo=11', () {
expect(A.bisectLeft(-2, high: 4, low: 11), 11);
expect(A.bisectLeft(-1, high: 4, low: 11), 11);
expect(A.bisectLeft(0, high: 4, low: 11), 11);
expect(A.bisectLeft(1, high: 4, low: 11), 11);
expect(A.bisectLeft(2, high: 4, low: 11), 11);
expect(A.bisectLeft(3, high: 4, low: 11), 11);
expect(A.bisectLeft(4, high: 4, low: 11), 11);
expect(A.bisectLeft(5, high: 4, low: 11), 11);
expect(A.bisectLeft(6, high: 4, low: 11), 11);
expect(A.bisectLeft(7, high: 4, low: 11), 11);
expect(A.bisectLeft(8, high: 4, low: 11), 11);
});

test('bisectLeft for A, hi=5, lo=11', () {
expect(A.bisectLeft(-2, high: 5, low: 11), 11);
expect(A.bisectLeft(-1, high: 5, low: 11), 11);
expect(A.bisectLeft(0, high: 5, low: 11), 11);
expect(A.bisectLeft(1, high: 5, low: 11), 11);
expect(A.bisectLeft(2, high: 5, low: 11), 11);
expect(A.bisectLeft(3, high: 5, low: 11), 11);
expect(A.bisectLeft(4, high: 5, low: 11), 11);
expect(A.bisectLeft(5, high: 5, low: 11), 11);
expect(A.bisectLeft(6, high: 5, low: 11), 11);
expect(A.bisectLeft(7, high: 5, low: 11), 11);
expect(A.bisectLeft(8, high: 5, low: 11), 11);
});

test('bisectLeft for A, hi=6, lo=11', () {
expect(A.bisectLeft(-2, high: 6, low: 11), 11);
expect(A.bisectLeft(-1, high: 6, low: 11), 11);
expect(A.bisectLeft(0, high: 6, low: 11), 11);
expect(A.bisectLeft(1, high: 6, low: 11), 11);
expect(A.bisectLeft(2, high: 6, low: 11), 11);
expect(A.bisectLeft(3, high: 6, low: 11), 11);
expect(A.bisectLeft(4, high: 6, low: 11), 11);
expect(A.bisectLeft(5, high: 6, low: 11), 11);
expect(A.bisectLeft(6, high: 6, low: 11), 11);
expect(A.bisectLeft(7, high: 6, low: 11), 11);
expect(A.bisectLeft(8, high: 6, low: 11), 11);
});

test('bisectLeft for A, hi=7, lo=11', () {
expect(A.bisectLeft(-2, high: 7, low: 11), 11);
expect(A.bisectLeft(-1, high: 7, low: 11), 11);
expect(A.bisectLeft(0, high: 7, low: 11), 11);
expect(A.bisectLeft(1, high: 7, low: 11), 11);
expect(A.bisectLeft(2, high: 7, low: 11), 11);
expect(A.bisectLeft(3, high: 7, low: 11), 11);
expect(A.bisectLeft(4, high: 7, low: 11), 11);
expect(A.bisectLeft(5, high: 7, low: 11), 11);
expect(A.bisectLeft(6, high: 7, low: 11), 11);
expect(A.bisectLeft(7, high: 7, low: 11), 11);
expect(A.bisectLeft(8, high: 7, low: 11), 11);
});

test('bisectLeft for A, hi=8, lo=11', () {
expect(A.bisectLeft(-2, high: 8, low: 11), 11);
expect(A.bisectLeft(-1, high: 8, low: 11), 11);
expect(A.bisectLeft(0, high: 8, low: 11), 11);
expect(A.bisectLeft(1, high: 8, low: 11), 11);
expect(A.bisectLeft(2, high: 8, low: 11), 11);
expect(A.bisectLeft(3, high: 8, low: 11), 11);
expect(A.bisectLeft(4, high: 8, low: 11), 11);
expect(A.bisectLeft(5, high: 8, low: 11), 11);
expect(A.bisectLeft(6, high: 8, low: 11), 11);
expect(A.bisectLeft(7, high: 8, low: 11), 11);
expect(A.bisectLeft(8, high: 8, low: 11), 11);
});

test('bisectLeft for A, hi=9, lo=11', () {
expect(A.bisectLeft(-2, high: 9, low: 11), 11);
expect(A.bisectLeft(-1, high: 9, low: 11), 11);
expect(A.bisectLeft(0, high: 9, low: 11), 11);
expect(A.bisectLeft(1, high: 9, low: 11), 11);
expect(A.bisectLeft(2, high: 9, low: 11), 11);
expect(A.bisectLeft(3, high: 9, low: 11), 11);
expect(A.bisectLeft(4, high: 9, low: 11), 11);
expect(A.bisectLeft(5, high: 9, low: 11), 11);
expect(A.bisectLeft(6, high: 9, low: 11), 11);
expect(A.bisectLeft(7, high: 9, low: 11), 11);
expect(A.bisectLeft(8, high: 9, low: 11), 11);
});

test('bisectLeft for A, hi=10, lo=11', () {
expect(A.bisectLeft(-2, high: 10, low: 11), 11);
expect(A.bisectLeft(-1, high: 10, low: 11), 11);
expect(A.bisectLeft(0, high: 10, low: 11), 11);
expect(A.bisectLeft(1, high: 10, low: 11), 11);
expect(A.bisectLeft(2, high: 10, low: 11), 11);
expect(A.bisectLeft(3, high: 10, low: 11), 11);
expect(A.bisectLeft(4, high: 10, low: 11), 11);
expect(A.bisectLeft(5, high: 10, low: 11), 11);
expect(A.bisectLeft(6, high: 10, low: 11), 11);
expect(A.bisectLeft(7, high: 10, low: 11), 11);
expect(A.bisectLeft(8, high: 10, low: 11), 11);
});

test('bisectLeft for A, hi=0, lo=12', () {
expect(A.bisectLeft(-2, high: 0, low: 12), 12);
expect(A.bisectLeft(-1, high: 0, low: 12), 12);
expect(A.bisectLeft(0, high: 0, low: 12), 12);
expect(A.bisectLeft(1, high: 0, low: 12), 12);
expect(A.bisectLeft(2, high: 0, low: 12), 12);
expect(A.bisectLeft(3, high: 0, low: 12), 12);
expect(A.bisectLeft(4, high: 0, low: 12), 12);
expect(A.bisectLeft(5, high: 0, low: 12), 12);
expect(A.bisectLeft(6, high: 0, low: 12), 12);
expect(A.bisectLeft(7, high: 0, low: 12), 12);
expect(A.bisectLeft(8, high: 0, low: 12), 12);
});

test('bisectLeft for A, hi=1, lo=12', () {
expect(A.bisectLeft(-2, high: 1, low: 12), 12);
expect(A.bisectLeft(-1, high: 1, low: 12), 12);
expect(A.bisectLeft(0, high: 1, low: 12), 12);
expect(A.bisectLeft(1, high: 1, low: 12), 12);
expect(A.bisectLeft(2, high: 1, low: 12), 12);
expect(A.bisectLeft(3, high: 1, low: 12), 12);
expect(A.bisectLeft(4, high: 1, low: 12), 12);
expect(A.bisectLeft(5, high: 1, low: 12), 12);
expect(A.bisectLeft(6, high: 1, low: 12), 12);
expect(A.bisectLeft(7, high: 1, low: 12), 12);
expect(A.bisectLeft(8, high: 1, low: 12), 12);
});

test('bisectLeft for A, hi=2, lo=12', () {
expect(A.bisectLeft(-2, high: 2, low: 12), 12);
expect(A.bisectLeft(-1, high: 2, low: 12), 12);
expect(A.bisectLeft(0, high: 2, low: 12), 12);
expect(A.bisectLeft(1, high: 2, low: 12), 12);
expect(A.bisectLeft(2, high: 2, low: 12), 12);
expect(A.bisectLeft(3, high: 2, low: 12), 12);
expect(A.bisectLeft(4, high: 2, low: 12), 12);
expect(A.bisectLeft(5, high: 2, low: 12), 12);
expect(A.bisectLeft(6, high: 2, low: 12), 12);
expect(A.bisectLeft(7, high: 2, low: 12), 12);
expect(A.bisectLeft(8, high: 2, low: 12), 12);
});

test('bisectLeft for A, hi=3, lo=12', () {
expect(A.bisectLeft(-2, high: 3, low: 12), 12);
expect(A.bisectLeft(-1, high: 3, low: 12), 12);
expect(A.bisectLeft(0, high: 3, low: 12), 12);
expect(A.bisectLeft(1, high: 3, low: 12), 12);
expect(A.bisectLeft(2, high: 3, low: 12), 12);
expect(A.bisectLeft(3, high: 3, low: 12), 12);
expect(A.bisectLeft(4, high: 3, low: 12), 12);
expect(A.bisectLeft(5, high: 3, low: 12), 12);
expect(A.bisectLeft(6, high: 3, low: 12), 12);
expect(A.bisectLeft(7, high: 3, low: 12), 12);
expect(A.bisectLeft(8, high: 3, low: 12), 12);
});

test('bisectLeft for A, hi=4, lo=12', () {
expect(A.bisectLeft(-2, high: 4, low: 12), 12);
expect(A.bisectLeft(-1, high: 4, low: 12), 12);
expect(A.bisectLeft(0, high: 4, low: 12), 12);
expect(A.bisectLeft(1, high: 4, low: 12), 12);
expect(A.bisectLeft(2, high: 4, low: 12), 12);
expect(A.bisectLeft(3, high: 4, low: 12), 12);
expect(A.bisectLeft(4, high: 4, low: 12), 12);
expect(A.bisectLeft(5, high: 4, low: 12), 12);
expect(A.bisectLeft(6, high: 4, low: 12), 12);
expect(A.bisectLeft(7, high: 4, low: 12), 12);
expect(A.bisectLeft(8, high: 4, low: 12), 12);
});

test('bisectLeft for A, hi=5, lo=12', () {
expect(A.bisectLeft(-2, high: 5, low: 12), 12);
expect(A.bisectLeft(-1, high: 5, low: 12), 12);
expect(A.bisectLeft(0, high: 5, low: 12), 12);
expect(A.bisectLeft(1, high: 5, low: 12), 12);
expect(A.bisectLeft(2, high: 5, low: 12), 12);
expect(A.bisectLeft(3, high: 5, low: 12), 12);
expect(A.bisectLeft(4, high: 5, low: 12), 12);
expect(A.bisectLeft(5, high: 5, low: 12), 12);
expect(A.bisectLeft(6, high: 5, low: 12), 12);
expect(A.bisectLeft(7, high: 5, low: 12), 12);
expect(A.bisectLeft(8, high: 5, low: 12), 12);
});

test('bisectLeft for A, hi=6, lo=12', () {
expect(A.bisectLeft(-2, high: 6, low: 12), 12);
expect(A.bisectLeft(-1, high: 6, low: 12), 12);
expect(A.bisectLeft(0, high: 6, low: 12), 12);
expect(A.bisectLeft(1, high: 6, low: 12), 12);
expect(A.bisectLeft(2, high: 6, low: 12), 12);
expect(A.bisectLeft(3, high: 6, low: 12), 12);
expect(A.bisectLeft(4, high: 6, low: 12), 12);
expect(A.bisectLeft(5, high: 6, low: 12), 12);
expect(A.bisectLeft(6, high: 6, low: 12), 12);
expect(A.bisectLeft(7, high: 6, low: 12), 12);
expect(A.bisectLeft(8, high: 6, low: 12), 12);
});

test('bisectLeft for A, hi=7, lo=12', () {
expect(A.bisectLeft(-2, high: 7, low: 12), 12);
expect(A.bisectLeft(-1, high: 7, low: 12), 12);
expect(A.bisectLeft(0, high: 7, low: 12), 12);
expect(A.bisectLeft(1, high: 7, low: 12), 12);
expect(A.bisectLeft(2, high: 7, low: 12), 12);
expect(A.bisectLeft(3, high: 7, low: 12), 12);
expect(A.bisectLeft(4, high: 7, low: 12), 12);
expect(A.bisectLeft(5, high: 7, low: 12), 12);
expect(A.bisectLeft(6, high: 7, low: 12), 12);
expect(A.bisectLeft(7, high: 7, low: 12), 12);
expect(A.bisectLeft(8, high: 7, low: 12), 12);
});

test('bisectLeft for A, hi=8, lo=12', () {
expect(A.bisectLeft(-2, high: 8, low: 12), 12);
expect(A.bisectLeft(-1, high: 8, low: 12), 12);
expect(A.bisectLeft(0, high: 8, low: 12), 12);
expect(A.bisectLeft(1, high: 8, low: 12), 12);
expect(A.bisectLeft(2, high: 8, low: 12), 12);
expect(A.bisectLeft(3, high: 8, low: 12), 12);
expect(A.bisectLeft(4, high: 8, low: 12), 12);
expect(A.bisectLeft(5, high: 8, low: 12), 12);
expect(A.bisectLeft(6, high: 8, low: 12), 12);
expect(A.bisectLeft(7, high: 8, low: 12), 12);
expect(A.bisectLeft(8, high: 8, low: 12), 12);
});

test('bisectLeft for A, hi=9, lo=12', () {
expect(A.bisectLeft(-2, high: 9, low: 12), 12);
expect(A.bisectLeft(-1, high: 9, low: 12), 12);
expect(A.bisectLeft(0, high: 9, low: 12), 12);
expect(A.bisectLeft(1, high: 9, low: 12), 12);
expect(A.bisectLeft(2, high: 9, low: 12), 12);
expect(A.bisectLeft(3, high: 9, low: 12), 12);
expect(A.bisectLeft(4, high: 9, low: 12), 12);
expect(A.bisectLeft(5, high: 9, low: 12), 12);
expect(A.bisectLeft(6, high: 9, low: 12), 12);
expect(A.bisectLeft(7, high: 9, low: 12), 12);
expect(A.bisectLeft(8, high: 9, low: 12), 12);
});

test('bisectLeft for A, hi=10, lo=12', () {
expect(A.bisectLeft(-2, high: 10, low: 12), 12);
expect(A.bisectLeft(-1, high: 10, low: 12), 12);
expect(A.bisectLeft(0, high: 10, low: 12), 12);
expect(A.bisectLeft(1, high: 10, low: 12), 12);
expect(A.bisectLeft(2, high: 10, low: 12), 12);
expect(A.bisectLeft(3, high: 10, low: 12), 12);
expect(A.bisectLeft(4, high: 10, low: 12), 12);
expect(A.bisectLeft(5, high: 10, low: 12), 12);
expect(A.bisectLeft(6, high: 10, low: 12), 12);
expect(A.bisectLeft(7, high: 10, low: 12), 12);
expect(A.bisectLeft(8, high: 10, low: 12), 12);
});

test('bisectLeft for A, hi=0, lo=13', () {
expect(A.bisectLeft(-2, high: 0, low: 13), 13);
expect(A.bisectLeft(-1, high: 0, low: 13), 13);
expect(A.bisectLeft(0, high: 0, low: 13), 13);
expect(A.bisectLeft(1, high: 0, low: 13), 13);
expect(A.bisectLeft(2, high: 0, low: 13), 13);
expect(A.bisectLeft(3, high: 0, low: 13), 13);
expect(A.bisectLeft(4, high: 0, low: 13), 13);
expect(A.bisectLeft(5, high: 0, low: 13), 13);
expect(A.bisectLeft(6, high: 0, low: 13), 13);
expect(A.bisectLeft(7, high: 0, low: 13), 13);
expect(A.bisectLeft(8, high: 0, low: 13), 13);
});

test('bisectLeft for A, hi=1, lo=13', () {
expect(A.bisectLeft(-2, high: 1, low: 13), 13);
expect(A.bisectLeft(-1, high: 1, low: 13), 13);
expect(A.bisectLeft(0, high: 1, low: 13), 13);
expect(A.bisectLeft(1, high: 1, low: 13), 13);
expect(A.bisectLeft(2, high: 1, low: 13), 13);
expect(A.bisectLeft(3, high: 1, low: 13), 13);
expect(A.bisectLeft(4, high: 1, low: 13), 13);
expect(A.bisectLeft(5, high: 1, low: 13), 13);
expect(A.bisectLeft(6, high: 1, low: 13), 13);
expect(A.bisectLeft(7, high: 1, low: 13), 13);
expect(A.bisectLeft(8, high: 1, low: 13), 13);
});

test('bisectLeft for A, hi=2, lo=13', () {
expect(A.bisectLeft(-2, high: 2, low: 13), 13);
expect(A.bisectLeft(-1, high: 2, low: 13), 13);
expect(A.bisectLeft(0, high: 2, low: 13), 13);
expect(A.bisectLeft(1, high: 2, low: 13), 13);
expect(A.bisectLeft(2, high: 2, low: 13), 13);
expect(A.bisectLeft(3, high: 2, low: 13), 13);
expect(A.bisectLeft(4, high: 2, low: 13), 13);
expect(A.bisectLeft(5, high: 2, low: 13), 13);
expect(A.bisectLeft(6, high: 2, low: 13), 13);
expect(A.bisectLeft(7, high: 2, low: 13), 13);
expect(A.bisectLeft(8, high: 2, low: 13), 13);
});

test('bisectLeft for A, hi=3, lo=13', () {
expect(A.bisectLeft(-2, high: 3, low: 13), 13);
expect(A.bisectLeft(-1, high: 3, low: 13), 13);
expect(A.bisectLeft(0, high: 3, low: 13), 13);
expect(A.bisectLeft(1, high: 3, low: 13), 13);
expect(A.bisectLeft(2, high: 3, low: 13), 13);
expect(A.bisectLeft(3, high: 3, low: 13), 13);
expect(A.bisectLeft(4, high: 3, low: 13), 13);
expect(A.bisectLeft(5, high: 3, low: 13), 13);
expect(A.bisectLeft(6, high: 3, low: 13), 13);
expect(A.bisectLeft(7, high: 3, low: 13), 13);
expect(A.bisectLeft(8, high: 3, low: 13), 13);
});

test('bisectLeft for A, hi=4, lo=13', () {
expect(A.bisectLeft(-2, high: 4, low: 13), 13);
expect(A.bisectLeft(-1, high: 4, low: 13), 13);
expect(A.bisectLeft(0, high: 4, low: 13), 13);
expect(A.bisectLeft(1, high: 4, low: 13), 13);
expect(A.bisectLeft(2, high: 4, low: 13), 13);
expect(A.bisectLeft(3, high: 4, low: 13), 13);
expect(A.bisectLeft(4, high: 4, low: 13), 13);
expect(A.bisectLeft(5, high: 4, low: 13), 13);
expect(A.bisectLeft(6, high: 4, low: 13), 13);
expect(A.bisectLeft(7, high: 4, low: 13), 13);
expect(A.bisectLeft(8, high: 4, low: 13), 13);
});

test('bisectLeft for A, hi=5, lo=13', () {
expect(A.bisectLeft(-2, high: 5, low: 13), 13);
expect(A.bisectLeft(-1, high: 5, low: 13), 13);
expect(A.bisectLeft(0, high: 5, low: 13), 13);
expect(A.bisectLeft(1, high: 5, low: 13), 13);
expect(A.bisectLeft(2, high: 5, low: 13), 13);
expect(A.bisectLeft(3, high: 5, low: 13), 13);
expect(A.bisectLeft(4, high: 5, low: 13), 13);
expect(A.bisectLeft(5, high: 5, low: 13), 13);
expect(A.bisectLeft(6, high: 5, low: 13), 13);
expect(A.bisectLeft(7, high: 5, low: 13), 13);
expect(A.bisectLeft(8, high: 5, low: 13), 13);
});

test('bisectLeft for A, hi=6, lo=13', () {
expect(A.bisectLeft(-2, high: 6, low: 13), 13);
expect(A.bisectLeft(-1, high: 6, low: 13), 13);
expect(A.bisectLeft(0, high: 6, low: 13), 13);
expect(A.bisectLeft(1, high: 6, low: 13), 13);
expect(A.bisectLeft(2, high: 6, low: 13), 13);
expect(A.bisectLeft(3, high: 6, low: 13), 13);
expect(A.bisectLeft(4, high: 6, low: 13), 13);
expect(A.bisectLeft(5, high: 6, low: 13), 13);
expect(A.bisectLeft(6, high: 6, low: 13), 13);
expect(A.bisectLeft(7, high: 6, low: 13), 13);
expect(A.bisectLeft(8, high: 6, low: 13), 13);
});

test('bisectLeft for A, hi=7, lo=13', () {
expect(A.bisectLeft(-2, high: 7, low: 13), 13);
expect(A.bisectLeft(-1, high: 7, low: 13), 13);
expect(A.bisectLeft(0, high: 7, low: 13), 13);
expect(A.bisectLeft(1, high: 7, low: 13), 13);
expect(A.bisectLeft(2, high: 7, low: 13), 13);
expect(A.bisectLeft(3, high: 7, low: 13), 13);
expect(A.bisectLeft(4, high: 7, low: 13), 13);
expect(A.bisectLeft(5, high: 7, low: 13), 13);
expect(A.bisectLeft(6, high: 7, low: 13), 13);
expect(A.bisectLeft(7, high: 7, low: 13), 13);
expect(A.bisectLeft(8, high: 7, low: 13), 13);
});

test('bisectLeft for A, hi=8, lo=13', () {
expect(A.bisectLeft(-2, high: 8, low: 13), 13);
expect(A.bisectLeft(-1, high: 8, low: 13), 13);
expect(A.bisectLeft(0, high: 8, low: 13), 13);
expect(A.bisectLeft(1, high: 8, low: 13), 13);
expect(A.bisectLeft(2, high: 8, low: 13), 13);
expect(A.bisectLeft(3, high: 8, low: 13), 13);
expect(A.bisectLeft(4, high: 8, low: 13), 13);
expect(A.bisectLeft(5, high: 8, low: 13), 13);
expect(A.bisectLeft(6, high: 8, low: 13), 13);
expect(A.bisectLeft(7, high: 8, low: 13), 13);
expect(A.bisectLeft(8, high: 8, low: 13), 13);
});

test('bisectLeft for A, hi=9, lo=13', () {
expect(A.bisectLeft(-2, high: 9, low: 13), 13);
expect(A.bisectLeft(-1, high: 9, low: 13), 13);
expect(A.bisectLeft(0, high: 9, low: 13), 13);
expect(A.bisectLeft(1, high: 9, low: 13), 13);
expect(A.bisectLeft(2, high: 9, low: 13), 13);
expect(A.bisectLeft(3, high: 9, low: 13), 13);
expect(A.bisectLeft(4, high: 9, low: 13), 13);
expect(A.bisectLeft(5, high: 9, low: 13), 13);
expect(A.bisectLeft(6, high: 9, low: 13), 13);
expect(A.bisectLeft(7, high: 9, low: 13), 13);
expect(A.bisectLeft(8, high: 9, low: 13), 13);
});

test('bisectLeft for A, hi=10, lo=13', () {
expect(A.bisectLeft(-2, high: 10, low: 13), 13);
expect(A.bisectLeft(-1, high: 10, low: 13), 13);
expect(A.bisectLeft(0, high: 10, low: 13), 13);
expect(A.bisectLeft(1, high: 10, low: 13), 13);
expect(A.bisectLeft(2, high: 10, low: 13), 13);
expect(A.bisectLeft(3, high: 10, low: 13), 13);
expect(A.bisectLeft(4, high: 10, low: 13), 13);
expect(A.bisectLeft(5, high: 10, low: 13), 13);
expect(A.bisectLeft(6, high: 10, low: 13), 13);
expect(A.bisectLeft(7, high: 10, low: 13), 13);
expect(A.bisectLeft(8, high: 10, low: 13), 13);
});

test('bisectLeft for B, hi=0, lo=0', () {
expect(B.bisectLeft(-2, high: 0, low: 0), 0);
expect(B.bisectLeft(-1, high: 0, low: 0), 0);
expect(B.bisectLeft(0, high: 0, low: 0), 0);
expect(B.bisectLeft(1, high: 0, low: 0), 0);
expect(B.bisectLeft(2, high: 0, low: 0), 0);
expect(B.bisectLeft(3, high: 0, low: 0), 0);
expect(B.bisectLeft(4, high: 0, low: 0), 0);
expect(B.bisectLeft(5, high: 0, low: 0), 0);
expect(B.bisectLeft(6, high: 0, low: 0), 0);
expect(B.bisectLeft(7, high: 0, low: 0), 0);
expect(B.bisectLeft(8, high: 0, low: 0), 0);
});

test('bisectLeft for B, hi=0, lo=1', () {
expect(B.bisectLeft(-2, high: 0, low: 1), 1);
expect(B.bisectLeft(-1, high: 0, low: 1), 1);
expect(B.bisectLeft(0, high: 0, low: 1), 1);
expect(B.bisectLeft(1, high: 0, low: 1), 1);
expect(B.bisectLeft(2, high: 0, low: 1), 1);
expect(B.bisectLeft(3, high: 0, low: 1), 1);
expect(B.bisectLeft(4, high: 0, low: 1), 1);
expect(B.bisectLeft(5, high: 0, low: 1), 1);
expect(B.bisectLeft(6, high: 0, low: 1), 1);
expect(B.bisectLeft(7, high: 0, low: 1), 1);
expect(B.bisectLeft(8, high: 0, low: 1), 1);
});

test('bisectLeft for B, hi=0, lo=2', () {
expect(B.bisectLeft(-2, high: 0, low: 2), 2);
expect(B.bisectLeft(-1, high: 0, low: 2), 2);
expect(B.bisectLeft(0, high: 0, low: 2), 2);
expect(B.bisectLeft(1, high: 0, low: 2), 2);
expect(B.bisectLeft(2, high: 0, low: 2), 2);
expect(B.bisectLeft(3, high: 0, low: 2), 2);
expect(B.bisectLeft(4, high: 0, low: 2), 2);
expect(B.bisectLeft(5, high: 0, low: 2), 2);
expect(B.bisectLeft(6, high: 0, low: 2), 2);
expect(B.bisectLeft(7, high: 0, low: 2), 2);
expect(B.bisectLeft(8, high: 0, low: 2), 2);
});

test('bisectLeft for B, hi=0, lo=3', () {
expect(B.bisectLeft(-2, high: 0, low: 3), 3);
expect(B.bisectLeft(-1, high: 0, low: 3), 3);
expect(B.bisectLeft(0, high: 0, low: 3), 3);
expect(B.bisectLeft(1, high: 0, low: 3), 3);
expect(B.bisectLeft(2, high: 0, low: 3), 3);
expect(B.bisectLeft(3, high: 0, low: 3), 3);
expect(B.bisectLeft(4, high: 0, low: 3), 3);
expect(B.bisectLeft(5, high: 0, low: 3), 3);
expect(B.bisectLeft(6, high: 0, low: 3), 3);
expect(B.bisectLeft(7, high: 0, low: 3), 3);
expect(B.bisectLeft(8, high: 0, low: 3), 3);
});

test('bisectLeft for C, hi=0, lo=0', () {
expect(C.bisectLeft(-2, high: 0, low: 0), 0);
expect(C.bisectLeft(-1, high: 0, low: 0), 0);
expect(C.bisectLeft(0, high: 0, low: 0), 0);
expect(C.bisectLeft(1, high: 0, low: 0), 0);
expect(C.bisectLeft(2, high: 0, low: 0), 0);
expect(C.bisectLeft(3, high: 0, low: 0), 0);
expect(C.bisectLeft(4, high: 0, low: 0), 0);
expect(C.bisectLeft(5, high: 0, low: 0), 0);
expect(C.bisectLeft(6, high: 0, low: 0), 0);
expect(C.bisectLeft(7, high: 0, low: 0), 0);
expect(C.bisectLeft(8, high: 0, low: 0), 0);
});

test('bisectLeft for C, hi=1, lo=0', () {
expect(C.bisectLeft(-2, high: 1, low: 0), 0);
expect(C.bisectLeft(-1, high: 1, low: 0), 0);
expect(C.bisectLeft(0, high: 1, low: 0), 0);
expect(C.bisectLeft(1, high: 1, low: 0), 0);
expect(C.bisectLeft(2, high: 1, low: 0), 0);
expect(C.bisectLeft(3, high: 1, low: 0), 0);
expect(C.bisectLeft(4, high: 1, low: 0), 1);
expect(C.bisectLeft(5, high: 1, low: 0), 1);
expect(C.bisectLeft(6, high: 1, low: 0), 1);
expect(C.bisectLeft(7, high: 1, low: 0), 1);
expect(C.bisectLeft(8, high: 1, low: 0), 1);
});

test('bisectLeft for C, hi=0, lo=1', () {
expect(C.bisectLeft(-2, high: 0, low: 1), 1);
expect(C.bisectLeft(-1, high: 0, low: 1), 1);
expect(C.bisectLeft(0, high: 0, low: 1), 1);
expect(C.bisectLeft(1, high: 0, low: 1), 1);
expect(C.bisectLeft(2, high: 0, low: 1), 1);
expect(C.bisectLeft(3, high: 0, low: 1), 1);
expect(C.bisectLeft(4, high: 0, low: 1), 1);
expect(C.bisectLeft(5, high: 0, low: 1), 1);
expect(C.bisectLeft(6, high: 0, low: 1), 1);
expect(C.bisectLeft(7, high: 0, low: 1), 1);
expect(C.bisectLeft(8, high: 0, low: 1), 1);
});

test('bisectLeft for C, hi=1, lo=1', () {
expect(C.bisectLeft(-2, high: 1, low: 1), 1);
expect(C.bisectLeft(-1, high: 1, low: 1), 1);
expect(C.bisectLeft(0, high: 1, low: 1), 1);
expect(C.bisectLeft(1, high: 1, low: 1), 1);
expect(C.bisectLeft(2, high: 1, low: 1), 1);
expect(C.bisectLeft(3, high: 1, low: 1), 1);
expect(C.bisectLeft(4, high: 1, low: 1), 1);
expect(C.bisectLeft(5, high: 1, low: 1), 1);
expect(C.bisectLeft(6, high: 1, low: 1), 1);
expect(C.bisectLeft(7, high: 1, low: 1), 1);
expect(C.bisectLeft(8, high: 1, low: 1), 1);
});

test('bisectLeft for C, hi=0, lo=2', () {
expect(C.bisectLeft(-2, high: 0, low: 2), 2);
expect(C.bisectLeft(-1, high: 0, low: 2), 2);
expect(C.bisectLeft(0, high: 0, low: 2), 2);
expect(C.bisectLeft(1, high: 0, low: 2), 2);
expect(C.bisectLeft(2, high: 0, low: 2), 2);
expect(C.bisectLeft(3, high: 0, low: 2), 2);
expect(C.bisectLeft(4, high: 0, low: 2), 2);
expect(C.bisectLeft(5, high: 0, low: 2), 2);
expect(C.bisectLeft(6, high: 0, low: 2), 2);
expect(C.bisectLeft(7, high: 0, low: 2), 2);
expect(C.bisectLeft(8, high: 0, low: 2), 2);
});

test('bisectLeft for C, hi=1, lo=2', () {
expect(C.bisectLeft(-2, high: 1, low: 2), 2);
expect(C.bisectLeft(-1, high: 1, low: 2), 2);
expect(C.bisectLeft(0, high: 1, low: 2), 2);
expect(C.bisectLeft(1, high: 1, low: 2), 2);
expect(C.bisectLeft(2, high: 1, low: 2), 2);
expect(C.bisectLeft(3, high: 1, low: 2), 2);
expect(C.bisectLeft(4, high: 1, low: 2), 2);
expect(C.bisectLeft(5, high: 1, low: 2), 2);
expect(C.bisectLeft(6, high: 1, low: 2), 2);
expect(C.bisectLeft(7, high: 1, low: 2), 2);
expect(C.bisectLeft(8, high: 1, low: 2), 2);
});

test('bisectLeft for C, hi=0, lo=3', () {
expect(C.bisectLeft(-2, high: 0, low: 3), 3);
expect(C.bisectLeft(-1, high: 0, low: 3), 3);
expect(C.bisectLeft(0, high: 0, low: 3), 3);
expect(C.bisectLeft(1, high: 0, low: 3), 3);
expect(C.bisectLeft(2, high: 0, low: 3), 3);
expect(C.bisectLeft(3, high: 0, low: 3), 3);
expect(C.bisectLeft(4, high: 0, low: 3), 3);
expect(C.bisectLeft(5, high: 0, low: 3), 3);
expect(C.bisectLeft(6, high: 0, low: 3), 3);
expect(C.bisectLeft(7, high: 0, low: 3), 3);
expect(C.bisectLeft(8, high: 0, low: 3), 3);
});

test('bisectLeft for C, hi=1, lo=3', () {
expect(C.bisectLeft(-2, high: 1, low: 3), 3);
expect(C.bisectLeft(-1, high: 1, low: 3), 3);
expect(C.bisectLeft(0, high: 1, low: 3), 3);
expect(C.bisectLeft(1, high: 1, low: 3), 3);
expect(C.bisectLeft(2, high: 1, low: 3), 3);
expect(C.bisectLeft(3, high: 1, low: 3), 3);
expect(C.bisectLeft(4, high: 1, low: 3), 3);
expect(C.bisectLeft(5, high: 1, low: 3), 3);
expect(C.bisectLeft(6, high: 1, low: 3), 3);
expect(C.bisectLeft(7, high: 1, low: 3), 3);
expect(C.bisectLeft(8, high: 1, low: 3), 3);
});

test('bisectLeft for C, hi=0, lo=4', () {
expect(C.bisectLeft(-2, high: 0, low: 4), 4);
expect(C.bisectLeft(-1, high: 0, low: 4), 4);
expect(C.bisectLeft(0, high: 0, low: 4), 4);
expect(C.bisectLeft(1, high: 0, low: 4), 4);
expect(C.bisectLeft(2, high: 0, low: 4), 4);
expect(C.bisectLeft(3, high: 0, low: 4), 4);
expect(C.bisectLeft(4, high: 0, low: 4), 4);
expect(C.bisectLeft(5, high: 0, low: 4), 4);
expect(C.bisectLeft(6, high: 0, low: 4), 4);
expect(C.bisectLeft(7, high: 0, low: 4), 4);
expect(C.bisectLeft(8, high: 0, low: 4), 4);
});

test('bisectLeft for C, hi=1, lo=4', () {
expect(C.bisectLeft(-2, high: 1, low: 4), 4);
expect(C.bisectLeft(-1, high: 1, low: 4), 4);
expect(C.bisectLeft(0, high: 1, low: 4), 4);
expect(C.bisectLeft(1, high: 1, low: 4), 4);
expect(C.bisectLeft(2, high: 1, low: 4), 4);
expect(C.bisectLeft(3, high: 1, low: 4), 4);
expect(C.bisectLeft(4, high: 1, low: 4), 4);
expect(C.bisectLeft(5, high: 1, low: 4), 4);
expect(C.bisectLeft(6, high: 1, low: 4), 4);
expect(C.bisectLeft(7, high: 1, low: 4), 4);
expect(C.bisectLeft(8, high: 1, low: 4), 4);
});

test('bisectLeft for D, hi=0, lo=0', () {
expect(D.bisectLeft(-2, high: 0, low: 0), 0);
expect(D.bisectLeft(-1, high: 0, low: 0), 0);
expect(D.bisectLeft(0, high: 0, low: 0), 0);
expect(D.bisectLeft(1, high: 0, low: 0), 0);
expect(D.bisectLeft(2, high: 0, low: 0), 0);
expect(D.bisectLeft(3, high: 0, low: 0), 0);
expect(D.bisectLeft(4, high: 0, low: 0), 0);
expect(D.bisectLeft(5, high: 0, low: 0), 0);
expect(D.bisectLeft(6, high: 0, low: 0), 0);
expect(D.bisectLeft(7, high: 0, low: 0), 0);
expect(D.bisectLeft(8, high: 0, low: 0), 0);
});

test('bisectLeft for D, hi=1, lo=0', () {
expect(D.bisectLeft(-2, high: 1, low: 0), 0);
expect(D.bisectLeft(-1, high: 1, low: 0), 0);
expect(D.bisectLeft(0, high: 1, low: 0), 0);
expect(D.bisectLeft(1, high: 1, low: 0), 0);
expect(D.bisectLeft(2, high: 1, low: 0), 0);
expect(D.bisectLeft(3, high: 1, low: 0), 1);
expect(D.bisectLeft(4, high: 1, low: 0), 1);
expect(D.bisectLeft(5, high: 1, low: 0), 1);
expect(D.bisectLeft(6, high: 1, low: 0), 1);
expect(D.bisectLeft(7, high: 1, low: 0), 1);
expect(D.bisectLeft(8, high: 1, low: 0), 1);
});

test('bisectLeft for D, hi=2, lo=0', () {
expect(D.bisectLeft(-2, high: 2, low: 0), 0);
expect(D.bisectLeft(-1, high: 2, low: 0), 0);
expect(D.bisectLeft(0, high: 2, low: 0), 0);
expect(D.bisectLeft(1, high: 2, low: 0), 0);
expect(D.bisectLeft(2, high: 2, low: 0), 0);
expect(D.bisectLeft(3, high: 2, low: 0), 1);
expect(D.bisectLeft(4, high: 2, low: 0), 2);
expect(D.bisectLeft(5, high: 2, low: 0), 2);
expect(D.bisectLeft(6, high: 2, low: 0), 2);
expect(D.bisectLeft(7, high: 2, low: 0), 2);
expect(D.bisectLeft(8, high: 2, low: 0), 2);
});

test('bisectLeft for D, hi=3, lo=0', () {
expect(D.bisectLeft(-2, high: 3, low: 0), 0);
expect(D.bisectLeft(-1, high: 3, low: 0), 0);
expect(D.bisectLeft(0, high: 3, low: 0), 0);
expect(D.bisectLeft(1, high: 3, low: 0), 0);
expect(D.bisectLeft(2, high: 3, low: 0), 0);
expect(D.bisectLeft(3, high: 3, low: 0), 1);
expect(D.bisectLeft(4, high: 3, low: 0), 2);
expect(D.bisectLeft(5, high: 3, low: 0), 3);
expect(D.bisectLeft(6, high: 3, low: 0), 3);
expect(D.bisectLeft(7, high: 3, low: 0), 3);
expect(D.bisectLeft(8, high: 3, low: 0), 3);
});

test('bisectLeft for D, hi=0, lo=1', () {
expect(D.bisectLeft(-2, high: 0, low: 1), 1);
expect(D.bisectLeft(-1, high: 0, low: 1), 1);
expect(D.bisectLeft(0, high: 0, low: 1), 1);
expect(D.bisectLeft(1, high: 0, low: 1), 1);
expect(D.bisectLeft(2, high: 0, low: 1), 1);
expect(D.bisectLeft(3, high: 0, low: 1), 1);
expect(D.bisectLeft(4, high: 0, low: 1), 1);
expect(D.bisectLeft(5, high: 0, low: 1), 1);
expect(D.bisectLeft(6, high: 0, low: 1), 1);
expect(D.bisectLeft(7, high: 0, low: 1), 1);
expect(D.bisectLeft(8, high: 0, low: 1), 1);
});

test('bisectLeft for D, hi=1, lo=1', () {
expect(D.bisectLeft(-2, high: 1, low: 1), 1);
expect(D.bisectLeft(-1, high: 1, low: 1), 1);
expect(D.bisectLeft(0, high: 1, low: 1), 1);
expect(D.bisectLeft(1, high: 1, low: 1), 1);
expect(D.bisectLeft(2, high: 1, low: 1), 1);
expect(D.bisectLeft(3, high: 1, low: 1), 1);
expect(D.bisectLeft(4, high: 1, low: 1), 1);
expect(D.bisectLeft(5, high: 1, low: 1), 1);
expect(D.bisectLeft(6, high: 1, low: 1), 1);
expect(D.bisectLeft(7, high: 1, low: 1), 1);
expect(D.bisectLeft(8, high: 1, low: 1), 1);
});

test('bisectLeft for D, hi=2, lo=1', () {
expect(D.bisectLeft(-2, high: 2, low: 1), 1);
expect(D.bisectLeft(-1, high: 2, low: 1), 1);
expect(D.bisectLeft(0, high: 2, low: 1), 1);
expect(D.bisectLeft(1, high: 2, low: 1), 1);
expect(D.bisectLeft(2, high: 2, low: 1), 1);
expect(D.bisectLeft(3, high: 2, low: 1), 1);
expect(D.bisectLeft(4, high: 2, low: 1), 2);
expect(D.bisectLeft(5, high: 2, low: 1), 2);
expect(D.bisectLeft(6, high: 2, low: 1), 2);
expect(D.bisectLeft(7, high: 2, low: 1), 2);
expect(D.bisectLeft(8, high: 2, low: 1), 2);
});

test('bisectLeft for D, hi=3, lo=1', () {
expect(D.bisectLeft(-2, high: 3, low: 1), 1);
expect(D.bisectLeft(-1, high: 3, low: 1), 1);
expect(D.bisectLeft(0, high: 3, low: 1), 1);
expect(D.bisectLeft(1, high: 3, low: 1), 1);
expect(D.bisectLeft(2, high: 3, low: 1), 1);
expect(D.bisectLeft(3, high: 3, low: 1), 1);
expect(D.bisectLeft(4, high: 3, low: 1), 2);
expect(D.bisectLeft(5, high: 3, low: 1), 3);
expect(D.bisectLeft(6, high: 3, low: 1), 3);
expect(D.bisectLeft(7, high: 3, low: 1), 3);
expect(D.bisectLeft(8, high: 3, low: 1), 3);
});

test('bisectLeft for D, hi=0, lo=2', () {
expect(D.bisectLeft(-2, high: 0, low: 2), 2);
expect(D.bisectLeft(-1, high: 0, low: 2), 2);
expect(D.bisectLeft(0, high: 0, low: 2), 2);
expect(D.bisectLeft(1, high: 0, low: 2), 2);
expect(D.bisectLeft(2, high: 0, low: 2), 2);
expect(D.bisectLeft(3, high: 0, low: 2), 2);
expect(D.bisectLeft(4, high: 0, low: 2), 2);
expect(D.bisectLeft(5, high: 0, low: 2), 2);
expect(D.bisectLeft(6, high: 0, low: 2), 2);
expect(D.bisectLeft(7, high: 0, low: 2), 2);
expect(D.bisectLeft(8, high: 0, low: 2), 2);
});

test('bisectLeft for D, hi=1, lo=2', () {
expect(D.bisectLeft(-2, high: 1, low: 2), 2);
expect(D.bisectLeft(-1, high: 1, low: 2), 2);
expect(D.bisectLeft(0, high: 1, low: 2), 2);
expect(D.bisectLeft(1, high: 1, low: 2), 2);
expect(D.bisectLeft(2, high: 1, low: 2), 2);
expect(D.bisectLeft(3, high: 1, low: 2), 2);
expect(D.bisectLeft(4, high: 1, low: 2), 2);
expect(D.bisectLeft(5, high: 1, low: 2), 2);
expect(D.bisectLeft(6, high: 1, low: 2), 2);
expect(D.bisectLeft(7, high: 1, low: 2), 2);
expect(D.bisectLeft(8, high: 1, low: 2), 2);
});

test('bisectLeft for D, hi=2, lo=2', () {
expect(D.bisectLeft(-2, high: 2, low: 2), 2);
expect(D.bisectLeft(-1, high: 2, low: 2), 2);
expect(D.bisectLeft(0, high: 2, low: 2), 2);
expect(D.bisectLeft(1, high: 2, low: 2), 2);
expect(D.bisectLeft(2, high: 2, low: 2), 2);
expect(D.bisectLeft(3, high: 2, low: 2), 2);
expect(D.bisectLeft(4, high: 2, low: 2), 2);
expect(D.bisectLeft(5, high: 2, low: 2), 2);
expect(D.bisectLeft(6, high: 2, low: 2), 2);
expect(D.bisectLeft(7, high: 2, low: 2), 2);
expect(D.bisectLeft(8, high: 2, low: 2), 2);
});

test('bisectLeft for D, hi=3, lo=2', () {
expect(D.bisectLeft(-2, high: 3, low: 2), 2);
expect(D.bisectLeft(-1, high: 3, low: 2), 2);
expect(D.bisectLeft(0, high: 3, low: 2), 2);
expect(D.bisectLeft(1, high: 3, low: 2), 2);
expect(D.bisectLeft(2, high: 3, low: 2), 2);
expect(D.bisectLeft(3, high: 3, low: 2), 2);
expect(D.bisectLeft(4, high: 3, low: 2), 2);
expect(D.bisectLeft(5, high: 3, low: 2), 3);
expect(D.bisectLeft(6, high: 3, low: 2), 3);
expect(D.bisectLeft(7, high: 3, low: 2), 3);
expect(D.bisectLeft(8, high: 3, low: 2), 3);
});

test('bisectLeft for D, hi=0, lo=3', () {
expect(D.bisectLeft(-2, high: 0, low: 3), 3);
expect(D.bisectLeft(-1, high: 0, low: 3), 3);
expect(D.bisectLeft(0, high: 0, low: 3), 3);
expect(D.bisectLeft(1, high: 0, low: 3), 3);
expect(D.bisectLeft(2, high: 0, low: 3), 3);
expect(D.bisectLeft(3, high: 0, low: 3), 3);
expect(D.bisectLeft(4, high: 0, low: 3), 3);
expect(D.bisectLeft(5, high: 0, low: 3), 3);
expect(D.bisectLeft(6, high: 0, low: 3), 3);
expect(D.bisectLeft(7, high: 0, low: 3), 3);
expect(D.bisectLeft(8, high: 0, low: 3), 3);
});

test('bisectLeft for D, hi=1, lo=3', () {
expect(D.bisectLeft(-2, high: 1, low: 3), 3);
expect(D.bisectLeft(-1, high: 1, low: 3), 3);
expect(D.bisectLeft(0, high: 1, low: 3), 3);
expect(D.bisectLeft(1, high: 1, low: 3), 3);
expect(D.bisectLeft(2, high: 1, low: 3), 3);
expect(D.bisectLeft(3, high: 1, low: 3), 3);
expect(D.bisectLeft(4, high: 1, low: 3), 3);
expect(D.bisectLeft(5, high: 1, low: 3), 3);
expect(D.bisectLeft(6, high: 1, low: 3), 3);
expect(D.bisectLeft(7, high: 1, low: 3), 3);
expect(D.bisectLeft(8, high: 1, low: 3), 3);
});

test('bisectLeft for D, hi=2, lo=3', () {
expect(D.bisectLeft(-2, high: 2, low: 3), 3);
expect(D.bisectLeft(-1, high: 2, low: 3), 3);
expect(D.bisectLeft(0, high: 2, low: 3), 3);
expect(D.bisectLeft(1, high: 2, low: 3), 3);
expect(D.bisectLeft(2, high: 2, low: 3), 3);
expect(D.bisectLeft(3, high: 2, low: 3), 3);
expect(D.bisectLeft(4, high: 2, low: 3), 3);
expect(D.bisectLeft(5, high: 2, low: 3), 3);
expect(D.bisectLeft(6, high: 2, low: 3), 3);
expect(D.bisectLeft(7, high: 2, low: 3), 3);
expect(D.bisectLeft(8, high: 2, low: 3), 3);
});

test('bisectLeft for D, hi=3, lo=3', () {
expect(D.bisectLeft(-2, high: 3, low: 3), 3);
expect(D.bisectLeft(-1, high: 3, low: 3), 3);
expect(D.bisectLeft(0, high: 3, low: 3), 3);
expect(D.bisectLeft(1, high: 3, low: 3), 3);
expect(D.bisectLeft(2, high: 3, low: 3), 3);
expect(D.bisectLeft(3, high: 3, low: 3), 3);
expect(D.bisectLeft(4, high: 3, low: 3), 3);
expect(D.bisectLeft(5, high: 3, low: 3), 3);
expect(D.bisectLeft(6, high: 3, low: 3), 3);
expect(D.bisectLeft(7, high: 3, low: 3), 3);
expect(D.bisectLeft(8, high: 3, low: 3), 3);
});

test('bisectLeft for D, hi=0, lo=4', () {
expect(D.bisectLeft(-2, high: 0, low: 4), 4);
expect(D.bisectLeft(-1, high: 0, low: 4), 4);
expect(D.bisectLeft(0, high: 0, low: 4), 4);
expect(D.bisectLeft(1, high: 0, low: 4), 4);
expect(D.bisectLeft(2, high: 0, low: 4), 4);
expect(D.bisectLeft(3, high: 0, low: 4), 4);
expect(D.bisectLeft(4, high: 0, low: 4), 4);
expect(D.bisectLeft(5, high: 0, low: 4), 4);
expect(D.bisectLeft(6, high: 0, low: 4), 4);
expect(D.bisectLeft(7, high: 0, low: 4), 4);
expect(D.bisectLeft(8, high: 0, low: 4), 4);
});

test('bisectLeft for D, hi=1, lo=4', () {
expect(D.bisectLeft(-2, high: 1, low: 4), 4);
expect(D.bisectLeft(-1, high: 1, low: 4), 4);
expect(D.bisectLeft(0, high: 1, low: 4), 4);
expect(D.bisectLeft(1, high: 1, low: 4), 4);
expect(D.bisectLeft(2, high: 1, low: 4), 4);
expect(D.bisectLeft(3, high: 1, low: 4), 4);
expect(D.bisectLeft(4, high: 1, low: 4), 4);
expect(D.bisectLeft(5, high: 1, low: 4), 4);
expect(D.bisectLeft(6, high: 1, low: 4), 4);
expect(D.bisectLeft(7, high: 1, low: 4), 4);
expect(D.bisectLeft(8, high: 1, low: 4), 4);
});

test('bisectLeft for D, hi=2, lo=4', () {
expect(D.bisectLeft(-2, high: 2, low: 4), 4);
expect(D.bisectLeft(-1, high: 2, low: 4), 4);
expect(D.bisectLeft(0, high: 2, low: 4), 4);
expect(D.bisectLeft(1, high: 2, low: 4), 4);
expect(D.bisectLeft(2, high: 2, low: 4), 4);
expect(D.bisectLeft(3, high: 2, low: 4), 4);
expect(D.bisectLeft(4, high: 2, low: 4), 4);
expect(D.bisectLeft(5, high: 2, low: 4), 4);
expect(D.bisectLeft(6, high: 2, low: 4), 4);
expect(D.bisectLeft(7, high: 2, low: 4), 4);
expect(D.bisectLeft(8, high: 2, low: 4), 4);
});

test('bisectLeft for D, hi=3, lo=4', () {
expect(D.bisectLeft(-2, high: 3, low: 4), 4);
expect(D.bisectLeft(-1, high: 3, low: 4), 4);
expect(D.bisectLeft(0, high: 3, low: 4), 4);
expect(D.bisectLeft(1, high: 3, low: 4), 4);
expect(D.bisectLeft(2, high: 3, low: 4), 4);
expect(D.bisectLeft(3, high: 3, low: 4), 4);
expect(D.bisectLeft(4, high: 3, low: 4), 4);
expect(D.bisectLeft(5, high: 3, low: 4), 4);
expect(D.bisectLeft(6, high: 3, low: 4), 4);
expect(D.bisectLeft(7, high: 3, low: 4), 4);
expect(D.bisectLeft(8, high: 3, low: 4), 4);
});

test('bisectLeft for D, hi=0, lo=5', () {
expect(D.bisectLeft(-2, high: 0, low: 5), 5);
expect(D.bisectLeft(-1, high: 0, low: 5), 5);
expect(D.bisectLeft(0, high: 0, low: 5), 5);
expect(D.bisectLeft(1, high: 0, low: 5), 5);
expect(D.bisectLeft(2, high: 0, low: 5), 5);
expect(D.bisectLeft(3, high: 0, low: 5), 5);
expect(D.bisectLeft(4, high: 0, low: 5), 5);
expect(D.bisectLeft(5, high: 0, low: 5), 5);
expect(D.bisectLeft(6, high: 0, low: 5), 5);
expect(D.bisectLeft(7, high: 0, low: 5), 5);
expect(D.bisectLeft(8, high: 0, low: 5), 5);
});

test('bisectLeft for D, hi=1, lo=5', () {
expect(D.bisectLeft(-2, high: 1, low: 5), 5);
expect(D.bisectLeft(-1, high: 1, low: 5), 5);
expect(D.bisectLeft(0, high: 1, low: 5), 5);
expect(D.bisectLeft(1, high: 1, low: 5), 5);
expect(D.bisectLeft(2, high: 1, low: 5), 5);
expect(D.bisectLeft(3, high: 1, low: 5), 5);
expect(D.bisectLeft(4, high: 1, low: 5), 5);
expect(D.bisectLeft(5, high: 1, low: 5), 5);
expect(D.bisectLeft(6, high: 1, low: 5), 5);
expect(D.bisectLeft(7, high: 1, low: 5), 5);
expect(D.bisectLeft(8, high: 1, low: 5), 5);
});

test('bisectLeft for D, hi=2, lo=5', () {
expect(D.bisectLeft(-2, high: 2, low: 5), 5);
expect(D.bisectLeft(-1, high: 2, low: 5), 5);
expect(D.bisectLeft(0, high: 2, low: 5), 5);
expect(D.bisectLeft(1, high: 2, low: 5), 5);
expect(D.bisectLeft(2, high: 2, low: 5), 5);
expect(D.bisectLeft(3, high: 2, low: 5), 5);
expect(D.bisectLeft(4, high: 2, low: 5), 5);
expect(D.bisectLeft(5, high: 2, low: 5), 5);
expect(D.bisectLeft(6, high: 2, low: 5), 5);
expect(D.bisectLeft(7, high: 2, low: 5), 5);
expect(D.bisectLeft(8, high: 2, low: 5), 5);
});

test('bisectLeft for D, hi=3, lo=5', () {
expect(D.bisectLeft(-2, high: 3, low: 5), 5);
expect(D.bisectLeft(-1, high: 3, low: 5), 5);
expect(D.bisectLeft(0, high: 3, low: 5), 5);
expect(D.bisectLeft(1, high: 3, low: 5), 5);
expect(D.bisectLeft(2, high: 3, low: 5), 5);
expect(D.bisectLeft(3, high: 3, low: 5), 5);
expect(D.bisectLeft(4, high: 3, low: 5), 5);
expect(D.bisectLeft(5, high: 3, low: 5), 5);
expect(D.bisectLeft(6, high: 3, low: 5), 5);
expect(D.bisectLeft(7, high: 3, low: 5), 5);
expect(D.bisectLeft(8, high: 3, low: 5), 5);
});

test('bisectLeft for D, hi=0, lo=6', () {
expect(D.bisectLeft(-2, high: 0, low: 6), 6);
expect(D.bisectLeft(-1, high: 0, low: 6), 6);
expect(D.bisectLeft(0, high: 0, low: 6), 6);
expect(D.bisectLeft(1, high: 0, low: 6), 6);
expect(D.bisectLeft(2, high: 0, low: 6), 6);
expect(D.bisectLeft(3, high: 0, low: 6), 6);
expect(D.bisectLeft(4, high: 0, low: 6), 6);
expect(D.bisectLeft(5, high: 0, low: 6), 6);
expect(D.bisectLeft(6, high: 0, low: 6), 6);
expect(D.bisectLeft(7, high: 0, low: 6), 6);
expect(D.bisectLeft(8, high: 0, low: 6), 6);
});

test('bisectLeft for D, hi=1, lo=6', () {
expect(D.bisectLeft(-2, high: 1, low: 6), 6);
expect(D.bisectLeft(-1, high: 1, low: 6), 6);
expect(D.bisectLeft(0, high: 1, low: 6), 6);
expect(D.bisectLeft(1, high: 1, low: 6), 6);
expect(D.bisectLeft(2, high: 1, low: 6), 6);
expect(D.bisectLeft(3, high: 1, low: 6), 6);
expect(D.bisectLeft(4, high: 1, low: 6), 6);
expect(D.bisectLeft(5, high: 1, low: 6), 6);
expect(D.bisectLeft(6, high: 1, low: 6), 6);
expect(D.bisectLeft(7, high: 1, low: 6), 6);
expect(D.bisectLeft(8, high: 1, low: 6), 6);
});

test('bisectLeft for D, hi=2, lo=6', () {
expect(D.bisectLeft(-2, high: 2, low: 6), 6);
expect(D.bisectLeft(-1, high: 2, low: 6), 6);
expect(D.bisectLeft(0, high: 2, low: 6), 6);
expect(D.bisectLeft(1, high: 2, low: 6), 6);
expect(D.bisectLeft(2, high: 2, low: 6), 6);
expect(D.bisectLeft(3, high: 2, low: 6), 6);
expect(D.bisectLeft(4, high: 2, low: 6), 6);
expect(D.bisectLeft(5, high: 2, low: 6), 6);
expect(D.bisectLeft(6, high: 2, low: 6), 6);
expect(D.bisectLeft(7, high: 2, low: 6), 6);
expect(D.bisectLeft(8, high: 2, low: 6), 6);
});

test('bisectLeft for D, hi=3, lo=6', () {
expect(D.bisectLeft(-2, high: 3, low: 6), 6);
expect(D.bisectLeft(-1, high: 3, low: 6), 6);
expect(D.bisectLeft(0, high: 3, low: 6), 6);
expect(D.bisectLeft(1, high: 3, low: 6), 6);
expect(D.bisectLeft(2, high: 3, low: 6), 6);
expect(D.bisectLeft(3, high: 3, low: 6), 6);
expect(D.bisectLeft(4, high: 3, low: 6), 6);
expect(D.bisectLeft(5, high: 3, low: 6), 6);
expect(D.bisectLeft(6, high: 3, low: 6), 6);
expect(D.bisectLeft(7, high: 3, low: 6), 6);
expect(D.bisectLeft(8, high: 3, low: 6), 6);
});


test('bsearch list0', () {
final lst=[0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
expect(lst.bsearch(-2), -1);
expect(lst.bsearch(-1), -1);
expect(lst.bsearch(0), 0);
expect(lst.bsearch(1), 1);
expect(lst.bsearch(2), 2);
expect(lst.bsearch(3), 6);
expect(lst.bsearch(4), -1);
expect(lst.bsearch(5), 8);
expect(lst.bsearch(6), 9);
expect(lst.bsearch(7), -1);
expect(lst.bsearch(8), -1);
});

test('bsearch list1', () {
final lst=[];
expect(lst.bsearch(-2), -1);
expect(lst.bsearch(-1), -1);
expect(lst.bsearch(0), -1);
expect(lst.bsearch(1), -1);
expect(lst.bsearch(2), -1);
expect(lst.bsearch(3), -1);
expect(lst.bsearch(4), -1);
expect(lst.bsearch(5), -1);
expect(lst.bsearch(6), -1);
expect(lst.bsearch(7), -1);
expect(lst.bsearch(8), -1);
});

test('bsearch list2', () {
final lst=[3];
expect(lst.bsearch(-2), -1);
expect(lst.bsearch(-1), -1);
expect(lst.bsearch(0), -1);
expect(lst.bsearch(1), -1);
expect(lst.bsearch(2), -1);
expect(lst.bsearch(3), 0);
expect(lst.bsearch(4), -1);
expect(lst.bsearch(5), -1);
expect(lst.bsearch(6), -1);
expect(lst.bsearch(7), -1);
expect(lst.bsearch(8), -1);
});

test('bsearch list3', () {
final lst=[2, 3, 4];
expect(lst.bsearch(-2), -1);
expect(lst.bsearch(-1), -1);
expect(lst.bsearch(0), -1);
expect(lst.bsearch(1), -1);
expect(lst.bsearch(2), 0);
expect(lst.bsearch(3), 1);
expect(lst.bsearch(4), 2);
expect(lst.bsearch(5), -1);
expect(lst.bsearch(6), -1);
expect(lst.bsearch(7), -1);
expect(lst.bsearch(8), -1);
});


test('bsearchLessThan list0', () {
final lst=[0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
expect(val(lst, lst.bsearchLessThan(-2)), null);
expect(val(lst, lst.bsearchLessThan(-1)), null);
expect(val(lst, lst.bsearchLessThan(0)), null);
expect(val(lst, lst.bsearchLessThan(1)), 0);
expect(val(lst, lst.bsearchLessThan(2)), 1);
expect(val(lst, lst.bsearchLessThan(3)), 2);
expect(val(lst, lst.bsearchLessThan(4)), 3);
expect(val(lst, lst.bsearchLessThan(5)), 3);
expect(val(lst, lst.bsearchLessThan(6)), 5);
expect(val(lst, lst.bsearchLessThan(7)), 6);
expect(val(lst, lst.bsearchLessThan(8)), 6);
});

test('bsearchLessThan list1', () {
final lst=[];
expect(val(lst, lst.bsearchLessThan(-2)), null);
expect(val(lst, lst.bsearchLessThan(-1)), null);
expect(val(lst, lst.bsearchLessThan(0)), null);
expect(val(lst, lst.bsearchLessThan(1)), null);
expect(val(lst, lst.bsearchLessThan(2)), null);
expect(val(lst, lst.bsearchLessThan(3)), null);
expect(val(lst, lst.bsearchLessThan(4)), null);
expect(val(lst, lst.bsearchLessThan(5)), null);
expect(val(lst, lst.bsearchLessThan(6)), null);
expect(val(lst, lst.bsearchLessThan(7)), null);
expect(val(lst, lst.bsearchLessThan(8)), null);
});

test('bsearchLessThan list2', () {
final lst=[3];
expect(val(lst, lst.bsearchLessThan(-2)), null);
expect(val(lst, lst.bsearchLessThan(-1)), null);
expect(val(lst, lst.bsearchLessThan(0)), null);
expect(val(lst, lst.bsearchLessThan(1)), null);
expect(val(lst, lst.bsearchLessThan(2)), null);
expect(val(lst, lst.bsearchLessThan(3)), null);
expect(val(lst, lst.bsearchLessThan(4)), 3);
expect(val(lst, lst.bsearchLessThan(5)), 3);
expect(val(lst, lst.bsearchLessThan(6)), 3);
expect(val(lst, lst.bsearchLessThan(7)), 3);
expect(val(lst, lst.bsearchLessThan(8)), 3);
});

test('bsearchLessThan list3', () {
final lst=[2, 3, 4];
expect(val(lst, lst.bsearchLessThan(-2)), null);
expect(val(lst, lst.bsearchLessThan(-1)), null);
expect(val(lst, lst.bsearchLessThan(0)), null);
expect(val(lst, lst.bsearchLessThan(1)), null);
expect(val(lst, lst.bsearchLessThan(2)), null);
expect(val(lst, lst.bsearchLessThan(3)), 2);
expect(val(lst, lst.bsearchLessThan(4)), 3);
expect(val(lst, lst.bsearchLessThan(5)), 4);
expect(val(lst, lst.bsearchLessThan(6)), 4);
expect(val(lst, lst.bsearchLessThan(7)), 4);
expect(val(lst, lst.bsearchLessThan(8)), 4);
});


test('bsearchLessThanOrEqualTo list0', () {
final lst=[0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
expect(val(lst, lst.bsearchLessThanOrEqualTo(-2)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(-1)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(0)), 0);
expect(val(lst, lst.bsearchLessThanOrEqualTo(1)), 1);
expect(val(lst, lst.bsearchLessThanOrEqualTo(2)), 2);
expect(val(lst, lst.bsearchLessThanOrEqualTo(3)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(4)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(5)), 5);
expect(val(lst, lst.bsearchLessThanOrEqualTo(6)), 6);
expect(val(lst, lst.bsearchLessThanOrEqualTo(7)), 6);
expect(val(lst, lst.bsearchLessThanOrEqualTo(8)), 6);
});

test('bsearchLessThanOrEqualTo list1', () {
final lst=[];
expect(val(lst, lst.bsearchLessThanOrEqualTo(-2)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(-1)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(0)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(1)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(2)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(3)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(4)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(5)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(6)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(7)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(8)), null);
});

test('bsearchLessThanOrEqualTo list2', () {
final lst=[3];
expect(val(lst, lst.bsearchLessThanOrEqualTo(-2)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(-1)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(0)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(1)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(2)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(3)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(4)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(5)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(6)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(7)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(8)), 3);
});

test('bsearchLessThanOrEqualTo list3', () {
final lst=[2, 3, 4];
expect(val(lst, lst.bsearchLessThanOrEqualTo(-2)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(-1)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(0)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(1)), null);
expect(val(lst, lst.bsearchLessThanOrEqualTo(2)), 2);
expect(val(lst, lst.bsearchLessThanOrEqualTo(3)), 3);
expect(val(lst, lst.bsearchLessThanOrEqualTo(4)), 4);
expect(val(lst, lst.bsearchLessThanOrEqualTo(5)), 4);
expect(val(lst, lst.bsearchLessThanOrEqualTo(6)), 4);
expect(val(lst, lst.bsearchLessThanOrEqualTo(7)), 4);
expect(val(lst, lst.bsearchLessThanOrEqualTo(8)), 4);
});


test('bsearchGreaterThan list0', () {
final lst=[0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
expect(val(lst, lst.bsearchGreaterThan(-2)), 0);
expect(val(lst, lst.bsearchGreaterThan(-1)), 0);
expect(val(lst, lst.bsearchGreaterThan(0)), 1);
expect(val(lst, lst.bsearchGreaterThan(1)), 2);
expect(val(lst, lst.bsearchGreaterThan(2)), 3);
expect(val(lst, lst.bsearchGreaterThan(3)), 5);
expect(val(lst, lst.bsearchGreaterThan(4)), 5);
expect(val(lst, lst.bsearchGreaterThan(5)), 6);
expect(val(lst, lst.bsearchGreaterThan(6)), null);
expect(val(lst, lst.bsearchGreaterThan(7)), null);
expect(val(lst, lst.bsearchGreaterThan(8)), null);
});

test('bsearchGreaterThan list1', () {
final lst=[];
expect(val(lst, lst.bsearchGreaterThan(-2)), null);
expect(val(lst, lst.bsearchGreaterThan(-1)), null);
expect(val(lst, lst.bsearchGreaterThan(0)), null);
expect(val(lst, lst.bsearchGreaterThan(1)), null);
expect(val(lst, lst.bsearchGreaterThan(2)), null);
expect(val(lst, lst.bsearchGreaterThan(3)), null);
expect(val(lst, lst.bsearchGreaterThan(4)), null);
expect(val(lst, lst.bsearchGreaterThan(5)), null);
expect(val(lst, lst.bsearchGreaterThan(6)), null);
expect(val(lst, lst.bsearchGreaterThan(7)), null);
expect(val(lst, lst.bsearchGreaterThan(8)), null);
});

test('bsearchGreaterThan list2', () {
final lst=[3];
expect(val(lst, lst.bsearchGreaterThan(-2)), 3);
expect(val(lst, lst.bsearchGreaterThan(-1)), 3);
expect(val(lst, lst.bsearchGreaterThan(0)), 3);
expect(val(lst, lst.bsearchGreaterThan(1)), 3);
expect(val(lst, lst.bsearchGreaterThan(2)), 3);
expect(val(lst, lst.bsearchGreaterThan(3)), null);
expect(val(lst, lst.bsearchGreaterThan(4)), null);
expect(val(lst, lst.bsearchGreaterThan(5)), null);
expect(val(lst, lst.bsearchGreaterThan(6)), null);
expect(val(lst, lst.bsearchGreaterThan(7)), null);
expect(val(lst, lst.bsearchGreaterThan(8)), null);
});

test('bsearchGreaterThan list3', () {
final lst=[2, 3, 4];
expect(val(lst, lst.bsearchGreaterThan(-2)), 2);
expect(val(lst, lst.bsearchGreaterThan(-1)), 2);
expect(val(lst, lst.bsearchGreaterThan(0)), 2);
expect(val(lst, lst.bsearchGreaterThan(1)), 2);
expect(val(lst, lst.bsearchGreaterThan(2)), 3);
expect(val(lst, lst.bsearchGreaterThan(3)), 4);
expect(val(lst, lst.bsearchGreaterThan(4)), null);
expect(val(lst, lst.bsearchGreaterThan(5)), null);
expect(val(lst, lst.bsearchGreaterThan(6)), null);
expect(val(lst, lst.bsearchGreaterThan(7)), null);
expect(val(lst, lst.bsearchGreaterThan(8)), null);
});

test('bsearchGreaterThanOrEqualTo list0', () {
final lst=[0, 1, 2, 2, 2, 2, 3, 3, 5, 6];
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-2)), 0);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-1)), 0);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(0)), 0);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(1)), 1);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(2)), 2);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(3)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(4)), 5);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(5)), 5);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(6)), 6);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(7)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(8)), null);
});

test('bsearchGreaterThanOrEqualTo list1', () {
final lst=[];
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-2)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-1)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(0)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(1)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(2)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(3)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(4)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(5)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(6)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(7)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(8)), null);
});

test('bsearchGreaterThanOrEqualTo list2', () {
final lst=[3];
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-2)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-1)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(0)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(1)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(2)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(3)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(4)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(5)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(6)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(7)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(8)), null);
});

test('bsearchGreaterThanOrEqualTo list3', () {
final lst=[2, 3, 4];
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-2)), 2);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(-1)), 2);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(0)), 2);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(1)), 2);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(2)), 2);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(3)), 3);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(4)), 4);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(5)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(6)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(7)), null);
expect(val(lst, lst.bsearchGreaterThanOrEqualTo(8)), null);
});
}
